   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting=16, radio_channel=973;
  78:main.c        **** char radio_enable = OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars=0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        ****   //Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   
 106:main.c        ****   //Initialize the MP3 player with double clock speed and lower volume
 107:main.c        ****   vs1002Config();			//Configure MP3 I/O
 108:main.c        ****   vs1002Reset();			//Reset MP3 Player
 109:main.c        ****   vs1002Init();			//Double the clock speed and set to "New" mode
 110:main.c        ****   for(char i=0; i<5; i++)vs1002SetVolume(DECREASE);		//Lower the Volume!!
 111:main.c        ****   vs1002Finish();			//Restore the SPI I/O lines
 112:main.c        ****   
 113:main.c        ****   //Show the splash-screen (Sparkfun Logo)
 114:main.c        ****   LCDInit();				//Initialize the LCD
 115:main.c        ****   LCDClear(white);		//Clear the screen with white
 116:main.c        ****   LCDPrintLogo();			//Print the Sparkfun Logo
 117:main.c        ****   
 118:main.c        ****   // Initialize the FM Transmitter to 100.0
 119:main.c        ****   initializeRadio(1000);
 120:main.c        ****   
 121:main.c        ****   // Find Out how many files are on the SD card
 122:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the
 123:main.c        ****   do{
 124:main.c        ****   	numberOfChars++;
 125:main.c        ****   }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filena
 126:main.c        ****   char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD c
 127:main.c        ****   NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 128:main.c        ****   FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 129:main.c        ****   
 130:main.c        ****   //Get all of the filenames into a Global Array
 131:main.c        ****   int chartracker=0;	
 132:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 133:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 134:main.c        ****   		if(chartracker <= numberOfChars){
 135:main.c        ****   			if(tempNames[chartracker]==','){
 136:main.c        ****   				Files[j].file_name[i] = '\0';
 137:main.c        ****   				i=MAXFILENAMELEN+1;
 138:main.c        ****   			}
 139:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 140:main.c        ****   			chartracker++;
 141:main.c        ****   		}
 142:main.c        ****   		else Files[j].file_name[i] ='\0';
 143:main.c        ****   	}	
 144:main.c        ****   }
 145:main.c        **** 	
 146:main.c        **** 	
 147:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 148:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 149:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 150:main.c        **** 	
 151:main.c        **** 	file_manager.orientation =ORIENTUP;
 152:main.c        **** 	file_manager.text_color=white;
 153:main.c        **** 	file_manager.back_color=black;
 154:main.c        **** 	
 155:main.c        **** 	file_manager.current_page=0;
 156:main.c        **** 	file_manager.current_row=1;
 157:main.c        **** 	file_manager.current_index=0;	
 158:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 159:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++)file_manager.title[i]=welcome[i];
 160:main.c        **** 	
 161:main.c        **** 	//Generate the settings menu and fill in default settings values
 162:main.c        **** 	fillSettings(&settings_menu);
 163:main.c        **** 	
 164:main.c        **** 	//Setup the menu
 165:main.c        **** 	current_display = &file_manager;
 166:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 167:main.c        **** 	LCDClear(current_display->back_color);
 168:main.c        **** 	printMenu(current_display);
 169:main.c        **** 	
 170:main.c        **** 	// TODO Floere remove
 171:main.c        **** 	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 172:main.c        **** 	
 173:main.c        **** 	while(1){
 174:main.c        **** 	  // USB connected!
 175:main.c        **** 		if(IOPIN0 & (1<<23))
 176:main.c        **** 		{
 177:main.c        **** 			LCDClear(white);
 178:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 179:main.c        ****       delay_ms(1000);
 180:main.c        **** 			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
 181:main.c        **** 			main_msc();
 182:main.c        **** 			reset();
 183:main.c        **** 		}
 184:main.c        **** 	
 185:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 186:main.c        **** 		//while(!button_pressed && !update_screen){
 187:main.c        **** 		if(!button_pressed && !update_screen){
 188:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 189:main.c        **** 			if(song_is_over){
 190:main.c        **** 				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
 191:main.c        **** 				closeSong(&current_song);	//Close the current song
 192:main.c        **** 				file_is_open=0;				//change master flag
 193:main.c        **** 				ledBlueOff();
 194:main.c        **** 				//Get the next song on the page by changing rows
 195:main.c        **** 				if(file_manager.current_row < NUMROWS){
 196:main.c        **** 					file_manager.current_row++;
 197:main.c        **** 					file_manager.current_index++;
 198:main.c        **** 				}
 199:main.c        **** 				//Go to the next page of songs if necessary
 200:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 201:main.c        **** 					file_manager.current_row=1;
 202:main.c        **** 					file_manager.current_index=0;
 203:main.c        **** 					file_manager.current_page++;
 204:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 205:main.c        **** 				}
 206:main.c        **** 				//If there is another song in the list, get it and play it!
 207:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 208:main.c        **** 					LCDClear(file_manager.back_color);
 209:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 210:main.c        **** 					file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 211:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 212:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 213:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 214:main.c        **** 					ledBlueOn();
 215:main.c        **** 					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
 216:main.c        **** 				}	
 217:main.c        **** 			}
 218:main.c        **** 		}
 219:main.c        **** 
 220:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 221:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 222:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 223:main.c        **** 		
 224:main.c        **** 		else if(update_screen){
 225:main.c        **** 			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
 226:main.c        **** 			delay_ms(300);
 227:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 228:main.c        **** 				if(file_is_open)quickClear(current_display);
 229:main.c        **** 				else LCDClear(current_display->back_color);
 230:main.c        **** 				current_display = &settings_menu;
 231:main.c        **** 				current_display->orientation=ORIENTLEFT;
 232:main.c        **** 				ledBlueOff();
 233:main.c        **** 				if(file_is_open)ledGrnOn();
 234:main.c        **** 				else ledRedOn();
 235:main.c        **** 			}
 236:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 237:main.c        **** 				if(file_is_open)quickClear(current_display);
 238:main.c        **** 				else LCDClear(current_display->back_color);
 239:main.c        **** 				current_display = &file_manager;
 240:main.c        **** 				current_display->orientation=ORIENTUP;
 241:main.c        **** 				ledGrnOff();
 242:main.c        **** 				ledRedOff();
 243:main.c        **** 				if(file_is_open)ledBlueOn();
 244:main.c        **** 			}
 245:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 246:main.c        **** 			VICIntEnable |= 0x10;						//Re-enable interrupts
 247:main.c        **** 		}
 248:main.c        **** 		button_pressed=NO_BUT;
 249:main.c        **** 		VICIntEnable |= 0x10;
 250:main.c        **** 	}
 251:main.c        ****     return 0;
 252:main.c        **** }
 253:main.c        **** 
 254:main.c        **** 
 255:main.c        **** // Usage: delay_ms(1000);
 256:main.c        **** // Inputs: int count: Number of milliseconds to delay
 257:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 258:main.c        **** void delay_ms(int count)
 259:main.c        **** {
  16              		.loc 1 259 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 260:main.c        ****   int i;
 261:main.c        ****   count *= 10000;
  22              		.loc 1 261 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 262:main.c        ****   for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 262 0
  31              	@ 262 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 263:main.c        **** }
  38              		.loc 1 263 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 264:main.c        **** 
 265:main.c        **** // Usage: bootUp();
 266:main.c        **** // Inputs: None
 267:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 268:main.c        **** void bootUp(void)
 269:main.c        **** {
 270:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 271:main.c        ****     delay_ms(10); //Delay for power to stablize
 272:main.c        **** 
 273:main.c        ****     //Bring up SD and FAT
 274:main.c        ****     if(!sd_raw_init())
 275:main.c        ****     {
 276:main.c        ****         rprintf("SD Init Error\n");
 277:main.c        ****     }
 278:main.c        ****     if(openroot())
 279:main.c        ****     {
 280:main.c        ****         rprintf("SD OpenRoot Error\n");
 281:main.c        ****     }
 282:main.c        ****      
 283:main.c        ****   //Initialize I/O Ports and Peripherals
 284:main.c        ****   //Setup the MP3 I/O Lines
 285:main.c        ****   IODIR0 |= MP3_XCS;
 286:main.c        ****   IODIR0 &= ~MP3_DREQ;
 287:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 288:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 289:main.c        ****   
 290:main.c        ****   //Setupt the FM Trans. Lines
 291:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 292:main.c        ****   IODIR1 |= FM_CS;
 293:main.c        ****   
 294:main.c        ****   //Setup the SD Card I/O Lines
 295:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 296:main.c        ****   
 297:main.c        ****   //Setup the Accelerometer I/O Lines
 298:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 299:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 300:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 301:main.c        ****   
 302:main.c        ****   //Setup the LCD I/O Lines
 303:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 304:main.c        ****   
 305:main.c        ****   //Setup the LED Lines										
 306:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
 307:main.c        ****   ledBlueOff();
 308:main.c        ****   ledRedOff();
 309:main.c        ****   ledGrnOff();
 310:main.c        ****   
 311:main.c        ****   //Setup the Buttons
 312:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 313:main.c        ****   
 314:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 315:main.c        ****   
 316:main.c        ****     //Setupt the Interrupts
 317:main.c        ****   VPBDIV=1;										// Set PCLK equal to the System Clock	
 318:main.c        ****   VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 319:main.c        ****     VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Ti
 320:main.c        ****     VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
 321:main.c        ****     VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
 322:main.c        ****     VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
 323:main.c        ****     VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
 324:main.c        ****   
 325:main.c        ****   //Configure Timer0
 326:main.c        ****   T0PR = 300;										//Divide Clock by 300 for 40kHz PS
 327:main.c        ****   T0TCR |=0X01;									//Enable the clock
 328:main.c        ****   T0CTCR=0;										  //Timer Mode
 329:main.c        ****   T0MCR=0x0003;									//Interrupt and Reset Timer on Match
 330:main.c        ****   T0MR0=1000;										//Interrupt on 40Hz
 331:main.c        ****   
 332:main.c        ****   //Configure Timer1
 333:main.c        ****   T1PR = 200;										//Divide Clock by 200 for ??kHz PS
 334:main.c        ****   T1TCR |=0X01;									//Enable the clock
 335:main.c        ****   T1CTCR=0;									  	//Timer Mode
 336:main.c        ****   T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
 337:main.c        ****   
 338:main.c        ****   //Setup the SPI Port
 339:main.c        ****   S0SPCCR = 64;                 // SCK = 1 MHz, counter > 8 and even
 340:main.c        ****   S0SPCR  = 0x20;               // Master, no interrupt enable, 8 bits	
 341:main.c        **** }
 342:main.c        **** 
 343:main.c        **** //  Usage: None (Automatically Called by FW)
 344:main.c        **** //  Inputs: None
 345:main.c        **** //  This function is a global interrupt called by a match on the Timer 0 match.
 346:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 347:main.c        **** //  WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 play
 348:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 349:main.c        **** //
 350:main.c        **** static void timer1ISR(void) {
 351:main.c        ****   sendMP3Data();
 352:main.c        ****   T1IR = 0xFF;      // Clear the timer 0 interrupt
 353:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 354:main.c        **** }
 355:main.c        **** 
 356:main.c        **** //Usage: None (Automatically Called by FW)
 357:main.c        **** //Inputs: None
 358:main.c        **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 359:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 360:main.c        **** // and setting the appropriate global flag if either has occured.
 361:main.c        **** static void timer0ISR(void)
 362:main.c        **** {
 363:main.c        **** 	button_pressed=getButton();			//Find out if a button has been pressed, and which one
 364:main.c        **** 	cur_position=MMA_get_y();			//Get the current position of the screen
 365:main.c        **** 	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=
 366:main.c        **** 	else update_screen=0;				//Determine if the accelerometer has been rotated
 367:main.c        **** 	prev_position=cur_position;			//Save the position value for later reference
 368:main.c        **** 	T0IR = 0xFF;						//Clear the timer interrupt
 369:main.c        **** 	VICVectAddr =0;						//Update the VIC priorities
 370:main.c        **** }
 371:main.c        **** 
 372:main.c        **** //Usage: button_value=getButton();
 373:main.c        **** //Inputs:  None
 374:main.c        **** //Outputs: None
 375:main.c        **** //Function returns the value of the button that is currently being pressed.
 376:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 377:main.c        **** char getButton(void){
  51              		.loc 1 377 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 378:main.c        ****   if(!(IOPIN1 & SW_UP)) return UP_BUT;
  56              		.loc 1 378 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 379:main.c        ****   else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
  62              		.loc 1 379 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 380:main.c        ****   else if(!(IOPIN1 & SW_MID)) return MID_BUT;
  67              		.loc 1 380 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 381:main.c        ****   return NO_BUT;
 382:main.c        **** }
  72              		.loc 1 382 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 383:main.c        **** 
 384:main.c        **** 
 385:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 385 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 386:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 386 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 385 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 386 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB36:
 103              	.LBB37:
 387:main.c        ****     for(int i =0; i<NUMROWS; i++){
 388:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 389:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 389 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE37:
 107              	.LBE36:
 108              		.loc 1 386 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB39:
 390:main.c        ****       }
 391:main.c        ****     }
 392:main.c        ****   }
 393:main.c        ****   else{
 394:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 394 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB41:
 395:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 396:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 396 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE41:
 125              	.LBE39:
 126              	.LBB42:
 127              	.LBB38:
 128              		.loc 1 389 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 388 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 389 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 388 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE38:
 141              		.loc 1 387 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE42:
 154              	.LBB43:
 155              	.LBB40:
 156              		.loc 1 396 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 395 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 396 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 395 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE40:
 169              		.loc 1 394 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE43:
 181              	.LBB44:
 397:main.c        ****       }
 398:main.c        ****     }
 399:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 399 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE44:
 188              	.LBB45:
 189              		.loc 1 394 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE45:
 198              	.LBB46:
 199              		.loc 1 399 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE46:
 400:main.c        ****   }
 401:main.c        **** }
 209              		.loc 1 401 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 402:main.c        **** 
 403:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 404:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 405:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 406:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 407:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 408:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 409:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 410:main.c        **** 	//Get the selected songs file name
 411:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 412:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 413:main.c        **** 	}
 414:main.c        **** 	//Get the selected songs display name
 415:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 416:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 417:main.c        **** 			song->name[i]='\0';
 418:main.c        **** 			i=MAXDISPLEN;
 419:main.c        **** 		}	
 420:main.c        **** 		else song->name[i]=song->file_name[i];
 421:main.c        **** 	}
 422:main.c        **** 	
 423:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 424:main.c        **** 	//Check to see if the selected song is valid
 425:main.c        **** 	if(!root_file_exists(song->file_name)){
 426:main.c        **** 		PINSEL0 &= 0xFFFFC00F;
 427:main.c        **** 		return 0;
 428:main.c        **** 	}	
 429:main.c        **** 	//Open the selected song
 430:main.c        **** 	else{
 431:main.c        **** 		song->handle=root_open(song->file_name);
 432:main.c        **** 		song->size=fat16_file_size(song->handle);
 433:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 434:main.c        **** 	}
 435:main.c        **** 	
 436:main.c        **** 	
 437:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 438:main.c        **** 	return 1;
 439:main.c        **** }
 440:main.c        **** 
 441:main.c        **** //Usage: CloseSong(&current_song);
 442:main.c        **** //Inputs: SongStruct *song: Pointer to a song structure to be closed
 443:main.c        **** //Function closes a song that is currently open.
 444:main.c        **** void closeSong(SongStruct *song){
 445:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 446:main.c        **** 	fat16_close_file(song->handle);
 447:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 448:main.c        **** }
 449:main.c        **** 
 450:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 451:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 452:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 453:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 454:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 455:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 456:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 457:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 458:main.c        **** 	if(direction == PREVIOUS){
 459:main.c        **** 		display->current_row--;
 460:main.c        **** 		display->current_index--;
 461:main.c        **** 	}
 462:main.c        **** 	else{
 463:main.c        **** 		display->current_row++;
 464:main.c        **** 		display->current_index++;		
 465:main.c        **** 	}
 466:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 467:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 468:main.c        **** }
 469:main.c        **** 
 470:main.c        **** //Usage: printMenu(&settings_menu);
 471:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 472:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 473:main.c        **** void printMenu(DisplayStruct *display){
 474:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 475:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 476:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 477:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 478:main.c        **** 	}
 479:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 480:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 481:main.c        **** }
 482:main.c        **** 
 483:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 484:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 485:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 486:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 487:main.c        **** //also loads the default display values along with the default settings values. 
 488:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 488 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB47:
 489:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 490:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 490 0
 233 014c A4909FE5 		ldr	r9, .L36
 491:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 491 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 492:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 492 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 493:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 493 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE47:
 241              		.loc 1 488 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB48:
 249              		.loc 1 490 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 491 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 492 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 493 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 489 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 490 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 491 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 492 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 493 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 489 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE48:
 275              	.LBB49:
 494:main.c        **** 	}
 495:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 496:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 496 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 495 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 496 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 495 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE49:
 497:main.c        **** 	}
 498:main.c        **** 	menu->text_color=white;
 289              		.loc 1 498 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 499:main.c        **** 	menu->back_color=black;
 294              		.loc 1 499 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 500:main.c        **** 	menu->current_row=1;
 297              		.loc 1 500 0
 298 01d0 0130A0E3 		mov	r3, #1
 501:main.c        **** 	menu->current_column=0;
 502:main.c        **** 	menu->current_index=0;
 503:main.c        **** 	menu->orientation = ORIENTLEFT;
 504:main.c        **** 	menu->current_page=0;
 505:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 505 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 499 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 503 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 500 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 501 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 502 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 504 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 506:main.c        **** }
 313              		.loc 1 506 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 507:main.c        **** 
 508:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 509:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 510:main.c        **** //			FileStruct *Files: List of files on the SD card
 511:main.c        **** //Outputs: None
 512:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 513:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 514:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 515:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 516:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 517:main.c        **** 	}
 518:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 519:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 520:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 521:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 522:main.c        **** 		//if(file_is_open)quickClear(display);
 523:main.c        **** 		//else LCDClear(display->back_color);
 524:main.c        **** 		quickClear(display);
 525:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 526:main.c        **** 		display->current_index=14;					//
 527:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 528:main.c        **** 		printMenu(display);							//	display previous page
 529:main.c        **** 	}
 530:main.c        **** }
 531:main.c        **** 
 532:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 533:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 534:main.c        **** //			FileStruct *Files: List of files on the SD card
 535:main.c        **** //Outputs: None
 536:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 537:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 538:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 539:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 540:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 541:main.c        **** 	}
 542:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 543:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 544:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 545:main.c        **** 		display->current_page+=1;		
 546:main.c        **** 		//if(file_is_open)quickClear(display);
 547:main.c        **** 		//else LCDClear(display->back_color);
 548:main.c        **** 		quickClear(display);
 549:main.c        **** 		display->current_row=1;
 550:main.c        **** 		display->current_index=0;
 551:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 552:main.c        **** 		printMenu(display);				
 553:main.c        **** 	}
 554:main.c        **** }
 555:main.c        **** 
 556:main.c        **** //Usage: handleMiddleButton();
 557:main.c        **** //Inputs: None
 558:main.c        **** //Outputs: None
 559:main.c        **** //Description: This function is called when the middle button is pressed.
 560:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 561:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 562:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 563:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 564:main.c        **** void handleMiddleButton(void){
 565:main.c        **** 	VICIntEnClr = 0x10;
 566:main.c        **** 	delay_ms(250);
 567:main.c        **** 	
 568:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 569:main.c        ****   if (current_display == &file_manager) {
 570:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 571:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 572:main.c        ****       if (!file_is_open) { //Make sure this is a valid file
 573:main.c        ****         LCDClear(white);
 574:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 575:main.c        ****         delay_ms(1000);
 576:main.c        ****         LCDClear(black);
 577:main.c        ****         printMenu(&file_manager);
 578:main.c        ****       } else {
 579:main.c        ****         startMP3Player();
 580:main.c        ****       }
 581:main.c        ****     } else { // If a file is already open then this acts like a stop button
 582:main.c        ****       stopMP3Player();
 583:main.c        ****     }
 584:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 585:main.c        ****     if (file_is_open) {
 586:main.c        ****       quickClear(current_display);
 587:main.c        ****     } else {
 588:main.c        ****       LCDClear(settings_menu.back_color);
 589:main.c        ****     }
 590:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 591:main.c        **** 		VICIntEnable|=0x10;
 592:main.c        **** 		if (current_display->current_row == VOLUMEMENU) {
 593:main.c        **** 			VICIntEnable |= 0x10;
 594:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 595:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 596:main.c        **** 			while(button_pressed < MID_BUT){
 597:main.c        ****         VICIntEnClr = 0x10;                     // Stop Interrupts to
 598:main.c        ****         delay_ms(150);                          // debounce the switch
 599:main.c        ****         if (button_pressed==UP_BUT) {
 600:main.c        ****           raiseVolume();
 601:main.c        ****         } else if (button_pressed==DWN_BUT) {
 602:main.c        ****           lowerVolume();
 603:main.c        ****         }
 604:main.c        ****         VICIntEnable |= 0x10;
 605:main.c        **** 			}
 606:main.c        **** 		}	
 607:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 608:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 609:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 610:main.c        **** 			button_pressed=NO_BUT;
 611:main.c        **** 			VICIntEnable |= 0x10;
 612:main.c        **** 			while(button_pressed < MID_BUT){
 613:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 614:main.c        **** 				delay_ms(100);		//	debounce the switch					
 615:main.c        **** 				if(button_pressed==UP_BUT){
 616:main.c        **** 					//Increase Radio Channel
 617:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 618:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 619:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 620:main.c        **** 				}
 621:main.c        **** 				else if(button_pressed==DWN_BUT){
 622:main.c        **** 					//Decrease Radio Channel
 623:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 624:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 625:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 626:main.c        **** 				}
 627:main.c        **** 				ns73SetChannel(radio_channel);
 628:main.c        **** 				VICIntEnable |= 0x10;
 629:main.c        **** 			}
 630:main.c        **** 			IOCLR1 |= FM_CS;				//Select the FM transmitter
 631:main.c        **** 			delay_ms(100);
 632:main.c        **** 			ns73Config();					//Configigure the FM Trans. I/O
 633:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 634:main.c        **** 			IOSET1 |= FM_CS;				//Unselect the FM transmitter
 635:main.c        **** 		}
 636:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 637:main.c        ****       LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 638:main.c        ****       if (radio_enable) {
 639:main.c        ****         LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 640:main.c        ****       } else {
 641:main.c        ****         LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 642:main.c        ****       }
 643:main.c        **** 			button_pressed=NO_BUT;
 644:main.c        **** 			VICIntEnable |= 0x10;
 645:main.c        **** 			while(button_pressed < MID_BUT){
 646:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 647:main.c        **** 				delay_ms(100);		//	debounce the switch					
 648:main.c        **** 				if(button_pressed==UP_BUT){
 649:main.c        ****           enableRadio();
 650:main.c        **** 				}
 651:main.c        **** 				else if(button_pressed==DWN_BUT){
 652:main.c        ****           disableRadio();
 653:main.c        **** 				}
 654:main.c        **** 				VICIntEnable |= 0x10;
 655:main.c        **** 			}
 656:main.c        **** 		}
 657:main.c        **** 		if(file_is_open)quickClear(current_display);
 658:main.c        **** 		else LCDClear(current_display->back_color);
 659:main.c        **** 		printMenu(current_display);
 660:main.c        **** 	}
 661:main.c        **** 	VICIntEnable |= 0x10;
 662:main.c        **** }
 663:main.c        **** 
 664:main.c        **** //  Usage: quickClear(currentDisplay);
 665:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 666:main.c        **** //  Outputs: None
 667:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 668:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 669:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 670:main.c        **** //               good to use while an MP3 is playing.
 671:main.c        **** //
 672:main.c        **** void quickClear(DisplayStruct *display){
 673:main.c        ****   PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 674:main.c        ****   //If we're on the first page of the menu, we also need to clear the title.
 675:main.c        ****   if (display->current_page==0) {
 676:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 677:main.c        ****   }
 678:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 679:main.c        ****   for (int j=0; j<NUMROWS; j++) {
 680:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 681:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 682:main.c        ****   }
 683:main.c        **** }
 684:main.c        **** 
 685:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 686:main.c        **** //
 687:main.c        **** void reset(void) {
 332              		.loc 1 687 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 688:main.c        ****   WDMOD |= 3;
 337              		.loc 1 688 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 689:main.c        ****   WDFEED = 0xAA;
 342              		.loc 1 689 0
 343 0220 AA10A0E3 		mov	r1, #170
 690:main.c        ****   WDFEED = 0x55;
 344              		.loc 1 690 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 689 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 690 0
 349 022c 083082E5 		str	r3, [r2, #8]
 691:main.c        ****   WDFEED = 0xAA;
 692:main.c        ****   WDFEED = 0x00;
 350              		.loc 1 692 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 691 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 692 0
 355 0238 083082E5 		str	r3, [r2, #8]
 693:main.c        **** }
 356              		.loc 1 693 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.section	.rodata.str1.1,"aMS",%progbits,1
 361              	.LC0:
 362 0000 256400   		.ascii	"%d\000"
 363              		.text
 364              		.align	2
 365              		.global	lowerVolume
 367              	lowerVolume:
 368              	.LFB26:
 694:main.c        **** 
 695:main.c        **** // Flöre refactors here!
 696:main.c        **** 
 697:main.c        **** //
 698:main.c        **** // RADIO
 699:main.c        **** //
 700:main.c        **** 
 701:main.c        **** // initializes the FM transmitter to a given frequency.
 702:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 703:main.c        **** //
 704:main.c        **** void initializeRadio(int frequency) {
 705:main.c        ****   IOCLR1 |= FM_CS;      //Select SPI for FM Transmitter
 706:main.c        ****   delay_ms(900);
 707:main.c        ****   
 708:main.c        ****   ns73Config();         //Configigure the FM Trans. I/O
 709:main.c        ****   ns73Init();           //Setup the Default Register Values
 710:main.c        ****   ns73SetChannel(frequency);  //Transmit to 97.3 FM
 711:main.c        ****   
 712:main.c        ****   IOSET1 |= FM_CS;      //Remove FM Transmitter from SPI bus
 713:main.c        ****   delay_ms(100);
 714:main.c        **** }
 715:main.c        **** 
 716:main.c        **** // Enables the radio.
 717:main.c        **** //
 718:main.c        **** void enableRadio(void) {
 719:main.c        ****   radio_enable = ON;
 720:main.c        ****   
 721:main.c        ****   // graphics
 722:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 723:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 724:main.c        ****   
 725:main.c        ****   // send data
 726:main.c        ****   IOCLR1 |= FM_CS;        //Select the FM transmitter
 727:main.c        ****   delay_ms(100);
 728:main.c        ****   ns73Config();           //Configure the FM Trans. I/O
 729:main.c        ****   ns73Send(R0, PE | AG);  //Power up the radio
 730:main.c        ****   IOSET1 |= FM_CS;        //Unselect the FM transmitter
 731:main.c        **** }
 732:main.c        **** 
 733:main.c        **** // Disables the radio.
 734:main.c        **** //
 735:main.c        **** void disableRadio(void) {
 736:main.c        ****   radio_enable = OFF;
 737:main.c        ****   
 738:main.c        ****   // graphics
 739:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 740:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 741:main.c        ****   
 742:main.c        ****   // send data
 743:main.c        ****   IOCLR1 |= FM_CS;      //Select the FM transmitter
 744:main.c        ****   delay_ms(100);
 745:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 746:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 747:main.c        ****   IOSET1 |= FM_CS;      //Unselect the FM transmitter
 748:main.c        **** }
 749:main.c        **** 
 750:main.c        **** //
 751:main.c        **** // MP3
 752:main.c        **** //
 753:main.c        **** 
 754:main.c        **** // Start playing.
 755:main.c        **** //
 756:main.c        **** void startMP3Player(void) {
 757:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 758:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 759:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 760:main.c        ****   ledBlueOn();
 761:main.c        ****   sendMP3Data();                        // Send first song data
 762:main.c        ****   PINSEL1 |= 0x00000C00;
 763:main.c        ****   VICIntEnable |= 0x20;                 // Enable Timer 1 Interrupts(This is the "Song Sending" int
 764:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 765:main.c        **** }
 766:main.c        **** 
 767:main.c        **** // Sends a piece of mp3 data from the current song.
 768:main.c        **** //
 769:main.c        **** void sendMP3Data(void) {
 770:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 771:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 772:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 773:main.c        ****     // Buffer more data if available
 774:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over
 775:main.c        ****     else song_is_over = 0;                                // If there's no more data available, set
 776:main.c        ****   }
 777:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 778:main.c        **** }
 779:main.c        **** 
 780:main.c        **** // Stop playing.
 781:main.c        **** //
 782:main.c        **** void stopMP3Player(void) {
 783:main.c        ****   VICIntEnClr = 0x20;                                     // Disable Time 0 Interrupts(Stop the "So
 784:main.c        ****   ledBlueOff();
 785:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 786:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 787:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 788:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 789:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 790:main.c        ****   closeSong(&current_song);                               // Close the current song
 791:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 792:main.c        ****   VICIntEnable = 0x10;
 793:main.c        **** }
 794:main.c        **** 
 795:main.c        **** //
 796:main.c        **** // VOLUME
 797:main.c        **** //
 798:main.c        **** 
 799:main.c        **** // Raises the Volume by 1.
 800:main.c        **** //
 801:main.c        **** void raiseVolume(void) {
 802:main.c        ****   if(volume_setting < 32){
 803:main.c        ****     volume_setting += 1;
 804:main.c        ****     vs1002Config();             // Enable the MP3 Comm. Lines
 805:main.c        ****     vs1002SetVolume(INCREASE);  // Raise the volume
 806:main.c        ****     vs1002Finish();             // Disable MP3 Comm. Lines
 807:main.c        ****   }
 808:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 809:main.c        ****   LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientat
 810:main.c        **** }
 811:main.c        **** 
 812:main.c        **** // Lowers the volume by 1.
 813:main.c        **** //
 814:main.c        **** void lowerVolume(void) {
 369              		.loc 1 814 0
 370              		@ Function supports interworking.
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373 0240 10402DE9 		stmfd	sp!, {r4, lr}
 374              	.LCFI2:
 815:main.c        ****   if(volume_setting >= 0){
 375              		.loc 1 815 0
 376 0244 7C209FE5 		ldr	r2, .L43
 377 0248 003092E5 		ldr	r3, [r2, #0]
 378 024c 000053E3 		cmp	r3, #0
 379              		.loc 1 814 0
 380 0250 08D04DE2 		sub	sp, sp, #8
 381              	.LCFI3:
 382              		.loc 1 815 0
 383 0254 050000BA 		blt	.L41
 816:main.c        ****     volume_setting--;
 384              		.loc 1 816 0
 385 0258 013043E2 		sub	r3, r3, #1
 386 025c 003082E5 		str	r3, [r2, #0]
 817:main.c        ****     vs1002Config();             // Enable the MP3 Comm. Lines
 387              		.loc 1 817 0
 388 0260 FEFFFFEB 		bl	vs1002Config
 818:main.c        ****     vs1002SetVolume(DECREASE);  // Lower the volume
 389              		.loc 1 818 0
 390 0264 3000A0E3 		mov	r0, #48
 391 0268 FEFFFFEB 		bl	vs1002SetVolume
 819:main.c        ****     vs1002Finish();             // Disable MP3 Comm. Lines
 392              		.loc 1 819 0
 393 026c FEFFFFEB 		bl	vs1002Finish
 394              	.L41:
 820:main.c        ****   }
 821:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 395              		.loc 1 821 0
 396 0270 54409FE5 		ldr	r4, .L43+4
 397 0274 002094E5 		ldr	r2, [r4, #0]
 398 0278 0200A0E3 		mov	r0, #2
 399 027c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 400 0280 0010A0E3 		mov	r1, #0
 401 0284 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 402 0288 FEFFFFEB 		bl	LCDSetRowColor
 822:main.c        ****   LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 403              		.loc 1 822 0
 404 028c 0030A0E3 		mov	r3, #0
 405 0290 00308DE5 		str	r3, [sp, #0]
 406 0294 34309FE5 		ldr	r3, .L43+8
 407 0298 001094E5 		ldr	r1, [r4, #0]
 408 029c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 409 02a0 20309FE5 		ldr	r3, .L43
 410 02a4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 411 02a8 24009FE5 		ldr	r0, .L43+12
 412 02ac 001093E5 		ldr	r1, [r3, #0]
 413 02b0 0230A0E3 		mov	r3, #2
 414 02b4 04C08DE5 		str	ip, [sp, #4]
 415 02b8 FEFFFFEB 		bl	LCDPrintString
 823:main.c        **** }...
 416              		.loc 1 823 0
 417 02bc 08D08DE2 		add	sp, sp, #8
 418 02c0 1040BDE8 		ldmfd	sp!, {r4, lr}
 419 02c4 1EFF2FE1 		bx	lr
 420              	.L44:
 421              		.align	2
 422              	.L43:
 423 02c8 00000000 		.word	volume_setting
 424 02cc 7C040000 		.word	current_display
 425 02d0 00000000 		.word	white
 426 02d4 00000000 		.word	.LC0
 427              	.LFE26:
 429              		.align	2
 430              		.global	raiseVolume
 432              	raiseVolume:
 433              	.LFB25:
 434              		.loc 1 801 0
 435              		@ Function supports interworking.
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438 02d8 10402DE9 		stmfd	sp!, {r4, lr}
 439              	.LCFI4:
 440              		.loc 1 802 0
 441 02dc 78209FE5 		ldr	r2, .L48
 442 02e0 003092E5 		ldr	r3, [r2, #0]
 443 02e4 1F0053E3 		cmp	r3, #31
 444              		.loc 1 801 0
 445 02e8 08D04DE2 		sub	sp, sp, #8
 446              	.LCFI5:
 447              		.loc 1 802 0
 448 02ec 050000CA 		bgt	.L46
 449              		.loc 1 803 0
 450 02f0 013083E2 		add	r3, r3, #1
 451 02f4 003082E5 		str	r3, [r2, #0]
 452              		.loc 1 804 0
 453 02f8 FEFFFFEB 		bl	vs1002Config
 454              		.loc 1 805 0
 455 02fc 3100A0E3 		mov	r0, #49
 456 0300 FEFFFFEB 		bl	vs1002SetVolume
 457              		.loc 1 806 0
 458 0304 FEFFFFEB 		bl	vs1002Finish
 459              	.L46:
 460              		.loc 1 808 0
 461 0308 50409FE5 		ldr	r4, .L48+4
 462 030c 002094E5 		ldr	r2, [r4, #0]
 463 0310 0200A0E3 		mov	r0, #2
 464 0314 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 465 0318 0010A0E3 		mov	r1, #0
 466 031c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 467 0320 FEFFFFEB 		bl	LCDSetRowColor
 468              		.loc 1 809 0
 469 0324 001094E5 		ldr	r1, [r4, #0]
 470 0328 0030A0E3 		mov	r3, #0
 471 032c 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 472 0330 00308DE5 		str	r3, [sp, #0]
 473 0334 20309FE5 		ldr	r3, .L48
 474 0338 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 475 033c 20009FE5 		ldr	r0, .L48+8
 476 0340 001093E5 		ldr	r1, [r3, #0]
 477 0344 0230A0E3 		mov	r3, #2
 478 0348 04C08DE5 		str	ip, [sp, #4]
 479 034c FEFFFFEB 		bl	LCDPrintString
 480              		.loc 1 810 0
 481 0350 08D08DE2 		add	sp, sp, #8
 482 0354 1040BDE8 		ldmfd	sp!, {r4, lr}
 483 0358 1EFF2FE1 		bx	lr
 484              	.L49:
 485              		.align	2
 486              	.L48:
 487 035c 00000000 		.word	volume_setting
 488 0360 7C040000 		.word	current_display
 489 0364 00000000 		.word	.LC0
 490              	.LFE25:
 492              		.align	2
 493              		.global	quickClear
 495              	quickClear:
 496              	.LFB17:
 497              		.loc 1 672 0
 498              		@ Function supports interworking.
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              	.LVL22:
 502              		.loc 1 673 0
 503 0368 B8209FE5 		ldr	r2, .L55
 504 036c 003092E5 		ldr	r3, [r2, #0]
 505              		.loc 1 672 0
 506 0370 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 507              	.LCFI6:
 508              		.loc 1 673 0
 509 0374 FF3DC3E3 		bic	r3, r3, #16320
 510 0378 3030C3E3 		bic	r3, r3, #48
 511 037c 003082E5 		str	r3, [r2, #0]
 512              		.loc 1 675 0
 513 0380 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 514 0384 00005EE3 		cmp	lr, #0
 515              		.loc 1 672 0
 516 0388 08D04DE2 		sub	sp, sp, #8
 517              	.LCFI7:
 518              		.loc 1 672 0
 519 038c 0050A0E1 		mov	r5, r0
 520              		.loc 1 675 0
 521 0390 0700001A 		bne	.L51
 522              	.LVL23:
 523              		.loc 1 676 0
 524 0394 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 525 0398 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 526 039c 0E10A0E1 		mov	r1, lr
 527 03a0 7B0F80E2 		add	r0, r0, #492
 528 03a4 0E30A0E1 		mov	r3, lr
 529 03a8 04C08DE5 		str	ip, [sp, #4]
 530 03ac 00E08DE5 		str	lr, [sp, #0]
 531 03b0 FEFFFFEB 		bl	LCDPrintString
 532              	.LVL24:
 533              	.L51:
 534              		.loc 1 678 0
 535 03b4 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 536 03b8 0010A0E3 		mov	r1, #0
 537 03bc 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 538 03c0 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 539 03c4 FEFFFFEB 		bl	LCDSetRowColor
 540 03c8 0040A0E3 		mov	r4, #0
 541              	.LVL25:
 542              	.LBB50:
 543              		.loc 1 681 0
 544 03cc 58709FE5 		ldr	r7, .L55+4
 545              		.loc 1 680 0
 546 03d0 0460A0E1 		mov	r6, r4
 547              	.L52:
 548 03d4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 549 03d8 840285E0 		add	r0, r5, r4, asl #5
 550              	.LBE50:
 551              		.loc 1 678 0
 552 03dc 014084E2 		add	r4, r4, #1
 553              	.LVL26:
 554              	.LBB51:
 555              		.loc 1 680 0
 556 03e0 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 557 03e4 0C0080E2 		add	r0, r0, #12
 558 03e8 0610A0E1 		mov	r1, r6
 559 03ec 0430A0E1 		mov	r3, r4
 560 03f0 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 561 03f4 FEFFFFEB 		bl	LCDPrintString
 562              		.loc 1 681 0
 563 03f8 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 564 03fc 2C009FE5 		ldr	r0, .L55+8
 565 0400 0610A0E1 		mov	r1, r6
 566 0404 0430A0E1 		mov	r3, r4
 567 0408 00608DE5 		str	r6, [sp, #0]
 568 040c 04608DE5 		str	r6, [sp, #4]
 569 0410 FEFFFFEB 		bl	LCDPrintString
 570              		.loc 1 679 0
 571 0414 0F0054E3 		cmp	r4, #15
 572              	.LVL27:
 573 0418 EDFFFF1A 		bne	.L52
 574              	.LBE51:
 575              		.loc 1 683 0
 576 041c 08D08DE2 		add	sp, sp, #8
 577 0420 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 578 0424 1EFF2FE1 		bx	lr
 579              	.L56:
 580              		.align	2
 581              	.L55:
 582 0428 00C002E0 		.word	-536690688
 583 042c 00000000 		.word	black
 584 0430 00000000 		.word	newline
 585              	.LFE17:
 587              		.align	2
 588              		.global	printMenu
 590              	printMenu:
 591              	.LFB12:
 592              		.loc 1 473 0
 593              		@ Function supports interworking.
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              	.LVL28:
 597              		.loc 1 474 0
 598 0434 C0209FE5 		ldr	r2, .L62
 599 0438 003092E5 		ldr	r3, [r2, #0]
 600              		.loc 1 473 0
 601 043c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 602              	.LCFI8:
 603              		.loc 1 474 0
 604 0440 FF3DC3E3 		bic	r3, r3, #16320
 605 0444 3030C3E3 		bic	r3, r3, #48
 606 0448 003082E5 		str	r3, [r2, #0]
 607              		.loc 1 475 0
 608 044c 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 609 0450 00005EE3 		cmp	lr, #0
 610              		.loc 1 473 0
 611 0454 08D04DE2 		sub	sp, sp, #8
 612              	.LCFI9:
 613              		.loc 1 473 0
 614 0458 0050A0E1 		mov	r5, r0
 615              		.loc 1 475 0
 616 045c 0700001A 		bne	.L58
 617              	.LVL29:
 618 0460 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 619 0464 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 620 0468 0E10A0E1 		mov	r1, lr
 621 046c 7B0F80E2 		add	r0, r0, #492
 622 0470 0E30A0E1 		mov	r3, lr
 623 0474 04C08DE5 		str	ip, [sp, #4]
 624 0478 00E08DE5 		str	lr, [sp, #0]
 625 047c FEFFFFEB 		bl	LCDPrintString
 626              	.LVL30:
 627              	.L58:
 628 0480 0030A0E3 		mov	r3, #0
 629              	.LVL31:
 630              	.LBB52:
 631              		.loc 1 477 0
 632 0484 0360A0E1 		mov	r6, r3
 633              	.L59:
 634 0488 014083E2 		add	r4, r3, #1
 635 048c 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 636 0490 830285E0 		add	r0, r5, r3, asl #5
 637 0494 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 638 0498 0430A0E1 		mov	r3, r4
 639              	.LVL32:
 640 049c 0C0080E2 		add	r0, r0, #12
 641 04a0 0610A0E1 		mov	r1, r6
 642 04a4 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 643 04a8 FEFFFFEB 		bl	LCDPrintString
 644              		.loc 1 476 0
 645 04ac 0F0054E3 		cmp	r4, #15
 646              	.LVL33:
 647 04b0 0430A0E1 		mov	r3, r4
 648              	.LVL34:
 649 04b4 F3FFFF1A 		bne	.L59
 650              	.LBE52:
 651              		.loc 1 479 0
 652 04b8 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 653 04bc 0610A0E1 		mov	r1, r6
 654 04c0 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 655 04c4 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 656              	.LVL35:
 657 04c8 FEFFFFEB 		bl	LCDSetRowColor
 658              		.loc 1 480 0
 659 04cc 080095E5 		ldr	r0, [r5, #8]
 660 04d0 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 661 04d4 800285E0 		add	r0, r5, r0, asl #5
 662 04d8 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 663 04dc 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 664 04e0 0C0080E2 		add	r0, r0, #12
 665 04e4 0610A0E1 		mov	r1, r6
 666 04e8 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 667 04ec FEFFFFEB 		bl	LCDPrintString
 668              		.loc 1 481 0
 669 04f0 08D08DE2 		add	sp, sp, #8
 670 04f4 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 671 04f8 1EFF2FE1 		bx	lr
 672              	.L63:
 673              		.align	2
 674              	.L62:
 675 04fc 00C002E0 		.word	-536690688
 676              	.LFE12:
 678              		.align	2
 679              		.global	highlightRow
 681              	highlightRow:
 682              	.LFB11:
 683              		.loc 1 454 0
 684              		@ Function supports interworking.
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL36:
 688              		.loc 1 455 0
 689 0500 D0209FE5 		ldr	r2, .L69
 690 0504 003092E5 		ldr	r3, [r2, #0]
 691              		.loc 1 454 0
 692 0508 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 693              	.LCFI10:
 694              		.loc 1 455 0
 695 050c FF3DC3E3 		bic	r3, r3, #16320
 696 0510 3030C3E3 		bic	r3, r3, #48
 697 0514 003082E5 		str	r3, [r2, #0]
 698              		.loc 1 454 0
 699 0518 0060A0E1 		mov	r6, r0
 700 051c 08D04DE2 		sub	sp, sp, #8
 701              	.LCFI11:
 702              		.loc 1 456 0
 703 0520 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 704 0524 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 705              		.loc 1 454 0
 706 0528 0140A0E1 		mov	r4, r1
 707              		.loc 1 456 0
 708 052c 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 709              	.LVL37:
 710 0530 0010A0E3 		mov	r1, #0
 711              	.LVL38:
 712 0534 FEFFFFEB 		bl	LCDSetRowColor
 713              		.loc 1 457 0
 714 0538 080096E5 		ldr	r0, [r6, #8]
 715 053c 00C0A0E3 		mov	ip, #0
 716 0540 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 717 0544 800286E0 		add	r0, r6, r0, asl #5
 718 0548 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 719 054c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 720 0550 0C10A0E1 		mov	r1, ip
 721 0554 0C0080E2 		add	r0, r0, #12
 722 0558 00C08DE5 		str	ip, [sp, #0]
 723              		.loc 1 454 0
 724 055c FF4004E2 		and	r4, r4, #255
 725              	.LVL39:
 726              		.loc 1 457 0
 727 0560 04508DE5 		str	r5, [sp, #4]
 728 0564 FEFFFFEB 		bl	LCDPrintString
 729 0568 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 730              		.loc 1 458 0
 731 056c 010054E3 		cmp	r4, #1
 732 0570 082096E5 		ldr	r2, [r6, #8]
 733              		.loc 1 459 0
 734 0574 01304302 		subeq	r3, r3, #1
 735              		.loc 1 463 0
 736 0578 01308312 		addne	r3, r3, #1
 737 057c 0030C6E5 		strb	r3, [r6, #0]
 738              		.loc 1 460 0
 739 0580 01204202 		subeq	r2, r2, #1
 740              		.loc 1 464 0
 741 0584 01208212 		addne	r2, r2, #1
 742 0588 082086E5 		str	r2, [r6, #8]
 743              		.loc 1 466 0
 744 058c 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 745 0590 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 746 0594 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 747 0598 0010A0E3 		mov	r1, #0
 748 059c FEFFFFEB 		bl	LCDSetRowColor
 749              		.loc 1 467 0
 750 05a0 080096E5 		ldr	r0, [r6, #8]
 751 05a4 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 752              	.LVL40:
 753 05a8 00C0A0E3 		mov	ip, #0
 754 05ac 800286E0 		add	r0, r6, r0, asl #5
 755 05b0 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 756 05b4 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 757 05b8 0C0080E2 		add	r0, r0, #12
 758 05bc 0C10A0E1 		mov	r1, ip
 759 05c0 04408DE5 		str	r4, [sp, #4]
 760 05c4 00C08DE5 		str	ip, [sp, #0]
 761 05c8 FEFFFFEB 		bl	LCDPrintString
 762              		.loc 1 468 0
 763 05cc 08D08DE2 		add	sp, sp, #8
 764 05d0 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 765 05d4 1EFF2FE1 		bx	lr
 766              	.L70:
 767              		.align	2
 768              	.L69:
 769 05d8 00C002E0 		.word	-536690688
 770              	.LFE11:
 772              		.align	2
 773              		.global	handleDownButton
 775              	handleDownButton:
 776              	.LFB15:
 777              		.loc 1 538 0
 778              		@ Function supports interworking.
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              	.LVL41:
 782 05dc 30402DE9 		stmfd	sp!, {r4, r5, lr}
 783              	.LCFI12:
 784              		.loc 1 539 0
 785 05e0 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 786 05e4 0E0053E3 		cmp	r3, #14
 787              		.loc 1 538 0
 788 05e8 0040A0E1 		mov	r4, r0
 789 05ec 0150A0E1 		mov	r5, r1
 790              		.loc 1 539 0
 791 05f0 0200008A 		bhi	.L72
 792              	.LVL42:
 793              		.loc 1 540 0
 794 05f4 0010A0E3 		mov	r1, #0
 795              		.loc 1 554 0
 796 05f8 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 797              		.loc 1 540 0
 798 05fc FEFFFFEA 		b	highlightRow
 799              	.LVL43:
 800              	.L72:
 801              		.loc 1 543 0
 802 0600 0F0053E3 		cmp	r3, #15
 803 0604 1000001A 		bne	.L74
 804 0608 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 805 060c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 806 0610 020053E1 		cmp	r3, r2
 807 0614 0C00009A 		bls	.L74
 808              	.LVL44:
 809              		.loc 1 545 0
 810 0618 013082E2 		add	r3, r2, #1
 811 061c 0630C0E5 		strb	r3, [r0, #6]
 812              		.loc 1 548 0
 813 0620 FEFFFFEB 		bl	quickClear
 814              	.LVL45:
 815              		.loc 1 549 0
 816 0624 0130A0E3 		mov	r3, #1
 817 0628 0030C4E5 		strb	r3, [r4, #0]
 818              		.loc 1 550 0
 819 062c 0030A0E3 		mov	r3, #0
 820 0630 083084E5 		str	r3, [r4, #8]
 821              		.loc 1 551 0
 822 0634 0510A0E1 		mov	r1, r5
 823 0638 14009FE5 		ldr	r0, .L75
 824 063c FEFFFFEB 		bl	getNewFiles
 825              		.loc 1 552 0
 826 0640 0400A0E1 		mov	r0, r4
 827              		.loc 1 554 0
 828 0644 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 829              		.loc 1 552 0
 830 0648 FEFFFFEA 		b	printMenu
 831              	.LVL46:
 832              	.L74:
 833              		.loc 1 554 0
 834 064c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 835 0650 1EFF2FE1 		bx	lr
 836              	.L76:
 837              		.align	2
 838              	.L75:
 839 0654 74000000 		.word	file_manager
 840              	.LFE15:
 842              		.align	2
 843              		.global	handleUpButton
 845              	handleUpButton:
 846              	.LFB14:
 847              		.loc 1 514 0
 848              		@ Function supports interworking.
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              	.LVL47:
 852 0658 30402DE9 		stmfd	sp!, {r4, r5, lr}
 853              	.LCFI13:
 854              		.loc 1 515 0
 855 065c 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 856 0660 010053E3 		cmp	r3, #1
 857              		.loc 1 514 0
 858 0664 0040A0E1 		mov	r4, r0
 859 0668 0150A0E1 		mov	r5, r1
 860              		.loc 1 515 0
 861 066c 0200009A 		bls	.L78
 862              	.LVL48:
 863              		.loc 1 516 0
 864 0670 0110A0E3 		mov	r1, #1
 865              		.loc 1 530 0
 866 0674 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 867              		.loc 1 516 0
 868 0678 FEFFFFEA 		b	highlightRow
 869              	.LVL49:
 870              	.L78:
 871              		.loc 1 519 0
 872 067c 0F00001A 		bne	.L80
 873 0680 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 874 0684 000053E3 		cmp	r3, #0
 875 0688 0C00000A 		beq	.L80
 876              	.LVL50:
 877              		.loc 1 521 0
 878 068c 013043E2 		sub	r3, r3, #1
 879 0690 0630C0E5 		strb	r3, [r0, #6]
 880              		.loc 1 524 0
 881 0694 FEFFFFEB 		bl	quickClear
 882              	.LVL51:
 883              		.loc 1 525 0
 884 0698 0F30A0E3 		mov	r3, #15
 885 069c 0030C4E5 		strb	r3, [r4, #0]
 886              		.loc 1 526 0
 887 06a0 0E30A0E3 		mov	r3, #14
 888 06a4 083084E5 		str	r3, [r4, #8]
 889              		.loc 1 527 0
 890 06a8 0510A0E1 		mov	r1, r5
 891 06ac 14009FE5 		ldr	r0, .L81
 892 06b0 FEFFFFEB 		bl	getNewFiles
 893              		.loc 1 528 0
 894 06b4 0400A0E1 		mov	r0, r4
 895              		.loc 1 530 0
 896 06b8 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 897              		.loc 1 528 0
 898 06bc FEFFFFEA 		b	printMenu
 899              	.LVL52:
 900              	.L80:
 901              		.loc 1 530 0
 902 06c0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 903 06c4 1EFF2FE1 		bx	lr
 904              	.L82:
 905              		.align	2
 906              	.L81:
 907 06c8 74000000 		.word	file_manager
 908              	.LFE14:
 910              		.align	2
 911              		.global	sendMP3Data
 913              	sendMP3Data:
 914              	.LFB23:
 915              		.loc 1 769 0
 916              		@ Function supports interworking.
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919 06cc F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 920              	.LCFI14:
 921              		.loc 1 770 0
 922 06d0 FEFFFFEB 		bl	vs1002Config
 923              		.loc 1 771 0
 924 06d4 54809FE5 		ldr	r8, .L89
 925              		.loc 1 774 0
 926 06d8 54709FE5 		ldr	r7, .L89+4
 927 06dc 54409FE5 		ldr	r4, .L89+8
 928              		.loc 1 775 0
 929 06e0 0060A0E3 		mov	r6, #0
 930              		.loc 1 774 0
 931 06e4 0150A0E3 		mov	r5, #1
 932 06e8 080000EA 		b	.L88
 933              	.L86:
 934              		.loc 1 772 0
 935 06ec FEFFFFEB 		bl	vs1002SendMusic
 936              		.loc 1 774 0
 937 06f0 340097E5 		ldr	r0, [r7, #52]
 938 06f4 40109FE5 		ldr	r1, .L89+12
 939 06f8 2020A0E3 		mov	r2, #32
 940 06fc FEFFFFEB 		bl	fat16_read_file
 941 0700 0008A0E1 		mov	r0, r0, asl #16
 942 0704 000050E3 		cmp	r0, #0
 943 0708 0050C4D5 		strleb	r5, [r4, #0]
 944              		.loc 1 775 0
 945 070c 0060C4C5 		strgtb	r6, [r4, #0]
 946              	.L88:
 947              		.loc 1 771 0
 948 0710 003098E5 		ldr	r3, [r8, #0]
 949 0714 020613E3 		tst	r3, #2097152
 950              		.loc 1 772 0
 951 0718 1C009FE5 		ldr	r0, .L89+12
 952 071c 2010A0E3 		mov	r1, #32
 953              		.loc 1 771 0
 954 0720 F1FFFF1A 		bne	.L86
 955              		.loc 1 777 0
 956 0724 FEFFFFEB 		bl	vs1002Finish
 957              		.loc 1 778 0
 958 0728 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 959 072c 1EFF2FE1 		bx	lr
 960              	.L90:
 961              		.align	2
 962              	.L89:
 963 0730 008002E0 		.word	-536707072
 964 0734 14000000 		.word	current_song
 965 0738 02000000 		.word	song_is_over
 966 073c 51000000 		.word	current_song+61
 967              	.LFE23:
 969              		.align	2
 970              		.global	startMP3Player
 972              	startMP3Player:
 973              	.LFB22:
 974              		.loc 1 756 0
 975              		@ Function supports interworking.
 976              		@ args = 0, pretend = 0, frame = 0
 977              		@ frame_needed = 0, uses_anonymous_args = 0
 978 0740 10402DE9 		stmfd	sp!, {r4, lr}
 979              	.LCFI15:
 980              		.loc 1 757 0
 981 0744 FEFFFFEB 		bl	vs1002Config
 982              		.loc 1 760 0
 983 0748 50409FE5 		ldr	r4, .L93
 984              		.loc 1 758 0
 985 074c 0000A0E3 		mov	r0, #0
 986 0750 021BA0E3 		mov	r1, #2048
 987 0754 FEFFFFEB 		bl	vs1002SCIWrite
 988              		.loc 1 759 0
 989 0758 FEFFFFEB 		bl	vs1002Finish
 990              		.loc 1 760 0
 991 075c 0232A0E3 		mov	r3, #536870912
 992 0760 0C3084E5 		str	r3, [r4, #12]
 993              		.loc 1 761 0
 994 0764 FEFFFFEB 		bl	sendMP3Data
 995              		.loc 1 762 0
 996 0768 34209FE5 		ldr	r2, .L93+4
 997 076c 043092E5 		ldr	r3, [r2, #4]
 998 0770 033B83E3 		orr	r3, r3, #3072
 999 0774 043082E5 		str	r3, [r2, #4]
 1000              		.loc 1 763 0
 1001 0778 0020E0E3 		mvn	r2, #0
 1002 077c EF3F12E5 		ldr	r3, [r2, #-4079]
 1003 0780 203083E3 		orr	r3, r3, #32
 1004 0784 EF3F02E5 		str	r3, [r2, #-4079]
 1005              		.loc 1 764 0
 1006 0788 083094E5 		ldr	r3, [r4, #8]
 1007 078c 033783E3 		orr	r3, r3, #786432
 1008 0790 503083E3 		orr	r3, r3, #80
 1009 0794 083084E5 		str	r3, [r4, #8]
 1010              		.loc 1 765 0
 1011 0798 1040BDE8 		ldmfd	sp!, {r4, lr}
 1012 079c 1EFF2FE1 		bx	lr
 1013              	.L94:
 1014              		.align	2
 1015              	.L93:
 1016 07a0 008002E0 		.word	-536707072
 1017 07a4 00C002E0 		.word	-536690688
 1018              	.LFE22:
 1020              		.align	2
 1022              	timer1ISR:
 1023              	.LFB5:
 1024              		.loc 1 350 0
 1025              		@ Function supports interworking.
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028 07a8 04E02DE5 		str	lr, [sp, #-4]!
 1029              	.LCFI16:
 1030              		.loc 1 351 0
 1031 07ac FEFFFFEB 		bl	sendMP3Data
 1032              		.loc 1 352 0
 1033 07b0 18309FE5 		ldr	r3, .L97
 1034 07b4 FF20A0E3 		mov	r2, #255
 1035 07b8 002083E5 		str	r2, [r3, #0]
 1036              		.loc 1 353 0
 1037 07bc 0020A0E3 		mov	r2, #0
 1038 07c0 0030E0E3 		mvn	r3, #0
 1039 07c4 CF2F03E5 		str	r2, [r3, #-4047]
 1040              		.loc 1 354 0
 1041 07c8 04E09DE4 		ldr	lr, [sp], #4
 1042 07cc 1EFF2FE1 		bx	lr
 1043              	.L98:
 1044              		.align	2
 1045              	.L97:
 1046 07d0 008000E0 		.word	-536838144
 1047              	.LFE5:
 1049              		.section	.rodata.str1.1
 1050              	.LC1:
 1051 0003 4F666600 		.ascii	"Off\000"
 1052              		.text
 1053              		.align	2
 1054              		.global	disableRadio
 1056              	disableRadio:
 1057              	.LFB21:
 1058              		.loc 1 735 0
 1059              		@ Function supports interworking.
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062 07d4 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1063              	.LCFI17:
 1064              		.loc 1 736 0
 1065 07d8 98309FE5 		ldr	r3, .L103
 1066              		.loc 1 739 0
 1067 07dc 98509FE5 		ldr	r5, .L103+4
 1068              		.loc 1 736 0
 1069 07e0 0040A0E3 		mov	r4, #0
 1070 07e4 0040C3E5 		strb	r4, [r3, #0]
 1071              		.loc 1 739 0
 1072 07e8 002095E5 		ldr	r2, [r5, #0]
 1073              		.loc 1 735 0
 1074 07ec 08D04DE2 		sub	sp, sp, #8
 1075              	.LCFI18:
 1076              		.loc 1 739 0
 1077 07f0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1078 07f4 0200A0E3 		mov	r0, #2
 1079 07f8 0410A0E1 		mov	r1, r4
 1080 07fc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1081 0800 FEFFFFEB 		bl	LCDSetRowColor
 1082              		.loc 1 740 0
 1083 0804 003095E5 		ldr	r3, [r5, #0]
 1084 0808 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1085 080c 00408DE5 		str	r4, [sp, #0]
 1086 0810 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1087 0814 64009FE5 		ldr	r0, .L103+8
 1088 0818 0230A0E3 		mov	r3, #2
 1089 081c 0410A0E1 		mov	r1, r4
 1090 0820 04C08DE5 		str	ip, [sp, #4]
 1091 0824 FEFFFFEB 		bl	LCDPrintString
 1092              		.loc 1 743 0
 1093 0828 54209FE5 		ldr	r2, .L103+12
 1094 082c 1C3092E5 		ldr	r3, [r2, #28]
 1095 0830 013283E3 		orr	r3, r3, #268435456
 1096 0834 1C3082E5 		str	r3, [r2, #28]
 1097              	.LBB53:
 1098              	.LBB54:
 1099              		.loc 1 262 0
 1100 0838 48309FE5 		ldr	r3, .L103+16
 1101              	.L100:
 1102              	@ 262 "main.c" 1
 1103 083c 0000A0E1 		nop
 1104              	@ 0 "" 2
 1105 0840 014084E2 		add	r4, r4, #1
 1106              	.LVL53:
 1107 0844 030054E1 		cmp	r4, r3
 1108 0848 FBFFFF1A 		bne	.L100
 1109              	.LBE54:
 1110              	.LBE53:
 1111              		.loc 1 745 0
 1112 084c FEFFFFEB 		bl	ns73Config
 1113              		.loc 1 746 0
 1114 0850 0000A0E3 		mov	r0, #0
 1115 0854 0410A0E3 		mov	r1, #4
 1116 0858 FEFFFFEB 		bl	ns73Send
 1117              		.loc 1 747 0
 1118 085c 20209FE5 		ldr	r2, .L103+12
 1119 0860 143092E5 		ldr	r3, [r2, #20]
 1120 0864 013283E3 		orr	r3, r3, #268435456
 1121 0868 143082E5 		str	r3, [r2, #20]
 1122              		.loc 1 748 0
 1123 086c 08D08DE2 		add	sp, sp, #8
 1124 0870 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1125 0874 1EFF2FE1 		bx	lr
 1126              	.L104:
 1127              		.align	2
 1128              	.L103:
 1129 0878 00000000 		.word	radio_enable
 1130 087c 7C040000 		.word	current_display
 1131 0880 03000000 		.word	.LC1
 1132 0884 008002E0 		.word	-536707072
 1133 0888 40420F00 		.word	1000000
 1134              	.LFE21:
 1136              		.section	.rodata.str1.1
 1137              	.LC2:
 1138 0007 4F6E00   		.ascii	"On\000"
 1139              		.text
 1140              		.align	2
 1141              		.global	enableRadio
 1143              	enableRadio:
 1144              	.LFB20:
 1145              		.loc 1 718 0
 1146              		@ Function supports interworking.
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149 088c 10402DE9 		stmfd	sp!, {r4, lr}
 1150              	.LCFI19:
 1151              		.loc 1 719 0
 1152 0890 9C309FE5 		ldr	r3, .L109
 1153              		.loc 1 722 0
 1154 0894 9C409FE5 		ldr	r4, .L109+4
 1155              		.loc 1 719 0
 1156 0898 0120A0E3 		mov	r2, #1
 1157 089c 0020C3E5 		strb	r2, [r3, #0]
 1158              		.loc 1 722 0
 1159 08a0 002094E5 		ldr	r2, [r4, #0]
 1160              		.loc 1 718 0
 1161 08a4 08D04DE2 		sub	sp, sp, #8
 1162              	.LCFI20:
 1163              		.loc 1 722 0
 1164 08a8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1165 08ac 0200A0E3 		mov	r0, #2
 1166 08b0 0010A0E3 		mov	r1, #0
 1167 08b4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1168 08b8 FEFFFFEB 		bl	LCDSetRowColor
 1169              		.loc 1 723 0
 1170 08bc 003094E5 		ldr	r3, [r4, #0]
 1171 08c0 0040A0E3 		mov	r4, #0
 1172 08c4 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1173 08c8 00408DE5 		str	r4, [sp, #0]
 1174 08cc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1175 08d0 64009FE5 		ldr	r0, .L109+8
 1176 08d4 0230A0E3 		mov	r3, #2
 1177 08d8 0410A0E1 		mov	r1, r4
 1178 08dc 04C08DE5 		str	ip, [sp, #4]
 1179 08e0 FEFFFFEB 		bl	LCDPrintString
 1180              		.loc 1 726 0
 1181 08e4 54209FE5 		ldr	r2, .L109+12
 1182 08e8 1C3092E5 		ldr	r3, [r2, #28]
 1183 08ec 013283E3 		orr	r3, r3, #268435456
 1184 08f0 1C3082E5 		str	r3, [r2, #28]
 1185              	.LBB55:
 1186              	.LBB56:
 1187              		.loc 1 262 0
 1188 08f4 48309FE5 		ldr	r3, .L109+16
 1189              	.L106:
 1190              	@ 262 "main.c" 1
 1191 08f8 0000A0E1 		nop
 1192              	@ 0 "" 2
 1193 08fc 014084E2 		add	r4, r4, #1
 1194              	.LVL54:
 1195 0900 030054E1 		cmp	r4, r3
 1196 0904 FBFFFF1A 		bne	.L106
 1197              	.LBE56:
 1198              	.LBE55:
 1199              		.loc 1 728 0
 1200 0908 FEFFFFEB 		bl	ns73Config
 1201              		.loc 1 729 0
 1202 090c 0000A0E3 		mov	r0, #0
 1203 0910 8110A0E3 		mov	r1, #129
 1204 0914 FEFFFFEB 		bl	ns73Send
 1205              		.loc 1 730 0
 1206 0918 20209FE5 		ldr	r2, .L109+12
 1207 091c 143092E5 		ldr	r3, [r2, #20]
 1208 0920 013283E3 		orr	r3, r3, #268435456
 1209 0924 143082E5 		str	r3, [r2, #20]
 1210              		.loc 1 731 0
 1211 0928 08D08DE2 		add	sp, sp, #8
 1212 092c 1040BDE8 		ldmfd	sp!, {r4, lr}
 1213 0930 1EFF2FE1 		bx	lr
 1214              	.L110:
 1215              		.align	2
 1216              	.L109:
 1217 0934 00000000 		.word	radio_enable
 1218 0938 7C040000 		.word	current_display
 1219 093c 07000000 		.word	.LC2
 1220 0940 008002E0 		.word	-536707072
 1221 0944 40420F00 		.word	1000000
 1222              	.LFE20:
 1224              		.align	2
 1225              		.global	initializeRadio
 1227              	initializeRadio:
 1228              	.LFB19:
 1229              		.loc 1 704 0
 1230              		@ Function supports interworking.
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              	.LVL55:
 1234              		.loc 1 705 0
 1235 0948 68209FE5 		ldr	r2, .L117
 1236 094c 1C3092E5 		ldr	r3, [r2, #28]
 1237 0950 013283E3 		orr	r3, r3, #268435456
 1238 0954 1C3082E5 		str	r3, [r2, #28]
 1239              	.LBB57:
 1240              	.LBB58:
 1241              		.loc 1 262 0
 1242 0958 5C209FE5 		ldr	r2, .L117+4
 1243              	.LBE58:
 1244              	.LBE57:
 1245              		.loc 1 704 0
 1246 095c 10402DE9 		stmfd	sp!, {r4, lr}
 1247              	.LCFI21:
 1248              		.loc 1 705 0
 1249 0960 0030A0E3 		mov	r3, #0
 1250              	.LVL56:
 1251              		.loc 1 704 0
 1252 0964 0040A0E1 		mov	r4, r0
 1253              	.LVL57:
 1254              	.L112:
 1255              	.LBB60:
 1256              	.LBB59:
 1257              		.loc 1 262 0
 1258              	@ 262 "main.c" 1
 1259 0968 0000A0E1 		nop
 1260              	@ 0 "" 2
 1261 096c 013083E2 		add	r3, r3, #1
 1262 0970 020053E1 		cmp	r3, r2
 1263 0974 FBFFFF1A 		bne	.L112
 1264              	.LBE59:
 1265              	.LBE60:
 1266              		.loc 1 708 0
 1267 0978 FEFFFFEB 		bl	ns73Config
 1268              	.LVL58:
 1269              		.loc 1 709 0
 1270 097c FEFFFFEB 		bl	ns73Init
 1271              		.loc 1 710 0
 1272 0980 0400A0E1 		mov	r0, r4
 1273 0984 FEFFFFEB 		bl	ns73SetChannel
 1274              		.loc 1 712 0
 1275 0988 28209FE5 		ldr	r2, .L117
 1276 098c 143092E5 		ldr	r3, [r2, #20]
 1277 0990 013283E3 		orr	r3, r3, #268435456
 1278 0994 143082E5 		str	r3, [r2, #20]
 1279              	.LBB61:
 1280              	.LBB62:
 1281              		.loc 1 262 0
 1282 0998 20209FE5 		ldr	r2, .L117+8
 1283              	.LBE62:
 1284              	.LBE61:
 1285              		.loc 1 712 0
 1286 099c 0030A0E3 		mov	r3, #0
 1287              	.LVL59:
 1288              	.L113:
 1289              	.LBB64:
 1290              	.LBB63:
 1291              		.loc 1 262 0
 1292              	@ 262 "main.c" 1
 1293 09a0 0000A0E1 		nop
 1294              	@ 0 "" 2
 1295 09a4 013083E2 		add	r3, r3, #1
 1296 09a8 020053E1 		cmp	r3, r2
 1297 09ac FBFFFF1A 		bne	.L113
 1298              	.LBE63:
 1299              	.LBE64:
 1300              		.loc 1 714 0
 1301 09b0 1040BDE8 		ldmfd	sp!, {r4, lr}
 1302 09b4 1EFF2FE1 		bx	lr
 1303              	.L118:
 1304              		.align	2
 1305              	.L117:
 1306 09b8 008002E0 		.word	-536707072
 1307 09bc 40548900 		.word	9000000
 1308 09c0 40420F00 		.word	1000000
 1309              	.LFE19:
 1311              		.align	2
 1312              		.global	closeSong
 1314              	closeSong:
 1315              	.LFB10:
 1316              		.loc 1 444 0
 1317              		@ Function supports interworking.
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              	.LVL60:
 1321 09c4 10402DE9 		stmfd	sp!, {r4, lr}
 1322              	.LCFI22:
 1323              		.loc 1 445 0
 1324 09c8 28409FE5 		ldr	r4, .L121
 1325 09cc 003094E5 		ldr	r3, [r4, #0]
 1326 09d0 153C83E3 		orr	r3, r3, #5376
 1327 09d4 003084E5 		str	r3, [r4, #0]
 1328              		.loc 1 446 0
 1329 09d8 340090E5 		ldr	r0, [r0, #52]
 1330              	.LVL61:
 1331 09dc FEFFFFEB 		bl	fat16_close_file
 1332              		.loc 1 447 0
 1333 09e0 003094E5 		ldr	r3, [r4, #0]
 1334 09e4 FF3DC3E3 		bic	r3, r3, #16320
 1335 09e8 3030C3E3 		bic	r3, r3, #48
 1336 09ec 003084E5 		str	r3, [r4, #0]
 1337              		.loc 1 448 0
 1338 09f0 1040BDE8 		ldmfd	sp!, {r4, lr}
 1339 09f4 1EFF2FE1 		bx	lr
 1340              	.L122:
 1341              		.align	2
 1342              	.L121:
 1343 09f8 00C002E0 		.word	-536690688
 1344              	.LFE10:
 1346              		.align	2
 1347              		.global	stopMP3Player
 1349              	stopMP3Player:
 1350              	.LFB24:
 1351              		.loc 1 782 0
 1352              		@ Function supports interworking.
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355              		.loc 1 783 0
 1356 09fc 2020A0E3 		mov	r2, #32
 1357 0a00 0030E0E3 		mvn	r3, #0
 1358 0a04 EB2F03E5 		str	r2, [r3, #-4075]
 1359              		.loc 1 784 0
 1360 0a08 74309FE5 		ldr	r3, .L127
 1361 0a0c 0222A0E3 		mov	r2, #536870912
 1362              		.loc 1 782 0
 1363 0a10 10402DE9 		stmfd	sp!, {r4, lr}
 1364              	.LCFI23:
 1365              		.loc 1 784 0
 1366 0a14 042083E5 		str	r2, [r3, #4]
 1367              		.loc 1 785 0
 1368 0a18 FEFFFFEB 		bl	vs1002Config
 1369              		.loc 1 786 0
 1370 0a1c 0000A0E3 		mov	r0, #0
 1371 0a20 0810A0E3 		mov	r1, #8
 1372 0a24 FEFFFFEB 		bl	vs1002SCIWrite
 1373 0a28 0040A0E3 		mov	r4, #0
 1374              	.LVL62:
 1375              	.L124:
 1376              	.LBB65:
 1377              		.loc 1 787 0
 1378 0a2c 0000A0E3 		mov	r0, #0
 1379 0a30 014084E2 		add	r4, r4, #1
 1380 0a34 0010A0E1 		mov	r1, r0
 1381 0a38 FEFFFFEB 		bl	vs1002SCIWrite
 1382 0a3c 960054E3 		cmp	r4, #150
 1383 0a40 F9FFFF1A 		bne	.L124
 1384              	.LBE65:
 1385              		.loc 1 788 0
 1386 0a44 FEFFFFEB 		bl	vs1002Finish
 1387              		.loc 1 789 0
 1388 0a48 34209FE5 		ldr	r2, .L127
 1389 0a4c 083092E5 		ldr	r3, [r2, #8]
 1390 0a50 033783E3 		orr	r3, r3, #786432
 1391 0a54 503083E3 		orr	r3, r3, #80
 1392 0a58 083082E5 		str	r3, [r2, #8]
 1393              		.loc 1 790 0
 1394 0a5c 24009FE5 		ldr	r0, .L127+4
 1395 0a60 FEFFFFEB 		bl	closeSong
 1396              		.loc 1 791 0
 1397 0a64 20309FE5 		ldr	r3, .L127+8
 1398 0a68 0020A0E3 		mov	r2, #0
 1399 0a6c 0020C3E5 		strb	r2, [r3, #0]
 1400              		.loc 1 792 0
 1401 0a70 102082E2 		add	r2, r2, #16
 1402 0a74 0030E0E3 		mvn	r3, #0
 1403 0a78 EF2F03E5 		str	r2, [r3, #-4079]
 1404              		.loc 1 793 0
 1405 0a7c 1040BDE8 		ldmfd	sp!, {r4, lr}
 1406 0a80 1EFF2FE1 		bx	lr
 1407              	.L128:
 1408              		.align	2
 1409              	.L127:
 1410 0a84 008002E0 		.word	-536707072
 1411 0a88 14000000 		.word	current_song
 1412 0a8c 01000000 		.word	file_is_open
 1413              	.LFE24:
 1415              		.align	2
 1416              		.global	loadSongInfo
 1418              	loadSongInfo:
 1419              	.LFB9:
 1420              		.loc 1 409 0
 1421              		@ Function supports interworking.
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424              	.LVL63:
 1425 0a90 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1426              	.LCFI24:
 1427              		.loc 1 409 0
 1428 0a94 0020A0E3 		mov	r2, #0
 1429              	.LVL64:
 1430 0a98 0040A0E1 		mov	r4, r0
 1431              	.LVL65:
 1432              	.L130:
 1433              	.LBB66:
 1434              		.loc 1 412 0
 1435 0a9c 083091E5 		ldr	r3, [r1, #8]
 1436 0aa0 833281E0 		add	r3, r1, r3, asl #5
 1437 0aa4 023083E0 		add	r3, r3, r2
 1438 0aa8 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1439              		.loc 1 411 0
 1440 0aac 012082E2 		add	r2, r2, #1
 1441 0ab0 1E0052E3 		cmp	r2, #30
 1442              		.loc 1 412 0
 1443 0ab4 1630C0E5 		strb	r3, [r0, #22]
 1444              		.loc 1 411 0
 1445 0ab8 010080E2 		add	r0, r0, #1
 1446 0abc F6FFFF1A 		bne	.L130
 1447 0ac0 0020A0E3 		mov	r2, #0
 1448              	.LVL66:
 1449              	.LBE66:
 1450              	.LBB67:
 1451              		.loc 1 417 0
 1452 0ac4 0210A0E1 		mov	r1, r2
 1453              	.LVL67:
 1454              	.L133:
 1455              		.loc 1 416 0
 1456 0ac8 023084E0 		add	r3, r4, r2
 1457 0acc 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 1458 0ad0 150052E3 		cmp	r2, #21
 1459 0ad4 2E005313 		cmpne	r3, #46
 1460              		.loc 1 417 0
 1461 0ad8 0210C407 		streqb	r1, [r4, r2]
 1462 0adc 1620A003 		moveq	r2, #22
 1463              		.loc 1 420 0
 1464 0ae0 0230C417 		strneb	r3, [r4, r2]
 1465              		.loc 1 415 0
 1466 0ae4 012082E2 		add	r2, r2, #1
 1467 0ae8 150052E3 		cmp	r2, #21
 1468 0aec F5FFFFDA 		ble	.L133
 1469              	.LBE67:
 1470              		.loc 1 423 0
 1471 0af0 6C609FE5 		ldr	r6, .L139
 1472 0af4 003096E5 		ldr	r3, [r6, #0]
 1473              		.loc 1 425 0
 1474 0af8 165084E2 		add	r5, r4, #22
 1475              		.loc 1 423 0
 1476 0afc 153C83E3 		orr	r3, r3, #5376
 1477              		.loc 1 425 0
 1478 0b00 0500A0E1 		mov	r0, r5
 1479              		.loc 1 423 0
 1480 0b04 003086E5 		str	r3, [r6, #0]
 1481              		.loc 1 425 0
 1482 0b08 FEFFFFEB 		bl	root_file_exists
 1483              	.LVL68:
 1484 0b0c 000050E3 		cmp	r0, #0
 1485              		.loc 1 426 0
 1486 0b10 00309605 		ldreq	r3, [r6, #0]
 1487 0b14 FF3DC303 		biceq	r3, r3, #16320
 1488 0b18 3030C303 		biceq	r3, r3, #48
 1489 0b1c 00308605 		streq	r3, [r6, #0]
 1490 0b20 0D00000A 		beq	.L135
 1491              	.L134:
 1492              		.loc 1 431 0
 1493 0b24 0500A0E1 		mov	r0, r5
 1494 0b28 FEFFFFEB 		bl	root_open
 1495 0b2c 340084E5 		str	r0, [r4, #52]
 1496              		.loc 1 432 0
 1497 0b30 FEFFFFEB 		bl	fat16_file_size
 1498              		.loc 1 433 0
 1499 0b34 3D1084E2 		add	r1, r4, #61
 1500              		.loc 1 432 0
 1501 0b38 380084E5 		str	r0, [r4, #56]
 1502              		.loc 1 433 0
 1503 0b3c 2020A0E3 		mov	r2, #32
 1504 0b40 340094E5 		ldr	r0, [r4, #52]
 1505 0b44 FEFFFFEB 		bl	fat16_read_file
 1506              		.loc 1 437 0
 1507 0b48 003096E5 		ldr	r3, [r6, #0]
 1508 0b4c FF3DC3E3 		bic	r3, r3, #16320
 1509 0b50 3030C3E3 		bic	r3, r3, #48
 1510 0b54 003086E5 		str	r3, [r6, #0]
 1511 0b58 0100A0E3 		mov	r0, #1
 1512              	.L135:
 1513              		.loc 1 439 0
 1514 0b5c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1515 0b60 1EFF2FE1 		bx	lr
 1516              	.L140:
 1517              		.align	2
 1518              	.L139:
 1519 0b64 00C002E0 		.word	-536690688
 1520              	.LFE9:
 1522              		.align	2
 1523              		.global	handleMiddleButton
 1525              	handleMiddleButton:
 1526              	.LFB16:
 1527              		.loc 1 564 0
 1528              		@ Function supports interworking.
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531 0b68 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1532              	.LCFI25:
 1533              		.loc 1 565 0
 1534 0b6c 1020A0E3 		mov	r2, #16
 1535 0b70 0030E0E3 		mvn	r3, #0
 1536 0b74 EB2F03E5 		str	r2, [r3, #-4075]
 1537              	.LBB68:
 1538              	.LBB69:
 1539              		.loc 1 262 0
 1540 0b78 78249FE5 		ldr	r2, .L182
 1541              	.LBE69:
 1542              	.LBE68:
 1543              		.loc 1 564 0
 1544 0b7c 08D04DE2 		sub	sp, sp, #8
 1545              	.LCFI26:
 1546              		.loc 1 565 0
 1547 0b80 013083E2 		add	r3, r3, #1
 1548              	.LVL69:
 1549              	.L142:
 1550              	.LBB71:
 1551              	.LBB70:
 1552              		.loc 1 262 0
 1553              	@ 262 "main.c" 1
 1554 0b84 0000A0E1 		nop
 1555              	@ 0 "" 2
 1556 0b88 013083E2 		add	r3, r3, #1
 1557 0b8c 020053E1 		cmp	r3, r2
 1558 0b90 FBFFFF1A 		bne	.L142
 1559              	.LBE70:
 1560              	.LBE71:
 1561              		.loc 1 569 0
 1562 0b94 60649FE5 		ldr	r6, .L182+4
 1563 0b98 60349FE5 		ldr	r3, .L182+8
 1564              	.LVL70:
 1565 0b9c 000096E5 		ldr	r0, [r6, #0]
 1566 0ba0 030050E1 		cmp	r0, r3
 1567 0ba4 58549FE5 		ldr	r5, .L182+12
 1568 0ba8 2500001A 		bne	.L143
 1569              		.loc 1 570 0
 1570 0bac 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1571 0bb0 000053E3 		cmp	r3, #0
 1572 0bb4 2000001A 		bne	.L144
 1573              		.loc 1 571 0
 1574 0bb8 0010A0E1 		mov	r1, r0
 1575 0bbc 44049FE5 		ldr	r0, .L182+16
 1576 0bc0 FEFFFFEB 		bl	loadSongInfo
 1577              		.loc 1 572 0
 1578 0bc4 000050E3 		cmp	r0, #0
 1579              		.loc 1 571 0
 1580 0bc8 0040A0E1 		mov	r4, r0
 1581 0bcc 0000C5E5 		strb	r0, [r5, #0]
 1582              		.loc 1 572 0
 1583 0bd0 1700001A 		bne	.L145
 1584              		.loc 1 573 0
 1585 0bd4 30349FE5 		ldr	r3, .L182+20
 1586 0bd8 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1587 0bdc FEFFFFEB 		bl	LCDClear
 1588              		.loc 1 574 0
 1589 0be0 00408DE5 		str	r4, [sp, #0]
 1590 0be4 001096E5 		ldr	r1, [r6, #0]
 1591 0be8 20349FE5 		ldr	r3, .L182+24
 1592 0bec 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1593 0bf0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1594 0bf4 18049FE5 		ldr	r0, .L182+28
 1595 0bf8 0130A0E3 		mov	r3, #1
 1596 0bfc 0410A0E1 		mov	r1, r4
 1597 0c00 04C08DE5 		str	ip, [sp, #4]
 1598 0c04 FEFFFFEB 		bl	LCDPrintString
 1599              	.LBB72:
 1600              	.LBB73:
 1601              		.loc 1 262 0
 1602 0c08 08349FE5 		ldr	r3, .L182+32
 1603              	.LBE73:
 1604              	.LBE72:
 1605              		.loc 1 574 0
 1606 0c0c 0400A0E1 		mov	r0, r4
 1607              	.LVL71:
 1608              	.L146:
 1609              	.LBB75:
 1610              	.LBB74:
 1611              		.loc 1 262 0
 1612              	@ 262 "main.c" 1
 1613 0c10 0000A0E1 		nop
 1614              	@ 0 "" 2
 1615 0c14 010080E2 		add	r0, r0, #1
 1616 0c18 030050E1 		cmp	r0, r3
 1617 0c1c FBFFFF1A 		bne	.L146
 1618              	.LBE74:
 1619              	.LBE75:
 1620              		.loc 1 576 0
 1621 0c20 E8339FE5 		ldr	r3, .L182+24
 1622 0c24 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1623              	.LVL72:
 1624 0c28 FEFFFFEB 		bl	LCDClear
 1625              		.loc 1 577 0
 1626 0c2c CC039FE5 		ldr	r0, .L182+8
 1627 0c30 E80000EA 		b	.L181
 1628              	.L145:
 1629              		.loc 1 579 0
 1630 0c34 FEFFFFEB 		bl	startMP3Player
 1631 0c38 E70000EA 		b	.L147
 1632              	.L144:
 1633              		.loc 1 582 0
 1634 0c3c FEFFFFEB 		bl	stopMP3Player
 1635 0c40 E50000EA 		b	.L147
 1636              	.L143:
 1637              		.loc 1 585 0
 1638 0c44 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1639 0c48 000053E3 		cmp	r3, #0
 1640 0c4c 0100000A 		beq	.L148
 1641              		.loc 1 586 0
 1642 0c50 FEFFFFEB 		bl	quickClear
 1643 0c54 020000EA 		b	.L149
 1644              	.L148:
 1645              		.loc 1 588 0
 1646 0c58 BC339FE5 		ldr	r3, .L182+36
 1647 0c5c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1648 0c60 FEFFFFEB 		bl	LCDClear
 1649              	.L149:
 1650              		.loc 1 590 0
 1651 0c64 90839FE5 		ldr	r8, .L182+4
 1652 0c68 003098E5 		ldr	r3, [r8, #0]
 1653 0c6c 0060A0E3 		mov	r6, #0
 1654 0c70 080093E5 		ldr	r0, [r3, #8]
 1655 0c74 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1656 0c78 00608DE5 		str	r6, [sp, #0]
 1657 0c7c 800283E0 		add	r0, r3, r0, asl #5
 1658 0c80 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1659              		.loc 1 591 0
 1660 0c84 0070E0E3 		mvn	r7, #0
 1661              		.loc 1 590 0
 1662 0c88 0130A0E3 		mov	r3, #1
 1663 0c8c 0C0080E2 		add	r0, r0, #12
 1664 0c90 0610A0E1 		mov	r1, r6
 1665 0c94 04C08DE5 		str	ip, [sp, #4]
 1666 0c98 FEFFFFEB 		bl	LCDPrintString
 1667              		.loc 1 591 0
 1668 0c9c EF3F17E5 		ldr	r3, [r7, #-4079]
 1669 0ca0 103083E3 		orr	r3, r3, #16
 1670 0ca4 EF3F07E5 		str	r3, [r7, #-4079]
 1671              		.loc 1 592 0
 1672 0ca8 002098E5 		ldr	r2, [r8, #0]
 1673 0cac 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 1674 0cb0 010054E3 		cmp	r4, #1
 1675 0cb4 2A00001A 		bne	.L150
 1676              		.loc 1 593 0
 1677 0cb8 EF3F17E5 		ldr	r3, [r7, #-4079]
 1678 0cbc 103083E3 		orr	r3, r3, #16
 1679 0cc0 EF3F07E5 		str	r3, [r7, #-4079]
 1680              		.loc 1 594 0
 1681 0cc4 0610A0E1 		mov	r1, r6
 1682 0cc8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1683 0ccc 0200A0E3 		mov	r0, #2
 1684 0cd0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1685 0cd4 FEFFFFEB 		bl	LCDSetRowColor
 1686              		.loc 1 595 0
 1687 0cd8 00608DE5 		str	r6, [sp, #0]
 1688 0cdc 28339FE5 		ldr	r3, .L182+20
 1689 0ce0 001098E5 		ldr	r1, [r8, #0]
 1690 0ce4 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1691 0ce8 30339FE5 		ldr	r3, .L182+40
 1692 0cec 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1693 0cf0 2C039FE5 		ldr	r0, .L182+44
 1694 0cf4 001093E5 		ldr	r1, [r3, #0]
 1695 0cf8 0230A0E3 		mov	r3, #2
 1696 0cfc 04C08DE5 		str	ip, [sp, #4]
 1697              		.loc 1 597 0
 1698 0d00 0740A0E1 		mov	r4, r7
 1699              		.loc 1 595 0
 1700 0d04 FEFFFFEB 		bl	LCDPrintString
 1701              		.loc 1 596 0
 1702 0d08 18739FE5 		ldr	r7, .L182+48
 1703              		.loc 1 597 0
 1704 0d0c 106086E2 		add	r6, r6, #16
 1705              	.LBB76:
 1706              	.LBB77:
 1707              		.loc 1 262 0
 1708 0d10 14539FE5 		ldr	r5, .L182+52
 1709 0d14 0E0000EA 		b	.L151
 1710              	.L155:
 1711              	.LBE77:
 1712              	.LBE76:
 1713              		.loc 1 597 0
 1714 0d18 EB6F04E5 		str	r6, [r4, #-4075]
 1715 0d1c 0030A0E3 		mov	r3, #0
 1716              	.LVL73:
 1717              	.L152:
 1718              	.LBB79:
 1719              	.LBB78:
 1720              		.loc 1 262 0
 1721              	@ 262 "main.c" 1
 1722 0d20 0000A0E1 		nop
 1723              	@ 0 "" 2
 1724 0d24 013083E2 		add	r3, r3, #1
 1725 0d28 050053E1 		cmp	r3, r5
 1726 0d2c FBFFFF1A 		bne	.L152
 1727              	.LBE78:
 1728              	.LBE79:
 1729              		.loc 1 599 0
 1730 0d30 020052E3 		cmp	r2, #2
 1731 0d34 0100001A 		bne	.L153
 1732              		.loc 1 600 0
 1733 0d38 FEFFFFEB 		bl	raiseVolume
 1734              	.LVL74:
 1735 0d3c 010000EA 		b	.L154
 1736              	.LVL75:
 1737              	.L153:
 1738              		.loc 1 601 0
 1739 0d40 010052E3 		cmp	r2, #1
 1740              		.loc 1 602 0
 1741 0d44 FEFFFF0B 		bleq	lowerVolume
 1742              	.LVL76:
 1743              	.L154:
 1744              		.loc 1 604 0
 1745 0d48 EF3F14E5 		ldr	r3, [r4, #-4079]
 1746              	.LVL77:
 1747 0d4c 103083E3 		orr	r3, r3, #16
 1748 0d50 EF3F04E5 		str	r3, [r4, #-4079]
 1749              	.L151:
 1750              		.loc 1 596 0
 1751 0d54 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 1752 0d58 020052E3 		cmp	r2, #2
 1753 0d5c EDFFFF9A 		bls	.L155
 1754 0d60 8F0000EA 		b	.L156
 1755              	.L150:
 1756              		.loc 1 607 0
 1757 0d64 030054E3 		cmp	r4, #3
 1758 0d68 5E00001A 		bne	.L157
 1759              		.loc 1 608 0
 1760 0d6c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1761 0d70 0610A0E1 		mov	r1, r6
 1762 0d74 0200A0E3 		mov	r0, #2
 1763 0d78 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1764 0d7c FEFFFFEB 		bl	LCDSetRowColor
 1765              		.loc 1 609 0
 1766 0d80 00608DE5 		str	r6, [sp, #0]
 1767 0d84 003098E5 		ldr	r3, [r8, #0]
 1768 0d88 7C529FE5 		ldr	r5, .L182+20
 1769 0d8c 9C429FE5 		ldr	r4, .L182+56
 1770 0d90 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1771 0d94 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1772 0d98 001094E5 		ldr	r1, [r4, #0]
 1773 0d9c 0230A0E3 		mov	r3, #2
 1774 0da0 7C029FE5 		ldr	r0, .L182+44
 1775 0da4 04C08DE5 		str	ip, [sp, #4]
 1776 0da8 FEFFFFEB 		bl	LCDPrintString
 1777              		.loc 1 611 0
 1778 0dac EF3F17E5 		ldr	r3, [r7, #-4079]
 1779              		.loc 1 610 0
 1780 0db0 70229FE5 		ldr	r2, .L182+48
 1781              		.loc 1 611 0
 1782 0db4 103083E3 		orr	r3, r3, #16
 1783              		.loc 1 610 0
 1784 0db8 0060C2E5 		strb	r6, [r2, #0]
 1785              		.loc 1 612 0
 1786 0dbc 02B0A0E1 		mov	fp, r2
 1787              		.loc 1 624 0
 1788 0dc0 0860A0E1 		mov	r6, r8
 1789              		.loc 1 611 0
 1790 0dc4 EF3F07E5 		str	r3, [r7, #-4079]
 1791              	.LBB80:
 1792              	.LBB81:
 1793              		.loc 1 262 0
 1794 0dc8 64929FE5 		ldr	r9, .L182+60
 1795              	.LBE81:
 1796              	.LBE80:
 1797              		.loc 1 623 0
 1798 0dcc 64A29FE5 		ldr	sl, .L182+64
 1799              		.loc 1 617 0
 1800 0dd0 64829FE5 		ldr	r8, .L182+68
 1801 0dd4 2D0000EA 		b	.L158
 1802              	.L164:
 1803              		.loc 1 613 0
 1804 0dd8 1030A0E3 		mov	r3, #16
 1805 0ddc EB3F07E5 		str	r3, [r7, #-4075]
 1806 0de0 0030A0E3 		mov	r3, #0
 1807              	.LVL78:
 1808              	.L159:
 1809              	.LBB83:
 1810              	.LBB82:
 1811              		.loc 1 262 0
 1812              	@ 262 "main.c" 1
 1813 0de4 0000A0E1 		nop
 1814              	@ 0 "" 2
 1815 0de8 013083E2 		add	r3, r3, #1
 1816 0dec 090053E1 		cmp	r3, r9
 1817 0df0 FBFFFF1A 		bne	.L159
 1818              	.LBE82:
 1819              	.LBE83:
 1820              		.loc 1 615 0
 1821 0df4 020052E3 		cmp	r2, #2
 1822 0df8 0900001A 		bne	.L160
 1823              		.loc 1 617 0
 1824 0dfc 003094E5 		ldr	r3, [r4, #0]
 1825              	.LVL79:
 1826 0e00 080053E1 		cmp	r3, r8
 1827 0e04 023083D2 		addle	r3, r3, #2
 1828 0e08 003084D5 		strle	r3, [r4, #0]
 1829              		.loc 1 618 0
 1830 0e0c 002096E5 		ldr	r2, [r6, #0]
 1831 0e10 0200A0E3 		mov	r0, #2
 1832 0e14 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1833 0e18 0010A0E3 		mov	r1, #0
 1834 0e1c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1835 0e20 0A0000EA 		b	.L179
 1836              	.LVL80:
 1837              	.L160:
 1838              		.loc 1 621 0
 1839 0e24 010052E3 		cmp	r2, #1
 1840 0e28 1300001A 		bne	.L162
 1841              		.loc 1 623 0
 1842 0e2c 003094E5 		ldr	r3, [r4, #0]
 1843              	.LVL81:
 1844 0e30 0A0053E1 		cmp	r3, sl
 1845 0e34 023043C2 		subgt	r3, r3, #2
 1846 0e38 003084C5 		strgt	r3, [r4, #0]
 1847              		.loc 1 624 0
 1848 0e3c 002096E5 		ldr	r2, [r6, #0]
 1849 0e40 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1850 0e44 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1851 0e48 0200A0E3 		mov	r0, #2
 1852 0e4c 0010A0E3 		mov	r1, #0
 1853              	.L179:
 1854 0e50 FEFFFFEB 		bl	LCDSetRowColor
 1855              		.loc 1 625 0
 1856 0e54 0030A0E3 		mov	r3, #0
 1857 0e58 00308DE5 		str	r3, [sp, #0]
 1858 0e5c 003096E5 		ldr	r3, [r6, #0]
 1859 0e60 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1860 0e64 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1861 0e68 001094E5 		ldr	r1, [r4, #0]
 1862 0e6c B0019FE5 		ldr	r0, .L182+44
 1863 0e70 0230A0E3 		mov	r3, #2
 1864 0e74 04C08DE5 		str	ip, [sp, #4]
 1865 0e78 FEFFFFEB 		bl	LCDPrintString
 1866              	.LVL82:
 1867              	.L162:
 1868              		.loc 1 627 0
 1869 0e7c 000094E5 		ldr	r0, [r4, #0]
 1870 0e80 FEFFFFEB 		bl	ns73SetChannel
 1871              	.LVL83:
 1872              		.loc 1 628 0
 1873 0e84 EF3F17E5 		ldr	r3, [r7, #-4079]
 1874 0e88 103083E3 		orr	r3, r3, #16
 1875 0e8c EF3F07E5 		str	r3, [r7, #-4079]
 1876              	.L158:
 1877              		.loc 1 612 0
 1878 0e90 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1879 0e94 020052E3 		cmp	r2, #2
 1880 0e98 CEFFFF9A 		bls	.L164
 1881              		.loc 1 630 0
 1882 0e9c 9C219FE5 		ldr	r2, .L182+72
 1883 0ea0 1C3092E5 		ldr	r3, [r2, #28]
 1884 0ea4 013283E3 		orr	r3, r3, #268435456
 1885 0ea8 1C3082E5 		str	r3, [r2, #28]
 1886              	.LBB84:
 1887              	.LBB85:
 1888              		.loc 1 262 0
 1889 0eac 80219FE5 		ldr	r2, .L182+60
 1890              	.LBE85:
 1891              	.LBE84:
 1892              		.loc 1 630 0
 1893 0eb0 0030A0E3 		mov	r3, #0
 1894              	.LVL84:
 1895              	.L165:
 1896              	.LBB87:
 1897              	.LBB86:
 1898              		.loc 1 262 0
 1899              	@ 262 "main.c" 1
 1900 0eb4 0000A0E1 		nop
 1901              	@ 0 "" 2
 1902 0eb8 013083E2 		add	r3, r3, #1
 1903 0ebc 020053E1 		cmp	r3, r2
 1904 0ec0 FBFFFF1A 		bne	.L165
 1905              	.LBE86:
 1906              	.LBE87:
 1907              		.loc 1 632 0
 1908 0ec4 FEFFFFEB 		bl	ns73Config
 1909              	.LVL85:
 1910              		.loc 1 633 0
 1911 0ec8 60319FE5 		ldr	r3, .L182+56
 1912 0ecc 000093E5 		ldr	r0, [r3, #0]
 1913 0ed0 FEFFFFEB 		bl	ns73SetChannel
 1914              		.loc 1 634 0
 1915 0ed4 64219FE5 		ldr	r2, .L182+72
 1916 0ed8 143092E5 		ldr	r3, [r2, #20]
 1917 0edc 013283E3 		orr	r3, r3, #268435456
 1918 0ee0 143082E5 		str	r3, [r2, #20]
 1919 0ee4 2E0000EA 		b	.L156
 1920              	.L157:
 1921              		.loc 1 636 0
 1922 0ee8 020054E3 		cmp	r4, #2
 1923 0eec 2C00001A 		bne	.L156
 1924              		.loc 1 637 0
 1925 0ef0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1926 0ef4 0610A0E1 		mov	r1, r6
 1927 0ef8 0400A0E1 		mov	r0, r4
 1928 0efc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1929 0f00 FEFFFFEB 		bl	LCDSetRowColor
 1930              		.loc 1 638 0
 1931 0f04 38319FE5 		ldr	r3, .L182+76
 1932 0f08 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1933 0f0c 000051E3 		cmp	r1, #0
 1934 0f10 0700000A 		beq	.L166
 1935              		.loc 1 639 0
 1936 0f14 003098E5 		ldr	r3, [r8, #0]
 1937 0f18 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1938 0f1c 00608DE5 		str	r6, [sp, #0]
 1939 0f20 0610A0E1 		mov	r1, r6
 1940 0f24 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1941 0f28 18019FE5 		ldr	r0, .L182+80
 1942 0f2c 0430A0E1 		mov	r3, r4
 1943 0f30 050000EA 		b	.L180
 1944              	.L166:
 1945              		.loc 1 641 0
 1946 0f34 003098E5 		ldr	r3, [r8, #0]
 1947 0f38 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1948 0f3c 00108DE5 		str	r1, [sp, #0]
 1949 0f40 04019FE5 		ldr	r0, .L182+84
 1950 0f44 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1951 0f48 0430A0E1 		mov	r3, r4
 1952              	.L180:
 1953 0f4c 04C08DE5 		str	ip, [sp, #4]
 1954 0f50 FEFFFFEB 		bl	LCDPrintString
 1955              		.loc 1 644 0
 1956 0f54 0010E0E3 		mvn	r1, #0
 1957 0f58 EF2F11E5 		ldr	r2, [r1, #-4079]
 1958              		.loc 1 643 0
 1959 0f5c C4309FE5 		ldr	r3, .L182+48
 1960              		.loc 1 644 0
 1961 0f60 102082E3 		orr	r2, r2, #16
 1962              		.loc 1 643 0
 1963 0f64 0000A0E3 		mov	r0, #0
 1964 0f68 0000C3E5 		strb	r0, [r3, #0]
 1965              		.loc 1 644 0
 1966 0f6c EF2F01E5 		str	r2, [r1, #-4079]
 1967              		.loc 1 646 0
 1968 0f70 100080E2 		add	r0, r0, #16
 1969              	.LBB88:
 1970              	.LBB89:
 1971              		.loc 1 262 0
 1972 0f74 B8209FE5 		ldr	r2, .L182+60
 1973 0f78 060000EA 		b	.L168
 1974              	.LVL86:
 1975              	.L169:
 1976              	@ 262 "main.c" 1
 1977 0f7c 0000A0E1 		nop
 1978              	@ 0 "" 2
 1979 0f80 013083E2 		add	r3, r3, #1
 1980 0f84 020053E1 		cmp	r3, r2
 1981 0f88 FBFFFF1A 		bne	.L169
 1982              	.LBE89:
 1983              	.LBE88:
 1984              		.loc 1 654 0
 1985 0f8c EF3F11E5 		ldr	r3, [r1, #-4079]
 1986              	.LVL87:
 1987 0f90 103083E3 		orr	r3, r3, #16
 1988 0f94 EF3F01E5 		str	r3, [r1, #-4079]
 1989              	.L168:
 1990              		.loc 1 646 0
 1991 0f98 EB0F01E5 		str	r0, [r1, #-4075]
 1992 0f9c 0030A0E3 		mov	r3, #0
 1993              	.LVL88:
 1994 0fa0 F5FFFFEA 		b	.L169
 1995              	.LVL89:
 1996              	.L156:
 1997              		.loc 1 657 0
 1998 0fa4 58309FE5 		ldr	r3, .L182+12
 1999 0fa8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2000 0fac 000053E3 		cmp	r3, #0
 2001 0fb0 44009FE5 		ldr	r0, .L182+4
 2002 0fb4 0200000A 		beq	.L170
 2003 0fb8 000090E5 		ldr	r0, [r0, #0]
 2004 0fbc FEFFFFEB 		bl	quickClear
 2005 0fc0 020000EA 		b	.L171
 2006              	.L170:
 2007              		.loc 1 658 0
 2008 0fc4 003090E5 		ldr	r3, [r0, #0]
 2009 0fc8 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2010 0fcc FEFFFFEB 		bl	LCDClear
 2011              	.L171:
 2012              		.loc 1 659 0
 2013 0fd0 24309FE5 		ldr	r3, .L182+4
 2014 0fd4 000093E5 		ldr	r0, [r3, #0]
 2015              	.L181:
 2016 0fd8 FEFFFFEB 		bl	printMenu
 2017              	.L147:
 2018              		.loc 1 661 0
 2019 0fdc 0020E0E3 		mvn	r2, #0
 2020 0fe0 EF3F12E5 		ldr	r3, [r2, #-4079]
 2021 0fe4 103083E3 		orr	r3, r3, #16
 2022 0fe8 EF3F02E5 		str	r3, [r2, #-4079]
 2023              		.loc 1 662 0
 2024 0fec 08D08DE2 		add	sp, sp, #8
 2025 0ff0 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2026 0ff4 1EFF2FE1 		bx	lr
 2027              	.L183:
 2028              		.align	2
 2029              	.L182:
 2030 0ff8 A0252600 		.word	2500000
 2031 0ffc 7C040000 		.word	current_display
 2032 1000 74000000 		.word	file_manager
 2033 1004 01000000 		.word	file_is_open
 2034 1008 14000000 		.word	current_song
 2035 100c 00000000 		.word	white
 2036 1010 00000000 		.word	black
 2037 1014 00000000 		.word	NotFound
 2038 1018 80969800 		.word	10000000
 2039 101c 78020000 		.word	settings_menu
 2040 1020 00000000 		.word	volume_setting
 2041 1024 00000000 		.word	.LC0
 2042 1028 08000000 		.word	button_pressed
 2043 102c 60E31600 		.word	1500000
 2044 1030 00000000 		.word	radio_channel
 2045 1034 40420F00 		.word	1000000
 2046 1038 75030000 		.word	885
 2047 103c 32040000 		.word	1074
 2048 1040 008002E0 		.word	-536707072
 2049 1044 00000000 		.word	radio_enable
 2050 1048 07000000 		.word	.LC2
 2051 104c 03000000 		.word	.LC1
 2052              	.LFE16:
 2054              		.section	.rodata.str1.1
 2055              	.LC3:
 2056 000a 53442049 		.ascii	"SD Init Error\012\000"
 2056      6E697420 
 2056      4572726F 
 2056      720A00
 2057              	.LC4:
 2058 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 2058      70656E52 
 2058      6F6F7420 
 2058      4572726F 
 2058      720A00
 2059              		.text
 2060              		.align	2
 2061              		.global	bootUp
 2063              	bootUp:
 2064              	.LFB4:
 2065              		.loc 1 269 0
 2066              		@ Function supports interworking.
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069 1050 04E02DE5 		str	lr, [sp, #-4]!
 2070              	.LCFI27:
 2071              		.loc 1 270 0
 2072 1054 B0019FE5 		ldr	r0, .L190
 2073 1058 FEFFFFEB 		bl	rprintf_devopen
 2074              	.LBB90:
 2075              	.LBB91:
 2076              		.loc 1 262 0
 2077 105c AC219FE5 		ldr	r2, .L190+4
 2078              	.LBE91:
 2079              	.LBE90:
 2080              		.loc 1 270 0
 2081 1060 0030A0E3 		mov	r3, #0
 2082              	.LVL90:
 2083              	.L185:
 2084              	.LBB93:
 2085              	.LBB92:
 2086              		.loc 1 262 0
 2087              	@ 262 "main.c" 1
 2088 1064 0000A0E1 		nop
 2089              	@ 0 "" 2
 2090 1068 013083E2 		add	r3, r3, #1
 2091 106c 020053E1 		cmp	r3, r2
 2092 1070 FBFFFF1A 		bne	.L185
 2093              	.LBE92:
 2094              	.LBE93:
 2095              		.loc 1 274 0
 2096 1074 FEFFFFEB 		bl	sd_raw_init
 2097              	.LVL91:
 2098 1078 000050E3 		cmp	r0, #0
 2099              		.loc 1 276 0
 2100 107c 90019F05 		ldreq	r0, .L190+8
 2101 1080 FEFFFF0B 		bleq	rprintf
 2102              	.L186:
 2103              		.loc 1 278 0
 2104 1084 FEFFFFEB 		bl	openroot
 2105 1088 000050E3 		cmp	r0, #0
 2106              		.loc 1 280 0
 2107 108c 84019F15 		ldrne	r0, .L190+12
 2108 1090 FEFFFF1B 		blne	rprintf
 2109              	.L187:
 2110              		.loc 1 285 0
 2111 1094 80219FE5 		ldr	r2, .L190+16
 2112 1098 083092E5 		ldr	r3, [r2, #8]
 2113 109c 013683E3 		orr	r3, r3, #1048576
 2114 10a0 083082E5 		str	r3, [r2, #8]
 2115              		.loc 1 286 0
 2116 10a4 083092E5 		ldr	r3, [r2, #8]
 2117 10a8 0236C3E3 		bic	r3, r3, #2097152
 2118 10ac 083082E5 		str	r3, [r2, #8]
 2119              		.loc 1 287 0
 2120 10b0 68119FE5 		ldr	r1, .L190+20
 2121 10b4 043091E5 		ldr	r3, [r1, #4]
 2122 10b8 033B83E3 		orr	r3, r3, #3072
 2123 10bc 043081E5 		str	r3, [r1, #4]
 2124              		.loc 1 288 0
 2125 10c0 183092E5 		ldr	r3, [r2, #24]
 2126 10c4 013483E3 		orr	r3, r3, #16777216
 2127 10c8 033883E3 		orr	r3, r3, #196608
 2128 10cc 183082E5 		str	r3, [r2, #24]
 2129              		.loc 1 291 0
 2130 10d0 183092E5 		ldr	r3, [r2, #24]
 2131 10d4 023483E3 		orr	r3, r3, #33554432
 2132 10d8 183082E5 		str	r3, [r2, #24]
 2133              		.loc 1 292 0
 2134 10dc 183092E5 		ldr	r3, [r2, #24]
 2135 10e0 013283E3 		orr	r3, r3, #268435456
 2136 10e4 183082E5 		str	r3, [r2, #24]
 2137              		.loc 1 295 0
 2138 10e8 083092E5 		ldr	r3, [r2, #8]
 2139 10ec 803083E3 		orr	r3, r3, #128
 2140 10f0 083082E5 		str	r3, [r2, #8]
 2141              		.loc 1 298 0
 2142 10f4 083092E5 		ldr	r3, [r2, #8]
 2143 10f8 033B83E3 		orr	r3, r3, #3072
 2144 10fc 083082E5 		str	r3, [r2, #8]
 2145              		.loc 1 299 0
 2146 1100 003091E5 		ldr	r3, [r1, #0]
 2147 1104 CF3483E3 		orr	r3, r3, #-822083584
 2148 1108 003081E5 		str	r3, [r1, #0]
 2149              		.loc 1 300 0
 2150 110c 033BA0E3 		mov	r3, #3072
 2151 1110 0C3082E5 		str	r3, [r2, #12]
 2152              		.loc 1 303 0
 2153 1114 083092E5 		ldr	r3, [r2, #8]
 2154 1118 033783E3 		orr	r3, r3, #786432
 2155 111c 083082E5 		str	r3, [r2, #8]
 2156              		.loc 1 306 0
 2157 1120 083092E5 		ldr	r3, [r2, #8]
 2158 1124 073283E3 		orr	r3, r3, #1879048192
 2159 1128 083082E5 		str	r3, [r2, #8]
 2160              		.loc 1 307 0
 2161 112c 0232A0E3 		mov	r3, #536870912
 2162 1130 043082E5 		str	r3, [r2, #4]
 2163              		.loc 1 308 0
 2164 1134 033083E0 		add	r3, r3, r3
 2165 1138 043082E5 		str	r3, [r2, #4]
 2166              		.loc 1 309 0
 2167 113c 0D3283E2 		add	r3, r3, #-805306368
 2168 1140 043082E5 		str	r3, [r2, #4]
 2169              		.loc 1 312 0
 2170 1144 183092E5 		ldr	r3, [r2, #24]
 2171 1148 0E36C3E3 		bic	r3, r3, #14680064
 2172 114c 183082E5 		str	r3, [r2, #24]
 2173              		.loc 1 314 0
 2174 1150 083092E5 		ldr	r3, [r2, #8]
 2175 1154 0235C3E3 		bic	r3, r3, #8388608
 2176 1158 083082E5 		str	r3, [r2, #8]
 2177              		.loc 1 317 0
 2178 115c C0309FE5 		ldr	r3, .L190+24
 2179 1160 0120A0E3 		mov	r2, #1
 2180              		.loc 1 318 0
 2181 1164 0010E0E3 		mvn	r1, #0
 2182              		.loc 1 317 0
 2183 1168 002183E5 		str	r2, [r3, #256]
 2184              		.loc 1 318 0
 2185 116c 3030E0E3 		mvn	r3, #48
 2186 1170 F33F01E5 		str	r3, [r1, #-4083]
 2187              		.loc 1 319 0
 2188 1174 413083E2 		add	r3, r3, #65
 2189 1178 EF3F01E5 		str	r3, [r1, #-4079]
 2190              		.loc 1 320 0
 2191 117c 153083E2 		add	r3, r3, #21
 2192 1180 FF3D01E5 		str	r3, [r1, #-3583]
 2193              		.loc 1 321 0
 2194 1184 9C309FE5 		ldr	r3, .L190+28
 2195 1188 FF3E01E5 		str	r3, [r1, #-3839]
 2196              		.loc 1 322 0
 2197 118c 2430A0E3 		mov	r3, #36
 2198 1190 FB3D01E5 		str	r3, [r1, #-3579]
 2199              		.loc 1 323 0
 2200 1194 90309FE5 		ldr	r3, .L190+32
 2201              		.loc 1 326 0
 2202 1198 90009FE5 		ldr	r0, .L190+36
 2203              		.loc 1 323 0
 2204 119c FB3E01E5 		str	r3, [r1, #-3835]
 2205              		.loc 1 326 0
 2206 11a0 4B3FA0E3 		mov	r3, #300
 2207 11a4 0C3080E5 		str	r3, [r0, #12]
 2208              		.loc 1 327 0
 2209 11a8 043090E5 		ldr	r3, [r0, #4]
 2210 11ac 013083E3 		orr	r3, r3, #1
 2211 11b0 043080E5 		str	r3, [r0, #4]
 2212              		.loc 1 328 0
 2213 11b4 00C0A0E3 		mov	ip, #0
 2214              		.loc 1 329 0
 2215 11b8 0330A0E3 		mov	r3, #3
 2216              		.loc 1 328 0
 2217 11bc 70C080E5 		str	ip, [r0, #112]
 2218              		.loc 1 333 0
 2219 11c0 6C209FE5 		ldr	r2, .L190+40
 2220              		.loc 1 329 0
 2221 11c4 143080E5 		str	r3, [r0, #20]
 2222              		.loc 1 330 0
 2223 11c8 FA3FA0E3 		mov	r3, #1000
 2224 11cc 183080E5 		str	r3, [r0, #24]
 2225              		.loc 1 333 0
 2226 11d0 323E43E2 		sub	r3, r3, #800
 2227 11d4 0C3082E5 		str	r3, [r2, #12]
 2228              		.loc 1 334 0
 2229 11d8 043092E5 		ldr	r3, [r2, #4]
 2230 11dc 013083E3 		orr	r3, r3, #1
 2231 11e0 043082E5 		str	r3, [r2, #4]
 2232              		.loc 1 339 0
 2233 11e4 4C109FE5 		ldr	r1, .L190+44
 2234              		.loc 1 336 0
 2235 11e8 0A3CA0E3 		mov	r3, #2560
 2236              		.loc 1 335 0
 2237 11ec 70C082E5 		str	ip, [r2, #112]
 2238              		.loc 1 336 0
 2239 11f0 283082E5 		str	r3, [r2, #40]
 2240              		.loc 1 339 0
 2241 11f4 273D43E2 		sub	r3, r3, #2496
 2242 11f8 0C3081E5 		str	r3, [r1, #12]
 2243              		.loc 1 340 0
 2244 11fc 2030A0E3 		mov	r3, #32
 2245 1200 003081E5 		str	r3, [r1, #0]
 2246              		.loc 1 341 0
 2247 1204 04E09DE4 		ldr	lr, [sp], #4
 2248 1208 1EFF2FE1 		bx	lr
 2249              	.L191:
 2250              		.align	2
 2251              	.L190:
 2252 120c 00000000 		.word	putc_serial0
 2253 1210 A0860100 		.word	100000
 2254 1214 0A000000 		.word	.LC3
 2255 1218 19000000 		.word	.LC4
 2256 121c 008002E0 		.word	-536707072
 2257 1220 00C002E0 		.word	-536690688
 2258 1224 00C01FE0 		.word	-534790144
 2259 1228 00000000 		.word	timer1ISR
 2260 122c 00000000 		.word	timer0ISR
 2261 1230 004000E0 		.word	-536854528
 2262 1234 008000E0 		.word	-536838144
 2263 1238 000002E0 		.word	-536739840
 2264              	.LFE4:
 2266              		.align	2
 2268              	timer0ISR:
 2269              	.LFB6:
 2270              		.loc 1 362 0
 2271              		@ Function supports interworking.
 2272              		@ args = 0, pretend = 0, frame = 0
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 2274              	.LBB94:
 2275              	.LBB95:
 2276              		.loc 1 378 0
 2277 123c A8209FE5 		ldr	r2, .L203
 2278 1240 103092E5 		ldr	r3, [r2, #16]
 2279 1244 020513E3 		tst	r3, #8388608
 2280              	.LBE95:
 2281              	.LBE94:
 2282              		.loc 1 362 0
 2283 1248 04E02DE5 		str	lr, [sp, #-4]!
 2284              	.LCFI28:
 2285              	.LBB97:
 2286              	.LBB96:
 2287              		.loc 1 378 0
 2288 124c 0220A003 		moveq	r2, #2
 2289 1250 0700000A 		beq	.L194
 2290              		.loc 1 379 0
 2291 1254 103092E5 		ldr	r3, [r2, #16]
 2292 1258 020613E3 		tst	r3, #2097152
 2293 125c 0120A003 		moveq	r2, #1
 2294 1260 0300000A 		beq	.L194
 2295              		.loc 1 380 0
 2296 1264 103092E5 		ldr	r3, [r2, #16]
 2297 1268 010513E3 		tst	r3, #4194304
 2298 126c 0320A003 		moveq	r2, #3
 2299 1270 0020A013 		movne	r2, #0
 2300              	.L194:
 2301              	.LBE96:
 2302              	.LBE97:
 2303              		.loc 1 363 0
 2304 1274 74309FE5 		ldr	r3, .L203+4
 2305 1278 0020C3E5 		strb	r2, [r3, #0]
 2306              		.loc 1 364 0
 2307 127c FEFFFFEB 		bl	MMA_get_y
 2308              		.loc 1 365 0
 2309 1280 6C309FE5 		ldr	r3, .L203+8
 2310 1284 002093E5 		ldr	r2, [r3, #0]
 2311              		.loc 1 364 0
 2312 1288 68309FE5 		ldr	r3, .L203+12
 2313              		.loc 1 365 0
 2314 128c AF0F52E3 		cmp	r2, #700
 2315              		.loc 1 364 0
 2316 1290 000083E5 		str	r0, [r3, #0]
 2317              		.loc 1 365 0
 2318 1294 010000AA 		bge	.L197
 2319 1298 AF0F50E3 		cmp	r0, #700
 2320 129c 030000CA 		bgt	.L198
 2321              	.L197:
 2322 12a0 AF0F52E3 		cmp	r2, #700
 2323 12a4 030000DA 		ble	.L199
 2324 12a8 AF0F50E3 		cmp	r0, #700
 2325 12ac 010000AA 		bge	.L199
 2326              	.L198:
 2327 12b0 0120A0E3 		mov	r2, #1
 2328 12b4 000000EA 		b	.L202
 2329              	.L199:
 2330              		.loc 1 366 0
 2331 12b8 0020A0E3 		mov	r2, #0
 2332              	.L202:
 2333 12bc 38309FE5 		ldr	r3, .L203+16
 2334 12c0 0020C3E5 		strb	r2, [r3, #0]
 2335              		.loc 1 368 0
 2336 12c4 34309FE5 		ldr	r3, .L203+20
 2337 12c8 FF20A0E3 		mov	r2, #255
 2338 12cc 002083E5 		str	r2, [r3, #0]
 2339              		.loc 1 367 0
 2340 12d0 1C309FE5 		ldr	r3, .L203+8
 2341              		.loc 1 369 0
 2342 12d4 0020A0E3 		mov	r2, #0
 2343              		.loc 1 367 0
 2344 12d8 000083E5 		str	r0, [r3, #0]
 2345              		.loc 1 369 0
 2346 12dc 0030E0E3 		mvn	r3, #0
 2347 12e0 CF2F03E5 		str	r2, [r3, #-4047]
 2348              		.loc 1 370 0
 2349 12e4 04E09DE4 		ldr	lr, [sp], #4
 2350 12e8 1EFF2FE1 		bx	lr
 2351              	.L204:
 2352              		.align	2
 2353              	.L203:
 2354 12ec 008002E0 		.word	-536707072
 2355 12f0 08000000 		.word	button_pressed
 2356 12f4 0C000000 		.word	prev_position
 2357 12f8 10000000 		.word	cur_position
 2358 12fc 09000000 		.word	update_screen
 2359 1300 004000E0 		.word	-536854528
 2360              	.LFE6:
 2362              		.global	__divsi3
 2363              		.global	__modsi3
 2364              		.section	.rodata.str1.1
 2365              	.LC5:
 2366 002c 474F2047 		.ascii	"GO GO MP3!\000"
 2366      4F204D50 
 2366      332100
 2367              		.text
 2368              		.align	2
 2369              		.global	main
 2371              	main:
 2372              	.LFB2:
 2373              		.loc 1 94 0
 2374              		@ Function supports interworking.
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 1, uses_anonymous_args = 0
 2377 1304 0DC0A0E1 		mov	ip, sp
 2378              	.LCFI29:
 2379 1308 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2380              	.LCFI30:
 2381 130c 04B04CE2 		sub	fp, ip, #4
 2382              	.LCFI31:
 2383 1310 08D04DE2 		sub	sp, sp, #8
 2384              	.LCFI32:
 2385              		.loc 1 104 0
 2386 1314 FEFFFFEB 		bl	bootUp
 2387              		.loc 1 107 0
 2388 1318 FEFFFFEB 		bl	vs1002Config
 2389              		.loc 1 108 0
 2390 131c FEFFFFEB 		bl	vs1002Reset
 2391              		.loc 1 109 0
 2392 1320 FEFFFFEB 		bl	vs1002Init
 2393              	.LBB98:
 2394              		.loc 1 110 0
 2395 1324 3000A0E3 		mov	r0, #48
 2396 1328 FEFFFFEB 		bl	vs1002SetVolume
 2397 132c 3000A0E3 		mov	r0, #48
 2398 1330 FEFFFFEB 		bl	vs1002SetVolume
 2399 1334 3000A0E3 		mov	r0, #48
 2400 1338 FEFFFFEB 		bl	vs1002SetVolume
 2401 133c 3000A0E3 		mov	r0, #48
 2402 1340 FEFFFFEB 		bl	vs1002SetVolume
 2403 1344 3000A0E3 		mov	r0, #48
 2404 1348 FEFFFFEB 		bl	vs1002SetVolume
 2405              	.LBE98:
 2406              		.loc 1 111 0
 2407 134c FEFFFFEB 		bl	vs1002Finish
 2408              		.loc 1 114 0
 2409 1350 FEFFFFEB 		bl	LCDInit
 2410              		.loc 1 115 0
 2411 1354 14359FE5 		ldr	r3, .L241
 2412 1358 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2413 135c FEFFFFEB 		bl	LCDClear
 2414              		.loc 1 116 0
 2415 1360 FEFFFFEB 		bl	LCDPrintLogo
 2416              		.loc 1 119 0
 2417 1364 FA0FA0E3 		mov	r0, #1000
 2418 1368 FEFFFFEB 		bl	initializeRadio
 2419              		.loc 1 122 0
 2420 136c 00259FE5 		ldr	r2, .L241+4
 2421 1370 003092E5 		ldr	r3, [r2, #0]
 2422 1374 153C83E3 		orr	r3, r3, #5376
 2423 1378 003082E5 		str	r3, [r2, #0]
 2424 137c 0050A0E3 		mov	r5, #0
 2425              	.LVL92:
 2426              	.L206:
 2427              		.loc 1 125 0
 2428 1380 0000A0E3 		mov	r0, #0
 2429 1384 FEFFFFEB 		bl	rootDirectory_files_stream
 2430 1388 006050E2 		subs	r6, r0, #0
 2431              		.loc 1 124 0
 2432 138c 015085E2 		add	r5, r5, #1
 2433              		.loc 1 125 0
 2434 1390 FAFFFF1A 		bne	.L206
 2435              		.loc 1 126 0
 2436 1394 063085E2 		add	r3, r5, #6
 2437 1398 0330C3E3 		bic	r3, r3, #3
 2438 139c 0DD063E0 		rsb	sp, r3, sp
 2439 13a0 08708DE2 		add	r7, sp, #8
 2440              		.loc 1 127 0
 2441 13a4 0700A0E1 		mov	r0, r7
 2442 13a8 011085E2 		add	r1, r5, #1
 2443 13ac FEFFFFEB 		bl	rootDirectory_files
 2444              		.loc 1 128 0
 2445 13b0 8032A0E1 		mov	r3, r0, asl #5
 2446 13b4 043083E2 		add	r3, r3, #4
 2447 13b8 0DD063E0 		rsb	sp, r3, sp
 2448              		.loc 1 127 0
 2449 13bc B4349FE5 		ldr	r3, .L241+8
 2450 13c0 0040A0E1 		mov	r4, r0
 2451              	.LBB99:
 2452              		.loc 1 132 0
 2453 13c4 0600A0E1 		mov	r0, r6
 2454              	.LVL93:
 2455              	.LBE99:
 2456              		.loc 1 127 0
 2457 13c8 004083E5 		str	r4, [r3, #0]
 2458              		.loc 1 128 0
 2459 13cc 08608DE2 		add	r6, sp, #8
 2460              	.LBB101:
 2461              		.loc 1 132 0
 2462 13d0 00E0A0E1 		mov	lr, r0
 2463              	.LVL94:
 2464 13d4 0080A0E1 		mov	r8, r0
 2465              	.LVL95:
 2466 13d8 100000EA 		b	.L207
 2467              	.LVL96:
 2468              	.L213:
 2469 13dc 0030A0E3 		mov	r3, #0
 2470              	.LBB100:
 2471              		.loc 1 142 0
 2472 13e0 8EC2A0E1 		mov	ip, lr, asl #5
 2473              	.L212:
 2474              		.loc 1 134 0
 2475 13e4 050050E1 		cmp	r0, r5
 2476              		.loc 1 142 0
 2477 13e8 03208CE0 		add	r2, ip, r3
 2478 13ec 0280C687 		strhib	r8, [r6, r2]
 2479              		.loc 1 134 0
 2480 13f0 0600008A 		bhi	.L211
 2481              	.LVL97:
 2482              		.loc 1 135 0
 2483 13f4 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 2484 13f8 2C0051E3 		cmp	r1, #44
 2485              		.loc 1 136 0
 2486 13fc 0230A001 		moveq	r3, r2
 2487              		.loc 1 139 0
 2488 1400 0210C617 		strneb	r1, [r6, r2]
 2489              		.loc 1 136 0
 2490 1404 0380C607 		streqb	r8, [r6, r3]
 2491              		.loc 1 140 0
 2492 1408 010080E2 		add	r0, r0, #1
 2493              		.loc 1 136 0
 2494 140c 1F30A003 		moveq	r3, #31
 2495              	.LVL98:
 2496              	.L211:
 2497              		.loc 1 133 0
 2498 1410 013083E2 		add	r3, r3, #1
 2499 1414 200053E3 		cmp	r3, #32
 2500 1418 F1FFFF1A 		bne	.L212
 2501              	.LBE100:
 2502              		.loc 1 132 0
 2503 141c 01E08EE2 		add	lr, lr, #1
 2504              	.LVL99:
 2505              	.L207:
 2506 1420 04005EE1 		cmp	lr, r4
 2507 1424 ECFFFFBA 		blt	.L213
 2508              	.LBE101:
 2509              		.loc 1 148 0
 2510 1428 0400A0E1 		mov	r0, r4
 2511              	.LVL100:
 2512 142c 0F10A0E3 		mov	r1, #15
 2513 1430 FEFFFFEB 		bl	__divsi3
 2514              	.LVL101:
 2515              		.loc 1 149 0
 2516 1434 3C349FE5 		ldr	r3, .L241+8
 2517              		.loc 1 148 0
 2518 1438 FF4000E2 		and	r4, r0, #255
 2519 143c 38549FE5 		ldr	r5, .L241+12
 2520              	.LVL102:
 2521              		.loc 1 149 0
 2522 1440 000093E5 		ldr	r0, [r3, #0]
 2523              		.loc 1 148 0
 2524 1444 013044E2 		sub	r3, r4, #1
 2525 1448 0530C5E5 		strb	r3, [r5, #5]
 2526              		.loc 1 149 0
 2527 144c 0F10A0E3 		mov	r1, #15
 2528 1450 FEFFFFEB 		bl	__modsi3
 2529              		.loc 1 152 0
 2530 1454 14349FE5 		ldr	r3, .L241
 2531 1458 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2532              		.loc 1 153 0
 2533 145c 1C349FE5 		ldr	r3, .L241+16
 2534              		.loc 1 149 0
 2535 1460 000050E3 		cmp	r0, #0
 2536 1464 0540C515 		strneb	r4, [r5, #5]
 2537              		.loc 1 153 0
 2538 1468 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2539              		.loc 1 151 0
 2540 146c 08449FE5 		ldr	r4, .L241+12
 2541 1470 0050A0E3 		mov	r5, #0
 2542              		.loc 1 153 0
 2543 1474 0430C4E5 		strb	r3, [r4, #4]
 2544              		.loc 1 156 0
 2545 1478 0130A0E3 		mov	r3, #1
 2546              		.loc 1 152 0
 2547 147c 0320C4E5 		strb	r2, [r4, #3]
 2548              		.loc 1 158 0
 2549 1480 0400A0E1 		mov	r0, r4
 2550 1484 0610A0E1 		mov	r1, r6
 2551              		.loc 1 156 0
 2552 1488 0030C4E5 		strb	r3, [r4, #0]
 2553              		.loc 1 151 0
 2554 148c 0250C4E5 		strb	r5, [r4, #2]
 2555              		.loc 1 155 0
 2556 1490 0650C4E5 		strb	r5, [r4, #6]
 2557              		.loc 1 157 0
 2558 1494 085084E5 		str	r5, [r4, #8]
 2559              		.loc 1 158 0
 2560 1498 FEFFFFEB 		bl	getNewFiles
 2561              	.LBB102:
 2562              		.loc 1 159 0
 2563 149c E0239FE5 		ldr	r2, .L241+20
 2564              	.L215:
 2565 14a0 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 2566              	.LVL103:
 2567 14a4 015085E2 		add	r5, r5, #1
 2568 14a8 160055E3 		cmp	r5, #22
 2569 14ac EC31C4E5 		strb	r3, [r4, #492]
 2570 14b0 014084E2 		add	r4, r4, #1
 2571 14b4 F9FFFF1A 		bne	.L215
 2572              	.LBE102:
 2573              		.loc 1 162 0
 2574 14b8 C8039FE5 		ldr	r0, .L241+24
 2575 14bc FEFFFFEB 		bl	fillSettings
 2576              		.loc 1 166 0
 2577 14c0 AC139FE5 		ldr	r1, .L241+4
 2578 14c4 003091E5 		ldr	r3, [r1, #0]
 2579              		.loc 1 165 0
 2580 14c8 AC239FE5 		ldr	r2, .L241+12
 2581 14cc B8439FE5 		ldr	r4, .L241+28
 2582              		.loc 1 166 0
 2583 14d0 FF3DC3E3 		bic	r3, r3, #16320
 2584 14d4 3030C3E3 		bic	r3, r3, #48
 2585              		.loc 1 167 0
 2586 14d8 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 2587              		.loc 1 165 0
 2588 14dc 002084E5 		str	r2, [r4, #0]
 2589              		.loc 1 166 0
 2590 14e0 003081E5 		str	r3, [r1, #0]
 2591              		.loc 1 167 0
 2592 14e4 FEFFFFEB 		bl	LCDClear
 2593              		.loc 1 168 0
 2594 14e8 000094E5 		ldr	r0, [r4, #0]
 2595 14ec FEFFFFEB 		bl	printMenu
 2596              		.loc 1 171 0
 2597 14f0 003094E5 		ldr	r3, [r4, #0]
 2598 14f4 0010A0E3 		mov	r1, #0
 2599 14f8 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2600 14fc 00108DE5 		str	r1, [sp, #0]
 2601 1500 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2602 1504 84039FE5 		ldr	r0, .L241+32
 2603 1508 0230A0E3 		mov	r3, #2
 2604 150c 04C08DE5 		str	ip, [sp, #4]
 2605 1510 FEFFFFEB 		bl	LCDPrintString
 2606              		.loc 1 175 0
 2607 1514 78739FE5 		ldr	r7, .L241+36
 2608              		.loc 1 177 0
 2609 1518 50939FE5 		ldr	r9, .L241
 2610              		.loc 1 187 0
 2611 151c 74839FE5 		ldr	r8, .L241+40
 2612              	.LVL104:
 2613              	.LBB103:
 2614              	.LBB104:
 2615              		.loc 1 262 0
 2616 1520 74A39FE5 		ldr	sl, .L241+44
 2617              	.L233:
 2618              	.LBE104:
 2619              	.LBE103:
 2620              		.loc 1 175 0
 2621 1524 003097E5 		ldr	r3, [r7, #0]
 2622 1528 020513E3 		tst	r3, #8388608
 2623 152c 2100000A 		beq	.L216
 2624              		.loc 1 177 0
 2625 1530 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 2626 1534 FEFFFFEB 		bl	LCDClear
 2627              		.loc 1 178 0
 2628 1538 0430A0E3 		mov	r3, #4
 2629 153c 00308DE5 		str	r3, [sp, #0]
 2630 1540 003094E5 		ldr	r3, [r4, #0]
 2631 1544 34139FE5 		ldr	r1, .L241+16
 2632 1548 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2633 154c 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2634 1550 0730A0E3 		mov	r3, #7
 2635 1554 44039FE5 		ldr	r0, .L241+48
 2636 1558 0010A0E3 		mov	r1, #0
 2637 155c 04C08DE5 		str	ip, [sp, #4]
 2638 1560 FEFFFFEB 		bl	LCDPrintString
 2639 1564 0030A0E3 		mov	r3, #0
 2640              	.LVL105:
 2641              	.L217:
 2642              	.LBB106:
 2643              	.LBB107:
 2644              		.loc 1 262 0
 2645              	@ 262 "main.c" 1
 2646 1568 0000A0E1 		nop
 2647              	@ 0 "" 2
 2648 156c 30239FE5 		ldr	r2, .L241+52
 2649 1570 013083E2 		add	r3, r3, #1
 2650 1574 020053E1 		cmp	r3, r2
 2651 1578 FAFFFF1A 		bne	.L217
 2652              	.LBE107:
 2653              	.LBE106:
 2654              		.loc 1 180 0
 2655 157c 3020A0E3 		mov	r2, #48
 2656 1580 0030E0E3 		mvn	r3, #0
 2657              	.LVL106:
 2658 1584 EB2F03E5 		str	r2, [r3, #-4075]
 2659              		.loc 1 181 0
 2660 1588 FEFFFFEB 		bl	main_msc
 2661              	.LBB108:
 2662              	.LBB109:
 2663              		.loc 1 688 0
 2664 158c 0E22A0E3 		mov	r2, #-536870912
 2665 1590 003092E5 		ldr	r3, [r2, #0]
 2666 1594 033083E3 		orr	r3, r3, #3
 2667 1598 003082E5 		str	r3, [r2, #0]
 2668              		.loc 1 689 0
 2669 159c AA10A0E3 		mov	r1, #170
 2670              		.loc 1 690 0
 2671 15a0 5530A0E3 		mov	r3, #85
 2672              		.loc 1 689 0
 2673 15a4 081082E5 		str	r1, [r2, #8]
 2674              		.loc 1 690 0
 2675 15a8 083082E5 		str	r3, [r2, #8]
 2676              		.loc 1 692 0
 2677 15ac 0030A0E3 		mov	r3, #0
 2678              		.loc 1 691 0
 2679 15b0 081082E5 		str	r1, [r2, #8]
 2680              		.loc 1 692 0
 2681 15b4 083082E5 		str	r3, [r2, #8]
 2682              	.L216:
 2683              	.LBE109:
 2684              	.LBE108:
 2685              		.loc 1 187 0
 2686 15b8 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2687 15bc 000053E3 		cmp	r3, #0
 2688 15c0 4300001A 		bne	.L218
 2689 15c4 DC329FE5 		ldr	r3, .L241+56
 2690 15c8 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 2691              	.LVL107:
 2692 15cc 000055E3 		cmp	r5, #0
 2693 15d0 3F00001A 		bne	.L218
 2694              		.loc 1 189 0
 2695 15d4 D0329FE5 		ldr	r3, .L241+60
 2696 15d8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2697 15dc 000053E3 		cmp	r3, #0
 2698 15e0 3B00000A 		beq	.L218
 2699              		.loc 1 190 0
 2700 15e4 2020A0E3 		mov	r2, #32
 2701 15e8 0030E0E3 		mvn	r3, #0
 2702 15ec EB2F03E5 		str	r2, [r3, #-4075]
 2703              		.loc 1 191 0
 2704 15f0 B8029FE5 		ldr	r0, .L241+64
 2705 15f4 FEFFFFEB 		bl	closeSong
 2706              		.loc 1 195 0
 2707 15f8 7C129FE5 		ldr	r1, .L241+12
 2708              		.loc 1 192 0
 2709 15fc B0329FE5 		ldr	r3, .L241+68
 2710              		.loc 1 195 0
 2711 1600 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2712              		.loc 1 192 0
 2713 1604 0050C3E5 		strb	r5, [r3, #0]
 2714              		.loc 1 195 0
 2715 1608 0E0052E3 		cmp	r2, #14
 2716              		.loc 1 193 0
 2717 160c 0232A0E3 		mov	r3, #536870912
 2718 1610 043087E5 		str	r3, [r7, #4]
 2719              		.loc 1 196 0
 2720 1614 01208292 		addls	r2, r2, #1
 2721              		.loc 1 197 0
 2722 1618 08309195 		ldrls	r3, [r1, #8]
 2723              		.loc 1 196 0
 2724 161c 0020C195 		strlsb	r2, [r1, #0]
 2725              		.loc 1 200 0
 2726 1620 54C29FE5 		ldr	ip, .L241+12
 2727              		.loc 1 197 0
 2728 1624 01308392 		addls	r3, r3, #1
 2729 1628 08308195 		strls	r3, [r1, #8]
 2730              		.loc 1 200 0
 2731 162c 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 2732 1630 0F0053E3 		cmp	r3, #15
 2733 1634 0C00001A 		bne	.L220
 2734 1638 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 2735 163c 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 2736 1640 030052E1 		cmp	r2, r3
 2737 1644 0800002A 		bcs	.L220
 2738              		.loc 1 203 0
 2739 1648 013082E2 		add	r3, r2, #1
 2740              		.loc 1 201 0
 2741 164c 0120A0E3 		mov	r2, #1
 2742 1650 0020CCE5 		strb	r2, [ip, #0]
 2743              		.loc 1 202 0
 2744 1654 0020A0E3 		mov	r2, #0
 2745              		.loc 1 204 0
 2746 1658 0C00A0E1 		mov	r0, ip
 2747 165c 0610A0E1 		mov	r1, r6
 2748              		.loc 1 202 0
 2749 1660 08208CE5 		str	r2, [ip, #8]
 2750              		.loc 1 203 0
 2751 1664 0630CCE5 		strb	r3, [ip, #6]
 2752              		.loc 1 204 0
 2753 1668 FEFFFFEB 		bl	getNewFiles
 2754              	.L220:
 2755              		.loc 1 207 0
 2756 166c 08529FE5 		ldr	r5, .L241+12
 2757 1670 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2758 1674 833285E0 		add	r3, r5, r3, asl #5
 2759 1678 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2760 167c 000053E3 		cmp	r3, #0
 2761 1680 1300000A 		beq	.L218
 2762              		.loc 1 208 0
 2763 1684 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 2764 1688 FEFFFFEB 		bl	LCDClear
 2765              		.loc 1 209 0
 2766 168c 0500A0E1 		mov	r0, r5
 2767 1690 FEFFFFEB 		bl	printMenu
 2768              		.loc 1 210 0
 2769 1694 0510A0E1 		mov	r1, r5
 2770 1698 10029FE5 		ldr	r0, .L241+64
 2771 169c FEFFFFEB 		bl	loadSongInfo
 2772 16a0 0C329FE5 		ldr	r3, .L241+68
 2773 16a4 0000C3E5 		strb	r0, [r3, #0]
 2774              		.loc 1 211 0
 2775 16a8 FEFFFFEB 		bl	vs1002Config
 2776              		.loc 1 212 0
 2777 16ac 0000A0E3 		mov	r0, #0
 2778 16b0 021BA0E3 		mov	r1, #2048
 2779 16b4 FEFFFFEB 		bl	vs1002SCIWrite
 2780              		.loc 1 213 0
 2781 16b8 FEFFFFEB 		bl	vs1002Finish
 2782              		.loc 1 214 0
 2783 16bc 0232A0E3 		mov	r3, #536870912
 2784 16c0 0C3087E5 		str	r3, [r7, #12]
 2785              		.loc 1 215 0
 2786 16c4 0020E0E3 		mvn	r2, #0
 2787 16c8 EF3F12E5 		ldr	r3, [r2, #-4079]
 2788 16cc 203083E3 		orr	r3, r3, #32
 2789 16d0 EF3F02E5 		str	r3, [r2, #-4079]
 2790              	.LVL108:
 2791              	.L218:
 2792              		.loc 1 220 0
 2793 16d4 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2794 16d8 020053E3 		cmp	r3, #2
 2795 16dc 0300001A 		bne	.L221
 2796 16e0 000094E5 		ldr	r0, [r4, #0]
 2797 16e4 0610A0E1 		mov	r1, r6
 2798 16e8 FEFFFFEB 		bl	handleUpButton
 2799 16ec 580000EA 		b	.L222
 2800              	.L221:
 2801              		.loc 1 221 0
 2802 16f0 010053E3 		cmp	r3, #1
 2803 16f4 0300001A 		bne	.L223
 2804 16f8 000094E5 		ldr	r0, [r4, #0]
 2805 16fc 0610A0E1 		mov	r1, r6
 2806 1700 FEFFFFEB 		bl	handleDownButton
 2807 1704 520000EA 		b	.L222
 2808              	.L223:
 2809              		.loc 1 222 0
 2810 1708 030053E3 		cmp	r3, #3
 2811 170c 0100001A 		bne	.L224
 2812 1710 FEFFFFEB 		bl	handleMiddleButton
 2813 1714 4E0000EA 		b	.L222
 2814              	.L224:
 2815              		.loc 1 224 0
 2816 1718 88319FE5 		ldr	r3, .L241+56
 2817 171c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2818 1720 000053E3 		cmp	r3, #0
 2819 1724 4A00000A 		beq	.L222
 2820              		.loc 1 225 0
 2821 1728 0030E0E3 		mvn	r3, #0
 2822 172c 1020A0E3 		mov	r2, #16
 2823 1730 EB2F03E5 		str	r2, [r3, #-4075]
 2824 1734 013083E2 		add	r3, r3, #1
 2825              	.LVL109:
 2826              	.L225:
 2827              	.LBB110:
 2828              	.LBB105:
 2829              		.loc 1 262 0
 2830              	@ 262 "main.c" 1
 2831 1738 0000A0E1 		nop
 2832              	@ 0 "" 2
 2833 173c 013083E2 		add	r3, r3, #1
 2834 1740 0A0053E1 		cmp	r3, sl
 2835 1744 FBFFFF1A 		bne	.L225
 2836              	.LBE105:
 2837              	.LBE110:
 2838              		.loc 1 227 0
 2839 1748 FEFFFFEB 		bl	MMA_get_y
 2840              	.LVL110:
 2841 174c AF0F50E3 		cmp	r0, #700
 2842 1750 190000DA 		ble	.L226
 2843 1754 5C319FE5 		ldr	r3, .L241+72
 2844 1758 003093E5 		ldr	r3, [r3, #0]
 2845 175c AF0F53E3 		cmp	r3, #700
 2846 1760 150000DA 		ble	.L226
 2847              		.loc 1 228 0
 2848 1764 48319FE5 		ldr	r3, .L241+68
 2849 1768 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2850 176c 000053E3 		cmp	r3, #0
 2851 1770 0200000A 		beq	.L227
 2852 1774 000094E5 		ldr	r0, [r4, #0]
 2853 1778 FEFFFFEB 		bl	quickClear
 2854 177c 020000EA 		b	.L228
 2855              	.L227:
 2856              		.loc 1 229 0
 2857 1780 003094E5 		ldr	r3, [r4, #0]
 2858 1784 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2859 1788 FEFFFFEB 		bl	LCDClear
 2860              	.L228:
 2861              		.loc 1 233 0
 2862 178c 20319FE5 		ldr	r3, .L241+68
 2863 1790 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2864              		.loc 1 230 0
 2865 1794 EC209FE5 		ldr	r2, .L241+24
 2866              		.loc 1 233 0
 2867 1798 000053E3 		cmp	r3, #0
 2868              		.loc 1 231 0
 2869 179c 0130A0E3 		mov	r3, #1
 2870 17a0 0230C2E5 		strb	r3, [r2, #2]
 2871              		.loc 1 232 0
 2872 17a4 0232A0E3 		mov	r3, #536870912
 2873 17a8 043087E5 		str	r3, [r7, #4]
 2874              		.loc 1 230 0
 2875 17ac 002084E5 		str	r2, [r4, #0]
 2876              		.loc 1 233 0
 2877 17b0 0F328312 		addne	r3, r3, #-268435456
 2878              		.loc 1 234 0
 2879 17b4 0131A003 		moveq	r3, #1073741824
 2880 17b8 1E0000EA 		b	.L240
 2881              	.L226:
 2882              		.loc 1 236 0
 2883 17bc FEFFFFEB 		bl	MMA_get_y
 2884 17c0 F4209FE5 		ldr	r2, .L241+76
 2885 17c4 020050E1 		cmp	r0, r2
 2886 17c8 1B0000CA 		bgt	.L230
 2887 17cc E4309FE5 		ldr	r3, .L241+72
 2888 17d0 003093E5 		ldr	r3, [r3, #0]
 2889 17d4 020053E1 		cmp	r3, r2
 2890 17d8 170000CA 		bgt	.L230
 2891              		.loc 1 237 0
 2892 17dc D0309FE5 		ldr	r3, .L241+68
 2893 17e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2894 17e4 000053E3 		cmp	r3, #0
 2895 17e8 0200000A 		beq	.L231
 2896 17ec 000094E5 		ldr	r0, [r4, #0]
 2897 17f0 FEFFFFEB 		bl	quickClear
 2898 17f4 020000EA 		b	.L232
 2899              	.L231:
 2900              		.loc 1 238 0
 2901 17f8 003094E5 		ldr	r3, [r4, #0]
 2902 17fc 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2903 1800 FEFFFFEB 		bl	LCDClear
 2904              	.L232:
 2905              		.loc 1 243 0
 2906 1804 A8309FE5 		ldr	r3, .L241+68
 2907 1808 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2908              		.loc 1 239 0
 2909 180c 68209FE5 		ldr	r2, .L241+12
 2910              		.loc 1 243 0
 2911 1810 000053E3 		cmp	r3, #0
 2912              		.loc 1 240 0
 2913 1814 0030A0E3 		mov	r3, #0
 2914 1818 0230C2E5 		strb	r3, [r2, #2]
 2915              		.loc 1 241 0
 2916 181c 013283E2 		add	r3, r3, #268435456
 2917 1820 043087E5 		str	r3, [r7, #4]
 2918              		.loc 1 242 0
 2919 1824 033283E2 		add	r3, r3, #805306368
 2920 1828 043087E5 		str	r3, [r7, #4]
 2921              		.loc 1 239 0
 2922 182c 002084E5 		str	r2, [r4, #0]
 2923              		.loc 1 243 0
 2924 1830 0100000A 		beq	.L230
 2925 1834 0E3283E2 		add	r3, r3, #-536870912
 2926              	.L240:
 2927 1838 0C3087E5 		str	r3, [r7, #12]
 2928              	.L230:
 2929              		.loc 1 245 0
 2930 183c 000094E5 		ldr	r0, [r4, #0]
 2931 1840 FEFFFFEB 		bl	printMenu
 2932              		.loc 1 246 0
 2933 1844 0020E0E3 		mvn	r2, #0
 2934 1848 EF3F12E5 		ldr	r3, [r2, #-4079]
 2935 184c 103083E3 		orr	r3, r3, #16
 2936 1850 EF3F02E5 		str	r3, [r2, #-4079]
 2937              	.L222:
 2938              		.loc 1 249 0
 2939 1854 0030E0E3 		mvn	r3, #0
 2940 1858 EF2F13E5 		ldr	r2, [r3, #-4079]
 2941 185c 102082E3 		orr	r2, r2, #16
 2942 1860 EF2F03E5 		str	r2, [r3, #-4079]
 2943              		.loc 1 248 0
 2944 1864 013083E2 		add	r3, r3, #1
 2945 1868 0030C8E5 		strb	r3, [r8, #0]
 2946 186c 2CFFFFEA 		b	.L233
 2947              	.L242:
 2948              		.align	2
 2949              	.L241:
 2950 1870 00000000 		.word	white
 2951 1874 00C002E0 		.word	-536690688
 2952 1878 04000000 		.word	NUMBEROFFILES
 2953 187c 74000000 		.word	file_manager
 2954 1880 00000000 		.word	black
 2955 1884 00000000 		.word	welcome
 2956 1888 78020000 		.word	settings_menu
 2957 188c 7C040000 		.word	current_display
 2958 1890 2C000000 		.word	.LC5
 2959 1894 008002E0 		.word	-536707072
 2960 1898 08000000 		.word	button_pressed
 2961 189c C0C62D00 		.word	3000000
 2962 18a0 00000000 		.word	USB
 2963 18a4 80969800 		.word	10000000
 2964 18a8 09000000 		.word	update_screen
 2965 18ac 02000000 		.word	song_is_over
 2966 18b0 14000000 		.word	current_song
 2967 18b4 01000000 		.word	file_is_open
 2968 18b8 0C000000 		.word	prev_position
 2969 18bc BB020000 		.word	699
 2970              	.LFE2:
 2972              		.global	volume_setting
 2973              		.data
 2974              		.align	2
 2977              	volume_setting:
 2978 0000 10000000 		.word	16
 2979              		.global	radio_channel
 2980              		.align	2
 2983              	radio_channel:
 2984 0004 CD030000 		.word	973
 2985              		.global	radio_enable
 2986              		.bss
 2989              	radio_enable:
 2990 0000 00       		.space	1
 2991              		.global	welcome
 2992              		.section	.rodata
 2995              	welcome:
 2996 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 2996      204C6973 
 2996      743A0A0D 
 2996      00
 2997 000d 00000000 		.space	9
 2997      00000000 
 2997      00
 2998              		.global	NotFound
 3001              	NotFound:
 3002 0016 46696C65 		.ascii	"File Not Found!"
 3002      204E6F74 
 3002      20466F75 
 3002      6E6421
 3003              		.global	USB
 3006              	USB:
 3007 0025 55534220 		.ascii	"USB Connected!"
 3007      436F6E6E 
 3007      65637465 
 3007      6421
 3008              		.global	newline
 3011              	newline:
 3012 0033 0A00     		.ascii	"\012\000"
 3013              		.global	volume
 3016              	volume:
 3017 0035 566F6C75 		.ascii	"Volume\000"
 3017      6D6500
 3018              		.global	contrast
 3021              	contrast:
 3022 003c 436F6E74 		.ascii	"Contrast\000"
 3022      72617374 
 3022      00
 3023              		.global	radio_power
 3026              	radio_power:
 3027 0045 52616469 		.ascii	"Radio Power"
 3027      6F20506F 
 3027      776572
 3028              		.global	radio_channel_menu
 3031              	radio_channel_menu:
 3032 0050 52616469 		.ascii	"Radio Channel"
 3032      6F204368 
 3032      616E6E65 
 3032      6C
 3033              		.global	settings
 3036              	settings:
 3037 005d 53657474 		.ascii	"Settings:\000"
 3037      696E6773 
 3037      3A00
 3038              		.bss
 3039              	file_is_open:
 3040 0001 00       		.space	1
 3041              	song_is_over:
 3042 0002 00       		.space	1
 3043 0003 00       		.align	2
 3044              	NUMBEROFFILES:
 3045 0004 00000000 		.space	4
 3046              	button_pressed:
 3047 0008 00       		.space	1
 3048              	update_screen:
 3049 0009 00       		.space	1
 3050 000a 0000     		.align	2
 3051              	prev_position:
 3052 000c 00000000 		.space	4
 3053              		.align	2
 3054              	cur_position:
 3055 0010 00000000 		.space	4
 3056              		.align	2
 3057              	current_song:
 3058 0014 00000000 		.space	96
 3058      00000000 
 3058      00000000 
 3058      00000000 
 3058      00000000 
 3059              		.align	2
 3060              	file_manager:
 3061 0074 00000000 		.space	516
 3061      00000000 
 3061      00000000 
 3061      00000000 
 3061      00000000 
 3062              		.align	2
 3063              	settings_menu:
 3064 0278 00000000 		.space	516
 3064      00000000 
 3064      00000000 
 3064      00000000 
 3064      00000000 
 3065              		.align	2
 3066              	current_display:
 3067 047c 00000000 		.space	4
 3569              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3044   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3016   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3026   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3031   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3036   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:367    .text:00000240 lowerVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:423    .text:000002c8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2977   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3066   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:432    .text:000002d8 raiseVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:438    .text:000002d8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:487    .text:0000035c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:495    .text:00000368 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:503    .text:00000368 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:582    .text:00000428 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3011   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:590    .text:00000434 printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:598    .text:00000434 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:675    .text:000004fc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:681    .text:00000500 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:689    .text:00000500 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:769    .text:000005d8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:775    .text:000005dc handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:782    .text:000005dc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:839    .text:00000654 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3060   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:845    .text:00000658 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:852    .text:00000658 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:907    .text:000006c8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:913    .text:000006cc sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:919    .text:000006cc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:963    .text:00000730 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3057   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3041   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:972    .text:00000740 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:978    .text:00000740 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1016   .text:000007a0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1022   .text:000007a8 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1028   .text:000007a8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1046   .text:000007d0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1056   .text:000007d4 disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1062   .text:000007d4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1129   .text:00000878 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2989   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1143   .text:0000088c enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1149   .text:0000088c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1217   .text:00000934 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1227   .text:00000948 initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1235   .text:00000948 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1306   .text:000009b8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1314   .text:000009c4 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1321   .text:000009c4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1343   .text:000009f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1349   .text:000009fc stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1356   .text:000009fc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1410   .text:00000a84 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3039   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1418   .text:00000a90 loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1425   .text:00000a90 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1519   .text:00000b64 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1525   .text:00000b68 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:1531   .text:00000b68 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2030   .text:00000ff8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3001   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3063   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3046   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2983   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2063   .text:00001050 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2069   .text:00001050 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2252   .text:0000120c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2268   .text:0000123c timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2277   .text:0000123c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2354   .text:000012ec $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3051   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3054   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3048   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2371   .text:00001304 main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2377   .text:00001304 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2950   .text:00001870 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2995   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3006   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2978   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:3021   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccXlwMmq.s:2992   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
vs1002Config
vs1002SetVolume
vs1002Finish
LCDSetRowColor
LCDPrintString
vs1002SendMusic
fat16_read_file
vs1002SCIWrite
ns73Config
ns73Send
ns73Init
ns73SetChannel
fat16_close_file
root_file_exists
root_open
fat16_file_size
LCDClear
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
MMA_get_y
__divsi3
__modsi3
vs1002Reset
vs1002Init
LCDInit
LCDPrintLogo
rootDirectory_files_stream
rootDirectory_files
main_msc
