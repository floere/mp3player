   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting=16, radio_channel=973;
  78:main.c        **** char radio_enable=OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars=0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        **** 	//Initialize ARM I/O
 104:main.c        **** 	bootUp();
 105:main.c        **** 	
 106:main.c        **** 	//Initialize the MP3 player with double clock speed and lower volume
 107:main.c        **** 	vs1002Config();			//Configure MP3 I/O
 108:main.c        **** 	vs1002Reset();			//Reset MP3 Player
 109:main.c        **** 	vs1002Init();			//Double the clock speed and set to "New" mode
 110:main.c        **** 	for(char i=0; i<2; i++)vs1002SetVolume(DECREASE);		//Lower the Volume!!
 111:main.c        **** 	vs1002Finish();			//Restore the SPI I/O lines
 112:main.c        **** 	
 113:main.c        **** 	//Show the splash-screen (Sparkfun Logo)
 114:main.c        **** 	LCDInit();				//Initialize the LCD
 115:main.c        **** 	LCDClear(white);		//Clear the screen with white
 116:main.c        **** 	LCDPrintLogo();			//Print the Sparkfun Logo
 117:main.c        **** 	
 118:main.c        **** 	//Initialize the FM Transmitter to 97.3
 119:main.c        **** 	IOCLR1 |= FM_CS;			//Select SPI for FM Transmitter
 120:main.c        **** 	delay_ms(900);				//
 121:main.c        **** 	ns73Config();				//Configigure the FM Trans. I/O
 122:main.c        **** 	ns73Init();					//Setup the Default Register Values
 123:main.c        **** 	ns73SetChannel(973);		//Transmit to 97.3 FM	
 124:main.c        **** 	IOSET1 |= FM_CS;			//Remove FM Transmitter from SPI bus
 125:main.c        **** 	delay_ms(100);				//
 126:main.c        **** 
 127:main.c        **** 	//Find Out how many files are on the SD card
 128:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 129:main.c        **** 	do{
 130:main.c        **** 		numberOfChars++;
 131:main.c        **** 	}while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filenam
 132:main.c        **** 	char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD ca
 133:main.c        **** 	NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 134:main.c        **** 	FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 135:main.c        **** 	
 136:main.c        **** 	//Get all of the filenames into a Global Array
 137:main.c        **** 	int chartracker=0;	
 138:main.c        **** 	for(int j=0; j<NUMBEROFFILES; j++){
 139:main.c        **** 		for(int i=0; i<=MAXFILENAMELEN+1; i++){
 140:main.c        **** 			if(chartracker <= numberOfChars){
 141:main.c        **** 				if(tempNames[chartracker]==','){
 142:main.c        **** 					Files[j].file_name[i] = '\0';
 143:main.c        **** 					i=MAXFILENAMELEN+1;
 144:main.c        **** 				}
 145:main.c        **** 				else Files[j].file_name[i] = tempNames[chartracker];
 146:main.c        **** 				chartracker++;
 147:main.c        **** 			}
 148:main.c        **** 			else Files[j].file_name[i] ='\0';
 149:main.c        **** 		}	
 150:main.c        **** 	}
 151:main.c        **** 	
 152:main.c        **** 	
 153:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 154:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 155:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 156:main.c        **** 	
 157:main.c        **** 	file_manager.orientation =ORIENTUP;
 158:main.c        **** 	file_manager.text_color=white;
 159:main.c        **** 	file_manager.back_color=black;
 160:main.c        **** 	
 161:main.c        **** 	file_manager.current_page=0;
 162:main.c        **** 	file_manager.current_row=1;
 163:main.c        **** 	file_manager.current_index=0;	
 164:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 165:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++)file_manager.title[i]=welcome[i];
 166:main.c        **** 	
 167:main.c        **** 	//Generate the settings menu and fill in default settings values
 168:main.c        **** 	fillSettings(&settings_menu);
 169:main.c        **** 	
 170:main.c        **** 	//Setup the menu
 171:main.c        **** 	current_display = &file_manager;
 172:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 173:main.c        **** 	LCDClear(current_display->back_color);
 174:main.c        **** 	printMenu(current_display);
 175:main.c        **** 	
 176:main.c        **** 	while(1){
 177:main.c        **** 	  // USB connected!
 178:main.c        **** 		if(IOPIN0 & (1<<23))
 179:main.c        **** 		{
 180:main.c        **** 			LCDClear(white);
 181:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 182:main.c        ****       delay_ms(1000);
 183:main.c        **** 			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
 184:main.c        **** 			main_msc();
 185:main.c        **** 			reset();
 186:main.c        **** 		}
 187:main.c        **** 	
 188:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 189:main.c        **** 		//while(!button_pressed && !update_screen){
 190:main.c        **** 		if(!button_pressed && !update_screen){
 191:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 192:main.c        **** 			if(song_is_over){
 193:main.c        **** 				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
 194:main.c        **** 				closeSong(&current_song);	//Close the current song
 195:main.c        **** 				file_is_open=0;				//change master flag
 196:main.c        **** 				ledBlueOff();
 197:main.c        **** 				//Get the next song on the page by changing rows
 198:main.c        **** 				if(file_manager.current_row < NUMROWS){
 199:main.c        **** 					file_manager.current_row++;
 200:main.c        **** 					file_manager.current_index++;
 201:main.c        **** 				}
 202:main.c        **** 				//Go to the next page of songs if necessary
 203:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 204:main.c        **** 					file_manager.current_row=1;
 205:main.c        **** 					file_manager.current_index=0;
 206:main.c        **** 					file_manager.current_page++;
 207:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 208:main.c        **** 				}
 209:main.c        **** 				//If there is another song in the list, get it and play it!
 210:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 211:main.c        **** 					LCDClear(file_manager.back_color);
 212:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 213:main.c        **** 					file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 214:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 215:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 216:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 217:main.c        **** 					ledBlueOn();
 218:main.c        **** 					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
 219:main.c        **** 				}	
 220:main.c        **** 			}
 221:main.c        **** 		}
 222:main.c        **** 
 223:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 224:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 225:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 226:main.c        **** 		
 227:main.c        **** 		else if(update_screen){
 228:main.c        **** 			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
 229:main.c        **** 			delay_ms(300);
 230:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 231:main.c        **** 				if(file_is_open)quickClear(current_display);
 232:main.c        **** 				else LCDClear(current_display->back_color);
 233:main.c        **** 				current_display = &settings_menu;
 234:main.c        **** 				current_display->orientation=ORIENTLEFT;
 235:main.c        **** 				ledBlueOff();
 236:main.c        **** 				if(file_is_open)ledGrnOn();
 237:main.c        **** 				else ledRedOn();
 238:main.c        **** 			}
 239:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 240:main.c        **** 				if(file_is_open)quickClear(current_display);
 241:main.c        **** 				else LCDClear(current_display->back_color);
 242:main.c        **** 				current_display = &file_manager;
 243:main.c        **** 				current_display->orientation=ORIENTUP;
 244:main.c        **** 				ledGrnOff();
 245:main.c        **** 				ledRedOff();
 246:main.c        **** 				if(file_is_open)ledBlueOn();
 247:main.c        **** 			}
 248:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 249:main.c        **** 			VICIntEnable |= 0x10;						//Re-enable interrupts
 250:main.c        **** 		}
 251:main.c        **** 		button_pressed=NO_BUT;
 252:main.c        **** 		VICIntEnable |= 0x10;
 253:main.c        **** 	}
 254:main.c        ****     return 0;
 255:main.c        **** }
 256:main.c        **** 
 257:main.c        **** 
 258:main.c        **** //Usage: delay_ms(1000);
 259:main.c        **** //Inputs: int count: Number of milliseconds to delay
 260:main.c        **** //The function will cause the firmware to delay for "count" milleseconds.
 261:main.c        **** void delay_ms(int count)
 262:main.c        **** {
  16              		.loc 1 262 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 263:main.c        ****     int i;
 264:main.c        ****     count *= 10000;
  22              		.loc 1 264 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 265:main.c        ****     for (i = 0; i < count; i++)
 266:main.c        ****         asm volatile ("nop");
  30              		.loc 1 266 0
  31              	@ 266 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34              		.loc 1 265 0
  35 0014 013083E2 		add	r3, r3, #1
  36              	.L2:
  37 0018 020053E1 		cmp	r3, r2
  38 001c FBFFFFBA 		blt	.L3
 267:main.c        **** }
  39              		.loc 1 267 0
  40 0020 1EFF2FE1 		bx	lr
  41              	.L6:
  42              		.align	2
  43              	.L5:
  44 0024 10270000 		.word	10000
  45              	.LFE3:
  47              		.align	2
  48              		.global	getButton
  50              	getButton:
  51              	.LFB7:
 268:main.c        **** 
 269:main.c        **** //Usage: bootUp();
 270:main.c        **** //Inputs: None
 271:main.c        **** //This function initializes the serial port, the SD card, the I/O pins and the interrupts
 272:main.c        **** void bootUp(void)
 273:main.c        **** {
 274:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 275:main.c        ****     delay_ms(10); //Delay for power to stablize
 276:main.c        **** 
 277:main.c        ****     //Bring up SD and FAT
 278:main.c        ****     if(!sd_raw_init())
 279:main.c        ****     {
 280:main.c        ****         rprintf("SD Init Error\n");
 281:main.c        ****     }
 282:main.c        ****     if(openroot())
 283:main.c        ****     {
 284:main.c        ****         rprintf("SD OpenRoot Error\n");
 285:main.c        ****     }
 286:main.c        ****      
 287:main.c        **** 	//Initialize I/O Ports and Peripherals
 288:main.c        **** 	//Setup the MP3 I/O Lines
 289:main.c        **** 	IODIR0 |= MP3_XCS;
 290:main.c        **** 	IODIR0 &= ~MP3_DREQ;
 291:main.c        **** 	PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 292:main.c        **** 	IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 293:main.c        **** 	
 294:main.c        **** 	//Setupt the FM Trans. Lines
 295:main.c        **** 	IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 296:main.c        **** 	IODIR1 |= FM_CS;
 297:main.c        **** 	
 298:main.c        **** 	//Setup the SD Card I/O Lines
 299:main.c        **** 	IODIR0 |= SD_CS;												//SD Card Outputs
 300:main.c        **** 	
 301:main.c        **** 	//Setup the Accelerometer I/O Lines
 302:main.c        **** 	IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 303:main.c        **** 	PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Funct
 304:main.c        **** 	IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 305:main.c        **** 	
 306:main.c        **** 	//Setup the LCD I/O Lines
 307:main.c        **** 	IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 308:main.c        **** 	
 309:main.c        **** 	//Setup the LED Lines										
 310:main.c        **** 	IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
 311:main.c        **** 	ledBlueOff();
 312:main.c        **** 	ledRedOff();
 313:main.c        **** 	ledGrnOff();
 314:main.c        **** 	
 315:main.c        **** 	//Setup the Buttons
 316:main.c        **** 	IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 317:main.c        **** 
 318:main.c        **** 	IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 319:main.c        **** 
 320:main.c        ****     //Setupt the Interrupts
 321:main.c        **** 	VPBDIV=1;										// Set PCLK equal to the System Clock	
 322:main.c        **** 	VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 323:main.c        ****     VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Ti
 324:main.c        ****     VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
 325:main.c        ****     VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
 326:main.c        ****     VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
 327:main.c        ****     VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
 328:main.c        **** 	
 329:main.c        **** 	//Configure Timer0
 330:main.c        **** 	T0PR = 300;										//Divide Clock by 300 for 40kHz PS
 331:main.c        **** 	T0TCR |=0X01;									//Enable the clock
 332:main.c        **** 	T0CTCR=0;										  //Timer Mode
 333:main.c        **** 	T0MCR=0x0003;									//Interrupt and Reset Timer on Match
 334:main.c        **** 	T0MR0=1000;										//Interrupt on 40Hz
 335:main.c        **** 	
 336:main.c        **** 	//Configure Timer1
 337:main.c        **** 	T1PR = 200;										//Divide Clock by 200 for ??kHz PS
 338:main.c        **** 	T1TCR |=0X01;									//Enable the clock
 339:main.c        **** 	T1CTCR=0;									  	//Timer Mode
 340:main.c        **** 	T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
 341:main.c        **** 	
 342:main.c        **** 	//Setup the SPI Port
 343:main.c        ****     S0SPCCR = 64;              											// SCK = 1 MHz, counter > 8 and even
 344:main.c        ****     S0SPCR  = 0x20;                										// Master, no interrupt enable, 8 bits	
 345:main.c        **** }
 346:main.c        **** 
 347:main.c        **** //Usage: None (Automatically Called by FW)
 348:main.c        **** //Inputs: None
 349:main.c        **** //This function is a global interrupt called by a match on the Timer 0 match.  This interrupt
 350:main.c        **** //	is responsible for sending music to the MP3 player when it is needed. 
 351:main.c        **** //WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 playin
 352:main.c        **** //			Adding superfluous code to this interrupt section may also contribute to improper MP3 playback
 353:main.c        **** static void timer1ISR(void)
 354:main.c        **** {
 355:main.c        **** 	vs1002Config();												//Enable MP3 Comm. Lines
 356:main.c        **** 	while(IOPIN0 & MP3_DREQ){
 357:main.c        **** 		vs1002SendMusic(current_song.data, MAXBUFFERSIZE);		//Send the buffered song data
 358:main.c        **** 		if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;	//
 359:main.c        **** 		else song_is_over=0;									//if there's no more data available, set the flag, else leave it alo
 360:main.c        **** 	}	
 361:main.c        **** 	vs1002Finish();												//Disable MP3 Comm. Lines
 362:main.c        **** 	T1IR = 0xFF; 												//Clear the timer 0 interrupt
 363:main.c        **** 	VICVectAddr = 0; 											//Update VIC priorities
 364:main.c        **** }
 365:main.c        **** 
 366:main.c        **** //Usage: None (Automatically Called by FW)
 367:main.c        **** //Inputs: None
 368:main.c        **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 369:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 370:main.c        **** // and setting the appropriate global flag if either has occured.
 371:main.c        **** static void timer0ISR(void)
 372:main.c        **** {
 373:main.c        **** 	button_pressed=getButton();			//Find out if a button has been pressed, and which one
 374:main.c        **** 	cur_position=MMA_get_y();			//Get the current position of the screen
 375:main.c        **** 	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=
 376:main.c        **** 	else update_screen=0;				//Determine if the accelerometer has been rotated
 377:main.c        **** 	prev_position=cur_position;			//Save the position value for later reference
 378:main.c        **** 	T0IR = 0xFF;						//Clear the timer interrupt
 379:main.c        **** 	VICVectAddr =0;						//Update the VIC priorities
 380:main.c        **** }
 381:main.c        **** 
 382:main.c        **** //Usage: button_value=getButton();
 383:main.c        **** //Inputs:  None
 384:main.c        **** //Outputs: None
 385:main.c        **** //Function returns the value of the button that is currently being pressed.
 386:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 387:main.c        **** char getButton(void){
  52              		.loc 1 387 0
  53              		@ Function supports interworking.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
 388:main.c        **** 	if(!(IOPIN1 & SW_UP)) return UP_BUT;
  57              		.loc 1 388 0
  58 0028 30209FE5 		ldr	r2, .L13
  59 002c 103092E5 		ldr	r3, [r2, #16]
  60 0030 020513E3 		tst	r3, #8388608
  61 0034 0200A003 		moveq	r0, #2
  62 0038 1EFF2F01 		bxeq	lr
 389:main.c        **** 	else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
  63              		.loc 1 389 0
  64 003c 103092E5 		ldr	r3, [r2, #16]
  65 0040 020613E3 		tst	r3, #2097152
  66 0044 0100A003 		moveq	r0, #1
  67 0048 1EFF2F01 		bxeq	lr
 390:main.c        **** 	else if(!(IOPIN1 & SW_MID)) return MID_BUT;
  68              		.loc 1 390 0
  69 004c 103092E5 		ldr	r3, [r2, #16]
  70 0050 010513E3 		tst	r3, #4194304
  71 0054 0300A003 		moveq	r0, #3
  72 0058 0000A013 		movne	r0, #0
 391:main.c        **** 	return NO_BUT;
 392:main.c        **** }
  73              		.loc 1 392 0
  74 005c 1EFF2FE1 		bx	lr
  75              	.L14:
  76              		.align	2
  77              	.L13:
  78 0060 008002E0 		.word	-536707072
  79              	.LFE7:
  81              		.align	2
  82              		.global	getNewFiles
  84              	getNewFiles:
  85              	.LFB8:
 393:main.c        **** 
 394:main.c        **** 
 395:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  86              		.loc 1 395 0
  87              		@ Function supports interworking.
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL3:
  92 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  93              	.LCFI0:
 396:main.c        **** 	if(files->current_page < files->total_pages){
  94              		.loc 1 396 0
  95 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  96 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  97 0070 030052E1 		cmp	r2, r3
  98              		.loc 1 395 0
  99 0074 0150A0E1 		mov	r5, r1
 100              		.loc 1 396 0
 101 0078 00C0A033 		movcc	ip, #0
 102              	.LVL4:
 103              	.LBB37:
 104              	.LBB38:
 397:main.c        **** 		for(int i =0; i<NUMROWS; i++){
 398:main.c        **** 			for(int j=0; j<MAXFILENAMELEN; j++){
 399:main.c        **** 				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 105              		.loc 1 399 0
 106 007c 0F40A033 		movcc	r4, #15
 107              	.LBE38:
 108              	.LBE37:
 109              		.loc 1 396 0
 110 0080 1000003A 		bcc	.L17
 111              	.LVL5:
 112              	.LBB40:
 400:main.c        **** 			}
 401:main.c        **** 		}
 402:main.c        **** 	}
 403:main.c        **** 	else{
 404:main.c        **** 		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 113              		.loc 1 404 0
 114 0084 B8309FE5 		ldr	r3, .L28
 115 0088 00C0A0E3 		mov	ip, #0
 116              	.LVL6:
 117 008c 004093E5 		ldr	r4, [r3, #0]
 118 0090 0E70E0E3 		mvn	r7, #14
 119              	.LBB42:
 405:main.c        **** 			for(int j=0; j<MAXFILENAMELEN; j++){
 406:main.c        **** 				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 120              		.loc 1 406 0
 121 0094 0F60A0E3 		mov	r6, #15
 122 0098 170000EA 		b	.L18
 123              	.LVL7:
 124              	.L19:
 125              	.LBE42:
 126              	.LBE40:
 127              	.LBB43:
 128              	.LBB39:
 129              		.loc 1 399 0
 130 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 131 00a0 94C323E0 		mla	r3, r4, r3, ip
 132 00a4 833285E0 		add	r3, r5, r3, asl #5
 133 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 134              		.loc 1 398 0
 135 00ac 012082E2 		add	r2, r2, #1
 136 00b0 1E0052E3 		cmp	r2, #30
 137              		.loc 1 399 0
 138 00b4 0130C1E4 		strb	r3, [r1], #1
 139              		.loc 1 398 0
 140 00b8 F7FFFF1A 		bne	.L19
 141              	.LBE39:
 142              		.loc 1 397 0
 143 00bc 01C08CE2 		add	ip, ip, #1
 144 00c0 0F005CE3 		cmp	ip, #15
 145 00c4 1C00000A 		beq	.L25
 146              	.LVL8:
 147              	.L17:
 148 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 149 00cc 0C1083E2 		add	r1, r3, #12
 150 00d0 0020A0E3 		mov	r2, #0
 151 00d4 F0FFFFEA 		b	.L19
 152              	.LVL9:
 153              	.L21:
 154              	.LBE43:
 155              	.LBB44:
 156              	.LBB41:
 157              		.loc 1 406 0
 158 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 159 00dc 96C323E0 		mla	r3, r6, r3, ip
 160 00e0 833285E0 		add	r3, r5, r3, asl #5
 161 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 162              		.loc 1 405 0
 163 00e8 012082E2 		add	r2, r2, #1
 164 00ec 1E0052E3 		cmp	r2, #30
 165              		.loc 1 406 0
 166 00f0 0130C1E4 		strb	r3, [r1], #1
 167              		.loc 1 405 0
 168 00f4 F7FFFF1A 		bne	.L21
 169              	.LBE41:
 170              		.loc 1 404 0
 171 00f8 01C08CE2 		add	ip, ip, #1
 172              	.LVL10:
 173              	.L18:
 174 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 175 0100 974322E0 		mla	r2, r7, r3, r4
 176              	.LVL11:
 177 0104 02005CE1 		cmp	ip, r2
 178 0108 823280A0 		addge	r3, r0, r2, asl #5
 179 010c 0C0083A2 		addge	r0, r3, #12
 180              	.LVL12:
 181              	.LBE44:
 182              	.LBB45:
 407:main.c        **** 			}
 408:main.c        **** 		}
 409:main.c        **** 		for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0]=
 183              		.loc 1 409 0
 184 0110 0030A0A3 		movge	r3, #0
 185 0114 040000AA 		bge	.L23
 186              	.LVL13:
 187              	.L22:
 188              	.LBE45:
 189              	.LBB46:
 190              		.loc 1 404 0
 191 0118 8C3280E0 		add	r3, r0, ip, asl #5
 192 011c 0C1083E2 		add	r1, r3, #12
 193 0120 0020A0E3 		mov	r2, #0
 194              	.LVL14:
 195 0124 EBFFFFEA 		b	.L21
 196              	.LVL15:
 197              	.L24:
 198              	.LBE46:
 199              	.LBB47:
 200              		.loc 1 409 0
 201 0128 203040E5 		strb	r3, [r0, #-32]
 202              	.L23:
 203 012c 0E0052E3 		cmp	r2, #14
 204 0130 200080E2 		add	r0, r0, #32
 205 0134 012082E2 		add	r2, r2, #1
 206 0138 FAFFFFDA 		ble	.L24
 207              	.LVL16:
 208              	.L25:
 209              	.LBE47:
 410:main.c        **** 	}
 411:main.c        **** }
 210              		.loc 1 411 0
 211 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 212 0140 1EFF2FE1 		bx	lr
 213              	.L29:
 214              		.align	2
 215              	.L28:
 216 0144 04000000 		.word	NUMBEROFFILES
 217              	.LFE8:
 219              		.align	2
 220              		.global	fillSettings
 222              	fillSettings:
 223              	.LFB13:
 412:main.c        **** 
 413:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 414:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 415:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 416:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 417:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 418:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 419:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 420:main.c        **** 	//Get the selected songs file name
 421:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 422:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 423:main.c        **** 	}
 424:main.c        **** 	//Get the selected songs display name
 425:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 426:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 427:main.c        **** 			song->name[i]='\0';
 428:main.c        **** 			i=MAXDISPLEN;
 429:main.c        **** 		}	
 430:main.c        **** 		else song->name[i]=song->file_name[i];
 431:main.c        **** 	}
 432:main.c        **** 	
 433:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 434:main.c        **** 	//Check to see if the selected song is valid
 435:main.c        **** 	if(!root_file_exists(song->file_name)){
 436:main.c        **** 		PINSEL0 &= 0xFFFFC00F;
 437:main.c        **** 		return 0;
 438:main.c        **** 	}	
 439:main.c        **** 	//Open the selected song
 440:main.c        **** 	else{
 441:main.c        **** 		song->handle=root_open(song->file_name);
 442:main.c        **** 		song->size=fat16_file_size(song->handle);
 443:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 444:main.c        **** 	}
 445:main.c        **** 	
 446:main.c        **** 	
 447:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 448:main.c        **** 	return 1;
 449:main.c        **** }
 450:main.c        **** 
 451:main.c        **** //Usage: CloseSong(&current_song);
 452:main.c        **** //Inputs: SongStruct *song: Pointer to a song structure to be closed
 453:main.c        **** //Function closes a song that is currently open.
 454:main.c        **** void closeSong(SongStruct *song){
 455:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 456:main.c        **** 	fat16_close_file(song->handle);
 457:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 458:main.c        **** }
 459:main.c        **** 
 460:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 461:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 462:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 463:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 464:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 465:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 466:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 467:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 468:main.c        **** 	if(direction == PREVIOUS){
 469:main.c        **** 		display->current_row--;
 470:main.c        **** 		display->current_index--;
 471:main.c        **** 	}
 472:main.c        **** 	else{
 473:main.c        **** 		display->current_row++;
 474:main.c        **** 		display->current_index++;		
 475:main.c        **** 	}
 476:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 477:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 478:main.c        **** }
 479:main.c        **** 
 480:main.c        **** //Usage: printMenu(&settings_menu);
 481:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 482:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 483:main.c        **** void printMenu(DisplayStruct *display){
 484:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 485:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 486:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 487:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 488:main.c        **** 	}
 489:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 490:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 491:main.c        **** }
 492:main.c        **** 
 493:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 494:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 495:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 496:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 497:main.c        **** //also loads the default display values along with the default settings values. 
 498:main.c        **** void fillSettings(DisplayStruct *menu){
 224              		.loc 1 498 0
 225              		@ Function supports interworking.
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229              	.LVL17:
 230 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 231              	.LCFI1:
 232              	.LBB48:
 499:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 500:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 233              		.loc 1 500 0
 234 014c A4909FE5 		ldr	r9, .L36
 501:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 235              		.loc 1 501 0
 236 0150 A4A09FE5 		ldr	sl, .L36+4
 502:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 237              		.loc 1 502 0
 238 0154 A4809FE5 		ldr	r8, .L36+8
 503:main.c        **** 		menu->title[i] = settings[i];
 239              		.loc 1 503 0
 240 0158 A4709FE5 		ldr	r7, .L36+12
 241              	.LBE48:
 242              		.loc 1 498 0
 243 015c 0050A0E1 		mov	r5, r0
 244 0160 0060A0E1 		mov	r6, r0
 245 0164 0040A0E1 		mov	r4, r0
 246 0168 00C0A0E3 		mov	ip, #0
 247              	.LVL18:
 248              	.L31:
 249              	.LBB49:
 250              		.loc 1 500 0
 251 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 252              		.loc 1 501 0
 253 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 254              		.loc 1 502 0
 255 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 256              		.loc 1 503 0
 257 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 258              	.LVL19:
 259              		.loc 1 499 0
 260 017c 01C08CE2 		add	ip, ip, #1
 261 0180 16005CE3 		cmp	ip, #22
 262              		.loc 1 500 0
 263 0184 0C30C4E5 		strb	r3, [r4, #12]
 264              		.loc 1 501 0
 265 0188 2C20C4E5 		strb	r2, [r4, #44]
 266              		.loc 1 502 0
 267 018c 4C10C4E5 		strb	r1, [r4, #76]
 268              		.loc 1 503 0
 269 0190 EC01C4E5 		strb	r0, [r4, #492]
 270              		.loc 1 499 0
 271 0194 014084E2 		add	r4, r4, #1
 272 0198 F3FFFF1A 		bne	.L31
 273 019c 0330A0E3 		mov	r3, #3
 274              	.LVL20:
 275              	.LBE49:
 276              	.LBB50:
 504:main.c        **** 	}
 505:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 506:main.c        **** 		menu->list[i].file_name[0]='\0';
 277              		.loc 1 506 0
 278 01a0 0020A0E3 		mov	r2, #0
 279              	.L32:
 280              		.loc 1 505 0
 281 01a4 013083E2 		add	r3, r3, #1
 282 01a8 0F0053E3 		cmp	r3, #15
 283              		.loc 1 506 0
 284 01ac 6C20C6E5 		strb	r2, [r6, #108]
 285 01b0 0010A0E3 		mov	r1, #0
 286              		.loc 1 505 0
 287 01b4 206086E2 		add	r6, r6, #32
 288 01b8 F9FFFF1A 		bne	.L32
 289              	.LBE50:
 507:main.c        **** 	}
 508:main.c        **** 	menu->text_color=white;
 290              		.loc 1 508 0
 291 01bc 44309FE5 		ldr	r3, .L36+16
 292              	.LVL21:
 293 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 294 01c4 0330C5E5 		strb	r3, [r5, #3]
 509:main.c        **** 	menu->back_color=black;
 295              		.loc 1 509 0
 296 01c8 3C309FE5 		ldr	r3, .L36+20
 297 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 510:main.c        **** 	menu->current_row=1;
 298              		.loc 1 510 0
 299 01d0 0130A0E3 		mov	r3, #1
 511:main.c        **** 	menu->current_column=0;
 512:main.c        **** 	menu->current_index=0;
 513:main.c        **** 	menu->orientation = ORIENTLEFT;
 514:main.c        **** 	menu->current_page=0;
 515:main.c        **** 	menu->total_pages = 0;
 300              		.loc 1 515 0
 301 01d4 0510C5E5 		strb	r1, [r5, #5]
 302              		.loc 1 509 0
 303 01d8 0420C5E5 		strb	r2, [r5, #4]
 304              		.loc 1 513 0
 305 01dc 0230C5E5 		strb	r3, [r5, #2]
 306              		.loc 1 510 0
 307 01e0 0030C5E5 		strb	r3, [r5, #0]
 308              		.loc 1 511 0
 309 01e4 0110C5E5 		strb	r1, [r5, #1]
 310              		.loc 1 512 0
 311 01e8 081085E5 		str	r1, [r5, #8]
 312              		.loc 1 514 0
 313 01ec 0610C5E5 		strb	r1, [r5, #6]
 516:main.c        **** }
 314              		.loc 1 516 0
 315 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 316 01f4 1EFF2FE1 		bx	lr
 317              	.L37:
 318              		.align	2
 319              	.L36:
 320 01f8 00000000 		.word	volume
 321 01fc 00000000 		.word	radio_power
 322 0200 00000000 		.word	radio_channel_menu
 323 0204 00000000 		.word	settings
 324 0208 00000000 		.word	white
 325 020c 00000000 		.word	black
 326              	.LFE13:
 328              		.align	2
 329              		.global	reset
 331              	reset:
 332              	.LFB18:
 517:main.c        **** 
 518:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 519:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 520:main.c        **** //			FileStruct *Files: List of files on the SD card
 521:main.c        **** //Outputs: None
 522:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 523:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 524:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 525:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 526:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 527:main.c        **** 	}
 528:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 529:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 530:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 531:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 532:main.c        **** 		//if(file_is_open)quickClear(display);
 533:main.c        **** 		//else LCDClear(display->back_color);
 534:main.c        **** 		quickClear(display);
 535:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 536:main.c        **** 		display->current_index=14;					//
 537:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 538:main.c        **** 		printMenu(display);							//	display previous page
 539:main.c        **** 	}
 540:main.c        **** }
 541:main.c        **** 
 542:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 543:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 544:main.c        **** //			FileStruct *Files: List of files on the SD card
 545:main.c        **** //Outputs: None
 546:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 547:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 548:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 549:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 550:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 551:main.c        **** 	}
 552:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 553:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 554:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 555:main.c        **** 		display->current_page+=1;		
 556:main.c        **** 		//if(file_is_open)quickClear(display);
 557:main.c        **** 		//else LCDClear(display->back_color);
 558:main.c        **** 		quickClear(display);
 559:main.c        **** 		display->current_row=1;
 560:main.c        **** 		display->current_index=0;
 561:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 562:main.c        **** 		printMenu(display);				
 563:main.c        **** 	}
 564:main.c        **** }
 565:main.c        **** 
 566:main.c        **** //Usage: handleMiddleButton();
 567:main.c        **** //Inputs: None
 568:main.c        **** //Outputs: None
 569:main.c        **** //Description: This function is called when the middle button is pressed.
 570:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 571:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 572:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 573:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 574:main.c        **** void handleMiddleButton(void){
 575:main.c        **** 	VICIntEnClr = 0x10;
 576:main.c        **** 	delay_ms(250);
 577:main.c        **** 	
 578:main.c        **** 	//If the File Menu is being displayed, middle button acts like play/stop
 579:main.c        **** 	if(current_display == &file_manager){
 580:main.c        **** 		if(!file_is_open){				//If a file isn't already playing then this acts like a play button
 581:main.c        **** 			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
 582:main.c        **** 			if(!file_is_open){			//Make sure this is a valid file
 583:main.c        **** 				LCDClear(white);
 584:main.c        **** 				LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 585:main.c        **** 				delay_ms(1000);
 586:main.c        **** 				LCDClear(black);
 587:main.c        **** 				printMenu(&file_manager);
 588:main.c        **** 			}	
 589:main.c        **** 			else{
 590:main.c        **** 				vs1002Config();							//Enable the MP3 Comm. Lines
 591:main.c        **** 				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
 592:main.c        **** 				vs1002Finish();							//Disable the MP3 Comm. Lines
 593:main.c        **** 				ledBlueOn();
 594:main.c        **** 				//Send first song data
 595:main.c        **** 				vs1002Config();										//Enable MP3 Comm. Lines
 596:main.c        **** 				while((IOPIN0 & MP3_DREQ) != 0){
 597:main.c        **** 					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
 598:main.c        **** 					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;
 599:main.c        **** 					else song_is_over=0;									//if there's no more data available, set the flag, else leave it 
 600:main.c        **** 				}
 601:main.c        **** 				vs1002Finish();
 602:main.c        **** 				PINSEL1 |= 0x00000C00;						
 603:main.c        **** 				VICIntEnable |= 0x20;		//Enable Timer 1 Interrupts(This is the "Song Sending" interrupt).
 604:main.c        **** 				IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);		//Assign LCD pins as Outputs
 605:main.c        **** 			}
 606:main.c        **** 		}	
 607:main.c        **** 		else{							//If a file is already open then this acts like a stop button
 608:main.c        **** 			VICIntEnClr = 0x20;											//Disable Time 0 Interrupts(Stop the "Song Sending" interrupt)
 609:main.c        **** 			ledBlueOff();
 610:main.c        **** 			vs1002Config();												//Enable the MP3 Comm Lines
 611:main.c        **** 			vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);						//Tell the MP3 Player to jump out of WAV decoding
 612:main.c        **** 			for(int i=0; i<150; i++)vs1002SCIWrite(SCI_MODE, 0x00);	//Send 150 zeroes to the player to clear
 613:main.c        **** 			vs1002Finish();												//Disable the MP3 Comm. Lines
 614:main.c        **** 			IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);			//Assign LCD pins as Outputs
 615:main.c        **** 			closeSong(&current_song);									//Close the current song
 616:main.c        **** 			file_is_open=0;												//Clear the global flag
 617:main.c        **** 			VICIntEnable = 0x10;
 618:main.c        **** 		}
 619:main.c        **** 	}
 620:main.c        **** 	
 621:main.c        **** 	//Else we are on the Settings menu, and we need to handle the settins options
 622:main.c        **** 	else{
 623:main.c        **** 		if(file_is_open)quickClear(current_display);
 624:main.c        **** 		else LCDClear(settings_menu.back_color);
 625:main.c        **** 		LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_display-
 626:main.c        **** 		VICIntEnable|=0x10;
 627:main.c        **** 		if(current_display->current_row==VOLUMEMENU){
 628:main.c        **** 			VICIntEnable |= 0x10;
 629:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 630:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 631:main.c        **** 			while(button_pressed < MID_BUT){
 632:main.c        **** 				VICIntEnClr = 0x10;				//Stop Interrupts to
 633:main.c        **** 				delay_ms(150);					//	debounce the switch					
 634:main.c        **** 				if(button_pressed==UP_BUT){
 635:main.c        **** 					if(volume_setting < 32){
 636:main.c        **** 						volume_setting+=1;
 637:main.c        **** 						vs1002Config();				//Enable the MP3 Comm. Lines
 638:main.c        **** 						vs1002SetVolume(INCREASE);	//Lower the volume
 639:main.c        **** 						vs1002Finish();				//Disable MP3 Comm. Lines
 640:main.c        **** 					}	
 641:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 642:main.c        **** 					LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orien
 643:main.c        **** 				}
 644:main.c        **** 				else if(button_pressed==DWN_BUT){
 645:main.c        **** 					if(volume_setting >= 0){
 646:main.c        **** 						volume_setting--;
 647:main.c        **** 						vs1002Config();			//Enable the MP3 Comm. Lines
 648:main.c        **** 						vs1002SetVolume(DECREASE);	//Lower the volume
 649:main.c        **** 						vs1002Finish();			//Disable MP3 Comm. Lines
 650:main.c        **** 					}
 651:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 652:main.c        **** 					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 653:main.c        **** 				}
 654:main.c        **** 				VICIntEnable |= 0x10;
 655:main.c        **** 			}
 656:main.c        **** 		}	
 657:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 658:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 659:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 660:main.c        **** 			button_pressed=NO_BUT;
 661:main.c        **** 			VICIntEnable |= 0x10;
 662:main.c        **** 			while(button_pressed < MID_BUT){
 663:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 664:main.c        **** 				delay_ms(100);		//	debounce the switch					
 665:main.c        **** 				if(button_pressed==UP_BUT){
 666:main.c        **** 					//Increase Radio Channel
 667:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 668:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 669:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 670:main.c        **** 				}
 671:main.c        **** 				else if(button_pressed==DWN_BUT){
 672:main.c        **** 					//Decrease Radio Channel
 673:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 674:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 675:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 676:main.c        **** 				}
 677:main.c        **** 				ns73SetChannel(radio_channel);
 678:main.c        **** 				VICIntEnable |= 0x10;
 679:main.c        **** 			}
 680:main.c        **** 			IOCLR1 |= FM_CS;				//Select the FM transmitter
 681:main.c        **** 			delay_ms(100);
 682:main.c        **** 			ns73Config();					//Configigure the FM Trans. I/O
 683:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 684:main.c        **** 			IOSET1 |= FM_CS;				//Unselect the FM transmitter
 685:main.c        **** 		}
 686:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 687:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 688:main.c        **** 			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orient
 689:main.c        **** 			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 690:main.c        **** 			button_pressed=NO_BUT;
 691:main.c        **** 			VICIntEnable |= 0x10;
 692:main.c        **** 			while(button_pressed < MID_BUT){
 693:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 694:main.c        **** 				delay_ms(100);		//	debounce the switch					
 695:main.c        **** 				if(button_pressed==UP_BUT){
 696:main.c        **** 					//Enable Radio
 697:main.c        **** 					radio_enable=ON;
 698:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 699:main.c        **** 					LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 700:main.c        **** 					
 701:main.c        **** 					IOCLR1 |= FM_CS;			//Select the FM transmitter
 702:main.c        **** 					delay_ms(100);
 703:main.c        **** 					ns73Config();				//Configigure the FM Trans. I/O
 704:main.c        **** 					ns73Send(R0, PE | AG);		//Power up the radio	
 705:main.c        **** 					IOSET1 |= FM_CS;			//Unselect the FM transmitter
 706:main.c        **** 
 707:main.c        **** 				}
 708:main.c        **** 				else if(button_pressed==DWN_BUT){
 709:main.c        **** 					//Disable Radio
 710:main.c        **** 					radio_enable=OFF;
 711:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 712:main.c        **** 					LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 713:main.c        **** 
 714:main.c        **** 					IOCLR1 |= FM_CS;			//Select the FM transmitter
 715:main.c        **** 					delay_ms(100);
 716:main.c        **** 					ns73Config();				//Configigure the FM Trans. I/O
 717:main.c        **** 					ns73Send(R0, MUTE);		//Power up the radio	
 718:main.c        **** 					IOSET1 |= FM_CS;			//Unselect the FM transmitter	
 719:main.c        **** 
 720:main.c        **** 				}
 721:main.c        **** 				VICIntEnable |= 0x10;
 722:main.c        **** 			}
 723:main.c        **** 		}
 724:main.c        **** 		if(file_is_open)quickClear(current_display);
 725:main.c        **** 		else LCDClear(current_display->back_color);
 726:main.c        **** 		printMenu(current_display);
 727:main.c        **** 	}
 728:main.c        **** 	VICIntEnable |= 0x10;
 729:main.c        **** }
 730:main.c        **** 
 731:main.c        **** 
 732:main.c        **** //Usage: quickClear(currentDisplay);
 733:main.c        **** //Inputs: DisplayStruct *display - pointer to the display that contains the current display
 734:main.c        **** //Outputs: None
 735:main.c        **** //Description: Rather than painting every pixel a specific color (like LCDClear does) this routine
 736:main.c        **** //			   will simply color all of the text the same color as the background, giving the illusion
 737:main.c        **** //			   of a clear screen.  Only works with the background color.  Much faster than LCDClear, and i
 738:main.c        **** //			   good to use while an MP3 is playing.
 739:main.c        **** void quickClear(DisplayStruct *display){
 740:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 741:main.c        **** 	//If we're on the first page of the menu, we also need to clear the title.
 742:main.c        **** 	if(display->current_page==0){
 743:main.c        **** 		LCDPrintString(display->title,0, display->back_color, 0,0,display->orientation);
 744:main.c        **** 		
 745:main.c        **** 	}
 746:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 747:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 748:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->back_color, j+1,0,display->orientation);
 749:main.c        **** 		LCDPrintString(newline,0, black, j+1,0,0);
 750:main.c        **** 	}
 751:main.c        **** }
 752:main.c        **** 
 753:main.c        **** void reset(void)
 754:main.c        **** {
 333              		.loc 1 754 0
 334              		@ Function supports interworking.
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 755:main.c        ****     // Intentionally fault Watchdog to trigger a reset condition
 756:main.c        ****     WDMOD |= 3;
 338              		.loc 1 756 0
 339 0210 0E22A0E3 		mov	r2, #-536870912
 340 0214 003092E5 		ldr	r3, [r2, #0]
 341 0218 033083E3 		orr	r3, r3, #3
 342 021c 003082E5 		str	r3, [r2, #0]
 757:main.c        ****     WDFEED = 0xAA;
 343              		.loc 1 757 0
 344 0220 AA10A0E3 		mov	r1, #170
 758:main.c        ****     WDFEED = 0x55;
 345              		.loc 1 758 0
 346 0224 5530A0E3 		mov	r3, #85
 347              		.loc 1 757 0
 348 0228 081082E5 		str	r1, [r2, #8]
 349              		.loc 1 758 0
 350 022c 083082E5 		str	r3, [r2, #8]
 759:main.c        ****     WDFEED = 0xAA;
 760:main.c        ****     WDFEED = 0x00;
 351              		.loc 1 760 0
 352 0230 0030A0E3 		mov	r3, #0
 353              		.loc 1 759 0
 354 0234 081082E5 		str	r1, [r2, #8]
 355              		.loc 1 760 0
 356 0238 083082E5 		str	r3, [r2, #8]
 761:main.c        **** }
 357              		.loc 1 761 0
 358 023c 1EFF2FE1 		bx	lr
 359              	.LFE18:
 361              		.align	2
 362              		.global	quickClear
 364              	quickClear:
 365              	.LFB17:
 366              		.loc 1 739 0
 367              		@ Function supports interworking.
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL22:
 371              		.loc 1 740 0
 372 0240 B8209FE5 		ldr	r2, .L45
 373 0244 003092E5 		ldr	r3, [r2, #0]
 374              		.loc 1 739 0
 375 0248 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 376              	.LCFI2:
 377              		.loc 1 740 0
 378 024c FF3DC3E3 		bic	r3, r3, #16320
 379 0250 3030C3E3 		bic	r3, r3, #48
 380 0254 003082E5 		str	r3, [r2, #0]
 381              		.loc 1 742 0
 382 0258 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 383 025c 00005EE3 		cmp	lr, #0
 384              		.loc 1 739 0
 385 0260 08D04DE2 		sub	sp, sp, #8
 386              	.LCFI3:
 387              		.loc 1 739 0
 388 0264 0050A0E1 		mov	r5, r0
 389              		.loc 1 742 0
 390 0268 0700001A 		bne	.L41
 391              	.LVL23:
 392              		.loc 1 743 0
 393 026c 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 394 0270 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 395 0274 0E10A0E1 		mov	r1, lr
 396 0278 7B0F80E2 		add	r0, r0, #492
 397 027c 0E30A0E1 		mov	r3, lr
 398 0280 04C08DE5 		str	ip, [sp, #4]
 399 0284 00E08DE5 		str	lr, [sp, #0]
 400 0288 FEFFFFEB 		bl	LCDPrintString
 401              	.LVL24:
 402              	.L41:
 403              		.loc 1 746 0
 404 028c 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 405 0290 0010A0E3 		mov	r1, #0
 406 0294 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 407 0298 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 408 029c FEFFFFEB 		bl	LCDSetRowColor
 409 02a0 0040A0E3 		mov	r4, #0
 410              	.LVL25:
 411              	.LBB51:
 412              		.loc 1 749 0
 413 02a4 58709FE5 		ldr	r7, .L45+4
 414              		.loc 1 748 0
 415 02a8 0460A0E1 		mov	r6, r4
 416              	.L42:
 417 02ac 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 418 02b0 840285E0 		add	r0, r5, r4, asl #5
 419              	.LBE51:
 420              		.loc 1 746 0
 421 02b4 014084E2 		add	r4, r4, #1
 422              	.LVL26:
 423              	.LBB52:
 424              		.loc 1 748 0
 425 02b8 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 426 02bc 0C0080E2 		add	r0, r0, #12
 427 02c0 0610A0E1 		mov	r1, r6
 428 02c4 0430A0E1 		mov	r3, r4
 429 02c8 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 430 02cc FEFFFFEB 		bl	LCDPrintString
 431              		.loc 1 749 0
 432 02d0 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 433 02d4 2C009FE5 		ldr	r0, .L45+8
 434 02d8 0610A0E1 		mov	r1, r6
 435 02dc 0430A0E1 		mov	r3, r4
 436 02e0 00608DE5 		str	r6, [sp, #0]
 437 02e4 04608DE5 		str	r6, [sp, #4]
 438 02e8 FEFFFFEB 		bl	LCDPrintString
 439              		.loc 1 747 0
 440 02ec 0F0054E3 		cmp	r4, #15
 441              	.LVL27:
 442 02f0 EDFFFF1A 		bne	.L42
 443              	.LBE52:
 444              		.loc 1 751 0
 445 02f4 08D08DE2 		add	sp, sp, #8
 446 02f8 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 447 02fc 1EFF2FE1 		bx	lr
 448              	.L46:
 449              		.align	2
 450              	.L45:
 451 0300 00C002E0 		.word	-536690688
 452 0304 00000000 		.word	black
 453 0308 00000000 		.word	newline
 454              	.LFE17:
 456              		.align	2
 457              		.global	printMenu
 459              	printMenu:
 460              	.LFB12:
 461              		.loc 1 483 0
 462              		@ Function supports interworking.
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              	.LVL28:
 466              		.loc 1 484 0
 467 030c C0209FE5 		ldr	r2, .L52
 468 0310 003092E5 		ldr	r3, [r2, #0]
 469              		.loc 1 483 0
 470 0314 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 471              	.LCFI4:
 472              		.loc 1 484 0
 473 0318 FF3DC3E3 		bic	r3, r3, #16320
 474 031c 3030C3E3 		bic	r3, r3, #48
 475 0320 003082E5 		str	r3, [r2, #0]
 476              		.loc 1 485 0
 477 0324 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 478 0328 00005EE3 		cmp	lr, #0
 479              		.loc 1 483 0
 480 032c 08D04DE2 		sub	sp, sp, #8
 481              	.LCFI5:
 482              		.loc 1 483 0
 483 0330 0050A0E1 		mov	r5, r0
 484              		.loc 1 485 0
 485 0334 0700001A 		bne	.L48
 486              	.LVL29:
 487 0338 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 488 033c 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 489 0340 0E10A0E1 		mov	r1, lr
 490 0344 7B0F80E2 		add	r0, r0, #492
 491 0348 0E30A0E1 		mov	r3, lr
 492 034c 04C08DE5 		str	ip, [sp, #4]
 493 0350 00E08DE5 		str	lr, [sp, #0]
 494 0354 FEFFFFEB 		bl	LCDPrintString
 495              	.LVL30:
 496              	.L48:
 497 0358 0030A0E3 		mov	r3, #0
 498              	.LVL31:
 499              	.LBB53:
 500              		.loc 1 487 0
 501 035c 0360A0E1 		mov	r6, r3
 502              	.L49:
 503 0360 014083E2 		add	r4, r3, #1
 504 0364 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 505 0368 830285E0 		add	r0, r5, r3, asl #5
 506 036c 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 507 0370 0430A0E1 		mov	r3, r4
 508              	.LVL32:
 509 0374 0C0080E2 		add	r0, r0, #12
 510 0378 0610A0E1 		mov	r1, r6
 511 037c 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 512 0380 FEFFFFEB 		bl	LCDPrintString
 513              		.loc 1 486 0
 514 0384 0F0054E3 		cmp	r4, #15
 515              	.LVL33:
 516 0388 0430A0E1 		mov	r3, r4
 517              	.LVL34:
 518 038c F3FFFF1A 		bne	.L49
 519              	.LBE53:
 520              		.loc 1 489 0
 521 0390 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 522 0394 0610A0E1 		mov	r1, r6
 523 0398 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 524 039c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 525              	.LVL35:
 526 03a0 FEFFFFEB 		bl	LCDSetRowColor
 527              		.loc 1 490 0
 528 03a4 080095E5 		ldr	r0, [r5, #8]
 529 03a8 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 530 03ac 800285E0 		add	r0, r5, r0, asl #5
 531 03b0 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 532 03b4 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 533 03b8 0C0080E2 		add	r0, r0, #12
 534 03bc 0610A0E1 		mov	r1, r6
 535 03c0 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 536 03c4 FEFFFFEB 		bl	LCDPrintString
 537              		.loc 1 491 0
 538 03c8 08D08DE2 		add	sp, sp, #8
 539 03cc 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 540 03d0 1EFF2FE1 		bx	lr
 541              	.L53:
 542              		.align	2
 543              	.L52:
 544 03d4 00C002E0 		.word	-536690688
 545              	.LFE12:
 547              		.align	2
 548              		.global	highlightRow
 550              	highlightRow:
 551              	.LFB11:
 552              		.loc 1 464 0
 553              		@ Function supports interworking.
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              	.LVL36:
 557              		.loc 1 465 0
 558 03d8 D0209FE5 		ldr	r2, .L59
 559 03dc 003092E5 		ldr	r3, [r2, #0]
 560              		.loc 1 464 0
 561 03e0 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 562              	.LCFI6:
 563              		.loc 1 465 0
 564 03e4 FF3DC3E3 		bic	r3, r3, #16320
 565 03e8 3030C3E3 		bic	r3, r3, #48
 566 03ec 003082E5 		str	r3, [r2, #0]
 567              		.loc 1 464 0
 568 03f0 0060A0E1 		mov	r6, r0
 569 03f4 08D04DE2 		sub	sp, sp, #8
 570              	.LCFI7:
 571              		.loc 1 466 0
 572 03f8 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 573 03fc 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 574              		.loc 1 464 0
 575 0400 0140A0E1 		mov	r4, r1
 576              		.loc 1 466 0
 577 0404 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 578              	.LVL37:
 579 0408 0010A0E3 		mov	r1, #0
 580              	.LVL38:
 581 040c FEFFFFEB 		bl	LCDSetRowColor
 582              		.loc 1 467 0
 583 0410 080096E5 		ldr	r0, [r6, #8]
 584 0414 00C0A0E3 		mov	ip, #0
 585 0418 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 586 041c 800286E0 		add	r0, r6, r0, asl #5
 587 0420 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 588 0424 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 589 0428 0C10A0E1 		mov	r1, ip
 590 042c 0C0080E2 		add	r0, r0, #12
 591 0430 00C08DE5 		str	ip, [sp, #0]
 592              		.loc 1 464 0
 593 0434 FF4004E2 		and	r4, r4, #255
 594              	.LVL39:
 595              		.loc 1 467 0
 596 0438 04508DE5 		str	r5, [sp, #4]
 597 043c FEFFFFEB 		bl	LCDPrintString
 598 0440 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 599              		.loc 1 468 0
 600 0444 010054E3 		cmp	r4, #1
 601 0448 082096E5 		ldr	r2, [r6, #8]
 602              		.loc 1 469 0
 603 044c 01304302 		subeq	r3, r3, #1
 604              		.loc 1 473 0
 605 0450 01308312 		addne	r3, r3, #1
 606 0454 0030C6E5 		strb	r3, [r6, #0]
 607              		.loc 1 470 0
 608 0458 01204202 		subeq	r2, r2, #1
 609              		.loc 1 474 0
 610 045c 01208212 		addne	r2, r2, #1
 611 0460 082086E5 		str	r2, [r6, #8]
 612              		.loc 1 476 0
 613 0464 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 614 0468 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 615 046c 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 616 0470 0010A0E3 		mov	r1, #0
 617 0474 FEFFFFEB 		bl	LCDSetRowColor
 618              		.loc 1 477 0
 619 0478 080096E5 		ldr	r0, [r6, #8]
 620 047c 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 621              	.LVL40:
 622 0480 00C0A0E3 		mov	ip, #0
 623 0484 800286E0 		add	r0, r6, r0, asl #5
 624 0488 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 625 048c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 626 0490 0C0080E2 		add	r0, r0, #12
 627 0494 0C10A0E1 		mov	r1, ip
 628 0498 04408DE5 		str	r4, [sp, #4]
 629 049c 00C08DE5 		str	ip, [sp, #0]
 630 04a0 FEFFFFEB 		bl	LCDPrintString
 631              		.loc 1 478 0
 632 04a4 08D08DE2 		add	sp, sp, #8
 633 04a8 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 634 04ac 1EFF2FE1 		bx	lr
 635              	.L60:
 636              		.align	2
 637              	.L59:
 638 04b0 00C002E0 		.word	-536690688
 639              	.LFE11:
 641              		.align	2
 642              		.global	handleDownButton
 644              	handleDownButton:
 645              	.LFB15:
 646              		.loc 1 548 0
 647              		@ Function supports interworking.
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              	.LVL41:
 651 04b4 30402DE9 		stmfd	sp!, {r4, r5, lr}
 652              	.LCFI8:
 653              		.loc 1 549 0
 654 04b8 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 655 04bc 0E0053E3 		cmp	r3, #14
 656              		.loc 1 548 0
 657 04c0 0040A0E1 		mov	r4, r0
 658 04c4 0150A0E1 		mov	r5, r1
 659              		.loc 1 549 0
 660 04c8 0200008A 		bhi	.L62
 661              	.LVL42:
 662              		.loc 1 550 0
 663 04cc 0010A0E3 		mov	r1, #0
 664              		.loc 1 564 0
 665 04d0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 666              		.loc 1 550 0
 667 04d4 FEFFFFEA 		b	highlightRow
 668              	.LVL43:
 669              	.L62:
 670              		.loc 1 553 0
 671 04d8 0F0053E3 		cmp	r3, #15
 672 04dc 1000001A 		bne	.L64
 673 04e0 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 674 04e4 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 675 04e8 020053E1 		cmp	r3, r2
 676 04ec 0C00009A 		bls	.L64
 677              	.LVL44:
 678              		.loc 1 555 0
 679 04f0 013082E2 		add	r3, r2, #1
 680 04f4 0630C0E5 		strb	r3, [r0, #6]
 681              		.loc 1 558 0
 682 04f8 FEFFFFEB 		bl	quickClear
 683              	.LVL45:
 684              		.loc 1 559 0
 685 04fc 0130A0E3 		mov	r3, #1
 686 0500 0030C4E5 		strb	r3, [r4, #0]
 687              		.loc 1 560 0
 688 0504 0030A0E3 		mov	r3, #0
 689 0508 083084E5 		str	r3, [r4, #8]
 690              		.loc 1 561 0
 691 050c 0510A0E1 		mov	r1, r5
 692 0510 14009FE5 		ldr	r0, .L65
 693 0514 FEFFFFEB 		bl	getNewFiles
 694              		.loc 1 562 0
 695 0518 0400A0E1 		mov	r0, r4
 696              		.loc 1 564 0
 697 051c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 698              		.loc 1 562 0
 699 0520 FEFFFFEA 		b	printMenu
 700              	.LVL46:
 701              	.L64:
 702              		.loc 1 564 0
 703 0524 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 704 0528 1EFF2FE1 		bx	lr
 705              	.L66:
 706              		.align	2
 707              	.L65:
 708 052c 74000000 		.word	file_manager
 709              	.LFE15:
 711              		.align	2
 712              		.global	handleUpButton
 714              	handleUpButton:
 715              	.LFB14:
 716              		.loc 1 524 0
 717              		@ Function supports interworking.
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              	.LVL47:
 721 0530 30402DE9 		stmfd	sp!, {r4, r5, lr}
 722              	.LCFI9:
 723              		.loc 1 525 0
 724 0534 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 725 0538 010053E3 		cmp	r3, #1
 726              		.loc 1 524 0
 727 053c 0040A0E1 		mov	r4, r0
 728 0540 0150A0E1 		mov	r5, r1
 729              		.loc 1 525 0
 730 0544 0200009A 		bls	.L68
 731              	.LVL48:
 732              		.loc 1 526 0
 733 0548 0110A0E3 		mov	r1, #1
 734              		.loc 1 540 0
 735 054c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 736              		.loc 1 526 0
 737 0550 FEFFFFEA 		b	highlightRow
 738              	.LVL49:
 739              	.L68:
 740              		.loc 1 529 0
 741 0554 0F00001A 		bne	.L70
 742 0558 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 743 055c 000053E3 		cmp	r3, #0
 744 0560 0C00000A 		beq	.L70
 745              	.LVL50:
 746              		.loc 1 531 0
 747 0564 013043E2 		sub	r3, r3, #1
 748 0568 0630C0E5 		strb	r3, [r0, #6]
 749              		.loc 1 534 0
 750 056c FEFFFFEB 		bl	quickClear
 751              	.LVL51:
 752              		.loc 1 535 0
 753 0570 0F30A0E3 		mov	r3, #15
 754 0574 0030C4E5 		strb	r3, [r4, #0]
 755              		.loc 1 536 0
 756 0578 0E30A0E3 		mov	r3, #14
 757 057c 083084E5 		str	r3, [r4, #8]
 758              		.loc 1 537 0
 759 0580 0510A0E1 		mov	r1, r5
 760 0584 14009FE5 		ldr	r0, .L71
 761 0588 FEFFFFEB 		bl	getNewFiles
 762              		.loc 1 538 0
 763 058c 0400A0E1 		mov	r0, r4
 764              		.loc 1 540 0
 765 0590 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 766              		.loc 1 538 0
 767 0594 FEFFFFEA 		b	printMenu
 768              	.LVL52:
 769              	.L70:
 770              		.loc 1 540 0
 771 0598 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 772 059c 1EFF2FE1 		bx	lr
 773              	.L72:
 774              		.align	2
 775              	.L71:
 776 05a0 74000000 		.word	file_manager
 777              	.LFE14:
 779              		.align	2
 781              	timer1ISR:
 782              	.LFB5:
 783              		.loc 1 354 0
 784              		@ Function supports interworking.
 785              		@ args = 0, pretend = 0, frame = 0
 786              		@ frame_needed = 0, uses_anonymous_args = 0
 787 05a4 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 788              	.LCFI10:
 789              		.loc 1 355 0
 790 05a8 FEFFFFEB 		bl	vs1002Config
 791              		.loc 1 356 0
 792 05ac 68A09FE5 		ldr	sl, .L79
 793              		.loc 1 358 0
 794 05b0 68809FE5 		ldr	r8, .L79+4
 795 05b4 68509FE5 		ldr	r5, .L79+8
 796              		.loc 1 359 0
 797 05b8 0070A0E3 		mov	r7, #0
 798              		.loc 1 358 0
 799 05bc 0160A0E3 		mov	r6, #1
 800 05c0 080000EA 		b	.L78
 801              	.L76:
 802              		.loc 1 357 0
 803 05c4 FEFFFFEB 		bl	vs1002SendMusic
 804              		.loc 1 358 0
 805 05c8 340098E5 		ldr	r0, [r8, #52]
 806 05cc 54109FE5 		ldr	r1, .L79+12
 807 05d0 2020A0E3 		mov	r2, #32
 808 05d4 FEFFFFEB 		bl	fat16_read_file
 809 05d8 0008A0E1 		mov	r0, r0, asl #16
 810 05dc 000050E3 		cmp	r0, #0
 811 05e0 0060C5D5 		strleb	r6, [r5, #0]
 812              		.loc 1 359 0
 813 05e4 0070C5C5 		strgtb	r7, [r5, #0]
 814              	.L78:
 815              		.loc 1 356 0
 816 05e8 00309AE5 		ldr	r3, [sl, #0]
 817 05ec 024613E2 		ands	r4, r3, #2097152
 818              		.loc 1 357 0
 819 05f0 30009FE5 		ldr	r0, .L79+12
 820 05f4 2010A0E3 		mov	r1, #32
 821              		.loc 1 356 0
 822 05f8 F1FFFF1A 		bne	.L76
 823              		.loc 1 361 0
 824 05fc FEFFFFEB 		bl	vs1002Finish
 825              		.loc 1 362 0
 826 0600 24209FE5 		ldr	r2, .L79+16
 827 0604 FF30A0E3 		mov	r3, #255
 828 0608 003082E5 		str	r3, [r2, #0]
 829              		.loc 1 363 0
 830 060c 0030E0E3 		mvn	r3, #0
 831 0610 CF4F03E5 		str	r4, [r3, #-4047]
 832              		.loc 1 364 0
 833 0614 F045BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 834 0618 1EFF2FE1 		bx	lr
 835              	.L80:
 836              		.align	2
 837              	.L79:
 838 061c 008002E0 		.word	-536707072
 839 0620 14000000 		.word	current_song
 840 0624 02000000 		.word	song_is_over
 841 0628 51000000 		.word	current_song+61
 842 062c 008000E0 		.word	-536838144
 843              	.LFE5:
 845              		.align	2
 846              		.global	closeSong
 848              	closeSong:
 849              	.LFB10:
 850              		.loc 1 454 0
 851              		@ Function supports interworking.
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              	.LVL53:
 855 0630 10402DE9 		stmfd	sp!, {r4, lr}
 856              	.LCFI11:
 857              		.loc 1 455 0
 858 0634 28409FE5 		ldr	r4, .L83
 859 0638 003094E5 		ldr	r3, [r4, #0]
 860 063c 153C83E3 		orr	r3, r3, #5376
 861 0640 003084E5 		str	r3, [r4, #0]
 862              		.loc 1 456 0
 863 0644 340090E5 		ldr	r0, [r0, #52]
 864              	.LVL54:
 865 0648 FEFFFFEB 		bl	fat16_close_file
 866              		.loc 1 457 0
 867 064c 003094E5 		ldr	r3, [r4, #0]
 868 0650 FF3DC3E3 		bic	r3, r3, #16320
 869 0654 3030C3E3 		bic	r3, r3, #48
 870 0658 003084E5 		str	r3, [r4, #0]
 871              		.loc 1 458 0
 872 065c 1040BDE8 		ldmfd	sp!, {r4, lr}
 873 0660 1EFF2FE1 		bx	lr
 874              	.L84:
 875              		.align	2
 876              	.L83:
 877 0664 00C002E0 		.word	-536690688
 878              	.LFE10:
 880              		.align	2
 881              		.global	loadSongInfo
 883              	loadSongInfo:
 884              	.LFB9:
 885              		.loc 1 419 0
 886              		@ Function supports interworking.
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              	.LVL55:
 890 0668 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 891              	.LCFI12:
 892              		.loc 1 419 0
 893 066c 0020A0E3 		mov	r2, #0
 894              	.LVL56:
 895 0670 0040A0E1 		mov	r4, r0
 896              	.LVL57:
 897              	.L86:
 898              	.LBB54:
 899              		.loc 1 422 0
 900 0674 083091E5 		ldr	r3, [r1, #8]
 901 0678 833281E0 		add	r3, r1, r3, asl #5
 902 067c 023083E0 		add	r3, r3, r2
 903 0680 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 904              		.loc 1 421 0
 905 0684 012082E2 		add	r2, r2, #1
 906 0688 1E0052E3 		cmp	r2, #30
 907              		.loc 1 422 0
 908 068c 1630C0E5 		strb	r3, [r0, #22]
 909              		.loc 1 421 0
 910 0690 010080E2 		add	r0, r0, #1
 911 0694 F6FFFF1A 		bne	.L86
 912 0698 0020A0E3 		mov	r2, #0
 913              	.LVL58:
 914              	.LBE54:
 915              	.LBB55:
 916              		.loc 1 427 0
 917 069c 0210A0E1 		mov	r1, r2
 918              	.LVL59:
 919              	.L89:
 920              		.loc 1 426 0
 921 06a0 023084E0 		add	r3, r4, r2
 922 06a4 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 923 06a8 150052E3 		cmp	r2, #21
 924 06ac 2E005313 		cmpne	r3, #46
 925              		.loc 1 427 0
 926 06b0 0210C407 		streqb	r1, [r4, r2]
 927 06b4 1620A003 		moveq	r2, #22
 928              		.loc 1 430 0
 929 06b8 0230C417 		strneb	r3, [r4, r2]
 930              		.loc 1 425 0
 931 06bc 012082E2 		add	r2, r2, #1
 932 06c0 150052E3 		cmp	r2, #21
 933 06c4 F5FFFFDA 		ble	.L89
 934              	.LBE55:
 935              		.loc 1 433 0
 936 06c8 6C609FE5 		ldr	r6, .L95
 937 06cc 003096E5 		ldr	r3, [r6, #0]
 938              		.loc 1 435 0
 939 06d0 165084E2 		add	r5, r4, #22
 940              		.loc 1 433 0
 941 06d4 153C83E3 		orr	r3, r3, #5376
 942              		.loc 1 435 0
 943 06d8 0500A0E1 		mov	r0, r5
 944              		.loc 1 433 0
 945 06dc 003086E5 		str	r3, [r6, #0]
 946              		.loc 1 435 0
 947 06e0 FEFFFFEB 		bl	root_file_exists
 948              	.LVL60:
 949 06e4 000050E3 		cmp	r0, #0
 950              		.loc 1 436 0
 951 06e8 00309605 		ldreq	r3, [r6, #0]
 952 06ec FF3DC303 		biceq	r3, r3, #16320
 953 06f0 3030C303 		biceq	r3, r3, #48
 954 06f4 00308605 		streq	r3, [r6, #0]
 955 06f8 0D00000A 		beq	.L91
 956              	.L90:
 957              		.loc 1 441 0
 958 06fc 0500A0E1 		mov	r0, r5
 959 0700 FEFFFFEB 		bl	root_open
 960 0704 340084E5 		str	r0, [r4, #52]
 961              		.loc 1 442 0
 962 0708 FEFFFFEB 		bl	fat16_file_size
 963              		.loc 1 443 0
 964 070c 3D1084E2 		add	r1, r4, #61
 965              		.loc 1 442 0
 966 0710 380084E5 		str	r0, [r4, #56]
 967              		.loc 1 443 0
 968 0714 2020A0E3 		mov	r2, #32
 969 0718 340094E5 		ldr	r0, [r4, #52]
 970 071c FEFFFFEB 		bl	fat16_read_file
 971              		.loc 1 447 0
 972 0720 003096E5 		ldr	r3, [r6, #0]
 973 0724 FF3DC3E3 		bic	r3, r3, #16320
 974 0728 3030C3E3 		bic	r3, r3, #48
 975 072c 003086E5 		str	r3, [r6, #0]
 976 0730 0100A0E3 		mov	r0, #1
 977              	.L91:
 978              		.loc 1 449 0
 979 0734 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 980 0738 1EFF2FE1 		bx	lr
 981              	.L96:
 982              		.align	2
 983              	.L95:
 984 073c 00C002E0 		.word	-536690688
 985              	.LFE9:
 987              		.section	.rodata.str1.1,"aMS",%progbits,1
 988              	.LC0:
 989 0000 256400   		.ascii	"%d\000"
 990              	.LC1:
 991 0003 4F6E00   		.ascii	"On\000"
 992              	.LC2:
 993 0006 4F666600 		.ascii	"Off\000"
 994              		.text
 995              		.align	2
 996              		.global	handleMiddleButton
 998              	handleMiddleButton:
 999              	.LFB16:
 1000              		.loc 1 574 0
 1001              		@ Function supports interworking.
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004 0740 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1005              	.LCFI13:
 1006              		.loc 1 575 0
 1007 0744 1020A0E3 		mov	r2, #16
 1008 0748 0030E0E3 		mvn	r3, #0
 1009 074c EB2F03E5 		str	r2, [r3, #-4075]
 1010              	.LBB56:
 1011              	.LBB57:
 1012              		.loc 1 265 0
 1013 0750 44269FE5 		ldr	r2, .L147
 1014              	.LBE57:
 1015              	.LBE56:
 1016              		.loc 1 574 0
 1017 0754 08D04DE2 		sub	sp, sp, #8
 1018              	.LCFI14:
 1019              		.loc 1 575 0
 1020 0758 013083E2 		add	r3, r3, #1
 1021              	.LVL61:
 1022              	.L98:
 1023              	.LBB59:
 1024              	.LBB58:
 1025              		.loc 1 266 0
 1026              	@ 266 "main.c" 1
 1027 075c 0000A0E1 		nop
 1028              	@ 0 "" 2
 1029              		.loc 1 265 0
 1030 0760 013083E2 		add	r3, r3, #1
 1031 0764 020053E1 		cmp	r3, r2
 1032 0768 FBFFFF1A 		bne	.L98
 1033              	.LBE58:
 1034              	.LBE59:
 1035              		.loc 1 579 0
 1036 076c 2C769FE5 		ldr	r7, .L147+4
 1037 0770 2C369FE5 		ldr	r3, .L147+8
 1038              	.LVL62:
 1039 0774 000097E5 		ldr	r0, [r7, #0]
 1040 0778 030050E1 		cmp	r0, r3
 1041 077c 24669FE5 		ldr	r6, .L147+12
 1042 0780 6C00001A 		bne	.L99
 1043              		.loc 1 580 0
 1044 0784 0050D6E5 		ldrb	r5, [r6, #0]	@ zero_extendqisi2
 1045 0788 000055E3 		cmp	r5, #0
 1046 078c 4900001A 		bne	.L100
 1047              		.loc 1 581 0
 1048 0790 0010A0E1 		mov	r1, r0
 1049 0794 10069FE5 		ldr	r0, .L147+16
 1050 0798 FEFFFFEB 		bl	loadSongInfo
 1051              		.loc 1 582 0
 1052 079c 000050E3 		cmp	r0, #0
 1053              		.loc 1 581 0
 1054 07a0 0040A0E1 		mov	r4, r0
 1055 07a4 0000C6E5 		strb	r0, [r6, #0]
 1056              		.loc 1 582 0
 1057 07a8 1700001A 		bne	.L101
 1058              		.loc 1 583 0
 1059 07ac FC359FE5 		ldr	r3, .L147+20
 1060 07b0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1061 07b4 FEFFFFEB 		bl	LCDClear
 1062              		.loc 1 584 0
 1063 07b8 00408DE5 		str	r4, [sp, #0]
 1064 07bc 001097E5 		ldr	r1, [r7, #0]
 1065 07c0 EC359FE5 		ldr	r3, .L147+24
 1066 07c4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1067 07c8 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1068 07cc E4059FE5 		ldr	r0, .L147+28
 1069 07d0 0130A0E3 		mov	r3, #1
 1070 07d4 0410A0E1 		mov	r1, r4
 1071 07d8 04C08DE5 		str	ip, [sp, #4]
 1072 07dc FEFFFFEB 		bl	LCDPrintString
 1073              	.LBB60:
 1074              	.LBB61:
 1075              		.loc 1 265 0
 1076 07e0 D4359FE5 		ldr	r3, .L147+32
 1077              	.LBE61:
 1078              	.LBE60:
 1079              		.loc 1 584 0
 1080 07e4 0400A0E1 		mov	r0, r4
 1081              	.LVL63:
 1082              	.L102:
 1083              	.LBB63:
 1084              	.LBB62:
 1085              		.loc 1 266 0
 1086              	@ 266 "main.c" 1
 1087 07e8 0000A0E1 		nop
 1088              	@ 0 "" 2
 1089              		.loc 1 265 0
 1090 07ec 010080E2 		add	r0, r0, #1
 1091 07f0 030050E1 		cmp	r0, r3
 1092 07f4 FBFFFF1A 		bne	.L102
 1093              	.LBE62:
 1094              	.LBE63:
 1095              		.loc 1 586 0
 1096 07f8 B4359FE5 		ldr	r3, .L147+24
 1097 07fc 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1098              	.LVL64:
 1099 0800 FEFFFFEB 		bl	LCDClear
 1100              		.loc 1 587 0
 1101 0804 98059FE5 		ldr	r0, .L147+8
 1102 0808 5B0100EA 		b	.L146
 1103              	.L101:
 1104              		.loc 1 590 0
 1105 080c FEFFFFEB 		bl	vs1002Config
 1106              		.loc 1 593 0
 1107 0810 A8459FE5 		ldr	r4, .L147+36
 1108              		.loc 1 591 0
 1109 0814 0500A0E1 		mov	r0, r5
 1110 0818 021BA0E3 		mov	r1, #2048
 1111 081c FEFFFFEB 		bl	vs1002SCIWrite
 1112              		.loc 1 592 0
 1113 0820 FEFFFFEB 		bl	vs1002Finish
 1114              		.loc 1 593 0
 1115 0824 0232A0E3 		mov	r3, #536870912
 1116 0828 0C3084E5 		str	r3, [r4, #12]
 1117              		.loc 1 599 0
 1118 082c 05A0A0E1 		mov	sl, r5
 1119              		.loc 1 595 0
 1120 0830 FEFFFFEB 		bl	vs1002Config
 1121              		.loc 1 598 0
 1122 0834 70859FE5 		ldr	r8, .L147+16
 1123 0838 84659FE5 		ldr	r6, .L147+40
 1124 083c 0170A0E3 		mov	r7, #1
 1125 0840 080000EA 		b	.L142
 1126              	.L106:
 1127              		.loc 1 597 0
 1128 0844 FEFFFFEB 		bl	vs1002SendMusic
 1129              		.loc 1 598 0
 1130 0848 340098E5 		ldr	r0, [r8, #52]
 1131 084c 74159FE5 		ldr	r1, .L147+44
 1132 0850 2020A0E3 		mov	r2, #32
 1133 0854 FEFFFFEB 		bl	fat16_read_file
 1134 0858 0008A0E1 		mov	r0, r0, asl #16
 1135 085c 000050E3 		cmp	r0, #0
 1136 0860 0070C6D5 		strleb	r7, [r6, #0]
 1137              		.loc 1 599 0
 1138 0864 00A0C6C5 		strgtb	sl, [r6, #0]
 1139              	.L142:
 1140              		.loc 1 596 0
 1141 0868 003094E5 		ldr	r3, [r4, #0]
 1142 086c 020613E3 		tst	r3, #2097152
 1143              		.loc 1 597 0
 1144 0870 50059FE5 		ldr	r0, .L147+44
 1145 0874 2010A0E3 		mov	r1, #32
 1146              		.loc 1 596 0
 1147 0878 40559FE5 		ldr	r5, .L147+36
 1148 087c F0FFFF1A 		bne	.L106
 1149              		.loc 1 601 0
 1150 0880 FEFFFFEB 		bl	vs1002Finish
 1151              		.loc 1 602 0
 1152 0884 40259FE5 		ldr	r2, .L147+48
 1153 0888 043092E5 		ldr	r3, [r2, #4]
 1154 088c 033B83E3 		orr	r3, r3, #3072
 1155 0890 043082E5 		str	r3, [r2, #4]
 1156              		.loc 1 603 0
 1157 0894 0020E0E3 		mvn	r2, #0
 1158 0898 EF3F12E5 		ldr	r3, [r2, #-4079]
 1159 089c 203083E3 		orr	r3, r3, #32
 1160 08a0 EF3F02E5 		str	r3, [r2, #-4079]
 1161              		.loc 1 604 0
 1162 08a4 083095E5 		ldr	r3, [r5, #8]
 1163 08a8 033783E3 		orr	r3, r3, #786432
 1164 08ac 503083E3 		orr	r3, r3, #80
 1165 08b0 083085E5 		str	r3, [r5, #8]
 1166 08b4 310100EA 		b	.L103
 1167              	.L100:
 1168              		.loc 1 608 0
 1169 08b8 2020A0E3 		mov	r2, #32
 1170 08bc 0030E0E3 		mvn	r3, #0
 1171 08c0 EB2F03E5 		str	r2, [r3, #-4075]
 1172              		.loc 1 609 0
 1173 08c4 F4349FE5 		ldr	r3, .L147+36
 1174 08c8 0222A0E3 		mov	r2, #536870912
 1175 08cc 042083E5 		str	r2, [r3, #4]
 1176              		.loc 1 610 0
 1177 08d0 FEFFFFEB 		bl	vs1002Config
 1178              		.loc 1 611 0
 1179 08d4 0000A0E3 		mov	r0, #0
 1180 08d8 0810A0E3 		mov	r1, #8
 1181 08dc FEFFFFEB 		bl	vs1002SCIWrite
 1182 08e0 0040A0E3 		mov	r4, #0
 1183              	.LVL65:
 1184              	.L107:
 1185              	.LBB64:
 1186              		.loc 1 612 0
 1187 08e4 0000A0E3 		mov	r0, #0
 1188 08e8 014084E2 		add	r4, r4, #1
 1189 08ec 0010A0E1 		mov	r1, r0
 1190 08f0 FEFFFFEB 		bl	vs1002SCIWrite
 1191 08f4 960054E3 		cmp	r4, #150
 1192 08f8 F9FFFF1A 		bne	.L107
 1193              	.LBE64:
 1194              		.loc 1 613 0
 1195 08fc FEFFFFEB 		bl	vs1002Finish
 1196              		.loc 1 614 0
 1197 0900 B8249FE5 		ldr	r2, .L147+36
 1198 0904 083092E5 		ldr	r3, [r2, #8]
 1199 0908 033783E3 		orr	r3, r3, #786432
 1200 090c 503083E3 		orr	r3, r3, #80
 1201 0910 083082E5 		str	r3, [r2, #8]
 1202              		.loc 1 615 0
 1203 0914 90049FE5 		ldr	r0, .L147+16
 1204 0918 FEFFFFEB 		bl	closeSong
 1205              		.loc 1 616 0
 1206 091c 84349FE5 		ldr	r3, .L147+12
 1207 0920 0020A0E3 		mov	r2, #0
 1208 0924 0020C3E5 		strb	r2, [r3, #0]
 1209              		.loc 1 617 0
 1210 0928 102082E2 		add	r2, r2, #16
 1211 092c 0030E0E3 		mvn	r3, #0
 1212 0930 EF2F03E5 		str	r2, [r3, #-4079]
 1213 0934 110100EA 		b	.L103
 1214              	.LVL66:
 1215              	.L99:
 1216              		.loc 1 623 0
 1217 0938 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1218 093c 000053E3 		cmp	r3, #0
 1219 0940 0100000A 		beq	.L108
 1220 0944 FEFFFFEB 		bl	quickClear
 1221 0948 020000EA 		b	.L109
 1222              	.L108:
 1223              		.loc 1 624 0
 1224 094c 7C349FE5 		ldr	r3, .L147+52
 1225 0950 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1226 0954 FEFFFFEB 		bl	LCDClear
 1227              	.L109:
 1228              		.loc 1 625 0
 1229 0958 40849FE5 		ldr	r8, .L147+4
 1230 095c 003098E5 		ldr	r3, [r8, #0]
 1231 0960 0070A0E3 		mov	r7, #0
 1232 0964 080093E5 		ldr	r0, [r3, #8]
 1233 0968 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1234 096c 00708DE5 		str	r7, [sp, #0]
 1235 0970 800283E0 		add	r0, r3, r0, asl #5
 1236 0974 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1237              		.loc 1 626 0
 1238 0978 0060E0E3 		mvn	r6, #0
 1239              		.loc 1 625 0
 1240 097c 0130A0E3 		mov	r3, #1
 1241 0980 0C0080E2 		add	r0, r0, #12
 1242 0984 0710A0E1 		mov	r1, r7
 1243 0988 04C08DE5 		str	ip, [sp, #4]
 1244 098c FEFFFFEB 		bl	LCDPrintString
 1245              		.loc 1 626 0
 1246 0990 EF3F16E5 		ldr	r3, [r6, #-4079]
 1247 0994 103083E3 		orr	r3, r3, #16
 1248 0998 EF3F06E5 		str	r3, [r6, #-4079]
 1249              		.loc 1 627 0
 1250 099c 002098E5 		ldr	r2, [r8, #0]
 1251 09a0 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 1252 09a4 010054E3 		cmp	r4, #1
 1253 09a8 5500001A 		bne	.L110
 1254              		.loc 1 628 0
 1255 09ac EF3F16E5 		ldr	r3, [r6, #-4079]
 1256 09b0 103083E3 		orr	r3, r3, #16
 1257 09b4 EF3F06E5 		str	r3, [r6, #-4079]
 1258              		.loc 1 629 0
 1259 09b8 0200A0E3 		mov	r0, #2
 1260 09bc 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1261 09c0 0710A0E1 		mov	r1, r7
 1262 09c4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1263 09c8 FEFFFFEB 		bl	LCDSetRowColor
 1264              		.loc 1 630 0
 1265 09cc 00708DE5 		str	r7, [sp, #0]
 1266 09d0 003098E5 		ldr	r3, [r8, #0]
 1267 09d4 D4539FE5 		ldr	r5, .L147+20
 1268 09d8 F4439FE5 		ldr	r4, .L147+56
 1269 09dc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1270 09e0 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1271 09e4 001094E5 		ldr	r1, [r4, #0]
 1272 09e8 E8039FE5 		ldr	r0, .L147+60
 1273 09ec 0230A0E3 		mov	r3, #2
 1274 09f0 04C08DE5 		str	ip, [sp, #4]
 1275              		.loc 1 632 0
 1276 09f4 06A0A0E1 		mov	sl, r6
 1277              		.loc 1 652 0
 1278 09f8 05B0A0E1 		mov	fp, r5
 1279              		.loc 1 651 0
 1280 09fc 0860A0E1 		mov	r6, r8
 1281              		.loc 1 630 0
 1282 0a00 FEFFFFEB 		bl	LCDPrintString
 1283              		.loc 1 631 0
 1284 0a04 D0539FE5 		ldr	r5, .L147+64
 1285              		.loc 1 632 0
 1286 0a08 1090A0E3 		mov	r9, #16
 1287              	.LBB65:
 1288              	.LBB66:
 1289              		.loc 1 265 0
 1290 0a0c CC839FE5 		ldr	r8, .L147+68
 1291 0a10 370000EA 		b	.L111
 1292              	.LVL67:
 1293              	.L117:
 1294              	.LBE66:
 1295              	.LBE65:
 1296              		.loc 1 632 0
 1297 0a14 EB9F0AE5 		str	r9, [sl, #-4075]
 1298 0a18 0030A0E3 		mov	r3, #0
 1299              	.LVL68:
 1300              	.L112:
 1301              	.LBB68:
 1302              	.LBB67:
 1303              		.loc 1 266 0
 1304              	@ 266 "main.c" 1
 1305 0a1c 0000A0E1 		nop
 1306              	@ 0 "" 2
 1307              		.loc 1 265 0
 1308 0a20 013083E2 		add	r3, r3, #1
 1309 0a24 080053E1 		cmp	r3, r8
 1310 0a28 FBFFFF1A 		bne	.L112
 1311              	.LBE67:
 1312              	.LBE68:
 1313              		.loc 1 634 0
 1314 0a2c 020052E3 		cmp	r2, #2
 1315 0a30 1200001A 		bne	.L113
 1316              		.loc 1 635 0
 1317 0a34 003094E5 		ldr	r3, [r4, #0]
 1318              	.LVL69:
 1319 0a38 1F0053E3 		cmp	r3, #31
 1320 0a3c 050000CA 		bgt	.L114
 1321              		.loc 1 636 0
 1322 0a40 013083E2 		add	r3, r3, #1
 1323 0a44 003084E5 		str	r3, [r4, #0]
 1324              		.loc 1 637 0
 1325 0a48 FEFFFFEB 		bl	vs1002Config
 1326              		.loc 1 638 0
 1327 0a4c 3100A0E3 		mov	r0, #49
 1328 0a50 FEFFFFEB 		bl	vs1002SetVolume
 1329              		.loc 1 639 0
 1330 0a54 FEFFFFEB 		bl	vs1002Finish
 1331              	.L114:
 1332              		.loc 1 641 0
 1333 0a58 002096E5 		ldr	r2, [r6, #0]
 1334 0a5c 0200A0E3 		mov	r0, #2
 1335 0a60 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1336 0a64 0010A0E3 		mov	r1, #0
 1337 0a68 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1338 0a6c FEFFFFEB 		bl	LCDSetRowColor
 1339              		.loc 1 642 0
 1340 0a70 003096E5 		ldr	r3, [r6, #0]
 1341 0a74 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1342 0a78 00708DE5 		str	r7, [sp, #0]
 1343              	.LVL70:
 1344 0a7c 130000EA 		b	.L143
 1345              	.LVL71:
 1346              	.L113:
 1347              		.loc 1 644 0
 1348 0a80 010052E3 		cmp	r2, #1
 1349 0a84 1700001A 		bne	.L115
 1350              		.loc 1 645 0
 1351 0a88 003094E5 		ldr	r3, [r4, #0]
 1352              	.LVL72:
 1353 0a8c 000053E3 		cmp	r3, #0
 1354 0a90 050000BA 		blt	.L116
 1355              		.loc 1 646 0
 1356 0a94 013043E2 		sub	r3, r3, #1
 1357 0a98 003084E5 		str	r3, [r4, #0]
 1358              		.loc 1 647 0
 1359 0a9c FEFFFFEB 		bl	vs1002Config
 1360              		.loc 1 648 0
 1361 0aa0 3000A0E3 		mov	r0, #48
 1362 0aa4 FEFFFFEB 		bl	vs1002SetVolume
 1363              		.loc 1 649 0
 1364 0aa8 FEFFFFEB 		bl	vs1002Finish
 1365              	.L116:
 1366              		.loc 1 651 0
 1367 0aac 002096E5 		ldr	r2, [r6, #0]
 1368 0ab0 0200A0E3 		mov	r0, #2
 1369 0ab4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1370 0ab8 0010A0E3 		mov	r1, #0
 1371 0abc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1372 0ac0 FEFFFFEB 		bl	LCDSetRowColor
 1373              		.loc 1 652 0
 1374 0ac4 00708DE5 		str	r7, [sp, #0]
 1375              	.LVL73:
 1376 0ac8 003096E5 		ldr	r3, [r6, #0]
 1377 0acc 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1378              	.L143:
 1379 0ad0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1380 0ad4 001094E5 		ldr	r1, [r4, #0]
 1381 0ad8 F8029FE5 		ldr	r0, .L147+60
 1382 0adc 0230A0E3 		mov	r3, #2
 1383 0ae0 04C08DE5 		str	ip, [sp, #4]
 1384 0ae4 FEFFFFEB 		bl	LCDPrintString
 1385              	.LVL74:
 1386              	.L115:
 1387              		.loc 1 654 0
 1388 0ae8 EF3F1AE5 		ldr	r3, [sl, #-4079]
 1389 0aec 103083E3 		orr	r3, r3, #16
 1390 0af0 EF3F0AE5 		str	r3, [sl, #-4079]
 1391              	.L111:
 1392              		.loc 1 631 0
 1393 0af4 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1394 0af8 020052E3 		cmp	r2, #2
 1395 0afc C4FFFF9A 		bls	.L117
 1396 0b00 900000EA 		b	.L118
 1397              	.LVL75:
 1398              	.L110:
 1399              		.loc 1 657 0
 1400 0b04 030054E3 		cmp	r4, #3
 1401 0b08 5F00001A 		bne	.L119
 1402              		.loc 1 658 0
 1403 0b0c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1404 0b10 0710A0E1 		mov	r1, r7
 1405 0b14 0200A0E3 		mov	r0, #2
 1406 0b18 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1407 0b1c FEFFFFEB 		bl	LCDSetRowColor
 1408              		.loc 1 659 0
 1409 0b20 00708DE5 		str	r7, [sp, #0]
 1410 0b24 003098E5 		ldr	r3, [r8, #0]
 1411 0b28 80529FE5 		ldr	r5, .L147+20
 1412 0b2c B0429FE5 		ldr	r4, .L147+72
 1413 0b30 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1414 0b34 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1415 0b38 001094E5 		ldr	r1, [r4, #0]
 1416 0b3c 0230A0E3 		mov	r3, #2
 1417 0b40 90029FE5 		ldr	r0, .L147+60
 1418 0b44 04C08DE5 		str	ip, [sp, #4]
 1419 0b48 FEFFFFEB 		bl	LCDPrintString
 1420              		.loc 1 661 0
 1421 0b4c EF3F16E5 		ldr	r3, [r6, #-4079]
 1422              		.loc 1 660 0
 1423 0b50 84229FE5 		ldr	r2, .L147+64
 1424              		.loc 1 661 0
 1425 0b54 103083E3 		orr	r3, r3, #16
 1426              		.loc 1 660 0
 1427 0b58 0070C2E5 		strb	r7, [r2, #0]
 1428              		.loc 1 662 0
 1429 0b5c 02B0A0E1 		mov	fp, r2
 1430              		.loc 1 661 0
 1431 0b60 EF3F06E5 		str	r3, [r6, #-4079]
 1432              		.loc 1 663 0
 1433 0b64 0670A0E1 		mov	r7, r6
 1434              	.LBB69:
 1435              	.LBB70:
 1436              		.loc 1 265 0
 1437 0b68 78929FE5 		ldr	r9, .L147+76
 1438              	.LBE70:
 1439              	.LBE69:
 1440              		.loc 1 674 0
 1441 0b6c 0860A0E1 		mov	r6, r8
 1442              		.loc 1 673 0
 1443 0b70 74A29FE5 		ldr	sl, .L147+80
 1444              		.loc 1 667 0
 1445 0b74 74829FE5 		ldr	r8, .L147+84
 1446 0b78 2D0000EA 		b	.L120
 1447              	.L126:
 1448              		.loc 1 663 0
 1449 0b7c 1030A0E3 		mov	r3, #16
 1450 0b80 EB3F07E5 		str	r3, [r7, #-4075]
 1451 0b84 0030A0E3 		mov	r3, #0
 1452              	.LVL76:
 1453              	.L121:
 1454              	.LBB72:
 1455              	.LBB71:
 1456              		.loc 1 266 0
 1457              	@ 266 "main.c" 1
 1458 0b88 0000A0E1 		nop
 1459              	@ 0 "" 2
 1460              		.loc 1 265 0
 1461 0b8c 013083E2 		add	r3, r3, #1
 1462 0b90 090053E1 		cmp	r3, r9
 1463 0b94 FBFFFF1A 		bne	.L121
 1464              	.LBE71:
 1465              	.LBE72:
 1466              		.loc 1 665 0
 1467 0b98 020052E3 		cmp	r2, #2
 1468 0b9c 0900001A 		bne	.L122
 1469              		.loc 1 667 0
 1470 0ba0 003094E5 		ldr	r3, [r4, #0]
 1471              	.LVL77:
 1472 0ba4 080053E1 		cmp	r3, r8
 1473 0ba8 023083D2 		addle	r3, r3, #2
 1474 0bac 003084D5 		strle	r3, [r4, #0]
 1475              		.loc 1 668 0
 1476 0bb0 002096E5 		ldr	r2, [r6, #0]
 1477 0bb4 0200A0E3 		mov	r0, #2
 1478 0bb8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1479 0bbc 0010A0E3 		mov	r1, #0
 1480 0bc0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1481 0bc4 0A0000EA 		b	.L144
 1482              	.LVL78:
 1483              	.L122:
 1484              		.loc 1 671 0
 1485 0bc8 010052E3 		cmp	r2, #1
 1486 0bcc 1300001A 		bne	.L124
 1487              		.loc 1 673 0
 1488 0bd0 003094E5 		ldr	r3, [r4, #0]
 1489              	.LVL79:
 1490 0bd4 0A0053E1 		cmp	r3, sl
 1491 0bd8 023043C2 		subgt	r3, r3, #2
 1492 0bdc 003084C5 		strgt	r3, [r4, #0]
 1493              		.loc 1 674 0
 1494 0be0 002096E5 		ldr	r2, [r6, #0]
 1495 0be4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1496 0be8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1497 0bec 0200A0E3 		mov	r0, #2
 1498 0bf0 0010A0E3 		mov	r1, #0
 1499              	.L144:
 1500 0bf4 FEFFFFEB 		bl	LCDSetRowColor
 1501              		.loc 1 675 0
 1502 0bf8 0030A0E3 		mov	r3, #0
 1503 0bfc 00308DE5 		str	r3, [sp, #0]
 1504 0c00 003096E5 		ldr	r3, [r6, #0]
 1505 0c04 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1506 0c08 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1507 0c0c 001094E5 		ldr	r1, [r4, #0]
 1508 0c10 C0019FE5 		ldr	r0, .L147+60
 1509 0c14 0230A0E3 		mov	r3, #2
 1510 0c18 04C08DE5 		str	ip, [sp, #4]
 1511 0c1c FEFFFFEB 		bl	LCDPrintString
 1512              	.LVL80:
 1513              	.L124:
 1514              		.loc 1 677 0
 1515 0c20 000094E5 		ldr	r0, [r4, #0]
 1516 0c24 FEFFFFEB 		bl	ns73SetChannel
 1517              	.LVL81:
 1518              		.loc 1 678 0
 1519 0c28 EF3F17E5 		ldr	r3, [r7, #-4079]
 1520 0c2c 103083E3 		orr	r3, r3, #16
 1521 0c30 EF3F07E5 		str	r3, [r7, #-4079]
 1522              	.L120:
 1523              		.loc 1 662 0
 1524 0c34 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1525 0c38 020052E3 		cmp	r2, #2
 1526 0c3c CEFFFF9A 		bls	.L126
 1527              		.loc 1 680 0
 1528 0c40 78219FE5 		ldr	r2, .L147+36
 1529 0c44 1C3092E5 		ldr	r3, [r2, #28]
 1530 0c48 013283E3 		orr	r3, r3, #268435456
 1531 0c4c 1C3082E5 		str	r3, [r2, #28]
 1532              	.LBB73:
 1533              	.LBB74:
 1534              		.loc 1 265 0
 1535 0c50 90219FE5 		ldr	r2, .L147+76
 1536              	.LBE74:
 1537              	.LBE73:
 1538              		.loc 1 680 0
 1539 0c54 0030A0E3 		mov	r3, #0
 1540              	.LVL82:
 1541              	.L127:
 1542              	.LBB76:
 1543              	.LBB75:
 1544              		.loc 1 266 0
 1545              	@ 266 "main.c" 1
 1546 0c58 0000A0E1 		nop
 1547              	@ 0 "" 2
 1548              		.loc 1 265 0
 1549 0c5c 013083E2 		add	r3, r3, #1
 1550 0c60 020053E1 		cmp	r3, r2
 1551 0c64 FBFFFF1A 		bne	.L127
 1552              	.LBE75:
 1553              	.LBE76:
 1554              		.loc 1 682 0
 1555 0c68 FEFFFFEB 		bl	ns73Config
 1556              	.LVL83:
 1557              		.loc 1 683 0
 1558 0c6c 70319FE5 		ldr	r3, .L147+72
 1559 0c70 000093E5 		ldr	r0, [r3, #0]
 1560 0c74 FEFFFFEB 		bl	ns73SetChannel
 1561              		.loc 1 684 0
 1562 0c78 40219FE5 		ldr	r2, .L147+36
 1563 0c7c 143092E5 		ldr	r3, [r2, #20]
 1564 0c80 013283E3 		orr	r3, r3, #268435456
 1565 0c84 143082E5 		str	r3, [r2, #20]
 1566 0c88 2E0000EA 		b	.L118
 1567              	.L119:
 1568              		.loc 1 686 0
 1569 0c8c 020054E3 		cmp	r4, #2
 1570 0c90 2C00001A 		bne	.L118
 1571              		.loc 1 687 0
 1572 0c94 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1573 0c98 0710A0E1 		mov	r1, r7
 1574 0c9c 0400A0E1 		mov	r0, r4
 1575 0ca0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1576 0ca4 FEFFFFEB 		bl	LCDSetRowColor
 1577              		.loc 1 688 0
 1578 0ca8 44319FE5 		ldr	r3, .L147+88
 1579 0cac 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1580 0cb0 000051E3 		cmp	r1, #0
 1581 0cb4 0700000A 		beq	.L128
 1582 0cb8 003098E5 		ldr	r3, [r8, #0]
 1583 0cbc 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1584 0cc0 00708DE5 		str	r7, [sp, #0]
 1585 0cc4 0710A0E1 		mov	r1, r7
 1586 0cc8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1587 0ccc 24019FE5 		ldr	r0, .L147+92
 1588 0cd0 0430A0E1 		mov	r3, r4
 1589 0cd4 050000EA 		b	.L145
 1590              	.L128:
 1591              		.loc 1 689 0
 1592 0cd8 003098E5 		ldr	r3, [r8, #0]
 1593 0cdc 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1594 0ce0 00108DE5 		str	r1, [sp, #0]
 1595 0ce4 10019FE5 		ldr	r0, .L147+96
 1596 0ce8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1597 0cec 0430A0E1 		mov	r3, r4
 1598              	.L145:
 1599 0cf0 04C08DE5 		str	ip, [sp, #4]
 1600 0cf4 FEFFFFEB 		bl	LCDPrintString
 1601              		.loc 1 691 0
 1602 0cf8 0010E0E3 		mvn	r1, #0
 1603 0cfc EF2F11E5 		ldr	r2, [r1, #-4079]
 1604              		.loc 1 690 0
 1605 0d00 D4309FE5 		ldr	r3, .L147+64
 1606              		.loc 1 691 0
 1607 0d04 102082E3 		orr	r2, r2, #16
 1608              		.loc 1 690 0
 1609 0d08 0000A0E3 		mov	r0, #0
 1610 0d0c 0000C3E5 		strb	r0, [r3, #0]
 1611              		.loc 1 691 0
 1612 0d10 EF2F01E5 		str	r2, [r1, #-4079]
 1613              		.loc 1 693 0
 1614 0d14 100080E2 		add	r0, r0, #16
 1615              	.LBB77:
 1616              	.LBB78:
 1617              		.loc 1 265 0
 1618 0d18 C8209FE5 		ldr	r2, .L147+76
 1619 0d1c 060000EA 		b	.L130
 1620              	.LVL84:
 1621              	.L131:
 1622              		.loc 1 266 0
 1623              	@ 266 "main.c" 1
 1624 0d20 0000A0E1 		nop
 1625              	@ 0 "" 2
 1626              		.loc 1 265 0
 1627 0d24 013083E2 		add	r3, r3, #1
 1628 0d28 020053E1 		cmp	r3, r2
 1629 0d2c FBFFFF1A 		bne	.L131
 1630              	.LBE78:
 1631              	.LBE77:
 1632              		.loc 1 721 0
 1633 0d30 EF3F11E5 		ldr	r3, [r1, #-4079]
 1634              	.LVL85:
 1635 0d34 103083E3 		orr	r3, r3, #16
 1636 0d38 EF3F01E5 		str	r3, [r1, #-4079]
 1637              	.L130:
 1638              		.loc 1 693 0
 1639 0d3c EB0F01E5 		str	r0, [r1, #-4075]
 1640 0d40 0030A0E3 		mov	r3, #0
 1641              	.LVL86:
 1642 0d44 F5FFFFEA 		b	.L131
 1643              	.LVL87:
 1644              	.L118:
 1645              		.loc 1 724 0
 1646 0d48 58309FE5 		ldr	r3, .L147+12
 1647 0d4c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1648 0d50 000053E3 		cmp	r3, #0
 1649 0d54 44009FE5 		ldr	r0, .L147+4
 1650 0d58 0200000A 		beq	.L132
 1651 0d5c 000090E5 		ldr	r0, [r0, #0]
 1652 0d60 FEFFFFEB 		bl	quickClear
 1653 0d64 020000EA 		b	.L133
 1654              	.L132:
 1655              		.loc 1 725 0
 1656 0d68 003090E5 		ldr	r3, [r0, #0]
 1657 0d6c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1658 0d70 FEFFFFEB 		bl	LCDClear
 1659              	.L133:
 1660              		.loc 1 726 0
 1661 0d74 24309FE5 		ldr	r3, .L147+4
 1662 0d78 000093E5 		ldr	r0, [r3, #0]
 1663              	.L146:
 1664 0d7c FEFFFFEB 		bl	printMenu
 1665              	.LVL88:
 1666              	.L103:
 1667              		.loc 1 728 0
 1668 0d80 0020E0E3 		mvn	r2, #0
 1669 0d84 EF3F12E5 		ldr	r3, [r2, #-4079]
 1670 0d88 103083E3 		orr	r3, r3, #16
 1671 0d8c EF3F02E5 		str	r3, [r2, #-4079]
 1672              		.loc 1 729 0
 1673 0d90 08D08DE2 		add	sp, sp, #8
 1674 0d94 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1675 0d98 1EFF2FE1 		bx	lr
 1676              	.L148:
 1677              		.align	2
 1678              	.L147:
 1679 0d9c A0252600 		.word	2500000
 1680 0da0 7C040000 		.word	current_display
 1681 0da4 74000000 		.word	file_manager
 1682 0da8 01000000 		.word	file_is_open
 1683 0dac 14000000 		.word	current_song
 1684 0db0 00000000 		.word	white
 1685 0db4 00000000 		.word	black
 1686 0db8 00000000 		.word	NotFound
 1687 0dbc 80969800 		.word	10000000
 1688 0dc0 008002E0 		.word	-536707072
 1689 0dc4 02000000 		.word	song_is_over
 1690 0dc8 51000000 		.word	current_song+61
 1691 0dcc 00C002E0 		.word	-536690688
 1692 0dd0 78020000 		.word	settings_menu
 1693 0dd4 00000000 		.word	volume_setting
 1694 0dd8 00000000 		.word	.LC0
 1695 0ddc 08000000 		.word	button_pressed
 1696 0de0 60E31600 		.word	1500000
 1697 0de4 00000000 		.word	radio_channel
 1698 0de8 40420F00 		.word	1000000
 1699 0dec 75030000 		.word	885
 1700 0df0 32040000 		.word	1074
 1701 0df4 00000000 		.word	radio_enable
 1702 0df8 03000000 		.word	.LC1
 1703 0dfc 06000000 		.word	.LC2
 1704              	.LFE16:
 1706              		.section	.rodata.str1.1
 1707              	.LC3:
 1708 000a 53442049 		.ascii	"SD Init Error\012\000"
 1708      6E697420 
 1708      4572726F 
 1708      720A00
 1709              	.LC4:
 1710 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 1710      70656E52 
 1710      6F6F7420 
 1710      4572726F 
 1710      720A00
 1711              		.text
 1712              		.align	2
 1713              		.global	bootUp
 1715              	bootUp:
 1716              	.LFB4:
 1717              		.loc 1 273 0
 1718              		@ Function supports interworking.
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721 0e00 04E02DE5 		str	lr, [sp, #-4]!
 1722              	.LCFI15:
 1723              		.loc 1 274 0
 1724 0e04 B0019FE5 		ldr	r0, .L155
 1725 0e08 FEFFFFEB 		bl	rprintf_devopen
 1726              	.LBB79:
 1727              	.LBB80:
 1728              		.loc 1 265 0
 1729 0e0c AC219FE5 		ldr	r2, .L155+4
 1730              	.LBE80:
 1731              	.LBE79:
 1732              		.loc 1 274 0
 1733 0e10 0030A0E3 		mov	r3, #0
 1734              	.LVL89:
 1735              	.L150:
 1736              	.LBB82:
 1737              	.LBB81:
 1738              		.loc 1 266 0
 1739              	@ 266 "main.c" 1
 1740 0e14 0000A0E1 		nop
 1741              	@ 0 "" 2
 1742              		.loc 1 265 0
 1743 0e18 013083E2 		add	r3, r3, #1
 1744 0e1c 020053E1 		cmp	r3, r2
 1745 0e20 FBFFFF1A 		bne	.L150
 1746              	.LBE81:
 1747              	.LBE82:
 1748              		.loc 1 278 0
 1749 0e24 FEFFFFEB 		bl	sd_raw_init
 1750              	.LVL90:
 1751 0e28 000050E3 		cmp	r0, #0
 1752              		.loc 1 280 0
 1753 0e2c 90019F05 		ldreq	r0, .L155+8
 1754 0e30 FEFFFF0B 		bleq	rprintf
 1755              	.L151:
 1756              		.loc 1 282 0
 1757 0e34 FEFFFFEB 		bl	openroot
 1758 0e38 000050E3 		cmp	r0, #0
 1759              		.loc 1 284 0
 1760 0e3c 84019F15 		ldrne	r0, .L155+12
 1761 0e40 FEFFFF1B 		blne	rprintf
 1762              	.L152:
 1763              		.loc 1 289 0
 1764 0e44 80219FE5 		ldr	r2, .L155+16
 1765 0e48 083092E5 		ldr	r3, [r2, #8]
 1766 0e4c 013683E3 		orr	r3, r3, #1048576
 1767 0e50 083082E5 		str	r3, [r2, #8]
 1768              		.loc 1 290 0
 1769 0e54 083092E5 		ldr	r3, [r2, #8]
 1770 0e58 0236C3E3 		bic	r3, r3, #2097152
 1771 0e5c 083082E5 		str	r3, [r2, #8]
 1772              		.loc 1 291 0
 1773 0e60 68119FE5 		ldr	r1, .L155+20
 1774 0e64 043091E5 		ldr	r3, [r1, #4]
 1775 0e68 033B83E3 		orr	r3, r3, #3072
 1776 0e6c 043081E5 		str	r3, [r1, #4]
 1777              		.loc 1 292 0
 1778 0e70 183092E5 		ldr	r3, [r2, #24]
 1779 0e74 013483E3 		orr	r3, r3, #16777216
 1780 0e78 033883E3 		orr	r3, r3, #196608
 1781 0e7c 183082E5 		str	r3, [r2, #24]
 1782              		.loc 1 295 0
 1783 0e80 183092E5 		ldr	r3, [r2, #24]
 1784 0e84 023483E3 		orr	r3, r3, #33554432
 1785 0e88 183082E5 		str	r3, [r2, #24]
 1786              		.loc 1 296 0
 1787 0e8c 183092E5 		ldr	r3, [r2, #24]
 1788 0e90 013283E3 		orr	r3, r3, #268435456
 1789 0e94 183082E5 		str	r3, [r2, #24]
 1790              		.loc 1 299 0
 1791 0e98 083092E5 		ldr	r3, [r2, #8]
 1792 0e9c 803083E3 		orr	r3, r3, #128
 1793 0ea0 083082E5 		str	r3, [r2, #8]
 1794              		.loc 1 302 0
 1795 0ea4 083092E5 		ldr	r3, [r2, #8]
 1796 0ea8 033B83E3 		orr	r3, r3, #3072
 1797 0eac 083082E5 		str	r3, [r2, #8]
 1798              		.loc 1 303 0
 1799 0eb0 003091E5 		ldr	r3, [r1, #0]
 1800 0eb4 CF3483E3 		orr	r3, r3, #-822083584
 1801 0eb8 003081E5 		str	r3, [r1, #0]
 1802              		.loc 1 304 0
 1803 0ebc 033BA0E3 		mov	r3, #3072
 1804 0ec0 0C3082E5 		str	r3, [r2, #12]
 1805              		.loc 1 307 0
 1806 0ec4 083092E5 		ldr	r3, [r2, #8]
 1807 0ec8 033783E3 		orr	r3, r3, #786432
 1808 0ecc 083082E5 		str	r3, [r2, #8]
 1809              		.loc 1 310 0
 1810 0ed0 083092E5 		ldr	r3, [r2, #8]
 1811 0ed4 073283E3 		orr	r3, r3, #1879048192
 1812 0ed8 083082E5 		str	r3, [r2, #8]
 1813              		.loc 1 311 0
 1814 0edc 0232A0E3 		mov	r3, #536870912
 1815 0ee0 043082E5 		str	r3, [r2, #4]
 1816              		.loc 1 312 0
 1817 0ee4 033083E0 		add	r3, r3, r3
 1818 0ee8 043082E5 		str	r3, [r2, #4]
 1819              		.loc 1 313 0
 1820 0eec 0D3283E2 		add	r3, r3, #-805306368
 1821 0ef0 043082E5 		str	r3, [r2, #4]
 1822              		.loc 1 316 0
 1823 0ef4 183092E5 		ldr	r3, [r2, #24]
 1824 0ef8 0E36C3E3 		bic	r3, r3, #14680064
 1825 0efc 183082E5 		str	r3, [r2, #24]
 1826              		.loc 1 318 0
 1827 0f00 083092E5 		ldr	r3, [r2, #8]
 1828 0f04 0235C3E3 		bic	r3, r3, #8388608
 1829 0f08 083082E5 		str	r3, [r2, #8]
 1830              		.loc 1 321 0
 1831 0f0c C0309FE5 		ldr	r3, .L155+24
 1832 0f10 0120A0E3 		mov	r2, #1
 1833              		.loc 1 322 0
 1834 0f14 0010E0E3 		mvn	r1, #0
 1835              		.loc 1 321 0
 1836 0f18 002183E5 		str	r2, [r3, #256]
 1837              		.loc 1 322 0
 1838 0f1c 3030E0E3 		mvn	r3, #48
 1839 0f20 F33F01E5 		str	r3, [r1, #-4083]
 1840              		.loc 1 323 0
 1841 0f24 413083E2 		add	r3, r3, #65
 1842 0f28 EF3F01E5 		str	r3, [r1, #-4079]
 1843              		.loc 1 324 0
 1844 0f2c 153083E2 		add	r3, r3, #21
 1845 0f30 FF3D01E5 		str	r3, [r1, #-3583]
 1846              		.loc 1 325 0
 1847 0f34 9C309FE5 		ldr	r3, .L155+28
 1848 0f38 FF3E01E5 		str	r3, [r1, #-3839]
 1849              		.loc 1 326 0
 1850 0f3c 2430A0E3 		mov	r3, #36
 1851 0f40 FB3D01E5 		str	r3, [r1, #-3579]
 1852              		.loc 1 327 0
 1853 0f44 90309FE5 		ldr	r3, .L155+32
 1854              		.loc 1 330 0
 1855 0f48 90009FE5 		ldr	r0, .L155+36
 1856              		.loc 1 327 0
 1857 0f4c FB3E01E5 		str	r3, [r1, #-3835]
 1858              		.loc 1 330 0
 1859 0f50 4B3FA0E3 		mov	r3, #300
 1860 0f54 0C3080E5 		str	r3, [r0, #12]
 1861              		.loc 1 331 0
 1862 0f58 043090E5 		ldr	r3, [r0, #4]
 1863 0f5c 013083E3 		orr	r3, r3, #1
 1864 0f60 043080E5 		str	r3, [r0, #4]
 1865              		.loc 1 332 0
 1866 0f64 00C0A0E3 		mov	ip, #0
 1867              		.loc 1 333 0
 1868 0f68 0330A0E3 		mov	r3, #3
 1869              		.loc 1 332 0
 1870 0f6c 70C080E5 		str	ip, [r0, #112]
 1871              		.loc 1 337 0
 1872 0f70 6C209FE5 		ldr	r2, .L155+40
 1873              		.loc 1 333 0
 1874 0f74 143080E5 		str	r3, [r0, #20]
 1875              		.loc 1 334 0
 1876 0f78 FA3FA0E3 		mov	r3, #1000
 1877 0f7c 183080E5 		str	r3, [r0, #24]
 1878              		.loc 1 337 0
 1879 0f80 323E43E2 		sub	r3, r3, #800
 1880 0f84 0C3082E5 		str	r3, [r2, #12]
 1881              		.loc 1 338 0
 1882 0f88 043092E5 		ldr	r3, [r2, #4]
 1883 0f8c 013083E3 		orr	r3, r3, #1
 1884 0f90 043082E5 		str	r3, [r2, #4]
 1885              		.loc 1 343 0
 1886 0f94 4C109FE5 		ldr	r1, .L155+44
 1887              		.loc 1 340 0
 1888 0f98 0A3CA0E3 		mov	r3, #2560
 1889              		.loc 1 339 0
 1890 0f9c 70C082E5 		str	ip, [r2, #112]
 1891              		.loc 1 340 0
 1892 0fa0 283082E5 		str	r3, [r2, #40]
 1893              		.loc 1 343 0
 1894 0fa4 273D43E2 		sub	r3, r3, #2496
 1895 0fa8 0C3081E5 		str	r3, [r1, #12]
 1896              		.loc 1 344 0
 1897 0fac 2030A0E3 		mov	r3, #32
 1898 0fb0 003081E5 		str	r3, [r1, #0]
 1899              		.loc 1 345 0
 1900 0fb4 04E09DE4 		ldr	lr, [sp], #4
 1901 0fb8 1EFF2FE1 		bx	lr
 1902              	.L156:
 1903              		.align	2
 1904              	.L155:
 1905 0fbc 00000000 		.word	putc_serial0
 1906 0fc0 A0860100 		.word	100000
 1907 0fc4 0A000000 		.word	.LC3
 1908 0fc8 19000000 		.word	.LC4
 1909 0fcc 008002E0 		.word	-536707072
 1910 0fd0 00C002E0 		.word	-536690688
 1911 0fd4 00C01FE0 		.word	-534790144
 1912 0fd8 00000000 		.word	timer1ISR
 1913 0fdc 00000000 		.word	timer0ISR
 1914 0fe0 004000E0 		.word	-536854528
 1915 0fe4 008000E0 		.word	-536838144
 1916 0fe8 000002E0 		.word	-536739840
 1917              	.LFE4:
 1919              		.align	2
 1921              	timer0ISR:
 1922              	.LFB6:
 1923              		.loc 1 372 0
 1924              		@ Function supports interworking.
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              	.LBB83:
 1928              	.LBB84:
 1929              		.loc 1 388 0
 1930 0fec A8209FE5 		ldr	r2, .L168
 1931 0ff0 103092E5 		ldr	r3, [r2, #16]
 1932 0ff4 020513E3 		tst	r3, #8388608
 1933              	.LBE84:
 1934              	.LBE83:
 1935              		.loc 1 372 0
 1936 0ff8 04E02DE5 		str	lr, [sp, #-4]!
 1937              	.LCFI16:
 1938              	.LBB86:
 1939              	.LBB85:
 1940              		.loc 1 388 0
 1941 0ffc 0220A003 		moveq	r2, #2
 1942 1000 0700000A 		beq	.L159
 1943              		.loc 1 389 0
 1944 1004 103092E5 		ldr	r3, [r2, #16]
 1945 1008 020613E3 		tst	r3, #2097152
 1946 100c 0120A003 		moveq	r2, #1
 1947 1010 0300000A 		beq	.L159
 1948              		.loc 1 390 0
 1949 1014 103092E5 		ldr	r3, [r2, #16]
 1950 1018 010513E3 		tst	r3, #4194304
 1951 101c 0320A003 		moveq	r2, #3
 1952 1020 0020A013 		movne	r2, #0
 1953              	.L159:
 1954              	.LBE85:
 1955              	.LBE86:
 1956              		.loc 1 373 0
 1957 1024 74309FE5 		ldr	r3, .L168+4
 1958 1028 0020C3E5 		strb	r2, [r3, #0]
 1959              		.loc 1 374 0
 1960 102c FEFFFFEB 		bl	MMA_get_y
 1961              		.loc 1 375 0
 1962 1030 6C309FE5 		ldr	r3, .L168+8
 1963 1034 002093E5 		ldr	r2, [r3, #0]
 1964              		.loc 1 374 0
 1965 1038 68309FE5 		ldr	r3, .L168+12
 1966              		.loc 1 375 0
 1967 103c AF0F52E3 		cmp	r2, #700
 1968              		.loc 1 374 0
 1969 1040 000083E5 		str	r0, [r3, #0]
 1970              		.loc 1 375 0
 1971 1044 010000AA 		bge	.L162
 1972 1048 AF0F50E3 		cmp	r0, #700
 1973 104c 030000CA 		bgt	.L163
 1974              	.L162:
 1975 1050 AF0F52E3 		cmp	r2, #700
 1976 1054 030000DA 		ble	.L164
 1977 1058 AF0F50E3 		cmp	r0, #700
 1978 105c 010000AA 		bge	.L164
 1979              	.L163:
 1980 1060 0120A0E3 		mov	r2, #1
 1981 1064 000000EA 		b	.L167
 1982              	.L164:
 1983              		.loc 1 376 0
 1984 1068 0020A0E3 		mov	r2, #0
 1985              	.L167:
 1986 106c 38309FE5 		ldr	r3, .L168+16
 1987 1070 0020C3E5 		strb	r2, [r3, #0]
 1988              		.loc 1 378 0
 1989 1074 34309FE5 		ldr	r3, .L168+20
 1990 1078 FF20A0E3 		mov	r2, #255
 1991 107c 002083E5 		str	r2, [r3, #0]
 1992              		.loc 1 377 0
 1993 1080 1C309FE5 		ldr	r3, .L168+8
 1994              		.loc 1 379 0
 1995 1084 0020A0E3 		mov	r2, #0
 1996              		.loc 1 377 0
 1997 1088 000083E5 		str	r0, [r3, #0]
 1998              		.loc 1 379 0
 1999 108c 0030E0E3 		mvn	r3, #0
 2000 1090 CF2F03E5 		str	r2, [r3, #-4047]
 2001              		.loc 1 380 0
 2002 1094 04E09DE4 		ldr	lr, [sp], #4
 2003 1098 1EFF2FE1 		bx	lr
 2004              	.L169:
 2005              		.align	2
 2006              	.L168:
 2007 109c 008002E0 		.word	-536707072
 2008 10a0 08000000 		.word	button_pressed
 2009 10a4 0C000000 		.word	prev_position
 2010 10a8 10000000 		.word	cur_position
 2011 10ac 09000000 		.word	update_screen
 2012 10b0 004000E0 		.word	-536854528
 2013              	.LFE6:
 2015              		.global	__divsi3
 2016              		.global	__modsi3
 2017              		.align	2
 2018              		.global	main
 2020              	main:
 2021              	.LFB2:
 2022              		.loc 1 94 0
 2023              		@ Function supports interworking.
 2024              		@ args = 0, pretend = 0, frame = 0
 2025              		@ frame_needed = 1, uses_anonymous_args = 0
 2026 10b4 0DC0A0E1 		mov	ip, sp
 2027              	.LCFI17:
 2028 10b8 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2029              	.LCFI18:
 2030 10bc 04B04CE2 		sub	fp, ip, #4
 2031              	.LCFI19:
 2032 10c0 08D04DE2 		sub	sp, sp, #8
 2033              	.LCFI20:
 2034              		.loc 1 104 0
 2035 10c4 FEFFFFEB 		bl	bootUp
 2036              		.loc 1 107 0
 2037 10c8 FEFFFFEB 		bl	vs1002Config
 2038              		.loc 1 108 0
 2039 10cc FEFFFFEB 		bl	vs1002Reset
 2040              		.loc 1 109 0
 2041 10d0 FEFFFFEB 		bl	vs1002Init
 2042              	.LBB87:
 2043              		.loc 1 110 0
 2044 10d4 3000A0E3 		mov	r0, #48
 2045 10d8 FEFFFFEB 		bl	vs1002SetVolume
 2046 10dc 3000A0E3 		mov	r0, #48
 2047 10e0 FEFFFFEB 		bl	vs1002SetVolume
 2048              	.LBE87:
 2049              		.loc 1 111 0
 2050 10e4 FEFFFFEB 		bl	vs1002Finish
 2051              		.loc 1 114 0
 2052 10e8 FEFFFFEB 		bl	LCDInit
 2053              		.loc 1 115 0
 2054 10ec 48359FE5 		ldr	r3, .L210
 2055 10f0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2056 10f4 FEFFFFEB 		bl	LCDClear
 2057              		.loc 1 116 0
 2058 10f8 FEFFFFEB 		bl	LCDPrintLogo
 2059              		.loc 1 119 0
 2060 10fc 3C259FE5 		ldr	r2, .L210+4
 2061 1100 1C3092E5 		ldr	r3, [r2, #28]
 2062 1104 013283E3 		orr	r3, r3, #268435456
 2063 1108 1C3082E5 		str	r3, [r2, #28]
 2064              	.LBB88:
 2065              	.LBB89:
 2066              		.loc 1 265 0
 2067 110c 30259FE5 		ldr	r2, .L210+8
 2068              	.LBE89:
 2069              	.LBE88:
 2070              		.loc 1 119 0
 2071 1110 0030A0E3 		mov	r3, #0
 2072              	.LVL91:
 2073              	.L171:
 2074              	.LBB91:
 2075              	.LBB90:
 2076              		.loc 1 266 0
 2077              	@ 266 "main.c" 1
 2078 1114 0000A0E1 		nop
 2079              	@ 0 "" 2
 2080              		.loc 1 265 0
 2081 1118 013083E2 		add	r3, r3, #1
 2082 111c 020053E1 		cmp	r3, r2
 2083 1120 FBFFFF1A 		bne	.L171
 2084              	.LBE90:
 2085              	.LBE91:
 2086              		.loc 1 121 0
 2087 1124 FEFFFFEB 		bl	ns73Config
 2088              	.LVL92:
 2089              		.loc 1 122 0
 2090 1128 FEFFFFEB 		bl	ns73Init
 2091              		.loc 1 123 0
 2092 112c 14059FE5 		ldr	r0, .L210+12
 2093 1130 FEFFFFEB 		bl	ns73SetChannel
 2094              		.loc 1 124 0
 2095 1134 04259FE5 		ldr	r2, .L210+4
 2096 1138 143092E5 		ldr	r3, [r2, #20]
 2097 113c 013283E3 		orr	r3, r3, #268435456
 2098 1140 143082E5 		str	r3, [r2, #20]
 2099              	.LBB92:
 2100              	.LBB93:
 2101              		.loc 1 265 0
 2102 1144 00259FE5 		ldr	r2, .L210+16
 2103              	.LBE93:
 2104              	.LBE92:
 2105              		.loc 1 124 0
 2106 1148 0030A0E3 		mov	r3, #0
 2107              	.LVL93:
 2108              	.L172:
 2109              	.LBB95:
 2110              	.LBB94:
 2111              		.loc 1 266 0
 2112              	@ 266 "main.c" 1
 2113 114c 0000A0E1 		nop
 2114              	@ 0 "" 2
 2115              		.loc 1 265 0
 2116 1150 013083E2 		add	r3, r3, #1
 2117 1154 020053E1 		cmp	r3, r2
 2118 1158 FBFFFF1A 		bne	.L172
 2119              	.LBE94:
 2120              	.LBE95:
 2121              		.loc 1 128 0
 2122 115c EC249FE5 		ldr	r2, .L210+20
 2123 1160 003092E5 		ldr	r3, [r2, #0]
 2124              	.LVL94:
 2125 1164 153C83E3 		orr	r3, r3, #5376
 2126 1168 003082E5 		str	r3, [r2, #0]
 2127 116c 0050A0E3 		mov	r5, #0
 2128              	.LVL95:
 2129              	.L173:
 2130              		.loc 1 131 0
 2131 1170 0000A0E3 		mov	r0, #0
 2132 1174 FEFFFFEB 		bl	rootDirectory_files_stream
 2133 1178 006050E2 		subs	r6, r0, #0
 2134              		.loc 1 130 0
 2135 117c 015085E2 		add	r5, r5, #1
 2136              		.loc 1 131 0
 2137 1180 FAFFFF1A 		bne	.L173
 2138              		.loc 1 132 0
 2139 1184 063085E2 		add	r3, r5, #6
 2140 1188 0330C3E3 		bic	r3, r3, #3
 2141 118c 0DD063E0 		rsb	sp, r3, sp
 2142 1190 08708DE2 		add	r7, sp, #8
 2143              		.loc 1 133 0
 2144 1194 0700A0E1 		mov	r0, r7
 2145 1198 011085E2 		add	r1, r5, #1
 2146 119c FEFFFFEB 		bl	rootDirectory_files
 2147              		.loc 1 134 0
 2148 11a0 8032A0E1 		mov	r3, r0, asl #5
 2149 11a4 043083E2 		add	r3, r3, #4
 2150 11a8 0DD063E0 		rsb	sp, r3, sp
 2151              		.loc 1 133 0
 2152 11ac A0349FE5 		ldr	r3, .L210+24
 2153 11b0 0040A0E1 		mov	r4, r0
 2154              	.LBB96:
 2155              		.loc 1 138 0
 2156 11b4 0600A0E1 		mov	r0, r6
 2157              	.LVL96:
 2158              	.LBE96:
 2159              		.loc 1 133 0
 2160 11b8 004083E5 		str	r4, [r3, #0]
 2161              		.loc 1 134 0
 2162 11bc 08608DE2 		add	r6, sp, #8
 2163              	.LBB98:
 2164              		.loc 1 138 0
 2165 11c0 00E0A0E1 		mov	lr, r0
 2166              	.LVL97:
 2167 11c4 0080A0E1 		mov	r8, r0
 2168              	.LVL98:
 2169 11c8 100000EA 		b	.L174
 2170              	.LVL99:
 2171              	.L180:
 2172 11cc 0030A0E3 		mov	r3, #0
 2173              	.LBB97:
 2174              		.loc 1 148 0
 2175 11d0 8EC2A0E1 		mov	ip, lr, asl #5
 2176              	.L179:
 2177              		.loc 1 140 0
 2178 11d4 050050E1 		cmp	r0, r5
 2179              		.loc 1 148 0
 2180 11d8 03208CE0 		add	r2, ip, r3
 2181 11dc 0280C687 		strhib	r8, [r6, r2]
 2182              		.loc 1 140 0
 2183 11e0 0600008A 		bhi	.L178
 2184              	.LVL100:
 2185              		.loc 1 141 0
 2186 11e4 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 2187 11e8 2C0051E3 		cmp	r1, #44
 2188              		.loc 1 142 0
 2189 11ec 0230A001 		moveq	r3, r2
 2190              		.loc 1 145 0
 2191 11f0 0210C617 		strneb	r1, [r6, r2]
 2192              		.loc 1 142 0
 2193 11f4 0380C607 		streqb	r8, [r6, r3]
 2194              		.loc 1 146 0
 2195 11f8 010080E2 		add	r0, r0, #1
 2196              		.loc 1 142 0
 2197 11fc 1F30A003 		moveq	r3, #31
 2198              	.LVL101:
 2199              	.L178:
 2200              		.loc 1 139 0
 2201 1200 013083E2 		add	r3, r3, #1
 2202 1204 200053E3 		cmp	r3, #32
 2203 1208 F1FFFF1A 		bne	.L179
 2204              	.LBE97:
 2205              		.loc 1 138 0
 2206 120c 01E08EE2 		add	lr, lr, #1
 2207              	.LVL102:
 2208              	.L174:
 2209 1210 04005EE1 		cmp	lr, r4
 2210 1214 ECFFFFBA 		blt	.L180
 2211              	.LBE98:
 2212              		.loc 1 154 0
 2213 1218 0400A0E1 		mov	r0, r4
 2214              	.LVL103:
 2215 121c 0F10A0E3 		mov	r1, #15
 2216 1220 FEFFFFEB 		bl	__divsi3
 2217              	.LVL104:
 2218              		.loc 1 155 0
 2219 1224 28349FE5 		ldr	r3, .L210+24
 2220              		.loc 1 154 0
 2221 1228 FF4000E2 		and	r4, r0, #255
 2222 122c 24549FE5 		ldr	r5, .L210+28
 2223              	.LVL105:
 2224              		.loc 1 155 0
 2225 1230 000093E5 		ldr	r0, [r3, #0]
 2226              		.loc 1 154 0
 2227 1234 013044E2 		sub	r3, r4, #1
 2228 1238 0530C5E5 		strb	r3, [r5, #5]
 2229              		.loc 1 155 0
 2230 123c 0F10A0E3 		mov	r1, #15
 2231 1240 FEFFFFEB 		bl	__modsi3
 2232              		.loc 1 158 0
 2233 1244 F0339FE5 		ldr	r3, .L210
 2234 1248 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2235              		.loc 1 159 0
 2236 124c 08349FE5 		ldr	r3, .L210+32
 2237              		.loc 1 155 0
 2238 1250 000050E3 		cmp	r0, #0
 2239 1254 0540C515 		strneb	r4, [r5, #5]
 2240              		.loc 1 159 0
 2241 1258 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2242              		.loc 1 157 0
 2243 125c F4439FE5 		ldr	r4, .L210+28
 2244 1260 0050A0E3 		mov	r5, #0
 2245              		.loc 1 159 0
 2246 1264 0430C4E5 		strb	r3, [r4, #4]
 2247              		.loc 1 162 0
 2248 1268 0130A0E3 		mov	r3, #1
 2249              		.loc 1 158 0
 2250 126c 0320C4E5 		strb	r2, [r4, #3]
 2251              		.loc 1 164 0
 2252 1270 0400A0E1 		mov	r0, r4
 2253 1274 0610A0E1 		mov	r1, r6
 2254              		.loc 1 162 0
 2255 1278 0030C4E5 		strb	r3, [r4, #0]
 2256              		.loc 1 157 0
 2257 127c 0250C4E5 		strb	r5, [r4, #2]
 2258              		.loc 1 161 0
 2259 1280 0650C4E5 		strb	r5, [r4, #6]
 2260              		.loc 1 163 0
 2261 1284 085084E5 		str	r5, [r4, #8]
 2262              		.loc 1 164 0
 2263 1288 FEFFFFEB 		bl	getNewFiles
 2264              	.LBB99:
 2265              		.loc 1 165 0
 2266 128c CC239FE5 		ldr	r2, .L210+36
 2267              	.L182:
 2268 1290 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 2269              	.LVL106:
 2270 1294 015085E2 		add	r5, r5, #1
 2271 1298 160055E3 		cmp	r5, #22
 2272 129c EC31C4E5 		strb	r3, [r4, #492]
 2273 12a0 014084E2 		add	r4, r4, #1
 2274 12a4 F9FFFF1A 		bne	.L182
 2275              	.LBE99:
 2276              		.loc 1 168 0
 2277 12a8 B4039FE5 		ldr	r0, .L210+40
 2278 12ac FEFFFFEB 		bl	fillSettings
 2279              		.loc 1 172 0
 2280 12b0 98139FE5 		ldr	r1, .L210+20
 2281 12b4 003091E5 		ldr	r3, [r1, #0]
 2282              		.loc 1 171 0
 2283 12b8 98239FE5 		ldr	r2, .L210+28
 2284 12bc A4439FE5 		ldr	r4, .L210+44
 2285              		.loc 1 172 0
 2286 12c0 FF3DC3E3 		bic	r3, r3, #16320
 2287 12c4 3030C3E3 		bic	r3, r3, #48
 2288              		.loc 1 173 0
 2289 12c8 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 2290              		.loc 1 171 0
 2291 12cc 002084E5 		str	r2, [r4, #0]
 2292              		.loc 1 172 0
 2293 12d0 003081E5 		str	r3, [r1, #0]
 2294              		.loc 1 173 0
 2295 12d4 FEFFFFEB 		bl	LCDClear
 2296              		.loc 1 174 0
 2297 12d8 000094E5 		ldr	r0, [r4, #0]
 2298 12dc FEFFFFEB 		bl	printMenu
 2299              		.loc 1 178 0
 2300 12e0 58739FE5 		ldr	r7, .L210+4
 2301              		.loc 1 180 0
 2302 12e4 50939FE5 		ldr	r9, .L210
 2303              		.loc 1 190 0
 2304 12e8 7C839FE5 		ldr	r8, .L210+48
 2305              	.LVL107:
 2306              	.LBB100:
 2307              	.LBB101:
 2308              		.loc 1 265 0
 2309 12ec 7CA39FE5 		ldr	sl, .L210+52
 2310              	.L200:
 2311              	.LBE101:
 2312              	.LBE100:
 2313              		.loc 1 178 0
 2314 12f0 003097E5 		ldr	r3, [r7, #0]
 2315 12f4 020513E3 		tst	r3, #8388608
 2316 12f8 2100000A 		beq	.L183
 2317              		.loc 1 180 0
 2318 12fc 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 2319 1300 FEFFFFEB 		bl	LCDClear
 2320              		.loc 1 181 0
 2321 1304 0430A0E3 		mov	r3, #4
 2322 1308 00308DE5 		str	r3, [sp, #0]
 2323 130c 003094E5 		ldr	r3, [r4, #0]
 2324 1310 44139FE5 		ldr	r1, .L210+32
 2325 1314 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2326 1318 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2327 131c 0730A0E3 		mov	r3, #7
 2328 1320 4C039FE5 		ldr	r0, .L210+56
 2329 1324 0010A0E3 		mov	r1, #0
 2330 1328 04C08DE5 		str	ip, [sp, #4]
 2331 132c FEFFFFEB 		bl	LCDPrintString
 2332 1330 0030A0E3 		mov	r3, #0
 2333              	.LVL108:
 2334              	.L184:
 2335              	.LBB103:
 2336              	.LBB104:
 2337              		.loc 1 266 0
 2338              	@ 266 "main.c" 1
 2339 1334 0000A0E1 		nop
 2340              	@ 0 "" 2
 2341              		.loc 1 265 0
 2342 1338 38239FE5 		ldr	r2, .L210+60
 2343 133c 013083E2 		add	r3, r3, #1
 2344 1340 020053E1 		cmp	r3, r2
 2345 1344 FAFFFF1A 		bne	.L184
 2346              	.LBE104:
 2347              	.LBE103:
 2348              		.loc 1 183 0
 2349 1348 3020A0E3 		mov	r2, #48
 2350 134c 0030E0E3 		mvn	r3, #0
 2351              	.LVL109:
 2352 1350 EB2F03E5 		str	r2, [r3, #-4075]
 2353              		.loc 1 184 0
 2354 1354 FEFFFFEB 		bl	main_msc
 2355              	.LBB105:
 2356              	.LBB106:
 2357              		.loc 1 756 0
 2358 1358 0E22A0E3 		mov	r2, #-536870912
 2359 135c 003092E5 		ldr	r3, [r2, #0]
 2360 1360 033083E3 		orr	r3, r3, #3
 2361 1364 003082E5 		str	r3, [r2, #0]
 2362              		.loc 1 757 0
 2363 1368 AA10A0E3 		mov	r1, #170
 2364              		.loc 1 758 0
 2365 136c 5530A0E3 		mov	r3, #85
 2366              		.loc 1 757 0
 2367 1370 081082E5 		str	r1, [r2, #8]
 2368              		.loc 1 758 0
 2369 1374 083082E5 		str	r3, [r2, #8]
 2370              		.loc 1 760 0
 2371 1378 0030A0E3 		mov	r3, #0
 2372              		.loc 1 759 0
 2373 137c 081082E5 		str	r1, [r2, #8]
 2374              		.loc 1 760 0
 2375 1380 083082E5 		str	r3, [r2, #8]
 2376              	.L183:
 2377              	.LBE106:
 2378              	.LBE105:
 2379              		.loc 1 190 0
 2380 1384 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2381 1388 000053E3 		cmp	r3, #0
 2382 138c 4300001A 		bne	.L185
 2383 1390 E4329FE5 		ldr	r3, .L210+64
 2384 1394 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 2385              	.LVL110:
 2386 1398 000055E3 		cmp	r5, #0
 2387 139c 3F00001A 		bne	.L185
 2388              		.loc 1 192 0
 2389 13a0 D8329FE5 		ldr	r3, .L210+68
 2390 13a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2391 13a8 000053E3 		cmp	r3, #0
 2392 13ac 3B00000A 		beq	.L185
 2393              		.loc 1 193 0
 2394 13b0 2020A0E3 		mov	r2, #32
 2395 13b4 0030E0E3 		mvn	r3, #0
 2396 13b8 EB2F03E5 		str	r2, [r3, #-4075]
 2397              		.loc 1 194 0
 2398 13bc C0029FE5 		ldr	r0, .L210+72
 2399 13c0 FEFFFFEB 		bl	closeSong
 2400              		.loc 1 198 0
 2401 13c4 8C129FE5 		ldr	r1, .L210+28
 2402              		.loc 1 195 0
 2403 13c8 B8329FE5 		ldr	r3, .L210+76
 2404              		.loc 1 198 0
 2405 13cc 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2406              		.loc 1 195 0
 2407 13d0 0050C3E5 		strb	r5, [r3, #0]
 2408              		.loc 1 198 0
 2409 13d4 0E0052E3 		cmp	r2, #14
 2410              		.loc 1 196 0
 2411 13d8 0232A0E3 		mov	r3, #536870912
 2412 13dc 043087E5 		str	r3, [r7, #4]
 2413              		.loc 1 199 0
 2414 13e0 01208292 		addls	r2, r2, #1
 2415              		.loc 1 200 0
 2416 13e4 08309195 		ldrls	r3, [r1, #8]
 2417              		.loc 1 199 0
 2418 13e8 0020C195 		strlsb	r2, [r1, #0]
 2419              		.loc 1 203 0
 2420 13ec 64C29FE5 		ldr	ip, .L210+28
 2421              		.loc 1 200 0
 2422 13f0 01308392 		addls	r3, r3, #1
 2423 13f4 08308195 		strls	r3, [r1, #8]
 2424              		.loc 1 203 0
 2425 13f8 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 2426 13fc 0F0053E3 		cmp	r3, #15
 2427 1400 0C00001A 		bne	.L187
 2428 1404 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 2429 1408 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 2430 140c 030052E1 		cmp	r2, r3
 2431 1410 0800002A 		bcs	.L187
 2432              		.loc 1 206 0
 2433 1414 013082E2 		add	r3, r2, #1
 2434              		.loc 1 204 0
 2435 1418 0120A0E3 		mov	r2, #1
 2436 141c 0020CCE5 		strb	r2, [ip, #0]
 2437              		.loc 1 205 0
 2438 1420 0020A0E3 		mov	r2, #0
 2439              		.loc 1 207 0
 2440 1424 0C00A0E1 		mov	r0, ip
 2441 1428 0610A0E1 		mov	r1, r6
 2442              		.loc 1 205 0
 2443 142c 08208CE5 		str	r2, [ip, #8]
 2444              		.loc 1 206 0
 2445 1430 0630CCE5 		strb	r3, [ip, #6]
 2446              		.loc 1 207 0
 2447 1434 FEFFFFEB 		bl	getNewFiles
 2448              	.L187:
 2449              		.loc 1 210 0
 2450 1438 18529FE5 		ldr	r5, .L210+28
 2451 143c 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2452 1440 833285E0 		add	r3, r5, r3, asl #5
 2453 1444 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2454 1448 000053E3 		cmp	r3, #0
 2455 144c 1300000A 		beq	.L185
 2456              		.loc 1 211 0
 2457 1450 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 2458 1454 FEFFFFEB 		bl	LCDClear
 2459              		.loc 1 212 0
 2460 1458 0500A0E1 		mov	r0, r5
 2461 145c FEFFFFEB 		bl	printMenu
 2462              		.loc 1 213 0
 2463 1460 0510A0E1 		mov	r1, r5
 2464 1464 18029FE5 		ldr	r0, .L210+72
 2465 1468 FEFFFFEB 		bl	loadSongInfo
 2466 146c 14329FE5 		ldr	r3, .L210+76
 2467 1470 0000C3E5 		strb	r0, [r3, #0]
 2468              		.loc 1 214 0
 2469 1474 FEFFFFEB 		bl	vs1002Config
 2470              		.loc 1 215 0
 2471 1478 0000A0E3 		mov	r0, #0
 2472 147c 021BA0E3 		mov	r1, #2048
 2473 1480 FEFFFFEB 		bl	vs1002SCIWrite
 2474              		.loc 1 216 0
 2475 1484 FEFFFFEB 		bl	vs1002Finish
 2476              		.loc 1 217 0
 2477 1488 0232A0E3 		mov	r3, #536870912
 2478 148c 0C3087E5 		str	r3, [r7, #12]
 2479              		.loc 1 218 0
 2480 1490 0020E0E3 		mvn	r2, #0
 2481 1494 EF3F12E5 		ldr	r3, [r2, #-4079]
 2482 1498 203083E3 		orr	r3, r3, #32
 2483 149c EF3F02E5 		str	r3, [r2, #-4079]
 2484              	.LVL111:
 2485              	.L185:
 2486              		.loc 1 223 0
 2487 14a0 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2488 14a4 020053E3 		cmp	r3, #2
 2489 14a8 0300001A 		bne	.L188
 2490 14ac 000094E5 		ldr	r0, [r4, #0]
 2491 14b0 0610A0E1 		mov	r1, r6
 2492 14b4 FEFFFFEB 		bl	handleUpButton
 2493 14b8 580000EA 		b	.L189
 2494              	.L188:
 2495              		.loc 1 224 0
 2496 14bc 010053E3 		cmp	r3, #1
 2497 14c0 0300001A 		bne	.L190
 2498 14c4 000094E5 		ldr	r0, [r4, #0]
 2499 14c8 0610A0E1 		mov	r1, r6
 2500 14cc FEFFFFEB 		bl	handleDownButton
 2501 14d0 520000EA 		b	.L189
 2502              	.L190:
 2503              		.loc 1 225 0
 2504 14d4 030053E3 		cmp	r3, #3
 2505 14d8 0100001A 		bne	.L191
 2506 14dc FEFFFFEB 		bl	handleMiddleButton
 2507 14e0 4E0000EA 		b	.L189
 2508              	.L191:
 2509              		.loc 1 227 0
 2510 14e4 90319FE5 		ldr	r3, .L210+64
 2511 14e8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2512 14ec 000053E3 		cmp	r3, #0
 2513 14f0 4A00000A 		beq	.L189
 2514              		.loc 1 228 0
 2515 14f4 0030E0E3 		mvn	r3, #0
 2516 14f8 1020A0E3 		mov	r2, #16
 2517 14fc EB2F03E5 		str	r2, [r3, #-4075]
 2518 1500 013083E2 		add	r3, r3, #1
 2519              	.LVL112:
 2520              	.L192:
 2521              	.LBB107:
 2522              	.LBB102:
 2523              		.loc 1 266 0
 2524              	@ 266 "main.c" 1
 2525 1504 0000A0E1 		nop
 2526              	@ 0 "" 2
 2527              		.loc 1 265 0
 2528 1508 013083E2 		add	r3, r3, #1
 2529 150c 0A0053E1 		cmp	r3, sl
 2530 1510 FBFFFF1A 		bne	.L192
 2531              	.LBE102:
 2532              	.LBE107:
 2533              		.loc 1 230 0
 2534 1514 FEFFFFEB 		bl	MMA_get_y
 2535              	.LVL113:
 2536 1518 AF0F50E3 		cmp	r0, #700
 2537 151c 190000DA 		ble	.L193
 2538 1520 64319FE5 		ldr	r3, .L210+80
 2539 1524 003093E5 		ldr	r3, [r3, #0]
 2540 1528 AF0F53E3 		cmp	r3, #700
 2541 152c 150000DA 		ble	.L193
 2542              		.loc 1 231 0
 2543 1530 50319FE5 		ldr	r3, .L210+76
 2544 1534 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2545 1538 000053E3 		cmp	r3, #0
 2546 153c 0200000A 		beq	.L194
 2547 1540 000094E5 		ldr	r0, [r4, #0]
 2548 1544 FEFFFFEB 		bl	quickClear
 2549 1548 020000EA 		b	.L195
 2550              	.L194:
 2551              		.loc 1 232 0
 2552 154c 003094E5 		ldr	r3, [r4, #0]
 2553 1550 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2554 1554 FEFFFFEB 		bl	LCDClear
 2555              	.L195:
 2556              		.loc 1 236 0
 2557 1558 28319FE5 		ldr	r3, .L210+76
 2558 155c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2559              		.loc 1 233 0
 2560 1560 FC209FE5 		ldr	r2, .L210+40
 2561              		.loc 1 236 0
 2562 1564 000053E3 		cmp	r3, #0
 2563              		.loc 1 234 0
 2564 1568 0130A0E3 		mov	r3, #1
 2565 156c 0230C2E5 		strb	r3, [r2, #2]
 2566              		.loc 1 235 0
 2567 1570 0232A0E3 		mov	r3, #536870912
 2568 1574 043087E5 		str	r3, [r7, #4]
 2569              		.loc 1 233 0
 2570 1578 002084E5 		str	r2, [r4, #0]
 2571              		.loc 1 236 0
 2572 157c 0F328312 		addne	r3, r3, #-268435456
 2573              		.loc 1 237 0
 2574 1580 0131A003 		moveq	r3, #1073741824
 2575 1584 1E0000EA 		b	.L209
 2576              	.L193:
 2577              		.loc 1 239 0
 2578 1588 FEFFFFEB 		bl	MMA_get_y
 2579 158c FC209FE5 		ldr	r2, .L210+84
 2580 1590 020050E1 		cmp	r0, r2
 2581 1594 1B0000CA 		bgt	.L197
 2582 1598 EC309FE5 		ldr	r3, .L210+80
 2583 159c 003093E5 		ldr	r3, [r3, #0]
 2584 15a0 020053E1 		cmp	r3, r2
 2585 15a4 170000CA 		bgt	.L197
 2586              		.loc 1 240 0
 2587 15a8 D8309FE5 		ldr	r3, .L210+76
 2588 15ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2589 15b0 000053E3 		cmp	r3, #0
 2590 15b4 0200000A 		beq	.L198
 2591 15b8 000094E5 		ldr	r0, [r4, #0]
 2592 15bc FEFFFFEB 		bl	quickClear
 2593 15c0 020000EA 		b	.L199
 2594              	.L198:
 2595              		.loc 1 241 0
 2596 15c4 003094E5 		ldr	r3, [r4, #0]
 2597 15c8 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2598 15cc FEFFFFEB 		bl	LCDClear
 2599              	.L199:
 2600              		.loc 1 246 0
 2601 15d0 B0309FE5 		ldr	r3, .L210+76
 2602 15d4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2603              		.loc 1 242 0
 2604 15d8 78209FE5 		ldr	r2, .L210+28
 2605              		.loc 1 246 0
 2606 15dc 000053E3 		cmp	r3, #0
 2607              		.loc 1 243 0
 2608 15e0 0030A0E3 		mov	r3, #0
 2609 15e4 0230C2E5 		strb	r3, [r2, #2]
 2610              		.loc 1 244 0
 2611 15e8 013283E2 		add	r3, r3, #268435456
 2612 15ec 043087E5 		str	r3, [r7, #4]
 2613              		.loc 1 245 0
 2614 15f0 033283E2 		add	r3, r3, #805306368
 2615 15f4 043087E5 		str	r3, [r7, #4]
 2616              		.loc 1 242 0
 2617 15f8 002084E5 		str	r2, [r4, #0]
 2618              		.loc 1 246 0
 2619 15fc 0100000A 		beq	.L197
 2620 1600 0E3283E2 		add	r3, r3, #-536870912
 2621              	.L209:
 2622 1604 0C3087E5 		str	r3, [r7, #12]
 2623              	.L197:
 2624              		.loc 1 248 0
 2625 1608 000094E5 		ldr	r0, [r4, #0]
 2626 160c FEFFFFEB 		bl	printMenu
 2627              		.loc 1 249 0
 2628 1610 0020E0E3 		mvn	r2, #0
 2629 1614 EF3F12E5 		ldr	r3, [r2, #-4079]
 2630 1618 103083E3 		orr	r3, r3, #16
 2631 161c EF3F02E5 		str	r3, [r2, #-4079]
 2632              	.L189:
 2633              		.loc 1 252 0
 2634 1620 0030E0E3 		mvn	r3, #0
 2635 1624 EF2F13E5 		ldr	r2, [r3, #-4079]
 2636 1628 102082E3 		orr	r2, r2, #16
 2637 162c EF2F03E5 		str	r2, [r3, #-4079]
 2638              		.loc 1 251 0
 2639 1630 013083E2 		add	r3, r3, #1
 2640 1634 0030C8E5 		strb	r3, [r8, #0]
 2641 1638 2CFFFFEA 		b	.L200
 2642              	.L211:
 2643              		.align	2
 2644              	.L210:
 2645 163c 00000000 		.word	white
 2646 1640 008002E0 		.word	-536707072
 2647 1644 40548900 		.word	9000000
 2648 1648 CD030000 		.word	973
 2649 164c 40420F00 		.word	1000000
 2650 1650 00C002E0 		.word	-536690688
 2651 1654 04000000 		.word	NUMBEROFFILES
 2652 1658 74000000 		.word	file_manager
 2653 165c 00000000 		.word	black
 2654 1660 00000000 		.word	welcome
 2655 1664 78020000 		.word	settings_menu
 2656 1668 7C040000 		.word	current_display
 2657 166c 08000000 		.word	button_pressed
 2658 1670 C0C62D00 		.word	3000000
 2659 1674 00000000 		.word	USB
 2660 1678 80969800 		.word	10000000
 2661 167c 09000000 		.word	update_screen
 2662 1680 02000000 		.word	song_is_over
 2663 1684 14000000 		.word	current_song
 2664 1688 01000000 		.word	file_is_open
 2665 168c 0C000000 		.word	prev_position
 2666 1690 BB020000 		.word	699
 2667              	.LFE2:
 2669              		.global	volume_setting
 2670              		.data
 2671              		.align	2
 2674              	volume_setting:
 2675 0000 10000000 		.word	16
 2676              		.global	radio_channel
 2677              		.align	2
 2680              	radio_channel:
 2681 0004 CD030000 		.word	973
 2682              		.global	radio_enable
 2683              		.bss
 2686              	radio_enable:
 2687 0000 00       		.space	1
 2688              		.global	welcome
 2689              		.section	.rodata
 2692              	welcome:
 2693 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 2693      204C6973 
 2693      743A0A0D 
 2693      00
 2694 000d 00000000 		.space	9
 2694      00000000 
 2694      00
 2695              		.global	NotFound
 2698              	NotFound:
 2699 0016 46696C65 		.ascii	"File Not Found!"
 2699      204E6F74 
 2699      20466F75 
 2699      6E6421
 2700              		.global	USB
 2703              	USB:
 2704 0025 55534220 		.ascii	"USB Connected!"
 2704      436F6E6E 
 2704      65637465 
 2704      6421
 2705              		.global	newline
 2708              	newline:
 2709 0033 0A00     		.ascii	"\012\000"
 2710              		.global	volume
 2713              	volume:
 2714 0035 566F6C75 		.ascii	"Volume\000"
 2714      6D6500
 2715              		.global	contrast
 2718              	contrast:
 2719 003c 436F6E74 		.ascii	"Contrast\000"
 2719      72617374 
 2719      00
 2720              		.global	radio_power
 2723              	radio_power:
 2724 0045 52616469 		.ascii	"Radio Power"
 2724      6F20506F 
 2724      776572
 2725              		.global	radio_channel_menu
 2728              	radio_channel_menu:
 2729 0050 52616469 		.ascii	"Radio Channel"
 2729      6F204368 
 2729      616E6E65 
 2729      6C
 2730              		.global	settings
 2733              	settings:
 2734 005d 53657474 		.ascii	"Settings:\000"
 2734      696E6773 
 2734      3A00
 2735              		.bss
 2736              	file_is_open:
 2737 0001 00       		.space	1
 2738              	song_is_over:
 2739 0002 00       		.space	1
 2740 0003 00       		.align	2
 2741              	NUMBEROFFILES:
 2742 0004 00000000 		.space	4
 2743              	button_pressed:
 2744 0008 00       		.space	1
 2745              	update_screen:
 2746 0009 00       		.space	1
 2747 000a 0000     		.align	2
 2748              	prev_position:
 2749 000c 00000000 		.space	4
 2750              		.align	2
 2751              	cur_position:
 2752 0010 00000000 		.space	4
 2753              		.align	2
 2754              	current_song:
 2755 0014 00000000 		.space	96
 2755      00000000 
 2755      00000000 
 2755      00000000 
 2755      00000000 
 2756              		.align	2
 2757              	file_manager:
 2758 0074 00000000 		.space	516
 2758      00000000 
 2758      00000000 
 2758      00000000 
 2758      00000000 
 2759              		.align	2
 2760              	settings_menu:
 2761 0278 00000000 		.space	516
 2761      00000000 
 2761      00000000 
 2761      00000000 
 2761      00000000 
 2762              		.align	2
 2763              	current_display:
 2764 047c 00000000 		.space	4
 3124              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:44     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:50     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:58     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:78     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:84     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:92     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:216    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2741   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:222    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:230    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:320    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2713   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2723   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2728   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2733   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:331    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:339    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:364    .text:00000240 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:451    .text:00000300 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2708   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:459    .text:0000030c printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:467    .text:0000030c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:544    .text:000003d4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:550    .text:000003d8 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:558    .text:000003d8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:638    .text:000004b0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:644    .text:000004b4 handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:651    .text:000004b4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:708    .text:0000052c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2757   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:714    .text:00000530 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:721    .text:00000530 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:776    .text:000005a0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:781    .text:000005a4 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:787    .text:000005a4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:838    .text:0000061c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2754   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2738   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:848    .text:00000630 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:855    .text:00000630 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:877    .text:00000664 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:883    .text:00000668 loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:890    .text:00000668 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:984    .text:0000073c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:998    .text:00000740 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1004   .text:00000740 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1679   .text:00000d9c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2763   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2736   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2698   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2760   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2674   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2743   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2680   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2686   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1715   .text:00000e00 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1721   .text:00000e00 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1905   .text:00000fbc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1921   .text:00000fec timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:1930   .text:00000fec $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2007   .text:0000109c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2748   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2751   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2745   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2020   .text:000010b4 main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2026   .text:000010b4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2645   .text:0000163c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2692   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2703   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2675   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2718   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccqVGVqV.s:2689   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
LCDPrintString
LCDSetRowColor
vs1002Config
vs1002SendMusic
fat16_read_file
vs1002Finish
fat16_close_file
root_file_exists
root_open
fat16_file_size
LCDClear
vs1002SCIWrite
vs1002SetVolume
ns73SetChannel
ns73Config
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
MMA_get_y
__divsi3
__modsi3
vs1002Reset
vs1002Init
LCDInit
LCDPrintLogo
ns73Init
rootDirectory_files_stream
rootDirectory_files
main_msc
