   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting = 16, radio_channel = 1000;
  78:main.c        **** char radio_enable = OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars = 0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        ****   //Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   initializeMP3Player();
 106:main.c        ****   splashScreen();
 107:main.c        ****   initializeRadio(radio_channel);
 108:main.c        ****   
 109:main.c        ****   // Find Out how many files are on the SD card
 110:main.c        ****   selectSD();	//Make sure SPI is selected for reading the card
 111:main.c        ****   
 112:main.c        ****   do{
 113:main.c        ****   	numberOfChars++;
 114:main.c        ****   }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filena
 115:main.c        ****   char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD c
 116:main.c        ****   NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 117:main.c        ****   FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 118:main.c        ****   
 119:main.c        ****   //Get all of the filenames into a Global Array
 120:main.c        ****   int chartracker=0;	
 121:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 122:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 123:main.c        ****   		if(chartracker <= numberOfChars){
 124:main.c        ****   			if(tempNames[chartracker]==','){
 125:main.c        ****   				Files[j].file_name[i] = '\0';
 126:main.c        ****   				i=MAXFILENAMELEN+1;
 127:main.c        ****   			}
 128:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 129:main.c        ****   			chartracker++;
 130:main.c        ****   		}
 131:main.c        ****   		else Files[j].file_name[i] ='\0';
 132:main.c        ****   	}	
 133:main.c        ****   }
 134:main.c        **** 	
 135:main.c        **** 	
 136:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 137:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 138:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 139:main.c        **** 	
 140:main.c        **** 	file_manager.orientation =ORIENTUP;
 141:main.c        **** 	file_manager.text_color=white;
 142:main.c        **** 	file_manager.back_color=black;
 143:main.c        **** 	
 144:main.c        **** 	file_manager.current_page=0;
 145:main.c        **** 	file_manager.current_row=1;
 146:main.c        **** 	file_manager.current_index=0;	
 147:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 148:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++) {
 149:main.c        **** 	  file_manager.title[i] = welcome[i];
 150:main.c        ****   }
 151:main.c        **** 	
 152:main.c        **** 	//Generate the settings menu and fill in default settings values
 153:main.c        **** 	fillSettings(&settings_menu);
 154:main.c        **** 	
 155:main.c        **** 	//Setup the menu
 156:main.c        **** 	current_display = &file_manager;
 157:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 158:main.c        **** 	LCDClear(current_display->back_color);
 159:main.c        **** 	printMenu(current_display);
 160:main.c        **** 	
 161:main.c        **** 	// TODO Floere remove
 162:main.c        **** 	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 163:main.c        **** 	
 164:main.c        **** 	while(1){
 165:main.c        **** 	  // USB connected!
 166:main.c        **** 		if (isUSBConnected()) {
 167:main.c        **** 			LCDClear(white);
 168:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 169:main.c        ****       delay_ms(1000);
 170:main.c        ****       stopAllInterrupts(); // To allow USB communication
 171:main.c        **** 			main_msc();
 172:main.c        **** 			reset();
 173:main.c        **** 		}
 174:main.c        **** 	
 175:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 176:main.c        **** 		//while(!button_pressed && !update_screen){
 177:main.c        **** 		if(!button_pressed && !update_screen){
 178:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 179:main.c        **** 			if(song_is_over){
 180:main.c        **** 				disableMP3Interrupt();			//Stop the "Send Song" interrupts
 181:main.c        **** 				closeSong(&current_song);	//Close the current song
 182:main.c        **** 				file_is_open=0;				//change master flag
 183:main.c        **** 				ledBlueOff();
 184:main.c        **** 				//Get the next song on the page by changing rows
 185:main.c        **** 				if(file_manager.current_row < NUMROWS){
 186:main.c        **** 					file_manager.current_row++;
 187:main.c        **** 					file_manager.current_index++;
 188:main.c        **** 				}
 189:main.c        **** 				//Go to the next page of songs if necessary
 190:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 191:main.c        **** 					file_manager.current_row=1;
 192:main.c        **** 					file_manager.current_index=0;
 193:main.c        **** 					file_manager.current_page++;
 194:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 195:main.c        **** 				}
 196:main.c        **** 				//If there is another song in the list, get it and play it!
 197:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 198:main.c        **** 					LCDClear(file_manager.back_color);
 199:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 200:main.c        **** 					file_is_open = loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 201:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 202:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 203:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 204:main.c        **** 					ledBlueOn();
 205:main.c        **** 					enableMP3Interrupt();
 206:main.c        **** 				}	
 207:main.c        **** 			}
 208:main.c        **** 		}
 209:main.c        **** 
 210:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 211:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 212:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 213:main.c        **** 		
 214:main.c        **** 		else if(update_screen){
 215:main.c        **** 			disableUIInterrupt(DEBOUNCE_ACCELEROMETER); // Stop interrupts and allow accelerometer to stabil
 216:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 217:main.c        **** 				if(file_is_open)quickClear(current_display);
 218:main.c        **** 				else LCDClear(current_display->back_color);
 219:main.c        **** 				current_display = &settings_menu;
 220:main.c        **** 				current_display->orientation=ORIENTLEFT;
 221:main.c        **** 				ledBlueOff();
 222:main.c        **** 				if(file_is_open)ledGrnOn();
 223:main.c        **** 				else ledRedOn();
 224:main.c        **** 			}
 225:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 226:main.c        **** 				if(file_is_open)quickClear(current_display);
 227:main.c        **** 				else LCDClear(current_display->back_color);
 228:main.c        **** 				current_display = &file_manager;
 229:main.c        **** 				current_display->orientation=ORIENTUP;
 230:main.c        **** 				ledGrnOff();
 231:main.c        **** 				ledRedOff();
 232:main.c        **** 				if(file_is_open)ledBlueOn();
 233:main.c        **** 			}
 234:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 235:main.c        **** 			enableUIInterrupt();
 236:main.c        **** 		}
 237:main.c        **** 		button_pressed=NO_BUT;
 238:main.c        **** 		enableUIInterrupt();
 239:main.c        **** 	}
 240:main.c        ****     return 0;
 241:main.c        **** }
 242:main.c        **** 
 243:main.c        **** 
 244:main.c        **** // Usage: delay_ms(1000);
 245:main.c        **** // Inputs: int count: Number of milliseconds to delay
 246:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 247:main.c        **** void delay_ms(int count)
 248:main.c        **** {
  16              		.loc 1 248 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 249:main.c        ****   int i;
 250:main.c        ****   count *= 10000;
  22              		.loc 1 250 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 251:main.c        ****   for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 251 0
  31              	@ 251 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 252:main.c        **** }
  38              		.loc 1 252 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 253:main.c        **** 
 254:main.c        **** // Usage: bootUp();
 255:main.c        **** // Inputs: None
 256:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 257:main.c        **** void bootUp(void)
 258:main.c        **** {
 259:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 260:main.c        ****     delay_ms(10); //Delay for power to stablize
 261:main.c        **** 
 262:main.c        ****     //Bring up SD and FAT
 263:main.c        ****     if(!sd_raw_init())
 264:main.c        ****     {
 265:main.c        ****         rprintf("SD Init Error\n");
 266:main.c        ****     }
 267:main.c        ****     if(openroot())
 268:main.c        ****     {
 269:main.c        ****         rprintf("SD OpenRoot Error\n");
 270:main.c        ****     }
 271:main.c        ****      
 272:main.c        ****   //Initialize I/O Ports and Peripherals
 273:main.c        ****   //Setup the MP3 I/O Lines
 274:main.c        ****   IODIR0 |= MP3_XCS;
 275:main.c        ****   IODIR0 &= ~MP3_DREQ;
 276:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 277:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 278:main.c        ****   
 279:main.c        ****   //Setupt the FM Trans. Lines
 280:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 281:main.c        ****   IODIR1 |= FM_CS;
 282:main.c        ****   
 283:main.c        ****   //Setup the SD Card I/O Lines
 284:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 285:main.c        ****   
 286:main.c        ****   //Setup the Accelerometer I/O Lines
 287:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 288:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 289:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 290:main.c        ****   
 291:main.c        ****   //Setup the LCD I/O Lines
 292:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 293:main.c        ****   
 294:main.c        ****   initializeLEDs();
 295:main.c        ****   
 296:main.c        ****   //Setup the Buttons
 297:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 298:main.c        ****   
 299:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 300:main.c        ****   
 301:main.c        ****   initializeInterrupts();
 302:main.c        ****   initializeUITimer();
 303:main.c        ****   initializeMP3Player();
 304:main.c        ****   
 305:main.c        ****   initializeSPI();
 306:main.c        **** }
 307:main.c        **** 
 308:main.c        **** //Usage: None (Automatically Called by FW)
 309:main.c        **** //Inputs: None
 310:main.c        **** //This function is a global interrupt called by a match on the Timer 0 match.  The interrupt
 311:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 312:main.c        **** // and setting the appropriate global flag if either has occured.
 313:main.c        **** static void timer0ISR(void)
 314:main.c        **** {
 315:main.c        ****   button_pressed = getButton(); // Find out if a button has been pressed, and which one
 316:main.c        ****   cur_position = MMA_get_y();   // Get the current position of the screen
 317:main.c        ****   if((prev_position<700 && cur_position>700) || (prev_position>700 && cur_position<700)) {
 318:main.c        ****     update_screen = 1;
 319:main.c        ****   } else {
 320:main.c        ****     update_screen = 0; // Determine if the accelerometer has been rotated
 321:main.c        ****   }
 322:main.c        ****   prev_position = cur_position; // Save the position value for later reference
 323:main.c        ****   
 324:main.c        ****   T0IR = 0xFF;                  // Clear the timer interrupt
 325:main.c        ****   VICVectAddr = 0;              // Update the VIC priorities
 326:main.c        **** }
 327:main.c        **** 
 328:main.c        **** //  Usage: None (Automatically Called by FW)
 329:main.c        **** //  Inputs: None
 330:main.c        **** //  This function is a global interrupt called by a match on the Timer 1 match.
 331:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 332:main.c        **** //  WARNING: Altering the Timer 1 Prescale register or Timer 1 Match value will put proper MP3 play
 333:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 334:main.c        **** //
 335:main.c        **** static void timer1ISR(void) {
 336:main.c        ****   sendMP3Data();
 337:main.c        ****   
 338:main.c        ****   T1IR = 0xFF;      // Clear the timer 1 interrupt
 339:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 340:main.c        **** }
 341:main.c        **** 
 342:main.c        **** // Usage: button_value=getButton();
 343:main.c        **** // Inputs:  None
 344:main.c        **** // Outputs: None
 345:main.c        **** // Function returns the value of the button that is currently being pressed.
 346:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 347:main.c        **** char getButton(void){
  51              		.loc 1 347 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 348:main.c        ****   if(!(IOPIN1 & SW_UP)) return UP_BUT;
  56              		.loc 1 348 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 349:main.c        ****   else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
  62              		.loc 1 349 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 350:main.c        ****   else if(!(IOPIN1 & SW_MID)) return MID_BUT;
  67              		.loc 1 350 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 351:main.c        ****   return NO_BUT;
 352:main.c        **** }
  72              		.loc 1 352 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 353:main.c        **** 
 354:main.c        **** 
 355:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 355 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 356:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 356 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 355 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 356 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB134:
 103              	.LBB135:
 357:main.c        ****     for(int i =0; i<NUMROWS; i++){
 358:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 359:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 359 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE135:
 107              	.LBE134:
 108              		.loc 1 356 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB137:
 360:main.c        ****       }
 361:main.c        ****     }
 362:main.c        ****   }
 363:main.c        ****   else{
 364:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 364 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB139:
 365:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 366:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 366 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE139:
 125              	.LBE137:
 126              	.LBB140:
 127              	.LBB136:
 128              		.loc 1 359 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 358 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 359 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 358 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE136:
 141              		.loc 1 357 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE140:
 154              	.LBB141:
 155              	.LBB138:
 156              		.loc 1 366 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 365 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 366 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 365 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE138:
 169              		.loc 1 364 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE141:
 181              	.LBB142:
 367:main.c        ****       }
 368:main.c        ****     }
 369:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 369 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE142:
 188              	.LBB143:
 189              		.loc 1 364 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE143:
 198              	.LBB144:
 199              		.loc 1 369 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE144:
 370:main.c        ****   }
 371:main.c        **** }
 209              		.loc 1 371 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 372:main.c        **** 
 373:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 374:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 375:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 376:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 377:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 378:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 379:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 380:main.c        **** 	//Get the selected songs file name
 381:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 382:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 383:main.c        **** 	}
 384:main.c        **** 	//Get the selected songs display name
 385:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 386:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 387:main.c        **** 			song->name[i]='\0';
 388:main.c        **** 			i=MAXDISPLEN;
 389:main.c        **** 		}	
 390:main.c        **** 		else song->name[i]=song->file_name[i];
 391:main.c        **** 	}
 392:main.c        **** 	
 393:main.c        **** 	selectSD();	//Make sure SPI is selected for reading the card
 394:main.c        **** 	
 395:main.c        **** 	//Check to see if the selected song is valid
 396:main.c        **** 	if(!root_file_exists(song->file_name)){
 397:main.c        **** 		selectLCD();
 398:main.c        **** 		return 0;
 399:main.c        **** 	}	
 400:main.c        **** 	//Open the selected song
 401:main.c        **** 	else{
 402:main.c        **** 		song->handle=root_open(song->file_name);
 403:main.c        **** 		song->size=fat16_file_size(song->handle);
 404:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 405:main.c        **** 	}
 406:main.c        **** 	
 407:main.c        **** 	selectLCD();
 408:main.c        **** 	return 1;
 409:main.c        **** }
 410:main.c        **** 
 411:main.c        **** // Usage: CloseSong(&current_song);
 412:main.c        **** // Inputs: SongStruct *song: Pointer to a song structure to be closed
 413:main.c        **** // Function closes a song that is currently open.
 414:main.c        **** void closeSong(SongStruct *song){
 415:main.c        ****   selectSD(); // Open SPI line for the SD Card.
 416:main.c        ****   fat16_close_file(song->handle);
 417:main.c        ****   selectLCD(); // Return SPI line to LCD.
 418:main.c        **** }
 419:main.c        **** 
 420:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 421:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 422:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 423:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 424:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 425:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 426:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 427:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 428:main.c        **** 	if(direction == PREVIOUS){
 429:main.c        **** 		display->current_row--;
 430:main.c        **** 		display->current_index--;
 431:main.c        **** 	}
 432:main.c        **** 	else{
 433:main.c        **** 		display->current_row++;
 434:main.c        **** 		display->current_index++;		
 435:main.c        **** 	}
 436:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 437:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 438:main.c        **** }
 439:main.c        **** 
 440:main.c        **** //Usage: printMenu(&settings_menu);
 441:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 442:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 443:main.c        **** void printMenu(DisplayStruct *display){
 444:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 445:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 446:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 447:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 448:main.c        **** 	}
 449:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 450:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 451:main.c        **** }
 452:main.c        **** 
 453:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 454:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 455:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 456:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 457:main.c        **** //also loads the default display values along with the default settings values. 
 458:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 458 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB145:
 459:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 460:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 460 0
 233 014c A4909FE5 		ldr	r9, .L36
 461:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 461 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 462:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 462 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 463:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 463 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE145:
 241              		.loc 1 458 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB146:
 249              		.loc 1 460 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 461 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 462 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 463 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 459 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 460 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 461 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 462 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 463 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 459 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE146:
 275              	.LBB147:
 464:main.c        **** 	}
 465:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 466:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 466 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 465 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 466 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 465 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE147:
 467:main.c        **** 	}
 468:main.c        **** 	menu->text_color=white;
 289              		.loc 1 468 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 469:main.c        **** 	menu->back_color=black;
 294              		.loc 1 469 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 470:main.c        **** 	menu->current_row=1;
 297              		.loc 1 470 0
 298 01d0 0130A0E3 		mov	r3, #1
 471:main.c        **** 	menu->current_column=0;
 472:main.c        **** 	menu->current_index=0;
 473:main.c        **** 	menu->orientation = ORIENTLEFT;
 474:main.c        **** 	menu->current_page=0;
 475:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 475 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 469 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 473 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 470 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 471 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 472 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 474 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 476:main.c        **** }
 313              		.loc 1 476 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 477:main.c        **** 
 478:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 479:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 480:main.c        **** //			FileStruct *Files: List of files on the SD card
 481:main.c        **** //Outputs: None
 482:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 483:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 484:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 485:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 486:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 487:main.c        **** 	}
 488:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 489:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 490:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 491:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 492:main.c        **** 		//if(file_is_open)quickClear(display);
 493:main.c        **** 		//else LCDClear(display->back_color);
 494:main.c        **** 		quickClear(display);
 495:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 496:main.c        **** 		display->current_index=14;					//
 497:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 498:main.c        **** 		printMenu(display);							//	display previous page
 499:main.c        **** 	}
 500:main.c        **** }
 501:main.c        **** 
 502:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 503:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 504:main.c        **** //			FileStruct *Files: List of files on the SD card
 505:main.c        **** //Outputs: None
 506:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 507:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 508:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 509:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 510:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 511:main.c        **** 	}
 512:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 513:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 514:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 515:main.c        **** 		display->current_page+=1;		
 516:main.c        **** 		//if(file_is_open)quickClear(display);
 517:main.c        **** 		//else LCDClear(display->back_color);
 518:main.c        **** 		quickClear(display);
 519:main.c        **** 		display->current_row=1;
 520:main.c        **** 		display->current_index=0;
 521:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 522:main.c        **** 		printMenu(display);				
 523:main.c        **** 	}
 524:main.c        **** }
 525:main.c        **** 
 526:main.c        **** //Usage: handleMiddleButton();
 527:main.c        **** //Inputs: None
 528:main.c        **** //Outputs: None
 529:main.c        **** //Description: This function is called when the middle button is pressed.
 530:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 531:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 532:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 533:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 534:main.c        **** void handleMiddleButton(void){
 535:main.c        ****   disableUIInterrupt(250);
 536:main.c        ****   
 537:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 538:main.c        ****   if (current_display == &file_manager) {
 539:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 540:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 541:main.c        ****       if (!file_is_open) { //Make sure this is a valid file
 542:main.c        ****         LCDClear(white);
 543:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 544:main.c        ****         delay_ms(1000);
 545:main.c        ****         LCDClear(black);
 546:main.c        ****         printMenu(&file_manager);
 547:main.c        ****       } else {
 548:main.c        ****         startMP3Player();
 549:main.c        ****       }
 550:main.c        ****     } else { // If a file is already open then this acts like a stop button
 551:main.c        ****       stopMP3Player();
 552:main.c        ****     }
 553:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 554:main.c        ****     if (file_is_open) {
 555:main.c        ****       quickClear(current_display);
 556:main.c        ****     } else {
 557:main.c        ****       LCDClear(settings_menu.back_color);
 558:main.c        ****     }
 559:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 560:main.c        **** 		enableUIInterrupt();
 561:main.c        **** 		if (current_display->current_row == VOLUMEMENU) {
 562:main.c        **** 			enableUIInterrupt();
 563:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 564:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 565:main.c        **** 			while(button_pressed < MID_BUT){
 566:main.c        ****         disableUIInterrupt(150);
 567:main.c        ****         if (button_pressed==UP_BUT) {
 568:main.c        ****           raiseVolume(1);
 569:main.c        ****         } else if (button_pressed==DWN_BUT) {
 570:main.c        ****           lowerVolume(1);
 571:main.c        ****         }
 572:main.c        ****         enableUIInterrupt();
 573:main.c        **** 			}
 574:main.c        **** 		}	
 575:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 576:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 577:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 578:main.c        **** 			button_pressed=NO_BUT;
 579:main.c        **** 			enableUIInterrupt();
 580:main.c        **** 			while(button_pressed < MID_BUT){
 581:main.c        **** 				disableUIInterrupt(100);
 582:main.c        **** 				if(button_pressed==UP_BUT){
 583:main.c        **** 					//Increase Radio Channel
 584:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 585:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 586:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 587:main.c        **** 				}
 588:main.c        **** 				else if(button_pressed==DWN_BUT){
 589:main.c        **** 					//Decrease Radio Channel
 590:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 591:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 592:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 593:main.c        **** 				}
 594:main.c        **** 				ns73SetChannel(radio_channel);
 595:main.c        **** 				enableUIInterrupt();
 596:main.c        **** 			}
 597:main.c        **** 			selectRadio();				//Select the FM transmitter
 598:main.c        **** 			delay_ms(100);
 599:main.c        **** 			ns73Config();					//Configure the FM Trans. I/O
 600:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 601:main.c        **** 			deselectRadio();				//Unselect the FM transmitter
 602:main.c        **** 		}
 603:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 604:main.c        ****       LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 605:main.c        ****       if (radio_enable) {
 606:main.c        ****         LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 607:main.c        ****       } else {
 608:main.c        ****         LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 609:main.c        ****       }
 610:main.c        **** 			button_pressed = NO_BUT;
 611:main.c        **** 			enableUIInterrupt();
 612:main.c        **** 			while(button_pressed < MID_BUT){
 613:main.c        **** 				disableUIInterrupt(100); // debounce the switch
 614:main.c        **** 				if(button_pressed==UP_BUT){
 615:main.c        ****           enableRadio();
 616:main.c        **** 				}
 617:main.c        **** 				else if(button_pressed==DWN_BUT){
 618:main.c        ****           disableRadio();
 619:main.c        **** 				}
 620:main.c        **** 				enableUIInterrupt();
 621:main.c        **** 			}
 622:main.c        **** 		}
 623:main.c        **** 		if(file_is_open)quickClear(current_display);
 624:main.c        **** 		else LCDClear(current_display->back_color);
 625:main.c        **** 		printMenu(current_display);
 626:main.c        **** 	}
 627:main.c        **** 	enableUIInterrupt();
 628:main.c        **** }
 629:main.c        **** 
 630:main.c        **** //  Usage: quickClear(currentDisplay);
 631:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 632:main.c        **** //  Outputs: None
 633:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 634:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 635:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 636:main.c        **** //               good to use while an MP3 is playing.
 637:main.c        **** //
 638:main.c        **** void quickClear(DisplayStruct *display){
 639:main.c        ****   selectLCD();		//Hand over SPI lines to LCD talk
 640:main.c        ****   //If we're on the first page of the menu, we also need to clear the title.
 641:main.c        ****   if (display->current_page==0) {
 642:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 643:main.c        ****   }
 644:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 645:main.c        ****   for (int j=0; j<NUMROWS; j++) {
 646:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 647:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 648:main.c        ****   }
 649:main.c        **** }
 650:main.c        **** 
 651:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 652:main.c        **** //
 653:main.c        **** void reset(void) {
 332              		.loc 1 653 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 654:main.c        ****   WDMOD |= 3;
 337              		.loc 1 654 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 655:main.c        ****   WDFEED = 0xAA;
 342              		.loc 1 655 0
 343 0220 AA10A0E3 		mov	r1, #170
 656:main.c        ****   WDFEED = 0x55;
 344              		.loc 1 656 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 655 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 656 0
 349 022c 083082E5 		str	r3, [r2, #8]
 657:main.c        ****   WDFEED = 0xAA;
 658:main.c        ****   WDFEED = 0x00;
 350              		.loc 1 658 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 657 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 658 0
 355 0238 083082E5 		str	r3, [r2, #8]
 659:main.c        **** }
 356              		.loc 1 659 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	initializeSPI
 363              	initializeSPI:
 364              	.LFB28:
 660:main.c        **** 
 661:main.c        **** // Flöre refactors here!
 662:main.c        **** 
 663:main.c        **** //
 664:main.c        **** // RADIO
 665:main.c        **** //
 666:main.c        **** 
 667:main.c        **** // initializes the FM transmitter to a given frequency.
 668:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 669:main.c        **** //
 670:main.c        **** void initializeRadio(int frequency) {
 671:main.c        ****   selectRadio();        // Select SPI for FM Transmitter
 672:main.c        ****   delay_ms(900);
 673:main.c        ****   
 674:main.c        ****   ns73Config();         // Configure the FM Trans. I/O
 675:main.c        ****   ns73Init();           // Setup the Default Register Values
 676:main.c        ****   ns73SetChannel(frequency); // Transmit
 677:main.c        ****   
 678:main.c        ****   deselectRadio();      // Remove FM Transmitter from SPI bus
 679:main.c        ****   delay_ms(100);
 680:main.c        **** }
 681:main.c        **** 
 682:main.c        **** // Enables the radio.
 683:main.c        **** //
 684:main.c        **** void enableRadio(void) {
 685:main.c        ****   radio_enable = ON;
 686:main.c        ****   
 687:main.c        ****   // graphics
 688:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 689:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 690:main.c        ****   
 691:main.c        ****   // send data
 692:main.c        ****   selectRadio();        //Select the FM transmitter
 693:main.c        ****   delay_ms(100);
 694:main.c        ****   ns73Config();           //Configure the FM Trans. I/O
 695:main.c        ****   ns73Send(R0, PE | AG);  //Power up the radio
 696:main.c        ****   deselectRadio();        //Unselect the FM transmitter
 697:main.c        **** }
 698:main.c        **** 
 699:main.c        **** // Disables the radio.
 700:main.c        **** //
 701:main.c        **** void disableRadio(void) {
 702:main.c        ****   radio_enable = OFF;
 703:main.c        ****   
 704:main.c        ****   // graphics
 705:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 706:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 707:main.c        ****   
 708:main.c        ****   // send data
 709:main.c        ****   selectRadio();      //Select the FM transmitter
 710:main.c        ****   delay_ms(100);
 711:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 712:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 713:main.c        ****   deselectRadio();      //Unselect the FM transmitter
 714:main.c        **** }
 715:main.c        **** 
 716:main.c        **** //
 717:main.c        **** // MP3
 718:main.c        **** //
 719:main.c        **** 
 720:main.c        **** // Initialize the MP3 player with double clock speed and lower volume.
 721:main.c        **** //
 722:main.c        **** void initializeMP3Player(void) {
 723:main.c        ****   vs1002Config(); // Configure MP3 I/O
 724:main.c        ****   vs1002Reset();  // Reset MP3 Player
 725:main.c        ****   vs1002Init();   // Double the clock speed and set to "New" mode
 726:main.c        ****   lowerVolume(5); // Lower the Volume a bit
 727:main.c        ****   vs1002Finish(); // Restore the SPI I/O lines
 728:main.c        **** }
 729:main.c        **** 
 730:main.c        **** // Start playing.
 731:main.c        **** //
 732:main.c        **** void startMP3Player(void) {
 733:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 734:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 735:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 736:main.c        ****   ledBlueOn();
 737:main.c        ****   sendMP3Data();                        // Send first song data
 738:main.c        ****   PINSEL1 |= 0x00000C00;
 739:main.c        ****   enableMP3Interrupt();
 740:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 741:main.c        **** }
 742:main.c        **** 
 743:main.c        **** // Sends a piece of mp3 data from the current song.
 744:main.c        **** //
 745:main.c        **** void sendMP3Data(void) {
 746:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 747:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 748:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 749:main.c        ****     // Buffer more data if available
 750:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) {
 751:main.c        ****       song_is_over = 1;
 752:main.c        ****     } else {
 753:main.c        ****       song_is_over = 0; // If there's no more data available, set the flag, else leave it alone
 754:main.c        ****     }
 755:main.c        ****   }
 756:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 757:main.c        **** }
 758:main.c        **** 
 759:main.c        **** // Stop playing.
 760:main.c        **** //
 761:main.c        **** void stopMP3Player(void) {
 762:main.c        ****   disableMP3Interrupt();
 763:main.c        ****   
 764:main.c        ****   ledBlueOff();
 765:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 766:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 767:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 768:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 769:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 770:main.c        ****   closeSong(&current_song);                               // Close the current song
 771:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 772:main.c        ****   
 773:main.c        ****   exclusiveUIInterrupt();
 774:main.c        **** }
 775:main.c        **** 
 776:main.c        **** //
 777:main.c        **** // VOLUME
 778:main.c        **** //
 779:main.c        **** 
 780:main.c        **** // Raises the Volume by n.
 781:main.c        **** //
 782:main.c        **** void raiseVolume(int n) {
 783:main.c        ****   for(char i = 0; i < n; i++) {
 784:main.c        ****     if(volume_setting < 32){
 785:main.c        ****       volume_setting += 1;
 786:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 787:main.c        ****       vs1002SetVolume(INCREASE);  // Raise the volume
 788:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 789:main.c        ****     }
 790:main.c        ****   }
 791:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 792:main.c        ****   LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientat
 793:main.c        **** }
 794:main.c        **** 
 795:main.c        **** // Lowers the volume by n.
 796:main.c        **** //
 797:main.c        **** void lowerVolume(int n) {
 798:main.c        ****   for(char i = 0; i < n; i++) {
 799:main.c        ****     if(volume_setting >= 0){
 800:main.c        ****       volume_setting--;
 801:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 802:main.c        ****       vs1002SetVolume(DECREASE);  // Lower the volume
 803:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 804:main.c        ****     }
 805:main.c        ****   }
 806:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 807:main.c        ****   LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 808:main.c        **** }
 809:main.c        **** 
 810:main.c        **** //
 811:main.c        **** // SPI
 812:main.c        **** //
 813:main.c        **** 
 814:main.c        **** // Initialize the SPI port.
 815:main.c        **** //
 816:main.c        **** void initializeSPI(void) {
 365              		.loc 1 816 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 817:main.c        ****   S0SPCCR = 64;   // SCK = 1 MHz, counter > 8 and even
 370              		.loc 1 817 0
 371 0240 10309FE5 		ldr	r3, .L42
 372 0244 4020A0E3 		mov	r2, #64
 373 0248 0C2083E5 		str	r2, [r3, #12]
 818:main.c        ****   S0SPCR  = 0x20; // Master, no interrupt enable, 8 bits
 374              		.loc 1 818 0
 375 024c 2020A0E3 		mov	r2, #32
 376 0250 002083E5 		str	r2, [r3, #0]
 819:main.c        **** }
 377              		.loc 1 819 0
 378 0254 1EFF2FE1 		bx	lr
 379              	.L43:
 380              		.align	2
 381              	.L42:
 382 0258 000002E0 		.word	-536739840
 383              	.LFE28:
 385              		.align	2
 386              		.global	selectSD
 388              	selectSD:
 389              	.LFB29:
 820:main.c        **** 
 821:main.c        **** // Hand over SPI lines to SD talk.
 822:main.c        **** //
 823:main.c        **** void selectSD(void) {
 390              		.loc 1 823 0
 391              		@ Function supports interworking.
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 824:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 395              		.loc 1 824 0
 396 025c 0C209FE5 		ldr	r2, .L46
 397 0260 003092E5 		ldr	r3, [r2, #0]
 398 0264 153C83E3 		orr	r3, r3, #5376
 399 0268 003082E5 		str	r3, [r2, #0]
 825:main.c        **** }
 400              		.loc 1 825 0
 401 026c 1EFF2FE1 		bx	lr
 402              	.L47:
 403              		.align	2
 404              	.L46:
 405 0270 00C002E0 		.word	-536690688
 406              	.LFE29:
 408              		.align	2
 409              		.global	selectLCD
 411              	selectLCD:
 412              	.LFB30:
 826:main.c        **** 
 827:main.c        **** // Hand over SPI lines to LCD talk.
 828:main.c        **** //
 829:main.c        **** void selectLCD(void) {
 413              		.loc 1 829 0
 414              		@ Function supports interworking.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 830:main.c        ****   PINSEL0 &= 0xFFFFC00F;
 418              		.loc 1 830 0
 419 0274 10209FE5 		ldr	r2, .L50
 420 0278 003092E5 		ldr	r3, [r2, #0]
 421 027c FF3DC3E3 		bic	r3, r3, #16320
 422 0280 3030C3E3 		bic	r3, r3, #48
 423 0284 003082E5 		str	r3, [r2, #0]
 831:main.c        **** }
 424              		.loc 1 831 0
 425 0288 1EFF2FE1 		bx	lr
 426              	.L51:
 427              		.align	2
 428              	.L50:
 429 028c 00C002E0 		.word	-536690688
 430              	.LFE30:
 432              		.align	2
 433              		.global	selectRadio
 435              	selectRadio:
 436              	.LFB31:
 832:main.c        **** 
 833:main.c        **** // Hand over SPI lines to radio talk.
 834:main.c        **** void selectRadio(void) {
 437              		.loc 1 834 0
 438              		@ Function supports interworking.
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 835:main.c        ****   IOCLR1 |= FM_CS;
 442              		.loc 1 835 0
 443 0290 0C209FE5 		ldr	r2, .L54
 444 0294 1C3092E5 		ldr	r3, [r2, #28]
 445 0298 013283E3 		orr	r3, r3, #268435456
 446 029c 1C3082E5 		str	r3, [r2, #28]
 836:main.c        **** }
 447              		.loc 1 836 0
 448 02a0 1EFF2FE1 		bx	lr
 449              	.L55:
 450              		.align	2
 451              	.L54:
 452 02a4 008002E0 		.word	-536707072
 453              	.LFE31:
 455              		.align	2
 456              		.global	deselectRadio
 458              	deselectRadio:
 459              	.LFB32:
 837:main.c        **** 
 838:main.c        **** // Hand off SPI lines from radio talk.
 839:main.c        **** void deselectRadio(void) {
 460              		.loc 1 839 0
 461              		@ Function supports interworking.
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		@ link register save eliminated.
 840:main.c        ****   IOSET1 |= FM_CS;
 465              		.loc 1 840 0
 466 02a8 0C209FE5 		ldr	r2, .L58
 467 02ac 143092E5 		ldr	r3, [r2, #20]
 468 02b0 013283E3 		orr	r3, r3, #268435456
 469 02b4 143082E5 		str	r3, [r2, #20]
 841:main.c        **** }
 470              		.loc 1 841 0
 471 02b8 1EFF2FE1 		bx	lr
 472              	.L59:
 473              		.align	2
 474              	.L58:
 475 02bc 008002E0 		.word	-536707072
 476              	.LFE32:
 478              		.align	2
 479              		.global	isUSBConnected
 481              	isUSBConnected:
 482              	.LFB33:
 842:main.c        **** 
 843:main.c        **** //
 844:main.c        **** // USB
 845:main.c        **** //
 846:main.c        **** 
 847:main.c        **** // Returns if the USB is connected.
 848:main.c        **** //
 849:main.c        **** int isUSBConnected(void) {
 483              		.loc 1 849 0
 484              		@ Function supports interworking.
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 850:main.c        ****   return IOPIN0 & (1<<23);
 488              		.loc 1 850 0
 489 02c0 08309FE5 		ldr	r3, .L62
 490 02c4 000093E5 		ldr	r0, [r3, #0]
 851:main.c        **** }
 491              		.loc 1 851 0
 492 02c8 020500E2 		and	r0, r0, #8388608
 493 02cc 1EFF2FE1 		bx	lr
 494              	.L63:
 495              		.align	2
 496              	.L62:
 497 02d0 008002E0 		.word	-536707072
 498              	.LFE33:
 500              		.align	2
 501              		.global	initializeUITimer
 503              	initializeUITimer:
 504              	.LFB35:
 852:main.c        **** 
 853:main.c        **** //
 854:main.c        **** // LCD
 855:main.c        **** //
 856:main.c        **** 
 857:main.c        **** // Show the splash-screen (Sparkfun Logo)
 858:main.c        **** //
 859:main.c        **** void splashScreen(void) {
 860:main.c        ****   LCDInit();       // Initialize the LCD
 861:main.c        ****   LCDClear(white); // Clear the screen with white
 862:main.c        ****   LCDPrintLogo();  // Print the Sparkfun Logo
 863:main.c        **** }
 864:main.c        **** 
 865:main.c        **** //
 866:main.c        **** // Timers
 867:main.c        **** //
 868:main.c        **** 
 869:main.c        **** // Initialize the UI Timer.
 870:main.c        **** //
 871:main.c        **** void initializeUITimer(void) {
 505              		.loc 1 871 0
 506              		@ Function supports interworking.
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 872:main.c        ****   T0PR = 300;     // Divide Clock by 300 for 40kHz PS
 510              		.loc 1 872 0
 511 02d4 2C209FE5 		ldr	r2, .L66
 512 02d8 4B3FA0E3 		mov	r3, #300
 513 02dc 0C3082E5 		str	r3, [r2, #12]
 873:main.c        ****   T0TCR |= 0X01;  // Enable the clock
 514              		.loc 1 873 0
 515 02e0 043092E5 		ldr	r3, [r2, #4]
 516 02e4 013083E3 		orr	r3, r3, #1
 517 02e8 043082E5 		str	r3, [r2, #4]
 874:main.c        ****   T0CTCR = 0;     // Timer Mode
 518              		.loc 1 874 0
 519 02ec 0030A0E3 		mov	r3, #0
 520 02f0 703082E5 		str	r3, [r2, #112]
 875:main.c        ****   T0MCR = 0x0003; // Interrupt and Reset Timer on Match
 521              		.loc 1 875 0
 522 02f4 033083E2 		add	r3, r3, #3
 523 02f8 143082E5 		str	r3, [r2, #20]
 876:main.c        ****   T0MR0 = 1000;   // Interrupt on 40Hz
 524              		.loc 1 876 0
 525 02fc FA3FA0E3 		mov	r3, #1000
 526 0300 183082E5 		str	r3, [r2, #24]
 877:main.c        **** }
 527              		.loc 1 877 0
 528 0304 1EFF2FE1 		bx	lr
 529              	.L67:
 530              		.align	2
 531              	.L66:
 532 0308 004000E0 		.word	-536854528
 533              	.LFE35:
 535              		.align	2
 536              		.global	initializeMP3Timer
 538              	initializeMP3Timer:
 539              	.LFB36:
 878:main.c        **** 
 879:main.c        **** // Initialize the MP3 Timer.
 880:main.c        **** //
 881:main.c        **** void initializeMP3Timer(void) {
 540              		.loc 1 881 0
 541              		@ Function supports interworking.
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 882:main.c        ****   T1PR = 200;     // Divide Clock by 200 for ??kHz PS
 545              		.loc 1 882 0
 546 030c 24209FE5 		ldr	r2, .L70
 547 0310 C830A0E3 		mov	r3, #200
 548 0314 0C3082E5 		str	r3, [r2, #12]
 883:main.c        ****   T1TCR |= 0X01;  // Enable the clock
 549              		.loc 1 883 0
 550 0318 043092E5 		ldr	r3, [r2, #4]
 551 031c 013083E3 		orr	r3, r3, #1
 552 0320 043082E5 		str	r3, [r2, #4]
 884:main.c        ****   T1CTCR = 0;     // Timer Mode
 553              		.loc 1 884 0
 554 0324 0030A0E3 		mov	r3, #0
 555 0328 703082E5 		str	r3, [r2, #112]
 885:main.c        ****   T1CCR = 0x0A00; // Capture and interrupt on the rising edge of DREQ
 556              		.loc 1 885 0
 557 032c 0A3C83E2 		add	r3, r3, #2560
 558 0330 283082E5 		str	r3, [r2, #40]
 886:main.c        **** }
 559              		.loc 1 886 0
 560 0334 1EFF2FE1 		bx	lr
 561              	.L71:
 562              		.align	2
 563              	.L70:
 564 0338 008000E0 		.word	-536838144
 565              	.LFE36:
 567              		.align	2
 568              		.global	initializeInterrupts
 570              	initializeInterrupts:
 571              	.LFB37:
 887:main.c        **** 
 888:main.c        **** //
 889:main.c        **** // Interrupts
 890:main.c        **** //
 891:main.c        **** 
 892:main.c        **** // Initializes interrupts and timers.
 893:main.c        **** //
 894:main.c        **** void initializeInterrupts(void) {
 572              		.loc 1 894 0
 573              		@ Function supports interworking.
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 895:main.c        ****   VPBDIV = 1;                              // Set PCLK equal to the System Clock	
 577              		.loc 1 895 0
 578 033c 3C309FE5 		ldr	r3, .L74
 579 0340 0120A0E3 		mov	r2, #1
 580 0344 002183E5 		str	r2, [r3, #256]
 896:main.c        ****   VICIntSelect = ~0x30;                    // Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 581              		.loc 1 896 0
 582 0348 0010E0E3 		mvn	r1, #0
 583 034c 3030E0E3 		mvn	r3, #48
 584 0350 F33F01E5 		str	r3, [r1, #-4083]
 585              	.LBB148:
 586              	.LBB149:
 897:main.c        ****   exclusiveUIInterrupt();                  // Enable Timer 0 Interrupts (Don't start sending song d
 898:main.c        ****   VICVectCntl0= 0x25;                      // Use slot 0 for timer 1 interrupt
 899:main.c        ****   VICVectAddr0 = (unsigned int) timer1ISR; // Set the address of ISR for slot 1		
 900:main.c        ****   VICVectCntl1 = 0x24;                     // Use slot 1 for timer 0 interrupt
 901:main.c        ****   VICVectAddr1 = (unsigned int) timer0ISR; // Set the address of ISR for slot 1
 902:main.c        **** }
 903:main.c        **** 
 904:main.c        **** // Stops all interrupts from triggering.
 905:main.c        **** //
 906:main.c        **** void stopAllInterrupts(void) {
 907:main.c        ****   VICIntEnClr = 0x30;
 908:main.c        **** }
 909:main.c        **** 
 910:main.c        **** // Enable the MP3 interrupt.
 911:main.c        **** //
 912:main.c        **** void enableMP3Interrupt(void) {
 913:main.c        ****   VICIntEnable |= 0x20;
 914:main.c        **** }
 915:main.c        **** 
 916:main.c        **** // Disable the MP3 interrupt.
 917:main.c        **** //
 918:main.c        **** void disableMP3Interrupt(void) {
 919:main.c        ****   VICIntEnClr = 0x20;
 920:main.c        **** }
 921:main.c        **** 
 922:main.c        **** // Start the interrupts again.
 923:main.c        **** //
 924:main.c        **** void enableUIInterrupt(void) {
 925:main.c        ****   VICIntEnable |= 0x10;
 926:main.c        **** }
 927:main.c        **** 
 928:main.c        **** // Stop the UI interrupt from triggering. (And stabilize/debounce for t miliseconds)
 929:main.c        **** //
 930:main.c        **** void disableUIInterrupt(int t) {
 931:main.c        ****   VICIntEnClr = 0x10;
 932:main.c        ****   delay_ms(t); // debounce
 933:main.c        **** }
 934:main.c        **** 
 935:main.c        **** // Exclusively listen to the UI interrupt.
 936:main.c        **** //
 937:main.c        **** void exclusiveUIInterrupt(void) {
 938:main.c        ****   VICIntEnable = 0x10;
 587              		.loc 1 938 0
 588 0354 413083E2 		add	r3, r3, #65
 589 0358 EF3F01E5 		str	r3, [r1, #-4079]
 590              	.LBE149:
 591              	.LBE148:
 592              		.loc 1 898 0
 593 035c 153083E2 		add	r3, r3, #21
 594 0360 FF3D01E5 		str	r3, [r1, #-3583]
 595              		.loc 1 899 0
 596 0364 18309FE5 		ldr	r3, .L74+4
 597 0368 FF3E01E5 		str	r3, [r1, #-3839]
 598              		.loc 1 900 0
 599 036c 2430A0E3 		mov	r3, #36
 600 0370 FB3D01E5 		str	r3, [r1, #-3579]
 601              		.loc 1 901 0
 602 0374 0C309FE5 		ldr	r3, .L74+8
 603 0378 FB3E01E5 		str	r3, [r1, #-3835]
 604              		.loc 1 902 0
 605 037c 1EFF2FE1 		bx	lr
 606              	.L75:
 607              		.align	2
 608              	.L74:
 609 0380 00C01FE0 		.word	-534790144
 610 0384 00000000 		.word	timer1ISR
 611 0388 00000000 		.word	timer0ISR
 612              	.LFE37:
 614              		.align	2
 615              		.global	stopAllInterrupts
 617              	stopAllInterrupts:
 618              	.LFB38:
 619              		.loc 1 906 0
 620              		@ Function supports interworking.
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624              		.loc 1 907 0
 625 038c 3020A0E3 		mov	r2, #48
 626 0390 0030E0E3 		mvn	r3, #0
 627 0394 EB2F03E5 		str	r2, [r3, #-4075]
 628              		.loc 1 908 0
 629 0398 1EFF2FE1 		bx	lr
 630              	.LFE38:
 632              		.align	2
 633              		.global	enableMP3Interrupt
 635              	enableMP3Interrupt:
 636              	.LFB39:
 637              		.loc 1 912 0
 638              		@ Function supports interworking.
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              		.loc 1 913 0
 643 039c 0020E0E3 		mvn	r2, #0
 644 03a0 EF3F12E5 		ldr	r3, [r2, #-4079]
 645 03a4 203083E3 		orr	r3, r3, #32
 646 03a8 EF3F02E5 		str	r3, [r2, #-4079]
 647              		.loc 1 914 0
 648 03ac 1EFF2FE1 		bx	lr
 649              	.LFE39:
 651              		.align	2
 652              		.global	disableMP3Interrupt
 654              	disableMP3Interrupt:
 655              	.LFB40:
 656              		.loc 1 918 0
 657              		@ Function supports interworking.
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661              		.loc 1 919 0
 662 03b0 2020A0E3 		mov	r2, #32
 663 03b4 0030E0E3 		mvn	r3, #0
 664 03b8 EB2F03E5 		str	r2, [r3, #-4075]
 665              		.loc 1 920 0
 666 03bc 1EFF2FE1 		bx	lr
 667              	.LFE40:
 669              		.align	2
 670              		.global	enableUIInterrupt
 672              	enableUIInterrupt:
 673              	.LFB41:
 674              		.loc 1 924 0
 675              		@ Function supports interworking.
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679              		.loc 1 925 0
 680 03c0 0020E0E3 		mvn	r2, #0
 681 03c4 EF3F12E5 		ldr	r3, [r2, #-4079]
 682 03c8 103083E3 		orr	r3, r3, #16
 683 03cc EF3F02E5 		str	r3, [r2, #-4079]
 684              		.loc 1 926 0
 685 03d0 1EFF2FE1 		bx	lr
 686              	.LFE41:
 688              		.align	2
 689              		.global	disableUIInterrupt
 691              	disableUIInterrupt:
 692              	.LFB42:
 693              		.loc 1 930 0
 694              		@ Function supports interworking.
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 698              	.LVL22:
 699              		.loc 1 931 0
 700 03d4 1030A0E3 		mov	r3, #16
 701 03d8 0020E0E3 		mvn	r2, #0
 702 03dc EB3F02E5 		str	r3, [r2, #-4075]
 703              	.LBB150:
 704              	.LBB151:
 705              		.loc 1 250 0
 706 03e0 273C83E2 		add	r3, r3, #9984
 707 03e4 930002E0 		mul	r2, r3, r0
 708              	.LVL23:
 709 03e8 0030A0E3 		mov	r3, #0
 710              	.LVL24:
 711 03ec 010000EA 		b	.L85
 712              	.L86:
 713              		.loc 1 251 0
 714              	@ 251 "main.c" 1
 715 03f0 0000A0E1 		nop
 716              	@ 0 "" 2
 717 03f4 013083E2 		add	r3, r3, #1
 718              	.L85:
 719 03f8 020053E1 		cmp	r3, r2
 720 03fc FBFFFFBA 		blt	.L86
 721              	.LBE151:
 722              	.LBE150:
 723              		.loc 1 933 0
 724 0400 1EFF2FE1 		bx	lr
 725              	.LFE42:
 727              		.align	2
 728              		.global	exclusiveUIInterrupt
 730              	exclusiveUIInterrupt:
 731              	.LFB43:
 732              		.loc 1 937 0
 733              		@ Function supports interworking.
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737              		.loc 1 938 0
 738 0404 1020A0E3 		mov	r2, #16
 739 0408 0030E0E3 		mvn	r3, #0
 740 040c EF2F03E5 		str	r2, [r3, #-4079]
 939:main.c        **** }
 741              		.loc 1 939 0
 742 0410 1EFF2FE1 		bx	lr
 743              	.LFE43:
 745              		.align	2
 746              		.global	initializeLEDs
 748              	initializeLEDs:
 749              	.LFB44:
 940:main.c        **** 
 941:main.c        **** //
 942:main.c        **** // LEDs
 943:main.c        **** //
 944:main.c        **** 
 945:main.c        **** // Initializes the LEDs to an off state.
 946:main.c        **** //
 947:main.c        **** void initializeLEDs(void) {
 750              		.loc 1 947 0
 751              		@ Function supports interworking.
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 948:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);
 755              		.loc 1 948 0
 756 0414 24209FE5 		ldr	r2, .L92
 757 0418 083092E5 		ldr	r3, [r2, #8]
 758 041c 073283E3 		orr	r3, r3, #1879048192
 759 0420 083082E5 		str	r3, [r2, #8]
 949:main.c        ****   ledBlueOff();
 760              		.loc 1 949 0
 761 0424 0232A0E3 		mov	r3, #536870912
 762 0428 043082E5 		str	r3, [r2, #4]
 950:main.c        ****   ledRedOff();
 763              		.loc 1 950 0
 764 042c 033083E0 		add	r3, r3, r3
 765 0430 043082E5 		str	r3, [r2, #4]
 951:main.c        ****   ledGrnOff();
 766              		.loc 1 951 0
 767 0434 0D3283E2 		add	r3, r3, #-805306368
 768 0438 043082E5 		str	r3, [r2, #4]
 952:main.c        **** }...
 769              		.loc 1 952 0
 770 043c 1EFF2FE1 		bx	lr
 771              	.L93:
 772              		.align	2
 773              	.L92:
 774 0440 008002E0 		.word	-536707072
 775              	.LFE44:
 777              		.align	2
 779              	timer0ISR:
 780              	.LFB5:
 781              		.loc 1 314 0
 782              		@ Function supports interworking.
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              	.LBB152:
 786              	.LBB153:
 787              		.loc 1 348 0
 788 0444 A8209FE5 		ldr	r2, .L105
 789 0448 103092E5 		ldr	r3, [r2, #16]
 790 044c 020513E3 		tst	r3, #8388608
 791              	.LBE153:
 792              	.LBE152:
 793              		.loc 1 314 0
 794 0450 04E02DE5 		str	lr, [sp, #-4]!
 795              	.LCFI2:
 796              	.LBB155:
 797              	.LBB154:
 798              		.loc 1 348 0
 799 0454 0220A003 		moveq	r2, #2
 800 0458 0700000A 		beq	.L96
 801              		.loc 1 349 0
 802 045c 103092E5 		ldr	r3, [r2, #16]
 803 0460 020613E3 		tst	r3, #2097152
 804 0464 0120A003 		moveq	r2, #1
 805 0468 0300000A 		beq	.L96
 806              		.loc 1 350 0
 807 046c 103092E5 		ldr	r3, [r2, #16]
 808 0470 010513E3 		tst	r3, #4194304
 809 0474 0320A003 		moveq	r2, #3
 810 0478 0020A013 		movne	r2, #0
 811              	.L96:
 812              	.LBE154:
 813              	.LBE155:
 814              		.loc 1 315 0
 815 047c 74309FE5 		ldr	r3, .L105+4
 816 0480 0020C3E5 		strb	r2, [r3, #0]
 817              		.loc 1 316 0
 818 0484 FEFFFFEB 		bl	MMA_get_y
 819              		.loc 1 317 0
 820 0488 6C309FE5 		ldr	r3, .L105+8
 821 048c 002093E5 		ldr	r2, [r3, #0]
 822              		.loc 1 316 0
 823 0490 68309FE5 		ldr	r3, .L105+12
 824              		.loc 1 317 0
 825 0494 AF0F52E3 		cmp	r2, #700
 826              		.loc 1 316 0
 827 0498 000083E5 		str	r0, [r3, #0]
 828              		.loc 1 317 0
 829 049c 010000AA 		bge	.L99
 830 04a0 AF0F50E3 		cmp	r0, #700
 831 04a4 030000CA 		bgt	.L100
 832              	.L99:
 833 04a8 AF0F52E3 		cmp	r2, #700
 834 04ac 030000DA 		ble	.L101
 835 04b0 AF0F50E3 		cmp	r0, #700
 836 04b4 010000AA 		bge	.L101
 837              	.L100:
 838              		.loc 1 318 0
 839 04b8 0120A0E3 		mov	r2, #1
 840 04bc 000000EA 		b	.L104
 841              	.L101:
 842              		.loc 1 320 0
 843 04c0 0020A0E3 		mov	r2, #0
 844              	.L104:
 845 04c4 38309FE5 		ldr	r3, .L105+16
 846 04c8 0020C3E5 		strb	r2, [r3, #0]
 847              		.loc 1 324 0
 848 04cc 34309FE5 		ldr	r3, .L105+20
 849 04d0 FF20A0E3 		mov	r2, #255
 850 04d4 002083E5 		str	r2, [r3, #0]
 851              		.loc 1 322 0
 852 04d8 1C309FE5 		ldr	r3, .L105+8
 853              		.loc 1 325 0
 854 04dc 0020A0E3 		mov	r2, #0
 855              		.loc 1 322 0
 856 04e0 000083E5 		str	r0, [r3, #0]
 857              		.loc 1 325 0
 858 04e4 0030E0E3 		mvn	r3, #0
 859 04e8 CF2F03E5 		str	r2, [r3, #-4047]
 860              		.loc 1 326 0
 861 04ec 04E09DE4 		ldr	lr, [sp], #4
 862 04f0 1EFF2FE1 		bx	lr
 863              	.L106:
 864              		.align	2
 865              	.L105:
 866 04f4 008002E0 		.word	-536707072
 867 04f8 08000000 		.word	button_pressed
 868 04fc 0C000000 		.word	prev_position
 869 0500 10000000 		.word	cur_position
 870 0504 09000000 		.word	update_screen
 871 0508 004000E0 		.word	-536854528
 872              	.LFE5:
 874              		.align	2
 875              		.global	splashScreen
 877              	splashScreen:
 878              	.LFB34:
 879              		.loc 1 859 0
 880              		@ Function supports interworking.
 881              		@ args = 0, pretend = 0, frame = 0
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 883 050c 04E02DE5 		str	lr, [sp, #-4]!
 884              	.LCFI3:
 885              		.loc 1 860 0
 886 0510 FEFFFFEB 		bl	LCDInit
 887              		.loc 1 861 0
 888 0514 10309FE5 		ldr	r3, .L109
 889 0518 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 890 051c FEFFFFEB 		bl	LCDClear
 891              		.loc 1 862 0
 892 0520 FEFFFFEB 		bl	LCDPrintLogo
 893              		.loc 1 863 0
 894 0524 04E09DE4 		ldr	lr, [sp], #4
 895 0528 1EFF2FE1 		bx	lr
 896              	.L110:
 897              		.align	2
 898              	.L109:
 899 052c 00000000 		.word	white
 900              	.LFE34:
 902              		.section	.rodata.str1.1,"aMS",%progbits,1
 903              	.LC0:
 904 0000 256400   		.ascii	"%d\000"
 905              		.text
 906              		.align	2
 907              		.global	lowerVolume
 909              	lowerVolume:
 910              	.LFB27:
 911              		.loc 1 797 0
 912              		@ Function supports interworking.
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              	.LVL25:
 916 0530 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 917              	.LCFI4:
 918 0534 0050A0E1 		mov	r5, r0
 919 0538 08D04DE2 		sub	sp, sp, #8
 920              	.LCFI5:
 921              		.loc 1 797 0
 922 053c 0040A0E3 		mov	r4, #0
 923              	.LVL26:
 924 0540 8C609FE5 		ldr	r6, .L116
 925 0544 0A0000EA 		b	.L112
 926              	.LVL27:
 927              	.L114:
 928              	.LBB156:
 929              		.loc 1 799 0
 930 0548 003096E5 		ldr	r3, [r6, #0]
 931 054c 000053E3 		cmp	r3, #0
 932              		.loc 1 800 0
 933 0550 012043E2 		sub	r2, r3, #1
 934              		.loc 1 799 0
 935 0554 040000BA 		blt	.L113
 936              		.loc 1 800 0
 937 0558 002086E5 		str	r2, [r6, #0]
 938              		.loc 1 801 0
 939 055c FEFFFFEB 		bl	vs1002Config
 940              		.loc 1 802 0
 941 0560 3000A0E3 		mov	r0, #48
 942 0564 FEFFFFEB 		bl	vs1002SetVolume
 943              		.loc 1 803 0
 944 0568 FEFFFFEB 		bl	vs1002Finish
 945              	.LVL28:
 946              	.L113:
 947              		.loc 1 798 0
 948 056c 013084E2 		add	r3, r4, #1
 949 0570 FF4003E2 		and	r4, r3, #255
 950              	.LVL29:
 951              	.L112:
 952 0574 050054E1 		cmp	r4, r5
 953 0578 F2FFFFBA 		blt	.L114
 954              	.LBE156:
 955              		.loc 1 806 0
 956 057c 54409FE5 		ldr	r4, .L116+4
 957              	.LVL30:
 958 0580 002094E5 		ldr	r2, [r4, #0]
 959 0584 0200A0E3 		mov	r0, #2
 960 0588 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 961 058c 0010A0E3 		mov	r1, #0
 962 0590 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 963 0594 FEFFFFEB 		bl	LCDSetRowColor
 964              		.loc 1 807 0
 965 0598 0030A0E3 		mov	r3, #0
 966 059c 00308DE5 		str	r3, [sp, #0]
 967 05a0 34309FE5 		ldr	r3, .L116+8
 968 05a4 001094E5 		ldr	r1, [r4, #0]
 969 05a8 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 970 05ac 20309FE5 		ldr	r3, .L116
 971 05b0 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 972 05b4 24009FE5 		ldr	r0, .L116+12
 973 05b8 001093E5 		ldr	r1, [r3, #0]
 974 05bc 0230A0E3 		mov	r3, #2
 975 05c0 04C08DE5 		str	ip, [sp, #4]
 976 05c4 FEFFFFEB 		bl	LCDPrintString
 977              		.loc 1 808 0
 978 05c8 08D08DE2 		add	sp, sp, #8
 979 05cc 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 980 05d0 1EFF2FE1 		bx	lr
 981              	.L117:
 982              		.align	2
 983              	.L116:
 984 05d4 00000000 		.word	volume_setting
 985 05d8 7C040000 		.word	current_display
 986 05dc 00000000 		.word	white
 987 05e0 00000000 		.word	.LC0
 988              	.LFE27:
 990              		.align	2
 991              		.global	raiseVolume
 993              	raiseVolume:
 994              	.LFB26:
 995              		.loc 1 782 0
 996              		@ Function supports interworking.
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              	.LVL31:
 1000 05e4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1001              	.LCFI6:
 1002 05e8 0050A0E1 		mov	r5, r0
 1003 05ec 08D04DE2 		sub	sp, sp, #8
 1004              	.LCFI7:
 1005              		.loc 1 782 0
 1006 05f0 0040A0E3 		mov	r4, #0
 1007              	.LVL32:
 1008 05f4 88609FE5 		ldr	r6, .L123
 1009 05f8 0A0000EA 		b	.L119
 1010              	.LVL33:
 1011              	.L121:
 1012              	.LBB157:
 1013              		.loc 1 784 0
 1014 05fc 003096E5 		ldr	r3, [r6, #0]
 1015 0600 1F0053E3 		cmp	r3, #31
 1016 0604 050000CA 		bgt	.L120
 1017              		.loc 1 785 0
 1018 0608 013083E2 		add	r3, r3, #1
 1019 060c 003086E5 		str	r3, [r6, #0]
 1020              		.loc 1 786 0
 1021 0610 FEFFFFEB 		bl	vs1002Config
 1022              		.loc 1 787 0
 1023 0614 3100A0E3 		mov	r0, #49
 1024 0618 FEFFFFEB 		bl	vs1002SetVolume
 1025              		.loc 1 788 0
 1026 061c FEFFFFEB 		bl	vs1002Finish
 1027              	.LVL34:
 1028              	.L120:
 1029              		.loc 1 783 0
 1030 0620 013084E2 		add	r3, r4, #1
 1031 0624 FF4003E2 		and	r4, r3, #255
 1032              	.LVL35:
 1033              	.L119:
 1034 0628 050054E1 		cmp	r4, r5
 1035 062c F2FFFFBA 		blt	.L121
 1036              	.LBE157:
 1037              		.loc 1 791 0
 1038 0630 50409FE5 		ldr	r4, .L123+4
 1039              	.LVL36:
 1040 0634 002094E5 		ldr	r2, [r4, #0]
 1041 0638 0200A0E3 		mov	r0, #2
 1042 063c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1043 0640 0010A0E3 		mov	r1, #0
 1044 0644 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1045 0648 FEFFFFEB 		bl	LCDSetRowColor
 1046              		.loc 1 792 0
 1047 064c 001094E5 		ldr	r1, [r4, #0]
 1048 0650 0030A0E3 		mov	r3, #0
 1049 0654 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1050 0658 00308DE5 		str	r3, [sp, #0]
 1051 065c 20309FE5 		ldr	r3, .L123
 1052 0660 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1053 0664 20009FE5 		ldr	r0, .L123+8
 1054 0668 001093E5 		ldr	r1, [r3, #0]
 1055 066c 0230A0E3 		mov	r3, #2
 1056 0670 04C08DE5 		str	ip, [sp, #4]
 1057 0674 FEFFFFEB 		bl	LCDPrintString
 1058              		.loc 1 793 0
 1059 0678 08D08DE2 		add	sp, sp, #8
 1060 067c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1061 0680 1EFF2FE1 		bx	lr
 1062              	.L124:
 1063              		.align	2
 1064              	.L123:
 1065 0684 00000000 		.word	volume_setting
 1066 0688 7C040000 		.word	current_display
 1067 068c 00000000 		.word	.LC0
 1068              	.LFE26:
 1070              		.align	2
 1071              		.global	quickClear
 1073              	quickClear:
 1074              	.LFB17:
 1075              		.loc 1 638 0
 1076              		@ Function supports interworking.
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              	.LVL37:
 1080              	.LBB158:
 1081              	.LBB159:
 1082              		.loc 1 830 0
 1083 0690 B8209FE5 		ldr	r2, .L130
 1084 0694 003092E5 		ldr	r3, [r2, #0]
 1085              	.LBE159:
 1086              	.LBE158:
 1087              		.loc 1 638 0
 1088 0698 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 1089              	.LCFI8:
 1090              	.LBB161:
 1091              	.LBB160:
 1092              		.loc 1 830 0
 1093 069c FF3DC3E3 		bic	r3, r3, #16320
 1094 06a0 3030C3E3 		bic	r3, r3, #48
 1095 06a4 003082E5 		str	r3, [r2, #0]
 1096              	.LBE160:
 1097              	.LBE161:
 1098              		.loc 1 641 0
 1099 06a8 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 1100 06ac 00005EE3 		cmp	lr, #0
 1101              		.loc 1 638 0
 1102 06b0 08D04DE2 		sub	sp, sp, #8
 1103              	.LCFI9:
 1104              		.loc 1 638 0
 1105 06b4 0050A0E1 		mov	r5, r0
 1106              		.loc 1 641 0
 1107 06b8 0700001A 		bne	.L126
 1108              	.LVL38:
 1109              		.loc 1 642 0
 1110 06bc 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 1111 06c0 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 1112 06c4 0E10A0E1 		mov	r1, lr
 1113 06c8 7B0F80E2 		add	r0, r0, #492
 1114 06cc 0E30A0E1 		mov	r3, lr
 1115 06d0 04C08DE5 		str	ip, [sp, #4]
 1116 06d4 00E08DE5 		str	lr, [sp, #0]
 1117 06d8 FEFFFFEB 		bl	LCDPrintString
 1118              	.LVL39:
 1119              	.L126:
 1120              		.loc 1 644 0
 1121 06dc 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1122 06e0 0010A0E3 		mov	r1, #0
 1123 06e4 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1124 06e8 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1125 06ec FEFFFFEB 		bl	LCDSetRowColor
 1126 06f0 0040A0E3 		mov	r4, #0
 1127              	.LVL40:
 1128              	.LBB162:
 1129              		.loc 1 647 0
 1130 06f4 58709FE5 		ldr	r7, .L130+4
 1131              		.loc 1 646 0
 1132 06f8 0460A0E1 		mov	r6, r4
 1133              	.L127:
 1134 06fc 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1135 0700 840285E0 		add	r0, r5, r4, asl #5
 1136              	.LBE162:
 1137              		.loc 1 644 0
 1138 0704 014084E2 		add	r4, r4, #1
 1139              	.LVL41:
 1140              	.LBB163:
 1141              		.loc 1 646 0
 1142 0708 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1143 070c 0C0080E2 		add	r0, r0, #12
 1144 0710 0610A0E1 		mov	r1, r6
 1145 0714 0430A0E1 		mov	r3, r4
 1146 0718 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1147 071c FEFFFFEB 		bl	LCDPrintString
 1148              		.loc 1 647 0
 1149 0720 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 1150 0724 2C009FE5 		ldr	r0, .L130+8
 1151 0728 0610A0E1 		mov	r1, r6
 1152 072c 0430A0E1 		mov	r3, r4
 1153 0730 00608DE5 		str	r6, [sp, #0]
 1154 0734 04608DE5 		str	r6, [sp, #4]
 1155 0738 FEFFFFEB 		bl	LCDPrintString
 1156              		.loc 1 645 0
 1157 073c 0F0054E3 		cmp	r4, #15
 1158              	.LVL42:
 1159 0740 EDFFFF1A 		bne	.L127
 1160              	.LBE163:
 1161              		.loc 1 649 0
 1162 0744 08D08DE2 		add	sp, sp, #8
 1163 0748 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 1164 074c 1EFF2FE1 		bx	lr
 1165              	.L131:
 1166              		.align	2
 1167              	.L130:
 1168 0750 00C002E0 		.word	-536690688
 1169 0754 00000000 		.word	black
 1170 0758 00000000 		.word	newline
 1171              	.LFE17:
 1173              		.align	2
 1174              		.global	printMenu
 1176              	printMenu:
 1177              	.LFB12:
 1178              		.loc 1 443 0
 1179              		@ Function supports interworking.
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182              	.LVL43:
 1183              	.LBB164:
 1184              	.LBB165:
 1185              		.loc 1 830 0
 1186 075c C0209FE5 		ldr	r2, .L137
 1187 0760 003092E5 		ldr	r3, [r2, #0]
 1188              	.LBE165:
 1189              	.LBE164:
 1190              		.loc 1 443 0
 1191 0764 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1192              	.LCFI10:
 1193              	.LBB167:
 1194              	.LBB166:
 1195              		.loc 1 830 0
 1196 0768 FF3DC3E3 		bic	r3, r3, #16320
 1197 076c 3030C3E3 		bic	r3, r3, #48
 1198 0770 003082E5 		str	r3, [r2, #0]
 1199              	.LBE166:
 1200              	.LBE167:
 1201              		.loc 1 445 0
 1202 0774 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 1203 0778 00005EE3 		cmp	lr, #0
 1204              		.loc 1 443 0
 1205 077c 08D04DE2 		sub	sp, sp, #8
 1206              	.LCFI11:
 1207              		.loc 1 443 0
 1208 0780 0050A0E1 		mov	r5, r0
 1209              		.loc 1 445 0
 1210 0784 0700001A 		bne	.L133
 1211              	.LVL44:
 1212 0788 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 1213 078c 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 1214 0790 0E10A0E1 		mov	r1, lr
 1215 0794 7B0F80E2 		add	r0, r0, #492
 1216 0798 0E30A0E1 		mov	r3, lr
 1217 079c 04C08DE5 		str	ip, [sp, #4]
 1218 07a0 00E08DE5 		str	lr, [sp, #0]
 1219 07a4 FEFFFFEB 		bl	LCDPrintString
 1220              	.LVL45:
 1221              	.L133:
 1222 07a8 0030A0E3 		mov	r3, #0
 1223              	.LVL46:
 1224              	.LBB168:
 1225              		.loc 1 447 0
 1226 07ac 0360A0E1 		mov	r6, r3
 1227              	.L134:
 1228 07b0 014083E2 		add	r4, r3, #1
 1229 07b4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1230 07b8 830285E0 		add	r0, r5, r3, asl #5
 1231 07bc 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1232 07c0 0430A0E1 		mov	r3, r4
 1233              	.LVL47:
 1234 07c4 0C0080E2 		add	r0, r0, #12
 1235 07c8 0610A0E1 		mov	r1, r6
 1236 07cc 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1237 07d0 FEFFFFEB 		bl	LCDPrintString
 1238              		.loc 1 446 0
 1239 07d4 0F0054E3 		cmp	r4, #15
 1240              	.LVL48:
 1241 07d8 0430A0E1 		mov	r3, r4
 1242              	.LVL49:
 1243 07dc F3FFFF1A 		bne	.L134
 1244              	.LBE168:
 1245              		.loc 1 449 0
 1246 07e0 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1247 07e4 0610A0E1 		mov	r1, r6
 1248 07e8 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1249 07ec 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1250              	.LVL50:
 1251 07f0 FEFFFFEB 		bl	LCDSetRowColor
 1252              		.loc 1 450 0
 1253 07f4 080095E5 		ldr	r0, [r5, #8]
 1254 07f8 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1255 07fc 800285E0 		add	r0, r5, r0, asl #5
 1256 0800 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1257 0804 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1258 0808 0C0080E2 		add	r0, r0, #12
 1259 080c 0610A0E1 		mov	r1, r6
 1260 0810 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1261 0814 FEFFFFEB 		bl	LCDPrintString
 1262              		.loc 1 451 0
 1263 0818 08D08DE2 		add	sp, sp, #8
 1264 081c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1265 0820 1EFF2FE1 		bx	lr
 1266              	.L138:
 1267              		.align	2
 1268              	.L137:
 1269 0824 00C002E0 		.word	-536690688
 1270              	.LFE12:
 1272              		.align	2
 1273              		.global	highlightRow
 1275              	highlightRow:
 1276              	.LFB11:
 1277              		.loc 1 424 0
 1278              		@ Function supports interworking.
 1279              		@ args = 0, pretend = 0, frame = 0
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 1281              	.LVL51:
 1282              	.LBB169:
 1283              	.LBB170:
 1284              		.loc 1 830 0
 1285 0828 D0209FE5 		ldr	r2, .L144
 1286 082c 003092E5 		ldr	r3, [r2, #0]
 1287              	.LBE170:
 1288              	.LBE169:
 1289              		.loc 1 424 0
 1290 0830 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1291              	.LCFI12:
 1292              	.LBB172:
 1293              	.LBB171:
 1294              		.loc 1 830 0
 1295 0834 FF3DC3E3 		bic	r3, r3, #16320
 1296 0838 3030C3E3 		bic	r3, r3, #48
 1297 083c 003082E5 		str	r3, [r2, #0]
 1298              	.LBE171:
 1299              	.LBE172:
 1300              		.loc 1 424 0
 1301 0840 0060A0E1 		mov	r6, r0
 1302 0844 08D04DE2 		sub	sp, sp, #8
 1303              	.LCFI13:
 1304              		.loc 1 426 0
 1305 0848 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1306 084c 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1307              		.loc 1 424 0
 1308 0850 0140A0E1 		mov	r4, r1
 1309              		.loc 1 426 0
 1310 0854 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 1311              	.LVL52:
 1312 0858 0010A0E3 		mov	r1, #0
 1313              	.LVL53:
 1314 085c FEFFFFEB 		bl	LCDSetRowColor
 1315              		.loc 1 427 0
 1316 0860 080096E5 		ldr	r0, [r6, #8]
 1317 0864 00C0A0E3 		mov	ip, #0
 1318 0868 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 1319 086c 800286E0 		add	r0, r6, r0, asl #5
 1320 0870 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1321 0874 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1322 0878 0C10A0E1 		mov	r1, ip
 1323 087c 0C0080E2 		add	r0, r0, #12
 1324 0880 00C08DE5 		str	ip, [sp, #0]
 1325              		.loc 1 424 0
 1326 0884 FF4004E2 		and	r4, r4, #255
 1327              	.LVL54:
 1328              		.loc 1 427 0
 1329 0888 04508DE5 		str	r5, [sp, #4]
 1330 088c FEFFFFEB 		bl	LCDPrintString
 1331 0890 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1332              		.loc 1 428 0
 1333 0894 010054E3 		cmp	r4, #1
 1334 0898 082096E5 		ldr	r2, [r6, #8]
 1335              		.loc 1 429 0
 1336 089c 01304302 		subeq	r3, r3, #1
 1337              		.loc 1 433 0
 1338 08a0 01308312 		addne	r3, r3, #1
 1339 08a4 0030C6E5 		strb	r3, [r6, #0]
 1340              		.loc 1 430 0
 1341 08a8 01204202 		subeq	r2, r2, #1
 1342              		.loc 1 434 0
 1343 08ac 01208212 		addne	r2, r2, #1
 1344 08b0 082086E5 		str	r2, [r6, #8]
 1345              		.loc 1 436 0
 1346 08b4 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 1347 08b8 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1348 08bc 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1349 08c0 0010A0E3 		mov	r1, #0
 1350 08c4 FEFFFFEB 		bl	LCDSetRowColor
 1351              		.loc 1 437 0
 1352 08c8 080096E5 		ldr	r0, [r6, #8]
 1353 08cc 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 1354              	.LVL55:
 1355 08d0 00C0A0E3 		mov	ip, #0
 1356 08d4 800286E0 		add	r0, r6, r0, asl #5
 1357 08d8 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1358 08dc 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1359 08e0 0C0080E2 		add	r0, r0, #12
 1360 08e4 0C10A0E1 		mov	r1, ip
 1361 08e8 04408DE5 		str	r4, [sp, #4]
 1362 08ec 00C08DE5 		str	ip, [sp, #0]
 1363 08f0 FEFFFFEB 		bl	LCDPrintString
 1364              		.loc 1 438 0
 1365 08f4 08D08DE2 		add	sp, sp, #8
 1366 08f8 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1367 08fc 1EFF2FE1 		bx	lr
 1368              	.L145:
 1369              		.align	2
 1370              	.L144:
 1371 0900 00C002E0 		.word	-536690688
 1372              	.LFE11:
 1374              		.align	2
 1375              		.global	handleDownButton
 1377              	handleDownButton:
 1378              	.LFB15:
 1379              		.loc 1 508 0
 1380              		@ Function supports interworking.
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383              	.LVL56:
 1384 0904 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1385              	.LCFI14:
 1386              		.loc 1 509 0
 1387 0908 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1388 090c 0E0053E3 		cmp	r3, #14
 1389              		.loc 1 508 0
 1390 0910 0040A0E1 		mov	r4, r0
 1391 0914 0150A0E1 		mov	r5, r1
 1392              		.loc 1 509 0
 1393 0918 0200008A 		bhi	.L147
 1394              	.LVL57:
 1395              		.loc 1 510 0
 1396 091c 0010A0E3 		mov	r1, #0
 1397              		.loc 1 524 0
 1398 0920 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1399              		.loc 1 510 0
 1400 0924 FEFFFFEA 		b	highlightRow
 1401              	.LVL58:
 1402              	.L147:
 1403              		.loc 1 513 0
 1404 0928 0F0053E3 		cmp	r3, #15
 1405 092c 1000001A 		bne	.L149
 1406 0930 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 1407 0934 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 1408 0938 020053E1 		cmp	r3, r2
 1409 093c 0C00009A 		bls	.L149
 1410              	.LVL59:
 1411              		.loc 1 515 0
 1412 0940 013082E2 		add	r3, r2, #1
 1413 0944 0630C0E5 		strb	r3, [r0, #6]
 1414              		.loc 1 518 0
 1415 0948 FEFFFFEB 		bl	quickClear
 1416              	.LVL60:
 1417              		.loc 1 519 0
 1418 094c 0130A0E3 		mov	r3, #1
 1419 0950 0030C4E5 		strb	r3, [r4, #0]
 1420              		.loc 1 520 0
 1421 0954 0030A0E3 		mov	r3, #0
 1422 0958 083084E5 		str	r3, [r4, #8]
 1423              		.loc 1 521 0
 1424 095c 0510A0E1 		mov	r1, r5
 1425 0960 14009FE5 		ldr	r0, .L150
 1426 0964 FEFFFFEB 		bl	getNewFiles
 1427              		.loc 1 522 0
 1428 0968 0400A0E1 		mov	r0, r4
 1429              		.loc 1 524 0
 1430 096c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1431              		.loc 1 522 0
 1432 0970 FEFFFFEA 		b	printMenu
 1433              	.LVL61:
 1434              	.L149:
 1435              		.loc 1 524 0
 1436 0974 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1437 0978 1EFF2FE1 		bx	lr
 1438              	.L151:
 1439              		.align	2
 1440              	.L150:
 1441 097c 74000000 		.word	file_manager
 1442              	.LFE15:
 1444              		.align	2
 1445              		.global	handleUpButton
 1447              	handleUpButton:
 1448              	.LFB14:
 1449              		.loc 1 484 0
 1450              		@ Function supports interworking.
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              	.LVL62:
 1454 0980 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1455              	.LCFI15:
 1456              		.loc 1 485 0
 1457 0984 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1458 0988 010053E3 		cmp	r3, #1
 1459              		.loc 1 484 0
 1460 098c 0040A0E1 		mov	r4, r0
 1461 0990 0150A0E1 		mov	r5, r1
 1462              		.loc 1 485 0
 1463 0994 0200009A 		bls	.L153
 1464              	.LVL63:
 1465              		.loc 1 486 0
 1466 0998 0110A0E3 		mov	r1, #1
 1467              		.loc 1 500 0
 1468 099c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1469              		.loc 1 486 0
 1470 09a0 FEFFFFEA 		b	highlightRow
 1471              	.LVL64:
 1472              	.L153:
 1473              		.loc 1 489 0
 1474 09a4 0F00001A 		bne	.L155
 1475 09a8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1476 09ac 000053E3 		cmp	r3, #0
 1477 09b0 0C00000A 		beq	.L155
 1478              	.LVL65:
 1479              		.loc 1 491 0
 1480 09b4 013043E2 		sub	r3, r3, #1
 1481 09b8 0630C0E5 		strb	r3, [r0, #6]
 1482              		.loc 1 494 0
 1483 09bc FEFFFFEB 		bl	quickClear
 1484              	.LVL66:
 1485              		.loc 1 495 0
 1486 09c0 0F30A0E3 		mov	r3, #15
 1487 09c4 0030C4E5 		strb	r3, [r4, #0]
 1488              		.loc 1 496 0
 1489 09c8 0E30A0E3 		mov	r3, #14
 1490 09cc 083084E5 		str	r3, [r4, #8]
 1491              		.loc 1 497 0
 1492 09d0 0510A0E1 		mov	r1, r5
 1493 09d4 14009FE5 		ldr	r0, .L156
 1494 09d8 FEFFFFEB 		bl	getNewFiles
 1495              		.loc 1 498 0
 1496 09dc 0400A0E1 		mov	r0, r4
 1497              		.loc 1 500 0
 1498 09e0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1499              		.loc 1 498 0
 1500 09e4 FEFFFFEA 		b	printMenu
 1501              	.LVL67:
 1502              	.L155:
 1503              		.loc 1 500 0
 1504 09e8 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1505 09ec 1EFF2FE1 		bx	lr
 1506              	.L157:
 1507              		.align	2
 1508              	.L156:
 1509 09f0 74000000 		.word	file_manager
 1510              	.LFE14:
 1512              		.align	2
 1513              		.global	sendMP3Data
 1515              	sendMP3Data:
 1516              	.LFB24:
 1517              		.loc 1 745 0
 1518              		@ Function supports interworking.
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521 09f4 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1522              	.LCFI16:
 1523              		.loc 1 746 0
 1524 09f8 FEFFFFEB 		bl	vs1002Config
 1525              		.loc 1 747 0
 1526 09fc 54809FE5 		ldr	r8, .L164
 1527              		.loc 1 750 0
 1528 0a00 54709FE5 		ldr	r7, .L164+4
 1529 0a04 54409FE5 		ldr	r4, .L164+8
 1530              		.loc 1 753 0
 1531 0a08 0060A0E3 		mov	r6, #0
 1532              		.loc 1 751 0
 1533 0a0c 0150A0E3 		mov	r5, #1
 1534 0a10 080000EA 		b	.L163
 1535              	.L161:
 1536              		.loc 1 748 0
 1537 0a14 FEFFFFEB 		bl	vs1002SendMusic
 1538              		.loc 1 750 0
 1539 0a18 340097E5 		ldr	r0, [r7, #52]
 1540 0a1c 40109FE5 		ldr	r1, .L164+12
 1541 0a20 2020A0E3 		mov	r2, #32
 1542 0a24 FEFFFFEB 		bl	fat16_read_file
 1543 0a28 0008A0E1 		mov	r0, r0, asl #16
 1544 0a2c 000050E3 		cmp	r0, #0
 1545              		.loc 1 751 0
 1546 0a30 0050C4D5 		strleb	r5, [r4, #0]
 1547              		.loc 1 753 0
 1548 0a34 0060C4C5 		strgtb	r6, [r4, #0]
 1549              	.L163:
 1550              		.loc 1 747 0
 1551 0a38 003098E5 		ldr	r3, [r8, #0]
 1552 0a3c 020613E3 		tst	r3, #2097152
 1553              		.loc 1 748 0
 1554 0a40 1C009FE5 		ldr	r0, .L164+12
 1555 0a44 2010A0E3 		mov	r1, #32
 1556              		.loc 1 747 0
 1557 0a48 F1FFFF1A 		bne	.L161
 1558              		.loc 1 756 0
 1559 0a4c FEFFFFEB 		bl	vs1002Finish
 1560              		.loc 1 757 0
 1561 0a50 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1562 0a54 1EFF2FE1 		bx	lr
 1563              	.L165:
 1564              		.align	2
 1565              	.L164:
 1566 0a58 008002E0 		.word	-536707072
 1567 0a5c 14000000 		.word	current_song
 1568 0a60 02000000 		.word	song_is_over
 1569 0a64 51000000 		.word	current_song+61
 1570              	.LFE24:
 1572              		.align	2
 1574              	timer1ISR:
 1575              	.LFB6:
 1576              		.loc 1 335 0
 1577              		@ Function supports interworking.
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580 0a68 04E02DE5 		str	lr, [sp, #-4]!
 1581              	.LCFI17:
 1582              		.loc 1 336 0
 1583 0a6c FEFFFFEB 		bl	sendMP3Data
 1584              		.loc 1 338 0
 1585 0a70 18309FE5 		ldr	r3, .L168
 1586 0a74 FF20A0E3 		mov	r2, #255
 1587 0a78 002083E5 		str	r2, [r3, #0]
 1588              		.loc 1 339 0
 1589 0a7c 0020A0E3 		mov	r2, #0
 1590 0a80 0030E0E3 		mvn	r3, #0
 1591 0a84 CF2F03E5 		str	r2, [r3, #-4047]
 1592              		.loc 1 340 0
 1593 0a88 04E09DE4 		ldr	lr, [sp], #4
 1594 0a8c 1EFF2FE1 		bx	lr
 1595              	.L169:
 1596              		.align	2
 1597              	.L168:
 1598 0a90 008000E0 		.word	-536838144
 1599              	.LFE6:
 1601              		.align	2
 1602              		.global	startMP3Player
 1604              	startMP3Player:
 1605              	.LFB23:
 1606              		.loc 1 732 0
 1607              		@ Function supports interworking.
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610 0a94 10402DE9 		stmfd	sp!, {r4, lr}
 1611              	.LCFI18:
 1612              		.loc 1 733 0
 1613 0a98 FEFFFFEB 		bl	vs1002Config
 1614              		.loc 1 736 0
 1615 0a9c 50409FE5 		ldr	r4, .L172
 1616              		.loc 1 734 0
 1617 0aa0 0000A0E3 		mov	r0, #0
 1618 0aa4 021BA0E3 		mov	r1, #2048
 1619 0aa8 FEFFFFEB 		bl	vs1002SCIWrite
 1620              		.loc 1 735 0
 1621 0aac FEFFFFEB 		bl	vs1002Finish
 1622              		.loc 1 736 0
 1623 0ab0 0232A0E3 		mov	r3, #536870912
 1624 0ab4 0C3084E5 		str	r3, [r4, #12]
 1625              		.loc 1 737 0
 1626 0ab8 FEFFFFEB 		bl	sendMP3Data
 1627              		.loc 1 738 0
 1628 0abc 34209FE5 		ldr	r2, .L172+4
 1629 0ac0 043092E5 		ldr	r3, [r2, #4]
 1630 0ac4 033B83E3 		orr	r3, r3, #3072
 1631 0ac8 043082E5 		str	r3, [r2, #4]
 1632              	.LBB173:
 1633              	.LBB174:
 1634              		.loc 1 913 0
 1635 0acc 0020E0E3 		mvn	r2, #0
 1636 0ad0 EF3F12E5 		ldr	r3, [r2, #-4079]
 1637 0ad4 203083E3 		orr	r3, r3, #32
 1638 0ad8 EF3F02E5 		str	r3, [r2, #-4079]
 1639              	.LBE174:
 1640              	.LBE173:
 1641              		.loc 1 740 0
 1642 0adc 083094E5 		ldr	r3, [r4, #8]
 1643 0ae0 033783E3 		orr	r3, r3, #786432
 1644 0ae4 503083E3 		orr	r3, r3, #80
 1645 0ae8 083084E5 		str	r3, [r4, #8]
 1646              		.loc 1 741 0
 1647 0aec 1040BDE8 		ldmfd	sp!, {r4, lr}
 1648 0af0 1EFF2FE1 		bx	lr
 1649              	.L173:
 1650              		.align	2
 1651              	.L172:
 1652 0af4 008002E0 		.word	-536707072
 1653 0af8 00C002E0 		.word	-536690688
 1654              	.LFE23:
 1656              		.align	2
 1657              		.global	initializeMP3Player
 1659              	initializeMP3Player:
 1660              	.LFB22:
 1661              		.loc 1 722 0
 1662              		@ Function supports interworking.
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 1665 0afc 04E02DE5 		str	lr, [sp, #-4]!
 1666              	.LCFI19:
 1667              		.loc 1 723 0
 1668 0b00 FEFFFFEB 		bl	vs1002Config
 1669              		.loc 1 724 0
 1670 0b04 FEFFFFEB 		bl	vs1002Reset
 1671              		.loc 1 725 0
 1672 0b08 FEFFFFEB 		bl	vs1002Init
 1673              		.loc 1 726 0
 1674 0b0c 0500A0E3 		mov	r0, #5
 1675 0b10 FEFFFFEB 		bl	lowerVolume
 1676              		.loc 1 727 0
 1677 0b14 FEFFFFEB 		bl	vs1002Finish
 1678              		.loc 1 728 0
 1679 0b18 04E09DE4 		ldr	lr, [sp], #4
 1680 0b1c 1EFF2FE1 		bx	lr
 1681              	.LFE22:
 1683              		.section	.rodata.str1.1
 1684              	.LC1:
 1685 0003 4F666600 		.ascii	"Off\000"
 1686              		.text
 1687              		.align	2
 1688              		.global	disableRadio
 1690              	disableRadio:
 1691              	.LFB21:
 1692              		.loc 1 701 0
 1693              		@ Function supports interworking.
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696 0b20 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1697              	.LCFI20:
 1698              		.loc 1 702 0
 1699 0b24 98309FE5 		ldr	r3, .L180
 1700              		.loc 1 705 0
 1701 0b28 98509FE5 		ldr	r5, .L180+4
 1702              		.loc 1 702 0
 1703 0b2c 0040A0E3 		mov	r4, #0
 1704 0b30 0040C3E5 		strb	r4, [r3, #0]
 1705              		.loc 1 705 0
 1706 0b34 002095E5 		ldr	r2, [r5, #0]
 1707              		.loc 1 701 0
 1708 0b38 08D04DE2 		sub	sp, sp, #8
 1709              	.LCFI21:
 1710              		.loc 1 705 0
 1711 0b3c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1712 0b40 0200A0E3 		mov	r0, #2
 1713 0b44 0410A0E1 		mov	r1, r4
 1714 0b48 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1715 0b4c FEFFFFEB 		bl	LCDSetRowColor
 1716              		.loc 1 706 0
 1717 0b50 003095E5 		ldr	r3, [r5, #0]
 1718 0b54 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1719 0b58 00408DE5 		str	r4, [sp, #0]
 1720 0b5c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1721 0b60 64009FE5 		ldr	r0, .L180+8
 1722 0b64 0230A0E3 		mov	r3, #2
 1723 0b68 0410A0E1 		mov	r1, r4
 1724 0b6c 04C08DE5 		str	ip, [sp, #4]
 1725 0b70 FEFFFFEB 		bl	LCDPrintString
 1726              	.LBB175:
 1727              	.LBB176:
 1728              		.loc 1 835 0
 1729 0b74 54209FE5 		ldr	r2, .L180+12
 1730 0b78 1C3092E5 		ldr	r3, [r2, #28]
 1731 0b7c 013283E3 		orr	r3, r3, #268435456
 1732 0b80 1C3082E5 		str	r3, [r2, #28]
 1733              	.LBE176:
 1734              	.LBE175:
 1735              	.LBB177:
 1736              	.LBB178:
 1737              		.loc 1 251 0
 1738 0b84 48309FE5 		ldr	r3, .L180+16
 1739              	.L177:
 1740              	@ 251 "main.c" 1
 1741 0b88 0000A0E1 		nop
 1742              	@ 0 "" 2
 1743 0b8c 014084E2 		add	r4, r4, #1
 1744              	.LVL68:
 1745 0b90 030054E1 		cmp	r4, r3
 1746 0b94 FBFFFF1A 		bne	.L177
 1747              	.LBE178:
 1748              	.LBE177:
 1749              		.loc 1 711 0
 1750 0b98 FEFFFFEB 		bl	ns73Config
 1751              		.loc 1 712 0
 1752 0b9c 0000A0E3 		mov	r0, #0
 1753 0ba0 0410A0E3 		mov	r1, #4
 1754 0ba4 FEFFFFEB 		bl	ns73Send
 1755              	.LBB179:
 1756              	.LBB180:
 1757              		.loc 1 840 0
 1758 0ba8 20209FE5 		ldr	r2, .L180+12
 1759 0bac 143092E5 		ldr	r3, [r2, #20]
 1760 0bb0 013283E3 		orr	r3, r3, #268435456
 1761 0bb4 143082E5 		str	r3, [r2, #20]
 1762              	.LBE180:
 1763              	.LBE179:
 1764              		.loc 1 714 0
 1765 0bb8 08D08DE2 		add	sp, sp, #8
 1766 0bbc 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1767 0bc0 1EFF2FE1 		bx	lr
 1768              	.L181:
 1769              		.align	2
 1770              	.L180:
 1771 0bc4 00000000 		.word	radio_enable
 1772 0bc8 7C040000 		.word	current_display
 1773 0bcc 03000000 		.word	.LC1
 1774 0bd0 008002E0 		.word	-536707072
 1775 0bd4 40420F00 		.word	1000000
 1776              	.LFE21:
 1778              		.section	.rodata.str1.1
 1779              	.LC2:
 1780 0007 4F6E00   		.ascii	"On\000"
 1781              		.text
 1782              		.align	2
 1783              		.global	enableRadio
 1785              	enableRadio:
 1786              	.LFB20:
 1787              		.loc 1 684 0
 1788              		@ Function supports interworking.
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 1791 0bd8 10402DE9 		stmfd	sp!, {r4, lr}
 1792              	.LCFI22:
 1793              		.loc 1 685 0
 1794 0bdc 9C309FE5 		ldr	r3, .L186
 1795              		.loc 1 688 0
 1796 0be0 9C409FE5 		ldr	r4, .L186+4
 1797              		.loc 1 685 0
 1798 0be4 0120A0E3 		mov	r2, #1
 1799 0be8 0020C3E5 		strb	r2, [r3, #0]
 1800              		.loc 1 688 0
 1801 0bec 002094E5 		ldr	r2, [r4, #0]
 1802              		.loc 1 684 0
 1803 0bf0 08D04DE2 		sub	sp, sp, #8
 1804              	.LCFI23:
 1805              		.loc 1 688 0
 1806 0bf4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1807 0bf8 0200A0E3 		mov	r0, #2
 1808 0bfc 0010A0E3 		mov	r1, #0
 1809 0c00 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1810 0c04 FEFFFFEB 		bl	LCDSetRowColor
 1811              		.loc 1 689 0
 1812 0c08 003094E5 		ldr	r3, [r4, #0]
 1813 0c0c 0040A0E3 		mov	r4, #0
 1814 0c10 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1815 0c14 00408DE5 		str	r4, [sp, #0]
 1816 0c18 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1817 0c1c 64009FE5 		ldr	r0, .L186+8
 1818 0c20 0230A0E3 		mov	r3, #2
 1819 0c24 0410A0E1 		mov	r1, r4
 1820 0c28 04C08DE5 		str	ip, [sp, #4]
 1821 0c2c FEFFFFEB 		bl	LCDPrintString
 1822              	.LBB181:
 1823              	.LBB182:
 1824              		.loc 1 835 0
 1825 0c30 54209FE5 		ldr	r2, .L186+12
 1826 0c34 1C3092E5 		ldr	r3, [r2, #28]
 1827 0c38 013283E3 		orr	r3, r3, #268435456
 1828 0c3c 1C3082E5 		str	r3, [r2, #28]
 1829              	.LBE182:
 1830              	.LBE181:
 1831              	.LBB183:
 1832              	.LBB184:
 1833              		.loc 1 251 0
 1834 0c40 48309FE5 		ldr	r3, .L186+16
 1835              	.L183:
 1836              	@ 251 "main.c" 1
 1837 0c44 0000A0E1 		nop
 1838              	@ 0 "" 2
 1839 0c48 014084E2 		add	r4, r4, #1
 1840              	.LVL69:
 1841 0c4c 030054E1 		cmp	r4, r3
 1842 0c50 FBFFFF1A 		bne	.L183
 1843              	.LBE184:
 1844              	.LBE183:
 1845              		.loc 1 694 0
 1846 0c54 FEFFFFEB 		bl	ns73Config
 1847              		.loc 1 695 0
 1848 0c58 0000A0E3 		mov	r0, #0
 1849 0c5c 8110A0E3 		mov	r1, #129
 1850 0c60 FEFFFFEB 		bl	ns73Send
 1851              	.LBB185:
 1852              	.LBB186:
 1853              		.loc 1 840 0
 1854 0c64 20209FE5 		ldr	r2, .L186+12
 1855 0c68 143092E5 		ldr	r3, [r2, #20]
 1856 0c6c 013283E3 		orr	r3, r3, #268435456
 1857 0c70 143082E5 		str	r3, [r2, #20]
 1858              	.LBE186:
 1859              	.LBE185:
 1860              		.loc 1 697 0
 1861 0c74 08D08DE2 		add	sp, sp, #8
 1862 0c78 1040BDE8 		ldmfd	sp!, {r4, lr}
 1863 0c7c 1EFF2FE1 		bx	lr
 1864              	.L187:
 1865              		.align	2
 1866              	.L186:
 1867 0c80 00000000 		.word	radio_enable
 1868 0c84 7C040000 		.word	current_display
 1869 0c88 07000000 		.word	.LC2
 1870 0c8c 008002E0 		.word	-536707072
 1871 0c90 40420F00 		.word	1000000
 1872              	.LFE20:
 1874              		.align	2
 1875              		.global	initializeRadio
 1877              	initializeRadio:
 1878              	.LFB19:
 1879              		.loc 1 670 0
 1880              		@ Function supports interworking.
 1881              		@ args = 0, pretend = 0, frame = 0
 1882              		@ frame_needed = 0, uses_anonymous_args = 0
 1883              	.LVL70:
 1884              	.LBB187:
 1885              	.LBB188:
 1886              		.loc 1 835 0
 1887 0c94 68209FE5 		ldr	r2, .L194
 1888 0c98 1C3092E5 		ldr	r3, [r2, #28]
 1889 0c9c 013283E3 		orr	r3, r3, #268435456
 1890 0ca0 1C3082E5 		str	r3, [r2, #28]
 1891              	.LBE188:
 1892              	.LBE187:
 1893              	.LBB190:
 1894              	.LBB191:
 1895              		.loc 1 251 0
 1896 0ca4 5C209FE5 		ldr	r2, .L194+4
 1897              	.LBE191:
 1898              	.LBE190:
 1899              		.loc 1 670 0
 1900 0ca8 10402DE9 		stmfd	sp!, {r4, lr}
 1901              	.LCFI24:
 1902              	.LBB193:
 1903              	.LBB189:
 1904              		.loc 1 835 0
 1905 0cac 0030A0E3 		mov	r3, #0
 1906              	.LVL71:
 1907              	.LBE189:
 1908              	.LBE193:
 1909              		.loc 1 670 0
 1910 0cb0 0040A0E1 		mov	r4, r0
 1911              	.LVL72:
 1912              	.L189:
 1913              	.LBB194:
 1914              	.LBB192:
 1915              		.loc 1 251 0
 1916              	@ 251 "main.c" 1
 1917 0cb4 0000A0E1 		nop
 1918              	@ 0 "" 2
 1919 0cb8 013083E2 		add	r3, r3, #1
 1920 0cbc 020053E1 		cmp	r3, r2
 1921 0cc0 FBFFFF1A 		bne	.L189
 1922              	.LBE192:
 1923              	.LBE194:
 1924              		.loc 1 674 0
 1925 0cc4 FEFFFFEB 		bl	ns73Config
 1926              	.LVL73:
 1927              		.loc 1 675 0
 1928 0cc8 FEFFFFEB 		bl	ns73Init
 1929              		.loc 1 676 0
 1930 0ccc 0400A0E1 		mov	r0, r4
 1931 0cd0 FEFFFFEB 		bl	ns73SetChannel
 1932              	.LBB195:
 1933              	.LBB196:
 1934              		.loc 1 840 0
 1935 0cd4 28209FE5 		ldr	r2, .L194
 1936 0cd8 143092E5 		ldr	r3, [r2, #20]
 1937 0cdc 013283E3 		orr	r3, r3, #268435456
 1938 0ce0 143082E5 		str	r3, [r2, #20]
 1939              	.LBE196:
 1940              	.LBE195:
 1941              	.LBB198:
 1942              	.LBB199:
 1943              		.loc 1 251 0
 1944 0ce4 20209FE5 		ldr	r2, .L194+8
 1945              	.LBE199:
 1946              	.LBE198:
 1947              	.LBB201:
 1948              	.LBB197:
 1949              		.loc 1 840 0
 1950 0ce8 0030A0E3 		mov	r3, #0
 1951              	.LVL74:
 1952              	.L190:
 1953              	.LBE197:
 1954              	.LBE201:
 1955              	.LBB202:
 1956              	.LBB200:
 1957              		.loc 1 251 0
 1958              	@ 251 "main.c" 1
 1959 0cec 0000A0E1 		nop
 1960              	@ 0 "" 2
 1961 0cf0 013083E2 		add	r3, r3, #1
 1962 0cf4 020053E1 		cmp	r3, r2
 1963 0cf8 FBFFFF1A 		bne	.L190
 1964              	.LBE200:
 1965              	.LBE202:
 1966              		.loc 1 680 0
 1967 0cfc 1040BDE8 		ldmfd	sp!, {r4, lr}
 1968 0d00 1EFF2FE1 		bx	lr
 1969              	.L195:
 1970              		.align	2
 1971              	.L194:
 1972 0d04 008002E0 		.word	-536707072
 1973 0d08 40548900 		.word	9000000
 1974 0d0c 40420F00 		.word	1000000
 1975              	.LFE19:
 1977              		.align	2
 1978              		.global	closeSong
 1980              	closeSong:
 1981              	.LFB10:
 1982              		.loc 1 414 0
 1983              		@ Function supports interworking.
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              	.LVL75:
 1987 0d10 10402DE9 		stmfd	sp!, {r4, lr}
 1988              	.LCFI25:
 1989              	.LBB203:
 1990              	.LBB204:
 1991              		.loc 1 824 0
 1992 0d14 28409FE5 		ldr	r4, .L198
 1993 0d18 003094E5 		ldr	r3, [r4, #0]
 1994 0d1c 153C83E3 		orr	r3, r3, #5376
 1995 0d20 003084E5 		str	r3, [r4, #0]
 1996              	.LBE204:
 1997              	.LBE203:
 1998              		.loc 1 416 0
 1999 0d24 340090E5 		ldr	r0, [r0, #52]
 2000              	.LVL76:
 2001 0d28 FEFFFFEB 		bl	fat16_close_file
 2002              	.LBB205:
 2003              	.LBB206:
 2004              		.loc 1 830 0
 2005 0d2c 003094E5 		ldr	r3, [r4, #0]
 2006 0d30 FF3DC3E3 		bic	r3, r3, #16320
 2007 0d34 3030C3E3 		bic	r3, r3, #48
 2008 0d38 003084E5 		str	r3, [r4, #0]
 2009              	.LBE206:
 2010              	.LBE205:
 2011              		.loc 1 418 0
 2012 0d3c 1040BDE8 		ldmfd	sp!, {r4, lr}
 2013 0d40 1EFF2FE1 		bx	lr
 2014              	.L199:
 2015              		.align	2
 2016              	.L198:
 2017 0d44 00C002E0 		.word	-536690688
 2018              	.LFE10:
 2020              		.align	2
 2021              		.global	stopMP3Player
 2023              	stopMP3Player:
 2024              	.LFB25:
 2025              		.loc 1 761 0
 2026              		@ Function supports interworking.
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
 2029              	.LBB207:
 2030              	.LBB208:
 2031              		.loc 1 919 0
 2032 0d48 2020A0E3 		mov	r2, #32
 2033 0d4c 0030E0E3 		mvn	r3, #0
 2034 0d50 EB2F03E5 		str	r2, [r3, #-4075]
 2035              	.LBE208:
 2036              	.LBE207:
 2037              		.loc 1 764 0
 2038 0d54 74309FE5 		ldr	r3, .L204
 2039 0d58 0222A0E3 		mov	r2, #536870912
 2040              		.loc 1 761 0
 2041 0d5c 10402DE9 		stmfd	sp!, {r4, lr}
 2042              	.LCFI26:
 2043              		.loc 1 764 0
 2044 0d60 042083E5 		str	r2, [r3, #4]
 2045              		.loc 1 765 0
 2046 0d64 FEFFFFEB 		bl	vs1002Config
 2047              		.loc 1 766 0
 2048 0d68 0000A0E3 		mov	r0, #0
 2049 0d6c 0810A0E3 		mov	r1, #8
 2050 0d70 FEFFFFEB 		bl	vs1002SCIWrite
 2051 0d74 0040A0E3 		mov	r4, #0
 2052              	.LVL77:
 2053              	.L201:
 2054              	.LBB209:
 2055              		.loc 1 767 0
 2056 0d78 0000A0E3 		mov	r0, #0
 2057 0d7c 014084E2 		add	r4, r4, #1
 2058 0d80 0010A0E1 		mov	r1, r0
 2059 0d84 FEFFFFEB 		bl	vs1002SCIWrite
 2060 0d88 960054E3 		cmp	r4, #150
 2061 0d8c F9FFFF1A 		bne	.L201
 2062              	.LBE209:
 2063              		.loc 1 768 0
 2064 0d90 FEFFFFEB 		bl	vs1002Finish
 2065              		.loc 1 769 0
 2066 0d94 34209FE5 		ldr	r2, .L204
 2067 0d98 083092E5 		ldr	r3, [r2, #8]
 2068 0d9c 033783E3 		orr	r3, r3, #786432
 2069 0da0 503083E3 		orr	r3, r3, #80
 2070 0da4 083082E5 		str	r3, [r2, #8]
 2071              		.loc 1 770 0
 2072 0da8 24009FE5 		ldr	r0, .L204+4
 2073 0dac FEFFFFEB 		bl	closeSong
 2074              		.loc 1 771 0
 2075 0db0 20309FE5 		ldr	r3, .L204+8
 2076 0db4 0020A0E3 		mov	r2, #0
 2077 0db8 0020C3E5 		strb	r2, [r3, #0]
 2078              	.LBB210:
 2079              	.LBB211:
 2080              		.loc 1 938 0
 2081 0dbc 102082E2 		add	r2, r2, #16
 2082 0dc0 0030E0E3 		mvn	r3, #0
 2083 0dc4 EF2F03E5 		str	r2, [r3, #-4079]
 2084              	.LBE211:
 2085              	.LBE210:
 2086              		.loc 1 774 0
 2087 0dc8 1040BDE8 		ldmfd	sp!, {r4, lr}
 2088 0dcc 1EFF2FE1 		bx	lr
 2089              	.L205:
 2090              		.align	2
 2091              	.L204:
 2092 0dd0 008002E0 		.word	-536707072
 2093 0dd4 14000000 		.word	current_song
 2094 0dd8 01000000 		.word	file_is_open
 2095              	.LFE25:
 2097              		.align	2
 2098              		.global	loadSongInfo
 2100              	loadSongInfo:
 2101              	.LFB9:
 2102              		.loc 1 379 0
 2103              		@ Function supports interworking.
 2104              		@ args = 0, pretend = 0, frame = 0
 2105              		@ frame_needed = 0, uses_anonymous_args = 0
 2106              	.LVL78:
 2107 0ddc 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2108              	.LCFI27:
 2109              		.loc 1 379 0
 2110 0de0 0020A0E3 		mov	r2, #0
 2111              	.LVL79:
 2112 0de4 0040A0E1 		mov	r4, r0
 2113              	.LVL80:
 2114              	.L207:
 2115              	.LBB212:
 2116              		.loc 1 382 0
 2117 0de8 083091E5 		ldr	r3, [r1, #8]
 2118 0dec 833281E0 		add	r3, r1, r3, asl #5
 2119 0df0 023083E0 		add	r3, r3, r2
 2120 0df4 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2121              		.loc 1 381 0
 2122 0df8 012082E2 		add	r2, r2, #1
 2123 0dfc 1E0052E3 		cmp	r2, #30
 2124              		.loc 1 382 0
 2125 0e00 1630C0E5 		strb	r3, [r0, #22]
 2126              		.loc 1 381 0
 2127 0e04 010080E2 		add	r0, r0, #1
 2128 0e08 F6FFFF1A 		bne	.L207
 2129 0e0c 0020A0E3 		mov	r2, #0
 2130              	.LVL81:
 2131              	.LBE212:
 2132              	.LBB213:
 2133              		.loc 1 387 0
 2134 0e10 0210A0E1 		mov	r1, r2
 2135              	.LVL82:
 2136              	.L210:
 2137              		.loc 1 386 0
 2138 0e14 023084E0 		add	r3, r4, r2
 2139 0e18 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2140 0e1c 150052E3 		cmp	r2, #21
 2141 0e20 2E005313 		cmpne	r3, #46
 2142              		.loc 1 387 0
 2143 0e24 0210C407 		streqb	r1, [r4, r2]
 2144 0e28 1620A003 		moveq	r2, #22
 2145              		.loc 1 390 0
 2146 0e2c 0230C417 		strneb	r3, [r4, r2]
 2147              		.loc 1 385 0
 2148 0e30 012082E2 		add	r2, r2, #1
 2149 0e34 150052E3 		cmp	r2, #21
 2150 0e38 F5FFFFDA 		ble	.L210
 2151              	.LBE213:
 2152              	.LBB214:
 2153              	.LBB216:
 2154              		.loc 1 824 0
 2155 0e3c 6C609FE5 		ldr	r6, .L216
 2156 0e40 003096E5 		ldr	r3, [r6, #0]
 2157              	.LBE216:
 2158              	.LBE214:
 2159              		.loc 1 396 0
 2160 0e44 165084E2 		add	r5, r4, #22
 2161              	.LBB218:
 2162              	.LBB215:
 2163              		.loc 1 824 0
 2164 0e48 153C83E3 		orr	r3, r3, #5376
 2165              	.LBE215:
 2166              	.LBE218:
 2167              		.loc 1 396 0
 2168 0e4c 0500A0E1 		mov	r0, r5
 2169              	.LBB219:
 2170              	.LBB217:
 2171              		.loc 1 824 0
 2172 0e50 003086E5 		str	r3, [r6, #0]
 2173              	.LBE217:
 2174              	.LBE219:
 2175              		.loc 1 396 0
 2176 0e54 FEFFFFEB 		bl	root_file_exists
 2177              	.LVL83:
 2178 0e58 000050E3 		cmp	r0, #0
 2179              	.LBB220:
 2180              	.LBB221:
 2181              		.loc 1 830 0
 2182 0e5c 00309605 		ldreq	r3, [r6, #0]
 2183 0e60 FF3DC303 		biceq	r3, r3, #16320
 2184 0e64 3030C303 		biceq	r3, r3, #48
 2185 0e68 00308605 		streq	r3, [r6, #0]
 2186 0e6c 0D00000A 		beq	.L212
 2187              	.L211:
 2188              	.LBE221:
 2189              	.LBE220:
 2190              		.loc 1 402 0
 2191 0e70 0500A0E1 		mov	r0, r5
 2192 0e74 FEFFFFEB 		bl	root_open
 2193 0e78 340084E5 		str	r0, [r4, #52]
 2194              		.loc 1 403 0
 2195 0e7c FEFFFFEB 		bl	fat16_file_size
 2196              		.loc 1 404 0
 2197 0e80 3D1084E2 		add	r1, r4, #61
 2198              		.loc 1 403 0
 2199 0e84 380084E5 		str	r0, [r4, #56]
 2200              		.loc 1 404 0
 2201 0e88 2020A0E3 		mov	r2, #32
 2202 0e8c 340094E5 		ldr	r0, [r4, #52]
 2203 0e90 FEFFFFEB 		bl	fat16_read_file
 2204              	.LBB222:
 2205              	.LBB223:
 2206              		.loc 1 830 0
 2207 0e94 003096E5 		ldr	r3, [r6, #0]
 2208 0e98 FF3DC3E3 		bic	r3, r3, #16320
 2209 0e9c 3030C3E3 		bic	r3, r3, #48
 2210 0ea0 003086E5 		str	r3, [r6, #0]
 2211 0ea4 0100A0E3 		mov	r0, #1
 2212              	.L212:
 2213              	.LBE223:
 2214              	.LBE222:
 2215              		.loc 1 409 0
 2216 0ea8 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2217 0eac 1EFF2FE1 		bx	lr
 2218              	.L217:
 2219              		.align	2
 2220              	.L216:
 2221 0eb0 00C002E0 		.word	-536690688
 2222              	.LFE9:
 2224              		.align	2
 2225              		.global	handleMiddleButton
 2227              	handleMiddleButton:
 2228              	.LFB16:
 2229              		.loc 1 534 0
 2230              		@ Function supports interworking.
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233 0eb4 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2234              	.LCFI28:
 2235              	.LBB224:
 2236              	.LBB225:
 2237              		.loc 1 931 0
 2238 0eb8 1020A0E3 		mov	r2, #16
 2239 0ebc 0030E0E3 		mvn	r3, #0
 2240 0ec0 EB2F03E5 		str	r2, [r3, #-4075]
 2241              	.LBB226:
 2242              	.LBB227:
 2243              		.loc 1 251 0
 2244 0ec4 7C249FE5 		ldr	r2, .L259
 2245              	.LBE227:
 2246              	.LBE226:
 2247              	.LBE225:
 2248              	.LBE224:
 2249              		.loc 1 534 0
 2250 0ec8 08D04DE2 		sub	sp, sp, #8
 2251              	.LCFI29:
 2252              	.LBB231:
 2253              	.LBB230:
 2254              		.loc 1 931 0
 2255 0ecc 013083E2 		add	r3, r3, #1
 2256              	.LVL84:
 2257              	.L219:
 2258              	.LBB229:
 2259              	.LBB228:
 2260              		.loc 1 251 0
 2261              	@ 251 "main.c" 1
 2262 0ed0 0000A0E1 		nop
 2263              	@ 0 "" 2
 2264 0ed4 013083E2 		add	r3, r3, #1
 2265 0ed8 020053E1 		cmp	r3, r2
 2266 0edc FBFFFF1A 		bne	.L219
 2267              	.LBE228:
 2268              	.LBE229:
 2269              	.LBE230:
 2270              	.LBE231:
 2271              		.loc 1 538 0
 2272 0ee0 64649FE5 		ldr	r6, .L259+4
 2273 0ee4 64349FE5 		ldr	r3, .L259+8
 2274              	.LVL85:
 2275 0ee8 000096E5 		ldr	r0, [r6, #0]
 2276 0eec 030050E1 		cmp	r0, r3
 2277 0ef0 5C549FE5 		ldr	r5, .L259+12
 2278 0ef4 2500001A 		bne	.L220
 2279              		.loc 1 539 0
 2280 0ef8 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2281 0efc 000053E3 		cmp	r3, #0
 2282 0f00 2000001A 		bne	.L221
 2283              		.loc 1 540 0
 2284 0f04 0010A0E1 		mov	r1, r0
 2285 0f08 48049FE5 		ldr	r0, .L259+16
 2286 0f0c FEFFFFEB 		bl	loadSongInfo
 2287              		.loc 1 541 0
 2288 0f10 000050E3 		cmp	r0, #0
 2289              		.loc 1 540 0
 2290 0f14 0040A0E1 		mov	r4, r0
 2291 0f18 0000C5E5 		strb	r0, [r5, #0]
 2292              		.loc 1 541 0
 2293 0f1c 1700001A 		bne	.L222
 2294              		.loc 1 542 0
 2295 0f20 34349FE5 		ldr	r3, .L259+20
 2296 0f24 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2297 0f28 FEFFFFEB 		bl	LCDClear
 2298              		.loc 1 543 0
 2299 0f2c 00408DE5 		str	r4, [sp, #0]
 2300 0f30 001096E5 		ldr	r1, [r6, #0]
 2301 0f34 24349FE5 		ldr	r3, .L259+24
 2302 0f38 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2303 0f3c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2304 0f40 1C049FE5 		ldr	r0, .L259+28
 2305 0f44 0130A0E3 		mov	r3, #1
 2306 0f48 0410A0E1 		mov	r1, r4
 2307 0f4c 04C08DE5 		str	ip, [sp, #4]
 2308 0f50 FEFFFFEB 		bl	LCDPrintString
 2309              	.LBB232:
 2310              	.LBB233:
 2311              		.loc 1 251 0
 2312 0f54 0C349FE5 		ldr	r3, .L259+32
 2313              	.LBE233:
 2314              	.LBE232:
 2315              		.loc 1 543 0
 2316 0f58 0400A0E1 		mov	r0, r4
 2317              	.LVL86:
 2318              	.L223:
 2319              	.LBB235:
 2320              	.LBB234:
 2321              		.loc 1 251 0
 2322              	@ 251 "main.c" 1
 2323 0f5c 0000A0E1 		nop
 2324              	@ 0 "" 2
 2325 0f60 010080E2 		add	r0, r0, #1
 2326 0f64 030050E1 		cmp	r0, r3
 2327 0f68 FBFFFF1A 		bne	.L223
 2328              	.LBE234:
 2329              	.LBE235:
 2330              		.loc 1 545 0
 2331 0f6c EC339FE5 		ldr	r3, .L259+24
 2332 0f70 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2333              	.LVL87:
 2334 0f74 FEFFFFEB 		bl	LCDClear
 2335              		.loc 1 546 0
 2336 0f78 D0039FE5 		ldr	r0, .L259+8
 2337 0f7c E90000EA 		b	.L258
 2338              	.L222:
 2339              		.loc 1 548 0
 2340 0f80 FEFFFFEB 		bl	startMP3Player
 2341 0f84 E80000EA 		b	.L224
 2342              	.L221:
 2343              		.loc 1 551 0
 2344 0f88 FEFFFFEB 		bl	stopMP3Player
 2345 0f8c E60000EA 		b	.L224
 2346              	.L220:
 2347              		.loc 1 554 0
 2348 0f90 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2349 0f94 000053E3 		cmp	r3, #0
 2350 0f98 0100000A 		beq	.L225
 2351              		.loc 1 555 0
 2352 0f9c FEFFFFEB 		bl	quickClear
 2353 0fa0 020000EA 		b	.L226
 2354              	.L225:
 2355              		.loc 1 557 0
 2356 0fa4 C0339FE5 		ldr	r3, .L259+36
 2357 0fa8 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2358 0fac FEFFFFEB 		bl	LCDClear
 2359              	.L226:
 2360              		.loc 1 559 0
 2361 0fb0 94839FE5 		ldr	r8, .L259+4
 2362 0fb4 003098E5 		ldr	r3, [r8, #0]
 2363 0fb8 0060A0E3 		mov	r6, #0
 2364 0fbc 080093E5 		ldr	r0, [r3, #8]
 2365 0fc0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2366 0fc4 00608DE5 		str	r6, [sp, #0]
 2367 0fc8 800283E0 		add	r0, r3, r0, asl #5
 2368 0fcc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2369              	.LBB236:
 2370              	.LBB237:
 2371              		.loc 1 925 0
 2372 0fd0 0070E0E3 		mvn	r7, #0
 2373              	.LBE237:
 2374              	.LBE236:
 2375              		.loc 1 559 0
 2376 0fd4 0130A0E3 		mov	r3, #1
 2377 0fd8 0C0080E2 		add	r0, r0, #12
 2378 0fdc 0610A0E1 		mov	r1, r6
 2379 0fe0 04C08DE5 		str	ip, [sp, #4]
 2380 0fe4 FEFFFFEB 		bl	LCDPrintString
 2381              	.LBB239:
 2382              	.LBB238:
 2383              		.loc 1 925 0
 2384 0fe8 EF3F17E5 		ldr	r3, [r7, #-4079]
 2385 0fec 103083E3 		orr	r3, r3, #16
 2386 0ff0 EF3F07E5 		str	r3, [r7, #-4079]
 2387              	.LBE238:
 2388              	.LBE239:
 2389              		.loc 1 561 0
 2390 0ff4 002098E5 		ldr	r2, [r8, #0]
 2391 0ff8 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 2392 0ffc 010054E3 		cmp	r4, #1
 2393 1000 2B00001A 		bne	.L227
 2394              	.LBB240:
 2395              	.LBB241:
 2396              		.loc 1 925 0
 2397 1004 EF3F17E5 		ldr	r3, [r7, #-4079]
 2398 1008 103083E3 		orr	r3, r3, #16
 2399 100c EF3F07E5 		str	r3, [r7, #-4079]
 2400              	.LBE241:
 2401              	.LBE240:
 2402              		.loc 1 563 0
 2403 1010 0610A0E1 		mov	r1, r6
 2404 1014 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2405 1018 0200A0E3 		mov	r0, #2
 2406 101c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2407 1020 FEFFFFEB 		bl	LCDSetRowColor
 2408              		.loc 1 564 0
 2409 1024 00608DE5 		str	r6, [sp, #0]
 2410 1028 2C339FE5 		ldr	r3, .L259+20
 2411 102c 001098E5 		ldr	r1, [r8, #0]
 2412 1030 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2413 1034 34339FE5 		ldr	r3, .L259+40
 2414 1038 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2415 103c 30039FE5 		ldr	r0, .L259+44
 2416 1040 001093E5 		ldr	r1, [r3, #0]
 2417 1044 0230A0E3 		mov	r3, #2
 2418 1048 04C08DE5 		str	ip, [sp, #4]
 2419              	.LBB242:
 2420              	.LBB243:
 2421              		.loc 1 931 0
 2422 104c 0740A0E1 		mov	r4, r7
 2423              	.LBE243:
 2424              	.LBE242:
 2425              		.loc 1 564 0
 2426 1050 FEFFFFEB 		bl	LCDPrintString
 2427              		.loc 1 565 0
 2428 1054 1C739FE5 		ldr	r7, .L259+48
 2429              	.LBB249:
 2430              	.LBB248:
 2431              		.loc 1 931 0
 2432 1058 106086E2 		add	r6, r6, #16
 2433              	.LBB244:
 2434              	.LBB245:
 2435              		.loc 1 251 0
 2436 105c 18539FE5 		ldr	r5, .L259+52
 2437 1060 0F0000EA 		b	.L228
 2438              	.L232:
 2439              	.LBE245:
 2440              	.LBE244:
 2441              		.loc 1 931 0
 2442 1064 EB6F04E5 		str	r6, [r4, #-4075]
 2443 1068 0030A0E3 		mov	r3, #0
 2444              	.LVL88:
 2445              	.L229:
 2446              	.LBB247:
 2447              	.LBB246:
 2448              		.loc 1 251 0
 2449              	@ 251 "main.c" 1
 2450 106c 0000A0E1 		nop
 2451              	@ 0 "" 2
 2452 1070 013083E2 		add	r3, r3, #1
 2453 1074 050053E1 		cmp	r3, r5
 2454 1078 FBFFFF1A 		bne	.L229
 2455              	.LBE246:
 2456              	.LBE247:
 2457              	.LBE248:
 2458              	.LBE249:
 2459              		.loc 1 567 0
 2460 107c 020050E3 		cmp	r0, #2
 2461 1080 0200001A 		bne	.L230
 2462              		.loc 1 568 0
 2463 1084 0100A0E3 		mov	r0, #1
 2464 1088 FEFFFFEB 		bl	raiseVolume
 2465              	.LVL89:
 2466 108c 010000EA 		b	.L231
 2467              	.LVL90:
 2468              	.L230:
 2469              		.loc 1 569 0
 2470 1090 010050E3 		cmp	r0, #1
 2471              		.loc 1 570 0
 2472 1094 FEFFFF0B 		bleq	lowerVolume
 2473              	.LVL91:
 2474              	.L231:
 2475              	.LBB250:
 2476              	.LBB251:
 2477              		.loc 1 925 0
 2478 1098 EF3F14E5 		ldr	r3, [r4, #-4079]
 2479              	.LVL92:
 2480 109c 103083E3 		orr	r3, r3, #16
 2481 10a0 EF3F04E5 		str	r3, [r4, #-4079]
 2482              	.L228:
 2483              	.LBE251:
 2484              	.LBE250:
 2485              		.loc 1 565 0
 2486 10a4 0000D7E5 		ldrb	r0, [r7, #0]	@ zero_extendqisi2
 2487 10a8 020050E3 		cmp	r0, #2
 2488 10ac ECFFFF9A 		bls	.L232
 2489 10b0 8F0000EA 		b	.L233
 2490              	.L227:
 2491              		.loc 1 575 0
 2492 10b4 030054E3 		cmp	r4, #3
 2493 10b8 5E00001A 		bne	.L234
 2494              		.loc 1 576 0
 2495 10bc 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2496 10c0 0610A0E1 		mov	r1, r6
 2497 10c4 0200A0E3 		mov	r0, #2
 2498 10c8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2499 10cc FEFFFFEB 		bl	LCDSetRowColor
 2500              		.loc 1 577 0
 2501 10d0 00608DE5 		str	r6, [sp, #0]
 2502 10d4 003098E5 		ldr	r3, [r8, #0]
 2503 10d8 7C529FE5 		ldr	r5, .L259+20
 2504 10dc 9C429FE5 		ldr	r4, .L259+56
 2505 10e0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2506 10e4 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 2507 10e8 001094E5 		ldr	r1, [r4, #0]
 2508 10ec 0230A0E3 		mov	r3, #2
 2509 10f0 7C029FE5 		ldr	r0, .L259+44
 2510 10f4 04C08DE5 		str	ip, [sp, #4]
 2511 10f8 FEFFFFEB 		bl	LCDPrintString
 2512              	.LBB252:
 2513              	.LBB254:
 2514              		.loc 1 925 0
 2515 10fc EF3F17E5 		ldr	r3, [r7, #-4079]
 2516              	.LBE254:
 2517              	.LBE252:
 2518              		.loc 1 578 0
 2519 1100 70229FE5 		ldr	r2, .L259+48
 2520              	.LBB256:
 2521              	.LBB253:
 2522              		.loc 1 925 0
 2523 1104 103083E3 		orr	r3, r3, #16
 2524              	.LBE253:
 2525              	.LBE256:
 2526              		.loc 1 578 0
 2527 1108 0060C2E5 		strb	r6, [r2, #0]
 2528              		.loc 1 580 0
 2529 110c 02B0A0E1 		mov	fp, r2
 2530              		.loc 1 591 0
 2531 1110 0860A0E1 		mov	r6, r8
 2532              	.LBB257:
 2533              	.LBB255:
 2534              		.loc 1 925 0
 2535 1114 EF3F07E5 		str	r3, [r7, #-4079]
 2536              	.LBE255:
 2537              	.LBE257:
 2538              	.LBB258:
 2539              	.LBB259:
 2540              	.LBB260:
 2541              	.LBB261:
 2542              		.loc 1 251 0
 2543 1118 64929FE5 		ldr	r9, .L259+60
 2544              	.LBE261:
 2545              	.LBE260:
 2546              	.LBE259:
 2547              	.LBE258:
 2548              		.loc 1 590 0
 2549 111c 64A29FE5 		ldr	sl, .L259+64
 2550              		.loc 1 584 0
 2551 1120 64829FE5 		ldr	r8, .L259+68
 2552 1124 2D0000EA 		b	.L235
 2553              	.L241:
 2554              	.LBB265:
 2555              	.LBB264:
 2556              		.loc 1 931 0
 2557 1128 1030A0E3 		mov	r3, #16
 2558 112c EB3F07E5 		str	r3, [r7, #-4075]
 2559 1130 0030A0E3 		mov	r3, #0
 2560              	.LVL93:
 2561              	.L236:
 2562              	.LBB263:
 2563              	.LBB262:
 2564              		.loc 1 251 0
 2565              	@ 251 "main.c" 1
 2566 1134 0000A0E1 		nop
 2567              	@ 0 "" 2
 2568 1138 013083E2 		add	r3, r3, #1
 2569 113c 090053E1 		cmp	r3, r9
 2570 1140 FBFFFF1A 		bne	.L236
 2571              	.LBE262:
 2572              	.LBE263:
 2573              	.LBE264:
 2574              	.LBE265:
 2575              		.loc 1 582 0
 2576 1144 020052E3 		cmp	r2, #2
 2577 1148 0900001A 		bne	.L237
 2578              		.loc 1 584 0
 2579 114c 003094E5 		ldr	r3, [r4, #0]
 2580              	.LVL94:
 2581 1150 080053E1 		cmp	r3, r8
 2582 1154 023083D2 		addle	r3, r3, #2
 2583 1158 003084D5 		strle	r3, [r4, #0]
 2584              		.loc 1 585 0
 2585 115c 002096E5 		ldr	r2, [r6, #0]
 2586 1160 0200A0E3 		mov	r0, #2
 2587 1164 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2588 1168 0010A0E3 		mov	r1, #0
 2589 116c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2590 1170 0A0000EA 		b	.L256
 2591              	.LVL95:
 2592              	.L237:
 2593              		.loc 1 588 0
 2594 1174 010052E3 		cmp	r2, #1
 2595 1178 1300001A 		bne	.L239
 2596              		.loc 1 590 0
 2597 117c 003094E5 		ldr	r3, [r4, #0]
 2598              	.LVL96:
 2599 1180 0A0053E1 		cmp	r3, sl
 2600 1184 023043C2 		subgt	r3, r3, #2
 2601 1188 003084C5 		strgt	r3, [r4, #0]
 2602              		.loc 1 591 0
 2603 118c 002096E5 		ldr	r2, [r6, #0]
 2604 1190 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2605 1194 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2606 1198 0200A0E3 		mov	r0, #2
 2607 119c 0010A0E3 		mov	r1, #0
 2608              	.L256:
 2609 11a0 FEFFFFEB 		bl	LCDSetRowColor
 2610              		.loc 1 592 0
 2611 11a4 0030A0E3 		mov	r3, #0
 2612 11a8 00308DE5 		str	r3, [sp, #0]
 2613 11ac 003096E5 		ldr	r3, [r6, #0]
 2614 11b0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2615 11b4 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 2616 11b8 001094E5 		ldr	r1, [r4, #0]
 2617 11bc B0019FE5 		ldr	r0, .L259+44
 2618 11c0 0230A0E3 		mov	r3, #2
 2619 11c4 04C08DE5 		str	ip, [sp, #4]
 2620 11c8 FEFFFFEB 		bl	LCDPrintString
 2621              	.LVL97:
 2622              	.L239:
 2623              		.loc 1 594 0
 2624 11cc 000094E5 		ldr	r0, [r4, #0]
 2625 11d0 FEFFFFEB 		bl	ns73SetChannel
 2626              	.LVL98:
 2627              	.LBB266:
 2628              	.LBB267:
 2629              		.loc 1 925 0
 2630 11d4 EF3F17E5 		ldr	r3, [r7, #-4079]
 2631 11d8 103083E3 		orr	r3, r3, #16
 2632 11dc EF3F07E5 		str	r3, [r7, #-4079]
 2633              	.L235:
 2634              	.LBE267:
 2635              	.LBE266:
 2636              		.loc 1 580 0
 2637 11e0 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 2638 11e4 020052E3 		cmp	r2, #2
 2639 11e8 CEFFFF9A 		bls	.L241
 2640              	.LBB268:
 2641              	.LBB269:
 2642              		.loc 1 835 0
 2643 11ec 9C219FE5 		ldr	r2, .L259+72
 2644 11f0 1C3092E5 		ldr	r3, [r2, #28]
 2645 11f4 013283E3 		orr	r3, r3, #268435456
 2646 11f8 1C3082E5 		str	r3, [r2, #28]
 2647              	.LBE269:
 2648              	.LBE268:
 2649              	.LBB271:
 2650              	.LBB272:
 2651              		.loc 1 251 0
 2652 11fc 80219FE5 		ldr	r2, .L259+60
 2653              	.LBE272:
 2654              	.LBE271:
 2655              	.LBB274:
 2656              	.LBB270:
 2657              		.loc 1 835 0
 2658 1200 0030A0E3 		mov	r3, #0
 2659              	.LVL99:
 2660              	.L242:
 2661              	.LBE270:
 2662              	.LBE274:
 2663              	.LBB275:
 2664              	.LBB273:
 2665              		.loc 1 251 0
 2666              	@ 251 "main.c" 1
 2667 1204 0000A0E1 		nop
 2668              	@ 0 "" 2
 2669 1208 013083E2 		add	r3, r3, #1
 2670 120c 020053E1 		cmp	r3, r2
 2671 1210 FBFFFF1A 		bne	.L242
 2672              	.LBE273:
 2673              	.LBE275:
 2674              		.loc 1 599 0
 2675 1214 FEFFFFEB 		bl	ns73Config
 2676              	.LVL100:
 2677              		.loc 1 600 0
 2678 1218 60319FE5 		ldr	r3, .L259+56
 2679 121c 000093E5 		ldr	r0, [r3, #0]
 2680 1220 FEFFFFEB 		bl	ns73SetChannel
 2681              	.LBB276:
 2682              	.LBB277:
 2683              		.loc 1 840 0
 2684 1224 64219FE5 		ldr	r2, .L259+72
 2685 1228 143092E5 		ldr	r3, [r2, #20]
 2686 122c 013283E3 		orr	r3, r3, #268435456
 2687 1230 143082E5 		str	r3, [r2, #20]
 2688 1234 2E0000EA 		b	.L233
 2689              	.L234:
 2690              	.LBE277:
 2691              	.LBE276:
 2692              		.loc 1 603 0
 2693 1238 020054E3 		cmp	r4, #2
 2694 123c 2C00001A 		bne	.L233
 2695              		.loc 1 604 0
 2696 1240 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2697 1244 0610A0E1 		mov	r1, r6
 2698 1248 0400A0E1 		mov	r0, r4
 2699 124c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2700 1250 FEFFFFEB 		bl	LCDSetRowColor
 2701              		.loc 1 605 0
 2702 1254 38319FE5 		ldr	r3, .L259+76
 2703 1258 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2704 125c 000051E3 		cmp	r1, #0
 2705 1260 0700000A 		beq	.L243
 2706              		.loc 1 606 0
 2707 1264 003098E5 		ldr	r3, [r8, #0]
 2708 1268 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2709 126c 00608DE5 		str	r6, [sp, #0]
 2710 1270 0610A0E1 		mov	r1, r6
 2711 1274 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2712 1278 18019FE5 		ldr	r0, .L259+80
 2713 127c 0430A0E1 		mov	r3, r4
 2714 1280 050000EA 		b	.L257
 2715              	.L243:
 2716              		.loc 1 608 0
 2717 1284 003098E5 		ldr	r3, [r8, #0]
 2718 1288 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2719 128c 00108DE5 		str	r1, [sp, #0]
 2720 1290 04019FE5 		ldr	r0, .L259+84
 2721 1294 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2722 1298 0430A0E1 		mov	r3, r4
 2723              	.L257:
 2724 129c 04C08DE5 		str	ip, [sp, #4]
 2725 12a0 FEFFFFEB 		bl	LCDPrintString
 2726              	.LBB278:
 2727              	.LBB280:
 2728              		.loc 1 925 0
 2729 12a4 0010E0E3 		mvn	r1, #0
 2730 12a8 EF2F11E5 		ldr	r2, [r1, #-4079]
 2731              	.LBE280:
 2732              	.LBE278:
 2733              		.loc 1 610 0
 2734 12ac C4309FE5 		ldr	r3, .L259+48
 2735              	.LBB282:
 2736              	.LBB279:
 2737              		.loc 1 925 0
 2738 12b0 102082E3 		orr	r2, r2, #16
 2739              	.LBE279:
 2740              	.LBE282:
 2741              		.loc 1 610 0
 2742 12b4 0000A0E3 		mov	r0, #0
 2743 12b8 0000C3E5 		strb	r0, [r3, #0]
 2744              	.LBB283:
 2745              	.LBB281:
 2746              		.loc 1 925 0
 2747 12bc EF2F01E5 		str	r2, [r1, #-4079]
 2748              	.LBE281:
 2749              	.LBE283:
 2750              	.LBB284:
 2751              	.LBB285:
 2752              		.loc 1 931 0
 2753 12c0 100080E2 		add	r0, r0, #16
 2754              	.LBB286:
 2755              	.LBB287:
 2756              		.loc 1 251 0
 2757 12c4 B8209FE5 		ldr	r2, .L259+60
 2758 12c8 060000EA 		b	.L245
 2759              	.LVL101:
 2760              	.L246:
 2761              	@ 251 "main.c" 1
 2762 12cc 0000A0E1 		nop
 2763              	@ 0 "" 2
 2764 12d0 013083E2 		add	r3, r3, #1
 2765 12d4 020053E1 		cmp	r3, r2
 2766 12d8 FBFFFF1A 		bne	.L246
 2767              	.LBE287:
 2768              	.LBE286:
 2769              	.LBE285:
 2770              	.LBE284:
 2771              	.LBB289:
 2772              	.LBB290:
 2773              		.loc 1 925 0
 2774 12dc EF3F11E5 		ldr	r3, [r1, #-4079]
 2775              	.LVL102:
 2776 12e0 103083E3 		orr	r3, r3, #16
 2777 12e4 EF3F01E5 		str	r3, [r1, #-4079]
 2778              	.L245:
 2779              	.LBE290:
 2780              	.LBE289:
 2781              	.LBB291:
 2782              	.LBB288:
 2783              		.loc 1 931 0
 2784 12e8 EB0F01E5 		str	r0, [r1, #-4075]
 2785 12ec 0030A0E3 		mov	r3, #0
 2786              	.LVL103:
 2787 12f0 F5FFFFEA 		b	.L246
 2788              	.LVL104:
 2789              	.L233:
 2790              	.LBE288:
 2791              	.LBE291:
 2792              		.loc 1 623 0
 2793 12f4 58309FE5 		ldr	r3, .L259+12
 2794 12f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2795 12fc 000053E3 		cmp	r3, #0
 2796 1300 44009FE5 		ldr	r0, .L259+4
 2797 1304 0200000A 		beq	.L247
 2798 1308 000090E5 		ldr	r0, [r0, #0]
 2799 130c FEFFFFEB 		bl	quickClear
 2800 1310 020000EA 		b	.L248
 2801              	.L247:
 2802              		.loc 1 624 0
 2803 1314 003090E5 		ldr	r3, [r0, #0]
 2804 1318 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2805 131c FEFFFFEB 		bl	LCDClear
 2806              	.L248:
 2807              		.loc 1 625 0
 2808 1320 24309FE5 		ldr	r3, .L259+4
 2809 1324 000093E5 		ldr	r0, [r3, #0]
 2810              	.L258:
 2811 1328 FEFFFFEB 		bl	printMenu
 2812              	.L224:
 2813              	.LBB292:
 2814              	.LBB293:
 2815              		.loc 1 925 0
 2816 132c 0020E0E3 		mvn	r2, #0
 2817 1330 EF3F12E5 		ldr	r3, [r2, #-4079]
 2818 1334 103083E3 		orr	r3, r3, #16
 2819 1338 EF3F02E5 		str	r3, [r2, #-4079]
 2820              	.LBE293:
 2821              	.LBE292:
 2822              		.loc 1 628 0
 2823 133c 08D08DE2 		add	sp, sp, #8
 2824 1340 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2825 1344 1EFF2FE1 		bx	lr
 2826              	.L260:
 2827              		.align	2
 2828              	.L259:
 2829 1348 A0252600 		.word	2500000
 2830 134c 7C040000 		.word	current_display
 2831 1350 74000000 		.word	file_manager
 2832 1354 01000000 		.word	file_is_open
 2833 1358 14000000 		.word	current_song
 2834 135c 00000000 		.word	white
 2835 1360 00000000 		.word	black
 2836 1364 00000000 		.word	NotFound
 2837 1368 80969800 		.word	10000000
 2838 136c 78020000 		.word	settings_menu
 2839 1370 00000000 		.word	volume_setting
 2840 1374 00000000 		.word	.LC0
 2841 1378 08000000 		.word	button_pressed
 2842 137c 60E31600 		.word	1500000
 2843 1380 00000000 		.word	radio_channel
 2844 1384 40420F00 		.word	1000000
 2845 1388 75030000 		.word	885
 2846 138c 32040000 		.word	1074
 2847 1390 008002E0 		.word	-536707072
 2848 1394 00000000 		.word	radio_enable
 2849 1398 07000000 		.word	.LC2
 2850 139c 03000000 		.word	.LC1
 2851              	.LFE16:
 2853              		.section	.rodata.str1.1
 2854              	.LC3:
 2855 000a 53442049 		.ascii	"SD Init Error\012\000"
 2855      6E697420 
 2855      4572726F 
 2855      720A00
 2856              	.LC4:
 2857 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 2857      70656E52 
 2857      6F6F7420 
 2857      4572726F 
 2857      720A00
 2858              		.text
 2859              		.align	2
 2860              		.global	bootUp
 2862              	bootUp:
 2863              	.LFB4:
 2864              		.loc 1 258 0
 2865              		@ Function supports interworking.
 2866              		@ args = 0, pretend = 0, frame = 0
 2867              		@ frame_needed = 0, uses_anonymous_args = 0
 2868 13a0 04E02DE5 		str	lr, [sp, #-4]!
 2869              	.LCFI30:
 2870              		.loc 1 259 0
 2871 13a4 90019FE5 		ldr	r0, .L267
 2872 13a8 FEFFFFEB 		bl	rprintf_devopen
 2873              	.LBB294:
 2874              	.LBB295:
 2875              		.loc 1 251 0
 2876 13ac 8C219FE5 		ldr	r2, .L267+4
 2877              	.LBE295:
 2878              	.LBE294:
 2879              		.loc 1 259 0
 2880 13b0 0030A0E3 		mov	r3, #0
 2881              	.LVL105:
 2882              	.L262:
 2883              	.LBB297:
 2884              	.LBB296:
 2885              		.loc 1 251 0
 2886              	@ 251 "main.c" 1
 2887 13b4 0000A0E1 		nop
 2888              	@ 0 "" 2
 2889 13b8 013083E2 		add	r3, r3, #1
 2890 13bc 020053E1 		cmp	r3, r2
 2891 13c0 FBFFFF1A 		bne	.L262
 2892              	.LBE296:
 2893              	.LBE297:
 2894              		.loc 1 263 0
 2895 13c4 FEFFFFEB 		bl	sd_raw_init
 2896              	.LVL106:
 2897 13c8 000050E3 		cmp	r0, #0
 2898              		.loc 1 265 0
 2899 13cc 70019F05 		ldreq	r0, .L267+8
 2900 13d0 FEFFFF0B 		bleq	rprintf
 2901              	.L263:
 2902              		.loc 1 267 0
 2903 13d4 FEFFFFEB 		bl	openroot
 2904 13d8 000050E3 		cmp	r0, #0
 2905              		.loc 1 269 0
 2906 13dc 64019F15 		ldrne	r0, .L267+12
 2907 13e0 FEFFFF1B 		blne	rprintf
 2908              	.L264:
 2909              		.loc 1 274 0
 2910 13e4 60219FE5 		ldr	r2, .L267+16
 2911 13e8 083092E5 		ldr	r3, [r2, #8]
 2912 13ec 013683E3 		orr	r3, r3, #1048576
 2913 13f0 083082E5 		str	r3, [r2, #8]
 2914              		.loc 1 275 0
 2915 13f4 083092E5 		ldr	r3, [r2, #8]
 2916 13f8 0236C3E3 		bic	r3, r3, #2097152
 2917 13fc 083082E5 		str	r3, [r2, #8]
 2918              		.loc 1 276 0
 2919 1400 48119FE5 		ldr	r1, .L267+20
 2920 1404 043091E5 		ldr	r3, [r1, #4]
 2921 1408 033B83E3 		orr	r3, r3, #3072
 2922 140c 043081E5 		str	r3, [r1, #4]
 2923              		.loc 1 277 0
 2924 1410 183092E5 		ldr	r3, [r2, #24]
 2925 1414 013483E3 		orr	r3, r3, #16777216
 2926 1418 033883E3 		orr	r3, r3, #196608
 2927 141c 183082E5 		str	r3, [r2, #24]
 2928              		.loc 1 280 0
 2929 1420 183092E5 		ldr	r3, [r2, #24]
 2930 1424 023483E3 		orr	r3, r3, #33554432
 2931 1428 183082E5 		str	r3, [r2, #24]
 2932              		.loc 1 281 0
 2933 142c 183092E5 		ldr	r3, [r2, #24]
 2934 1430 013283E3 		orr	r3, r3, #268435456
 2935 1434 183082E5 		str	r3, [r2, #24]
 2936              		.loc 1 284 0
 2937 1438 083092E5 		ldr	r3, [r2, #8]
 2938 143c 803083E3 		orr	r3, r3, #128
 2939 1440 083082E5 		str	r3, [r2, #8]
 2940              		.loc 1 287 0
 2941 1444 083092E5 		ldr	r3, [r2, #8]
 2942 1448 033B83E3 		orr	r3, r3, #3072
 2943 144c 083082E5 		str	r3, [r2, #8]
 2944              		.loc 1 288 0
 2945 1450 003091E5 		ldr	r3, [r1, #0]
 2946 1454 CF3483E3 		orr	r3, r3, #-822083584
 2947 1458 003081E5 		str	r3, [r1, #0]
 2948              		.loc 1 289 0
 2949 145c 033BA0E3 		mov	r3, #3072
 2950 1460 0C3082E5 		str	r3, [r2, #12]
 2951              		.loc 1 292 0
 2952 1464 083092E5 		ldr	r3, [r2, #8]
 2953 1468 033783E3 		orr	r3, r3, #786432
 2954 146c 083082E5 		str	r3, [r2, #8]
 2955              	.LBB298:
 2956              	.LBB299:
 2957              		.loc 1 948 0
 2958 1470 083092E5 		ldr	r3, [r2, #8]
 2959 1474 073283E3 		orr	r3, r3, #1879048192
 2960 1478 083082E5 		str	r3, [r2, #8]
 2961              		.loc 1 949 0
 2962 147c 0232A0E3 		mov	r3, #536870912
 2963 1480 043082E5 		str	r3, [r2, #4]
 2964              		.loc 1 950 0
 2965 1484 033083E0 		add	r3, r3, r3
 2966 1488 043082E5 		str	r3, [r2, #4]
 2967              		.loc 1 951 0
 2968 148c 0D3283E2 		add	r3, r3, #-805306368
 2969 1490 043082E5 		str	r3, [r2, #4]
 2970              	.LBE299:
 2971              	.LBE298:
 2972              		.loc 1 297 0
 2973 1494 183092E5 		ldr	r3, [r2, #24]
 2974 1498 0E36C3E3 		bic	r3, r3, #14680064
 2975 149c 183082E5 		str	r3, [r2, #24]
 2976              		.loc 1 299 0
 2977 14a0 083092E5 		ldr	r3, [r2, #8]
 2978 14a4 0235C3E3 		bic	r3, r3, #8388608
 2979 14a8 083082E5 		str	r3, [r2, #8]
 2980              	.LBB300:
 2981              	.LBB301:
 2982              		.loc 1 895 0
 2983 14ac A0309FE5 		ldr	r3, .L267+24
 2984 14b0 0120A0E3 		mov	r2, #1
 2985              		.loc 1 896 0
 2986 14b4 0010E0E3 		mvn	r1, #0
 2987              		.loc 1 895 0
 2988 14b8 002183E5 		str	r2, [r3, #256]
 2989              		.loc 1 896 0
 2990 14bc 3030E0E3 		mvn	r3, #48
 2991 14c0 F33F01E5 		str	r3, [r1, #-4083]
 2992              	.LBB302:
 2993              	.LBB303:
 2994              		.loc 1 938 0
 2995 14c4 413083E2 		add	r3, r3, #65
 2996 14c8 EF3F01E5 		str	r3, [r1, #-4079]
 2997              	.LBE303:
 2998              	.LBE302:
 2999              		.loc 1 898 0
 3000 14cc 153083E2 		add	r3, r3, #21
 3001 14d0 FF3D01E5 		str	r3, [r1, #-3583]
 3002              		.loc 1 899 0
 3003 14d4 7C309FE5 		ldr	r3, .L267+28
 3004 14d8 FF3E01E5 		str	r3, [r1, #-3839]
 3005              		.loc 1 900 0
 3006 14dc 2430A0E3 		mov	r3, #36
 3007 14e0 FB3D01E5 		str	r3, [r1, #-3579]
 3008              		.loc 1 901 0
 3009 14e4 70309FE5 		ldr	r3, .L267+32
 3010              	.LBE301:
 3011              	.LBE300:
 3012              	.LBB305:
 3013              	.LBB306:
 3014              		.loc 1 872 0
 3015 14e8 70009FE5 		ldr	r0, .L267+36
 3016              	.LBE306:
 3017              	.LBE305:
 3018              	.LBB308:
 3019              	.LBB304:
 3020              		.loc 1 901 0
 3021 14ec FB3E01E5 		str	r3, [r1, #-3835]
 3022              	.LBE304:
 3023              	.LBE308:
 3024              	.LBB309:
 3025              	.LBB307:
 3026              		.loc 1 872 0
 3027 14f0 4B3FA0E3 		mov	r3, #300
 3028 14f4 0C3080E5 		str	r3, [r0, #12]
 3029              		.loc 1 873 0
 3030 14f8 043090E5 		ldr	r3, [r0, #4]
 3031 14fc 023083E1 		orr	r3, r3, r2
 3032 1500 043080E5 		str	r3, [r0, #4]
 3033              		.loc 1 874 0
 3034 1504 0030A0E3 		mov	r3, #0
 3035 1508 703080E5 		str	r3, [r0, #112]
 3036              		.loc 1 875 0
 3037 150c 033083E2 		add	r3, r3, #3
 3038 1510 143080E5 		str	r3, [r0, #20]
 3039              		.loc 1 876 0
 3040 1514 FA3FA0E3 		mov	r3, #1000
 3041 1518 183080E5 		str	r3, [r0, #24]
 3042              	.LBE307:
 3043              	.LBE309:
 3044              		.loc 1 303 0
 3045 151c FEFFFFEB 		bl	initializeMP3Player
 3046              	.LBB310:
 3047              	.LBB311:
 3048              		.loc 1 817 0
 3049 1520 3C209FE5 		ldr	r2, .L267+40
 3050 1524 4030A0E3 		mov	r3, #64
 3051 1528 0C3082E5 		str	r3, [r2, #12]
 3052              		.loc 1 818 0
 3053 152c 2030A0E3 		mov	r3, #32
 3054 1530 003082E5 		str	r3, [r2, #0]
 3055              	.LBE311:
 3056              	.LBE310:
 3057              		.loc 1 306 0
 3058 1534 04E09DE4 		ldr	lr, [sp], #4
 3059 1538 1EFF2FE1 		bx	lr
 3060              	.L268:
 3061              		.align	2
 3062              	.L267:
 3063 153c 00000000 		.word	putc_serial0
 3064 1540 A0860100 		.word	100000
 3065 1544 0A000000 		.word	.LC3
 3066 1548 19000000 		.word	.LC4
 3067 154c 008002E0 		.word	-536707072
 3068 1550 00C002E0 		.word	-536690688
 3069 1554 00C01FE0 		.word	-534790144
 3070 1558 00000000 		.word	timer1ISR
 3071 155c 00000000 		.word	timer0ISR
 3072 1560 004000E0 		.word	-536854528
 3073 1564 000002E0 		.word	-536739840
 3074              	.LFE4:
 3076              		.global	__divsi3
 3077              		.global	__modsi3
 3078              		.section	.rodata.str1.1
 3079              	.LC5:
 3080 002c 474F2047 		.ascii	"GO GO MP3!\000"
 3080      4F204D50 
 3080      332100
 3081              		.text
 3082              		.align	2
 3083              		.global	main
 3085              	main:
 3086              	.LFB2:
 3087              		.loc 1 94 0
 3088              		@ Function supports interworking.
 3089              		@ args = 0, pretend = 0, frame = 0
 3090              		@ frame_needed = 1, uses_anonymous_args = 0
 3091 1568 0DC0A0E1 		mov	ip, sp
 3092              	.LCFI31:
 3093 156c F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 3094              	.LCFI32:
 3095 1570 04B04CE2 		sub	fp, ip, #4
 3096              	.LCFI33:
 3097 1574 08D04DE2 		sub	sp, sp, #8
 3098              	.LCFI34:
 3099              		.loc 1 104 0
 3100 1578 FEFFFFEB 		bl	bootUp
 3101              		.loc 1 105 0
 3102 157c FEFFFFEB 		bl	initializeMP3Player
 3103              		.loc 1 106 0
 3104 1580 FEFFFFEB 		bl	splashScreen
 3105              		.loc 1 107 0
 3106 1584 08359FE5 		ldr	r3, .L305
 3107 1588 000093E5 		ldr	r0, [r3, #0]
 3108 158c FEFFFFEB 		bl	initializeRadio
 3109              	.LBB312:
 3110              	.LBB313:
 3111              		.loc 1 824 0
 3112 1590 00259FE5 		ldr	r2, .L305+4
 3113 1594 003092E5 		ldr	r3, [r2, #0]
 3114 1598 153C83E3 		orr	r3, r3, #5376
 3115 159c 003082E5 		str	r3, [r2, #0]
 3116 15a0 0050A0E3 		mov	r5, #0
 3117              	.LVL107:
 3118              	.L270:
 3119              	.LBE313:
 3120              	.LBE312:
 3121              		.loc 1 114 0
 3122 15a4 0000A0E3 		mov	r0, #0
 3123 15a8 FEFFFFEB 		bl	rootDirectory_files_stream
 3124 15ac 006050E2 		subs	r6, r0, #0
 3125              		.loc 1 113 0
 3126 15b0 015085E2 		add	r5, r5, #1
 3127              		.loc 1 114 0
 3128 15b4 FAFFFF1A 		bne	.L270
 3129              		.loc 1 115 0
 3130 15b8 063085E2 		add	r3, r5, #6
 3131 15bc 0330C3E3 		bic	r3, r3, #3
 3132 15c0 0DD063E0 		rsb	sp, r3, sp
 3133 15c4 08708DE2 		add	r7, sp, #8
 3134              		.loc 1 116 0
 3135 15c8 0700A0E1 		mov	r0, r7
 3136 15cc 011085E2 		add	r1, r5, #1
 3137 15d0 FEFFFFEB 		bl	rootDirectory_files
 3138              		.loc 1 117 0
 3139 15d4 8032A0E1 		mov	r3, r0, asl #5
 3140 15d8 043083E2 		add	r3, r3, #4
 3141 15dc 0DD063E0 		rsb	sp, r3, sp
 3142              		.loc 1 116 0
 3143 15e0 B4349FE5 		ldr	r3, .L305+8
 3144 15e4 0040A0E1 		mov	r4, r0
 3145              	.LBB314:
 3146              		.loc 1 121 0
 3147 15e8 0600A0E1 		mov	r0, r6
 3148              	.LVL108:
 3149              	.LBE314:
 3150              		.loc 1 116 0
 3151 15ec 004083E5 		str	r4, [r3, #0]
 3152              		.loc 1 117 0
 3153 15f0 08608DE2 		add	r6, sp, #8
 3154              	.LBB316:
 3155              		.loc 1 121 0
 3156 15f4 00E0A0E1 		mov	lr, r0
 3157              	.LVL109:
 3158 15f8 0080A0E1 		mov	r8, r0
 3159              	.LVL110:
 3160 15fc 100000EA 		b	.L271
 3161              	.LVL111:
 3162              	.L277:
 3163 1600 0030A0E3 		mov	r3, #0
 3164              	.LBB315:
 3165              		.loc 1 131 0
 3166 1604 8EC2A0E1 		mov	ip, lr, asl #5
 3167              	.L276:
 3168              		.loc 1 123 0
 3169 1608 050050E1 		cmp	r0, r5
 3170              		.loc 1 131 0
 3171 160c 03208CE0 		add	r2, ip, r3
 3172 1610 0280C687 		strhib	r8, [r6, r2]
 3173              		.loc 1 123 0
 3174 1614 0600008A 		bhi	.L275
 3175              	.LVL112:
 3176              		.loc 1 124 0
 3177 1618 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 3178 161c 2C0051E3 		cmp	r1, #44
 3179              		.loc 1 125 0
 3180 1620 0230A001 		moveq	r3, r2
 3181              		.loc 1 128 0
 3182 1624 0210C617 		strneb	r1, [r6, r2]
 3183              		.loc 1 125 0
 3184 1628 0380C607 		streqb	r8, [r6, r3]
 3185              		.loc 1 129 0
 3186 162c 010080E2 		add	r0, r0, #1
 3187              		.loc 1 125 0
 3188 1630 1F30A003 		moveq	r3, #31
 3189              	.LVL113:
 3190              	.L275:
 3191              		.loc 1 122 0
 3192 1634 013083E2 		add	r3, r3, #1
 3193 1638 200053E3 		cmp	r3, #32
 3194 163c F1FFFF1A 		bne	.L276
 3195              	.LBE315:
 3196              		.loc 1 121 0
 3197 1640 01E08EE2 		add	lr, lr, #1
 3198              	.LVL114:
 3199              	.L271:
 3200 1644 04005EE1 		cmp	lr, r4
 3201 1648 ECFFFFBA 		blt	.L277
 3202              	.LBE316:
 3203              		.loc 1 137 0
 3204 164c 0400A0E1 		mov	r0, r4
 3205              	.LVL115:
 3206 1650 0F10A0E3 		mov	r1, #15
 3207 1654 FEFFFFEB 		bl	__divsi3
 3208              	.LVL116:
 3209              		.loc 1 138 0
 3210 1658 3C349FE5 		ldr	r3, .L305+8
 3211              		.loc 1 137 0
 3212 165c FF4000E2 		and	r4, r0, #255
 3213 1660 38549FE5 		ldr	r5, .L305+12
 3214              	.LVL117:
 3215              		.loc 1 138 0
 3216 1664 000093E5 		ldr	r0, [r3, #0]
 3217              		.loc 1 137 0
 3218 1668 013044E2 		sub	r3, r4, #1
 3219 166c 0530C5E5 		strb	r3, [r5, #5]
 3220              		.loc 1 138 0
 3221 1670 0F10A0E3 		mov	r1, #15
 3222 1674 FEFFFFEB 		bl	__modsi3
 3223              		.loc 1 141 0
 3224 1678 24349FE5 		ldr	r3, .L305+16
 3225 167c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3226              		.loc 1 142 0
 3227 1680 20349FE5 		ldr	r3, .L305+20
 3228              		.loc 1 138 0
 3229 1684 000050E3 		cmp	r0, #0
 3230 1688 0540C515 		strneb	r4, [r5, #5]
 3231              		.loc 1 142 0
 3232 168c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3233              		.loc 1 140 0
 3234 1690 08449FE5 		ldr	r4, .L305+12
 3235 1694 0050A0E3 		mov	r5, #0
 3236              		.loc 1 142 0
 3237 1698 0430C4E5 		strb	r3, [r4, #4]
 3238              		.loc 1 145 0
 3239 169c 0130A0E3 		mov	r3, #1
 3240              		.loc 1 141 0
 3241 16a0 0320C4E5 		strb	r2, [r4, #3]
 3242              		.loc 1 147 0
 3243 16a4 0400A0E1 		mov	r0, r4
 3244 16a8 0610A0E1 		mov	r1, r6
 3245              		.loc 1 145 0
 3246 16ac 0030C4E5 		strb	r3, [r4, #0]
 3247              		.loc 1 140 0
 3248 16b0 0250C4E5 		strb	r5, [r4, #2]
 3249              		.loc 1 144 0
 3250 16b4 0650C4E5 		strb	r5, [r4, #6]
 3251              		.loc 1 146 0
 3252 16b8 085084E5 		str	r5, [r4, #8]
 3253              		.loc 1 147 0
 3254 16bc FEFFFFEB 		bl	getNewFiles
 3255              	.LBB317:
 3256              		.loc 1 149 0
 3257 16c0 E4239FE5 		ldr	r2, .L305+24
 3258              	.L279:
 3259 16c4 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 3260              	.LVL118:
 3261              		.loc 1 148 0
 3262 16c8 015085E2 		add	r5, r5, #1
 3263 16cc 160055E3 		cmp	r5, #22
 3264              		.loc 1 149 0
 3265 16d0 EC31C4E5 		strb	r3, [r4, #492]
 3266              		.loc 1 148 0
 3267 16d4 014084E2 		add	r4, r4, #1
 3268 16d8 F9FFFF1A 		bne	.L279
 3269              	.LBE317:
 3270              		.loc 1 153 0
 3271 16dc CC039FE5 		ldr	r0, .L305+28
 3272 16e0 FEFFFFEB 		bl	fillSettings
 3273              	.LBB318:
 3274              	.LBB320:
 3275              		.loc 1 830 0
 3276 16e4 AC139FE5 		ldr	r1, .L305+4
 3277 16e8 003091E5 		ldr	r3, [r1, #0]
 3278              	.LBE320:
 3279              	.LBE318:
 3280              		.loc 1 156 0
 3281 16ec AC239FE5 		ldr	r2, .L305+12
 3282 16f0 BC439FE5 		ldr	r4, .L305+32
 3283              	.LBB322:
 3284              	.LBB319:
 3285              		.loc 1 830 0
 3286 16f4 FF3DC3E3 		bic	r3, r3, #16320
 3287 16f8 3030C3E3 		bic	r3, r3, #48
 3288              	.LBE319:
 3289              	.LBE322:
 3290              		.loc 1 158 0
 3291 16fc 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 3292              		.loc 1 156 0
 3293 1700 002084E5 		str	r2, [r4, #0]
 3294              	.LBB323:
 3295              	.LBB321:
 3296              		.loc 1 830 0
 3297 1704 003081E5 		str	r3, [r1, #0]
 3298              	.LBE321:
 3299              	.LBE323:
 3300              		.loc 1 158 0
 3301 1708 FEFFFFEB 		bl	LCDClear
 3302              		.loc 1 159 0
 3303 170c 000094E5 		ldr	r0, [r4, #0]
 3304 1710 FEFFFFEB 		bl	printMenu
 3305              		.loc 1 162 0
 3306 1714 003094E5 		ldr	r3, [r4, #0]
 3307 1718 0010A0E3 		mov	r1, #0
 3308 171c 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 3309 1720 00108DE5 		str	r1, [sp, #0]
 3310 1724 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3311 1728 88039FE5 		ldr	r0, .L305+36
 3312 172c 0230A0E3 		mov	r3, #2
 3313 1730 04C08DE5 		str	ip, [sp, #4]
 3314 1734 FEFFFFEB 		bl	LCDPrintString
 3315              	.LBB324:
 3316              	.LBB325:
 3317              		.loc 1 850 0
 3318 1738 7C739FE5 		ldr	r7, .L305+40
 3319              	.LBE325:
 3320              	.LBE324:
 3321              		.loc 1 167 0
 3322 173c 60939FE5 		ldr	r9, .L305+16
 3323              		.loc 1 177 0
 3324 1740 78839FE5 		ldr	r8, .L305+44
 3325              	.LVL119:
 3326              	.LBB327:
 3327              	.LBB328:
 3328              	.LBB329:
 3329              	.LBB330:
 3330              		.loc 1 251 0
 3331 1744 78A39FE5 		ldr	sl, .L305+48
 3332              	.L297:
 3333              	.LBE330:
 3334              	.LBE329:
 3335              	.LBE328:
 3336              	.LBE327:
 3337              	.LBB334:
 3338              	.LBB326:
 3339              		.loc 1 850 0
 3340 1748 003097E5 		ldr	r3, [r7, #0]
 3341              	.LBE326:
 3342              	.LBE334:
 3343              		.loc 1 166 0
 3344 174c 020513E3 		tst	r3, #8388608
 3345 1750 2100000A 		beq	.L280
 3346              		.loc 1 167 0
 3347 1754 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 3348 1758 FEFFFFEB 		bl	LCDClear
 3349              		.loc 1 168 0
 3350 175c 0430A0E3 		mov	r3, #4
 3351 1760 00308DE5 		str	r3, [sp, #0]
 3352 1764 003094E5 		ldr	r3, [r4, #0]
 3353 1768 38139FE5 		ldr	r1, .L305+20
 3354 176c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3355 1770 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3356 1774 0730A0E3 		mov	r3, #7
 3357 1778 48039FE5 		ldr	r0, .L305+52
 3358 177c 0010A0E3 		mov	r1, #0
 3359 1780 04C08DE5 		str	ip, [sp, #4]
 3360 1784 FEFFFFEB 		bl	LCDPrintString
 3361 1788 0030A0E3 		mov	r3, #0
 3362              	.LVL120:
 3363              	.L281:
 3364              	.LBB335:
 3365              	.LBB336:
 3366              		.loc 1 251 0
 3367              	@ 251 "main.c" 1
 3368 178c 0000A0E1 		nop
 3369              	@ 0 "" 2
 3370 1790 34239FE5 		ldr	r2, .L305+56
 3371 1794 013083E2 		add	r3, r3, #1
 3372 1798 020053E1 		cmp	r3, r2
 3373 179c FAFFFF1A 		bne	.L281
 3374              	.LBE336:
 3375              	.LBE335:
 3376              	.LBB337:
 3377              	.LBB338:
 3378              		.loc 1 907 0
 3379 17a0 3020A0E3 		mov	r2, #48
 3380 17a4 0030E0E3 		mvn	r3, #0
 3381              	.LVL121:
 3382 17a8 EB2F03E5 		str	r2, [r3, #-4075]
 3383              	.LBE338:
 3384              	.LBE337:
 3385              		.loc 1 171 0
 3386 17ac FEFFFFEB 		bl	main_msc
 3387              	.LBB339:
 3388              	.LBB340:
 3389              		.loc 1 654 0
 3390 17b0 0E22A0E3 		mov	r2, #-536870912
 3391 17b4 003092E5 		ldr	r3, [r2, #0]
 3392 17b8 033083E3 		orr	r3, r3, #3
 3393 17bc 003082E5 		str	r3, [r2, #0]
 3394              		.loc 1 655 0
 3395 17c0 AA10A0E3 		mov	r1, #170
 3396              		.loc 1 656 0
 3397 17c4 5530A0E3 		mov	r3, #85
 3398              		.loc 1 655 0
 3399 17c8 081082E5 		str	r1, [r2, #8]
 3400              		.loc 1 656 0
 3401 17cc 083082E5 		str	r3, [r2, #8]
 3402              		.loc 1 658 0
 3403 17d0 0030A0E3 		mov	r3, #0
 3404              		.loc 1 657 0
 3405 17d4 081082E5 		str	r1, [r2, #8]
 3406              		.loc 1 658 0
 3407 17d8 083082E5 		str	r3, [r2, #8]
 3408              	.L280:
 3409              	.LBE340:
 3410              	.LBE339:
 3411              		.loc 1 177 0
 3412 17dc 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3413 17e0 000053E3 		cmp	r3, #0
 3414 17e4 4300001A 		bne	.L282
 3415 17e8 E0329FE5 		ldr	r3, .L305+60
 3416 17ec 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 3417              	.LVL122:
 3418 17f0 000055E3 		cmp	r5, #0
 3419 17f4 3F00001A 		bne	.L282
 3420              		.loc 1 179 0
 3421 17f8 D4329FE5 		ldr	r3, .L305+64
 3422 17fc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3423 1800 000053E3 		cmp	r3, #0
 3424 1804 3B00000A 		beq	.L282
 3425              	.LBB341:
 3426              	.LBB342:
 3427              		.loc 1 919 0
 3428 1808 2020A0E3 		mov	r2, #32
 3429 180c 0030E0E3 		mvn	r3, #0
 3430 1810 EB2F03E5 		str	r2, [r3, #-4075]
 3431              	.LBE342:
 3432              	.LBE341:
 3433              		.loc 1 181 0
 3434 1814 BC029FE5 		ldr	r0, .L305+68
 3435 1818 FEFFFFEB 		bl	closeSong
 3436              		.loc 1 185 0
 3437 181c 7C129FE5 		ldr	r1, .L305+12
 3438              		.loc 1 182 0
 3439 1820 B4329FE5 		ldr	r3, .L305+72
 3440              		.loc 1 185 0
 3441 1824 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3442              		.loc 1 182 0
 3443 1828 0050C3E5 		strb	r5, [r3, #0]
 3444              		.loc 1 185 0
 3445 182c 0E0052E3 		cmp	r2, #14
 3446              		.loc 1 183 0
 3447 1830 0232A0E3 		mov	r3, #536870912
 3448 1834 043087E5 		str	r3, [r7, #4]
 3449              		.loc 1 186 0
 3450 1838 01208292 		addls	r2, r2, #1
 3451              		.loc 1 187 0
 3452 183c 08309195 		ldrls	r3, [r1, #8]
 3453              		.loc 1 186 0
 3454 1840 0020C195 		strlsb	r2, [r1, #0]
 3455              		.loc 1 190 0
 3456 1844 54C29FE5 		ldr	ip, .L305+12
 3457              		.loc 1 187 0
 3458 1848 01308392 		addls	r3, r3, #1
 3459 184c 08308195 		strls	r3, [r1, #8]
 3460              		.loc 1 190 0
 3461 1850 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 3462 1854 0F0053E3 		cmp	r3, #15
 3463 1858 0C00001A 		bne	.L284
 3464 185c 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 3465 1860 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 3466 1864 020053E1 		cmp	r3, r2
 3467 1868 0800009A 		bls	.L284
 3468              		.loc 1 193 0
 3469 186c 013082E2 		add	r3, r2, #1
 3470              		.loc 1 191 0
 3471 1870 0120A0E3 		mov	r2, #1
 3472 1874 0020CCE5 		strb	r2, [ip, #0]
 3473              		.loc 1 192 0
 3474 1878 0020A0E3 		mov	r2, #0
 3475              		.loc 1 194 0
 3476 187c 0C00A0E1 		mov	r0, ip
 3477 1880 0610A0E1 		mov	r1, r6
 3478              		.loc 1 192 0
 3479 1884 08208CE5 		str	r2, [ip, #8]
 3480              		.loc 1 193 0
 3481 1888 0630CCE5 		strb	r3, [ip, #6]
 3482              		.loc 1 194 0
 3483 188c FEFFFFEB 		bl	getNewFiles
 3484              	.L284:
 3485              		.loc 1 197 0
 3486 1890 08529FE5 		ldr	r5, .L305+12
 3487 1894 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 3488 1898 833285E0 		add	r3, r5, r3, asl #5
 3489 189c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3490 18a0 000053E3 		cmp	r3, #0
 3491 18a4 1300000A 		beq	.L282
 3492              		.loc 1 198 0
 3493 18a8 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 3494 18ac FEFFFFEB 		bl	LCDClear
 3495              		.loc 1 199 0
 3496 18b0 0500A0E1 		mov	r0, r5
 3497 18b4 FEFFFFEB 		bl	printMenu
 3498              		.loc 1 200 0
 3499 18b8 0510A0E1 		mov	r1, r5
 3500 18bc 14029FE5 		ldr	r0, .L305+68
 3501 18c0 FEFFFFEB 		bl	loadSongInfo
 3502 18c4 10329FE5 		ldr	r3, .L305+72
 3503 18c8 0000C3E5 		strb	r0, [r3, #0]
 3504              		.loc 1 201 0
 3505 18cc FEFFFFEB 		bl	vs1002Config
 3506              		.loc 1 202 0
 3507 18d0 0000A0E3 		mov	r0, #0
 3508 18d4 021BA0E3 		mov	r1, #2048
 3509 18d8 FEFFFFEB 		bl	vs1002SCIWrite
 3510              		.loc 1 203 0
 3511 18dc FEFFFFEB 		bl	vs1002Finish
 3512              		.loc 1 204 0
 3513 18e0 0232A0E3 		mov	r3, #536870912
 3514 18e4 0C3087E5 		str	r3, [r7, #12]
 3515              	.LBB343:
 3516              	.LBB344:
 3517              		.loc 1 913 0
 3518 18e8 0020E0E3 		mvn	r2, #0
 3519 18ec EF3F12E5 		ldr	r3, [r2, #-4079]
 3520 18f0 203083E3 		orr	r3, r3, #32
 3521 18f4 EF3F02E5 		str	r3, [r2, #-4079]
 3522              	.LVL123:
 3523              	.L282:
 3524              	.LBE344:
 3525              	.LBE343:
 3526              		.loc 1 210 0
 3527 18f8 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3528 18fc 020053E3 		cmp	r3, #2
 3529 1900 0300001A 		bne	.L285
 3530 1904 000094E5 		ldr	r0, [r4, #0]
 3531 1908 0610A0E1 		mov	r1, r6
 3532 190c FEFFFFEB 		bl	handleUpButton
 3533 1910 580000EA 		b	.L286
 3534              	.L285:
 3535              		.loc 1 211 0
 3536 1914 010053E3 		cmp	r3, #1
 3537 1918 0300001A 		bne	.L287
 3538 191c 000094E5 		ldr	r0, [r4, #0]
 3539 1920 0610A0E1 		mov	r1, r6
 3540 1924 FEFFFFEB 		bl	handleDownButton
 3541 1928 520000EA 		b	.L286
 3542              	.L287:
 3543              		.loc 1 212 0
 3544 192c 030053E3 		cmp	r3, #3
 3545 1930 0100001A 		bne	.L288
 3546 1934 FEFFFFEB 		bl	handleMiddleButton
 3547 1938 4E0000EA 		b	.L286
 3548              	.L288:
 3549              		.loc 1 214 0
 3550 193c 8C319FE5 		ldr	r3, .L305+60
 3551 1940 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3552 1944 000053E3 		cmp	r3, #0
 3553 1948 4A00000A 		beq	.L286
 3554              	.LBB345:
 3555              	.LBB333:
 3556              		.loc 1 931 0
 3557 194c 0030E0E3 		mvn	r3, #0
 3558 1950 1020A0E3 		mov	r2, #16
 3559 1954 EB2F03E5 		str	r2, [r3, #-4075]
 3560 1958 013083E2 		add	r3, r3, #1
 3561              	.LVL124:
 3562              	.L289:
 3563              	.LBB332:
 3564              	.LBB331:
 3565              		.loc 1 251 0
 3566              	@ 251 "main.c" 1
 3567 195c 0000A0E1 		nop
 3568              	@ 0 "" 2
 3569 1960 013083E2 		add	r3, r3, #1
 3570 1964 0A0053E1 		cmp	r3, sl
 3571 1968 FBFFFF1A 		bne	.L289
 3572              	.LBE331:
 3573              	.LBE332:
 3574              	.LBE333:
 3575              	.LBE345:
 3576              		.loc 1 216 0
 3577 196c FEFFFFEB 		bl	MMA_get_y
 3578              	.LVL125:
 3579 1970 AF0F50E3 		cmp	r0, #700
 3580 1974 190000DA 		ble	.L290
 3581 1978 60319FE5 		ldr	r3, .L305+76
 3582 197c 003093E5 		ldr	r3, [r3, #0]
 3583 1980 AF0F53E3 		cmp	r3, #700
 3584 1984 150000DA 		ble	.L290
 3585              		.loc 1 217 0
 3586 1988 4C319FE5 		ldr	r3, .L305+72
 3587 198c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3588 1990 000053E3 		cmp	r3, #0
 3589 1994 0200000A 		beq	.L291
 3590 1998 000094E5 		ldr	r0, [r4, #0]
 3591 199c FEFFFFEB 		bl	quickClear
 3592 19a0 020000EA 		b	.L292
 3593              	.L291:
 3594              		.loc 1 218 0
 3595 19a4 003094E5 		ldr	r3, [r4, #0]
 3596 19a8 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3597 19ac FEFFFFEB 		bl	LCDClear
 3598              	.L292:
 3599              		.loc 1 222 0
 3600 19b0 24319FE5 		ldr	r3, .L305+72
 3601 19b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3602              		.loc 1 219 0
 3603 19b8 F0209FE5 		ldr	r2, .L305+28
 3604              		.loc 1 222 0
 3605 19bc 000053E3 		cmp	r3, #0
 3606              		.loc 1 220 0
 3607 19c0 0130A0E3 		mov	r3, #1
 3608 19c4 0230C2E5 		strb	r3, [r2, #2]
 3609              		.loc 1 221 0
 3610 19c8 0232A0E3 		mov	r3, #536870912
 3611 19cc 043087E5 		str	r3, [r7, #4]
 3612              		.loc 1 219 0
 3613 19d0 002084E5 		str	r2, [r4, #0]
 3614              		.loc 1 222 0
 3615 19d4 0F328312 		addne	r3, r3, #-268435456
 3616              		.loc 1 223 0
 3617 19d8 0131A003 		moveq	r3, #1073741824
 3618 19dc 1E0000EA 		b	.L304
 3619              	.L290:
 3620              		.loc 1 225 0
 3621 19e0 FEFFFFEB 		bl	MMA_get_y
 3622 19e4 F8209FE5 		ldr	r2, .L305+80
 3623 19e8 020050E1 		cmp	r0, r2
 3624 19ec 1B0000CA 		bgt	.L294
 3625 19f0 E8309FE5 		ldr	r3, .L305+76
 3626 19f4 003093E5 		ldr	r3, [r3, #0]
 3627 19f8 020053E1 		cmp	r3, r2
 3628 19fc 170000CA 		bgt	.L294
 3629              		.loc 1 226 0
 3630 1a00 D4309FE5 		ldr	r3, .L305+72
 3631 1a04 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3632 1a08 000053E3 		cmp	r3, #0
 3633 1a0c 0200000A 		beq	.L295
 3634 1a10 000094E5 		ldr	r0, [r4, #0]
 3635 1a14 FEFFFFEB 		bl	quickClear
 3636 1a18 020000EA 		b	.L296
 3637              	.L295:
 3638              		.loc 1 227 0
 3639 1a1c 003094E5 		ldr	r3, [r4, #0]
 3640 1a20 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3641 1a24 FEFFFFEB 		bl	LCDClear
 3642              	.L296:
 3643              		.loc 1 232 0
 3644 1a28 AC309FE5 		ldr	r3, .L305+72
 3645 1a2c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3646              		.loc 1 228 0
 3647 1a30 68209FE5 		ldr	r2, .L305+12
 3648              		.loc 1 232 0
 3649 1a34 000053E3 		cmp	r3, #0
 3650              		.loc 1 229 0
 3651 1a38 0030A0E3 		mov	r3, #0
 3652 1a3c 0230C2E5 		strb	r3, [r2, #2]
 3653              		.loc 1 230 0
 3654 1a40 013283E2 		add	r3, r3, #268435456
 3655 1a44 043087E5 		str	r3, [r7, #4]
 3656              		.loc 1 231 0
 3657 1a48 033283E2 		add	r3, r3, #805306368
 3658 1a4c 043087E5 		str	r3, [r7, #4]
 3659              		.loc 1 228 0
 3660 1a50 002084E5 		str	r2, [r4, #0]
 3661              		.loc 1 232 0
 3662 1a54 0100000A 		beq	.L294
 3663 1a58 0E3283E2 		add	r3, r3, #-536870912
 3664              	.L304:
 3665 1a5c 0C3087E5 		str	r3, [r7, #12]
 3666              	.L294:
 3667              		.loc 1 234 0
 3668 1a60 000094E5 		ldr	r0, [r4, #0]
 3669 1a64 FEFFFFEB 		bl	printMenu
 3670              	.LBB346:
 3671              	.LBB347:
 3672              		.loc 1 925 0
 3673 1a68 0020E0E3 		mvn	r2, #0
 3674 1a6c EF3F12E5 		ldr	r3, [r2, #-4079]
 3675 1a70 103083E3 		orr	r3, r3, #16
 3676 1a74 EF3F02E5 		str	r3, [r2, #-4079]
 3677              	.L286:
 3678              	.LBE347:
 3679              	.LBE346:
 3680              	.LBB348:
 3681              	.LBB349:
 3682 1a78 0030E0E3 		mvn	r3, #0
 3683 1a7c EF2F13E5 		ldr	r2, [r3, #-4079]
 3684 1a80 102082E3 		orr	r2, r2, #16
 3685 1a84 EF2F03E5 		str	r2, [r3, #-4079]
 3686              	.LBE349:
 3687              	.LBE348:
 3688              		.loc 1 237 0
 3689 1a88 013083E2 		add	r3, r3, #1
 3690 1a8c 0030C8E5 		strb	r3, [r8, #0]
 3691 1a90 2CFFFFEA 		b	.L297
 3692              	.L306:
 3693              		.align	2
 3694              	.L305:
 3695 1a94 00000000 		.word	radio_channel
 3696 1a98 00C002E0 		.word	-536690688
 3697 1a9c 04000000 		.word	NUMBEROFFILES
 3698 1aa0 74000000 		.word	file_manager
 3699 1aa4 00000000 		.word	white
 3700 1aa8 00000000 		.word	black
 3701 1aac 00000000 		.word	welcome
 3702 1ab0 78020000 		.word	settings_menu
 3703 1ab4 7C040000 		.word	current_display
 3704 1ab8 2C000000 		.word	.LC5
 3705 1abc 008002E0 		.word	-536707072
 3706 1ac0 08000000 		.word	button_pressed
 3707 1ac4 C0C62D00 		.word	3000000
 3708 1ac8 00000000 		.word	USB
 3709 1acc 80969800 		.word	10000000
 3710 1ad0 09000000 		.word	update_screen
 3711 1ad4 02000000 		.word	song_is_over
 3712 1ad8 14000000 		.word	current_song
 3713 1adc 01000000 		.word	file_is_open
 3714 1ae0 0C000000 		.word	prev_position
 3715 1ae4 BB020000 		.word	699
 3716              	.LFE2:
 3718              		.global	volume_setting
 3719              		.data
 3720              		.align	2
 3723              	volume_setting:
 3724 0000 10000000 		.word	16
 3725              		.global	radio_channel
 3726              		.align	2
 3729              	radio_channel:
 3730 0004 E8030000 		.word	1000
 3731              		.global	radio_enable
 3732              		.bss
 3735              	radio_enable:
 3736 0000 00       		.space	1
 3737              		.global	welcome
 3738              		.section	.rodata
 3741              	welcome:
 3742 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 3742      204C6973 
 3742      743A0A0D 
 3742      00
 3743 000d 00000000 		.space	9
 3743      00000000 
 3743      00
 3744              		.global	NotFound
 3747              	NotFound:
 3748 0016 46696C65 		.ascii	"File Not Found!"
 3748      204E6F74 
 3748      20466F75 
 3748      6E6421
 3749              		.global	USB
 3752              	USB:
 3753 0025 55534220 		.ascii	"USB Connected!"
 3753      436F6E6E 
 3753      65637465 
 3753      6421
 3754              		.global	newline
 3757              	newline:
 3758 0033 0A00     		.ascii	"\012\000"
 3759              		.global	volume
 3762              	volume:
 3763 0035 566F6C75 		.ascii	"Volume\000"
 3763      6D6500
 3764              		.global	contrast
 3767              	contrast:
 3768 003c 436F6E74 		.ascii	"Contrast\000"
 3768      72617374 
 3768      00
 3769              		.global	radio_power
 3772              	radio_power:
 3773 0045 52616469 		.ascii	"Radio Power"
 3773      6F20506F 
 3773      776572
 3774              		.global	radio_channel_menu
 3777              	radio_channel_menu:
 3778 0050 52616469 		.ascii	"Radio Channel"
 3778      6F204368 
 3778      616E6E65 
 3778      6C
 3779              		.global	settings
 3782              	settings:
 3783 005d 53657474 		.ascii	"Settings:\000"
 3783      696E6773 
 3783      3A00
 3784              		.bss
 3785              	file_is_open:
 3786 0001 00       		.space	1
 3787              	song_is_over:
 3788 0002 00       		.space	1
 3789 0003 00       		.align	2
 3790              	NUMBEROFFILES:
 3791 0004 00000000 		.space	4
 3792              	button_pressed:
 3793 0008 00       		.space	1
 3794              	update_screen:
 3795 0009 00       		.space	1
 3796 000a 0000     		.align	2
 3797              	prev_position:
 3798 000c 00000000 		.space	4
 3799              		.align	2
 3800              	cur_position:
 3801 0010 00000000 		.space	4
 3802              		.align	2
 3803              	current_song:
 3804 0014 00000000 		.space	96
 3804      00000000 
 3804      00000000 
 3804      00000000 
 3804      00000000 
 3805              		.align	2
 3806              	file_manager:
 3807 0074 00000000 		.space	516
 3807      00000000 
 3807      00000000 
 3807      00000000 
 3807      00000000 
 3808              		.align	2
 3809              	settings_menu:
 3810 0278 00000000 		.space	516
 3810      00000000 
 3810      00000000 
 3810      00000000 
 3810      00000000 
 3811              		.align	2
 3812              	current_display:
 3813 047c 00000000 		.space	4
 4479              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3790   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3762   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3772   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3777   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3782   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:363    .text:00000240 initializeSPI
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:382    .text:00000258 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:388    .text:0000025c selectSD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:396    .text:0000025c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:405    .text:00000270 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:411    .text:00000274 selectLCD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:419    .text:00000274 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:429    .text:0000028c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:435    .text:00000290 selectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:443    .text:00000290 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:452    .text:000002a4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:458    .text:000002a8 deselectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:466    .text:000002a8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:475    .text:000002bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:481    .text:000002c0 isUSBConnected
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:489    .text:000002c0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:497    .text:000002d0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:503    .text:000002d4 initializeUITimer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:511    .text:000002d4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:532    .text:00000308 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:538    .text:0000030c initializeMP3Timer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:546    .text:0000030c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:564    .text:00000338 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:570    .text:0000033c initializeInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:578    .text:0000033c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:609    .text:00000380 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1574   .text:00000a68 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:779    .text:00000444 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:617    .text:0000038c stopAllInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:625    .text:0000038c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:635    .text:0000039c enableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:654    .text:000003b0 disableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:672    .text:000003c0 enableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:691    .text:000003d4 disableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:730    .text:00000404 exclusiveUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:748    .text:00000414 initializeLEDs
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:774    .text:00000440 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:788    .text:00000444 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:866    .text:000004f4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3792   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3797   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3800   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3794   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:877    .text:0000050c splashScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:883    .text:0000050c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:899    .text:0000052c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:909    .text:00000530 lowerVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:916    .text:00000530 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:984    .text:000005d4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3723   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3812   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:993    .text:000005e4 raiseVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1000   .text:000005e4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1065   .text:00000684 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1073   .text:00000690 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1083   .text:00000690 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1168   .text:00000750 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3757   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1176   .text:0000075c printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1186   .text:0000075c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1269   .text:00000824 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1275   .text:00000828 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1285   .text:00000828 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1371   .text:00000900 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1377   .text:00000904 handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1384   .text:00000904 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1441   .text:0000097c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3806   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1447   .text:00000980 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1454   .text:00000980 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1509   .text:000009f0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1515   .text:000009f4 sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1521   .text:000009f4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1566   .text:00000a58 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3803   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3787   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1580   .text:00000a68 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1598   .text:00000a90 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1604   .text:00000a94 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1610   .text:00000a94 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1652   .text:00000af4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1659   .text:00000afc initializeMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1665   .text:00000afc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1690   .text:00000b20 disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1771   .text:00000bc4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3735   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1785   .text:00000bd8 enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1791   .text:00000bd8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1867   .text:00000c80 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1877   .text:00000c94 initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1887   .text:00000c94 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1972   .text:00000d04 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1980   .text:00000d10 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:1987   .text:00000d10 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2017   .text:00000d44 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2023   .text:00000d48 stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2032   .text:00000d48 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2092   .text:00000dd0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3785   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2100   .text:00000ddc loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2107   .text:00000ddc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2221   .text:00000eb0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2227   .text:00000eb4 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2233   .text:00000eb4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2829   .text:00001348 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3747   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3809   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3729   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2862   .text:000013a0 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:2868   .text:000013a0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3063   .text:0000153c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3085   .text:00001568 main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3091   .text:00001568 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3695   .text:00001a94 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3741   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3752   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3724   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3767   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cc7UI2Nj.s:3738   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
MMA_get_y
LCDInit
LCDClear
LCDPrintLogo
vs1002Config
vs1002SetVolume
vs1002Finish
LCDSetRowColor
LCDPrintString
vs1002SendMusic
fat16_read_file
vs1002SCIWrite
vs1002Reset
vs1002Init
ns73Config
ns73Send
ns73Init
ns73SetChannel
fat16_close_file
root_file_exists
root_open
fat16_file_size
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
__divsi3
__modsi3
rootDirectory_files_stream
rootDirectory_files
main_msc
