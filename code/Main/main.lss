
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000095c4  00010000  00010000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000894  40000000  000195c4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009e0  40000894  00019e58  00018894  2**2
                  ALLOC
  3 .stack        00000c00  40001300  40001300  000188a0  2**4
                  CONTENTS
  4 .comment      00000333  00000000  00000000  000194a0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  000197d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000eef  00000000  00000000  00019ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a719  00000000  00000000  0001abcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d4d  00000000  00000000  000252e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003740  00000000  00000000  00028035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014f4  00000000  00000000  0002b778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002984  00000000  00000000  0002cc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000050b8  00000000  00000000  0002f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000628  00000000  00000000  000346a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000010  00000000  00000000  00034cd0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00010000 <__Vectors>:
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <Reset_Addr>
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <Undef_Addr>
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <SWI_Addr>
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <PAbt_Addr>
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <DAbt_Addr>
   10014:	e1a00000 	nop			(mov r0,r0)
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <IRQ_Wrapper_Addr>
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <FIQ_Addr>

00010020 <Reset_Addr>:
   10020:	00010098 	.word	0x00010098

00010024 <Undef_Addr>:
   10024:	00010040 	.word	0x00010040

00010028 <SWI_Addr>:
   10028:	00000000 	.word	0x00000000

0001002c <PAbt_Addr>:
   1002c:	00010044 	.word	0x00010044

00010030 <DAbt_Addr>:
   10030:	00010048 	.word	0x00010048
   10034:	00000000 	.word	0x00000000

00010038 <IRQ_Wrapper_Addr>:
   10038:	00010050 	.word	0x00010050

0001003c <FIQ_Addr>:
   1003c:	0001004c 	.word	0x0001004c

00010040 <Undef_Handler>:
   10040:	eafffffe 	b	10040 <Undef_Handler>

00010044 <PAbt_Handler>:
   10044:	eafffffe 	b	10044 <PAbt_Handler>

00010048 <DAbt_Handler>:
   10048:	eafffffe 	b	10048 <DAbt_Handler>

0001004c <FIQ_Handler>:
   1004c:	eafffffe 	b	1004c <FIQ_Handler>

00010050 <__IRQ_Wrapper>:
   10050:	e24ee004 	sub	lr, lr, #4	; 0x4
   10054:	e92d4000 	push	{lr}
   10058:	e14fe000 	mrs	lr, SPSR
   1005c:	e92d4000 	push	{lr}
   10060:	e92d0001 	push	{r0}
   10064:	e59fe028 	ldr	lr, [pc, #40]	; 10094 <__IRQ_Wrapper+0x44>
   10068:	e59e0030 	ldr	r0, [lr, #48]
   1006c:	e321f013 	msr	CPSR_c, #19	; 0x13
   10070:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   10074:	e1a0e00f 	mov	lr, pc
   10078:	e12fff10 	bx	r0
   1007c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   10080:	e321f092 	msr	CPSR_c, #146	; 0x92
   10084:	e8bd0001 	pop	{r0}
   10088:	e8bd4000 	pop	{lr}
   1008c:	e16ff00e 	msr	SPSR_fsxc, lr
   10090:	e8fd8000 	ldm	sp!, {pc}^
   10094:	fffff000 	.word	0xfffff000

00010098 <__startup>:
   10098:	e59f00c8 	ldr	r0, [pc, #200]	; 10168 <__exit_THUMB+0x4>
   1009c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
   100a0:	e1a0d000 	mov	sp, r0
   100a4:	e2400080 	sub	r0, r0, #128	; 0x80
   100a8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
   100ac:	e1a0d000 	mov	sp, r0
   100b0:	e2400080 	sub	r0, r0, #128	; 0x80
   100b4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
   100b8:	e1a0d000 	mov	sp, r0
   100bc:	e2400080 	sub	r0, r0, #128	; 0x80
   100c0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
   100c4:	e1a0d000 	mov	sp, r0
   100c8:	e2400c02 	sub	r0, r0, #512	; 0x200
   100cc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
   100d0:	e1a0d000 	mov	sp, r0
   100d4:	e2400080 	sub	r0, r0, #128	; 0x80
   100d8:	e321f01f 	msr	CPSR_c, #31	; 0x1f
   100dc:	e1a0d000 	mov	sp, r0
   100e0:	e59f1084 	ldr	r1, [pc, #132]	; 1016c <__exit_THUMB+0x8>
   100e4:	e59f2084 	ldr	r2, [pc, #132]	; 10170 <__exit_THUMB+0xc>
   100e8:	e59f3084 	ldr	r3, [pc, #132]	; 10174 <__exit_THUMB+0x10>
   100ec:	e1520003 	cmp	r2, r3
   100f0:	0a000003 	beq	10104 <DataIsEmpty>

000100f4 <LoopRel>:
   100f4:	e1520003 	cmp	r2, r3
   100f8:	34910004 	ldrcc	r0, [r1], #4
   100fc:	34820004 	strcc	r0, [r2], #4
   10100:	3afffffb 	bcc	100f4 <LoopRel>

00010104 <DataIsEmpty>:
   10104:	e3a00000 	mov	r0, #0	; 0x0
   10108:	e59f1068 	ldr	r1, [pc, #104]	; 10178 <__exit_THUMB+0x14>
   1010c:	e59f2068 	ldr	r2, [pc, #104]	; 1017c <__exit_THUMB+0x18>
   10110:	e1510002 	cmp	r1, r2
   10114:	0a000002 	beq	10124 <BSSIsEmpty>

00010118 <LoopZI>:
   10118:	e1510002 	cmp	r1, r2
   1011c:	34810004 	strcc	r0, [r1], #4
   10120:	3afffffc 	bcc	10118 <LoopZI>

00010124 <BSSIsEmpty>:
   10124:	e59f0054 	ldr	r0, [pc, #84]	; 10180 <__exit_THUMB+0x1c>
   10128:	e59f1054 	ldr	r1, [pc, #84]	; 10184 <__exit_THUMB+0x20>

0001012c <ctor_loop>:
   1012c:	e1500001 	cmp	r0, r1
   10130:	0a000005 	beq	1014c <ctor_end>
   10134:	e4902004 	ldr	r2, [r0], #4
   10138:	e92d0003 	push	{r0, r1}
   1013c:	e1a0e00f 	mov	lr, pc
   10140:	e1a0f002 	mov	pc, r2
   10144:	e8bd0003 	pop	{r0, r1}
   10148:	eafffff7 	b	1012c <ctor_loop>

0001014c <ctor_end>:
   1014c:	e59f0034 	ldr	r0, [pc, #52]	; 10188 <__exit_THUMB+0x24>
   10150:	e3100001 	tst	r0, #1	; 0x1
   10154:	059fe030 	ldreq	lr, [pc, #48]	; 1018c <__exit_THUMB+0x28>
   10158:	159fe030 	ldrne	lr, [pc, #48]	; 10190 <__exit_THUMB+0x2c>
   1015c:	e12fff10 	bx	r0

00010160 <__exit_ARM>:
   10160:	eafffffe 	b	10160 <__exit_ARM>

00010164 <__exit_THUMB>:
   10164:	e7fe      	b.n	10164 <__exit_THUMB>
   10166:	0000      	.short	0x0000
   10168:	40001f00 	.word	0x40001f00
   1016c:	000195c4 	.word	0x000195c4
   10170:	40000000 	.word	0x40000000
   10174:	40000894 	.word	0x40000894
   10178:	40000894 	.word	0x40000894
   1017c:	40001274 	.word	0x40001274
   10180:	000195c4 	.word	0x000195c4
   10184:	000195c4 	.word	0x000195c4
   10188:	0001144c 	.word	0x0001144c
   1018c:	00010160 	.word	0x00010160
   10190:	00010164 	.word	0x00010164

00010194 <delay_ms>:
// Inputs: int count: Number of milliseconds to delay
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
   10194:	e59f301c 	ldr	r3, [pc, #28]	; 101b8 <delay_ms+0x24>
   10198:	e0020093 	mul	r2, r3, r0
   1019c:	e3a03000 	mov	r3, #0	; 0x0
   101a0:	ea000001 	b	101ac <delay_ms+0x18>
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   101a4:	e1a00000 	nop			(mov r0,r0)
   101a8:	e2833001 	add	r3, r3, #1	; 0x1
   101ac:	e1530002 	cmp	r3, r2
   101b0:	bafffffb 	blt	101a4 <delay_ms+0x10>
}
   101b4:	e12fff1e 	bx	lr
   101b8:	00002710 	.word	0x00002710

000101bc <getButton>:
//Inputs:  None
//Outputs: None
//Function returns the value of the button that is currently being pressed.
// UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
char getButton(void){
	if(!(IOPIN1 & SW_UP)) return UP_BUT;
   101bc:	e59f2030 	ldr	r2, [pc, #48]	; 101f4 <getButton+0x38>
   101c0:	e5923010 	ldr	r3, [r2, #16]
   101c4:	e3130502 	tst	r3, #8388608	; 0x800000
   101c8:	03a00002 	moveq	r0, #2	; 0x2
   101cc:	012fff1e 	bxeq	lr
	else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
   101d0:	e5923010 	ldr	r3, [r2, #16]
   101d4:	e3130602 	tst	r3, #2097152	; 0x200000
   101d8:	03a00001 	moveq	r0, #1	; 0x1
   101dc:	012fff1e 	bxeq	lr
	else if(!(IOPIN1 & SW_MID)) return MID_BUT;
   101e0:	e5923010 	ldr	r3, [r2, #16]
   101e4:	e3130501 	tst	r3, #4194304	; 0x400000
   101e8:	03a00003 	moveq	r0, #3	; 0x3
   101ec:	13a00000 	movne	r0, #0	; 0x0
	return NO_BUT;
}
   101f0:	e12fff1e 	bx	lr
   101f4:	e0028000 	.word	0xe0028000

000101f8 <getNewFiles>:


void getNewFiles(DisplayStruct *files, FileStruct *file_list){
   101f8:	e92d00f0 	push	{r4, r5, r6, r7}
	if(files->current_page < files->total_pages){
   101fc:	e5d02006 	ldrb	r2, [r0, #6]
   10200:	e5d03005 	ldrb	r3, [r0, #5]
   10204:	e1520003 	cmp	r2, r3
	else if(!(IOPIN1 & SW_MID)) return MID_BUT;
	return NO_BUT;
}


void getNewFiles(DisplayStruct *files, FileStruct *file_list){
   10208:	e1a05001 	mov	r5, r1
	if(files->current_page < files->total_pages){
   1020c:	33a0c000 	movcc	ip, #0	; 0x0
		for(int i =0; i<NUMROWS; i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
   10210:	33a0400f 	movcc	r4, #15	; 0xf
	return NO_BUT;
}


void getNewFiles(DisplayStruct *files, FileStruct *file_list){
	if(files->current_page < files->total_pages){
   10214:	3a000010 	bcc	1025c <getNewFiles+0x64>
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
			}
		}
	}
	else{
		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
   10218:	e59f30b8 	ldr	r3, [pc, #184]	; 102d8 <getNewFiles+0xe0>
   1021c:	e3a0c000 	mov	ip, #0	; 0x0
   10220:	e5934000 	ldr	r4, [r3]
   10224:	e3e0700e 	mvn	r7, #14	; 0xe
			for(int j=0; j<MAXFILENAMELEN; j++){
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
   10228:	e3a0600f 	mov	r6, #15	; 0xf
   1022c:	ea000017 	b	10290 <getNewFiles+0x98>

void getNewFiles(DisplayStruct *files, FileStruct *file_list){
	if(files->current_page < files->total_pages){
		for(int i =0; i<NUMROWS; i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
   10230:	e5d03006 	ldrb	r3, [r0, #6]
   10234:	e023c394 	mla	r3, r4, r3, ip
   10238:	e0853283 	add	r3, r5, r3, lsl #5
   1023c:	e7d33002 	ldrb	r3, [r3, r2]


void getNewFiles(DisplayStruct *files, FileStruct *file_list){
	if(files->current_page < files->total_pages){
		for(int i =0; i<NUMROWS; i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
   10240:	e2822001 	add	r2, r2, #1	; 0x1
   10244:	e352001e 	cmp	r2, #30	; 0x1e
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
   10248:	e4c13001 	strb	r3, [r1], #1


void getNewFiles(DisplayStruct *files, FileStruct *file_list){
	if(files->current_page < files->total_pages){
		for(int i =0; i<NUMROWS; i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
   1024c:	1afffff7 	bne	10230 <getNewFiles+0x38>
}


void getNewFiles(DisplayStruct *files, FileStruct *file_list){
	if(files->current_page < files->total_pages){
		for(int i =0; i<NUMROWS; i++){
   10250:	e28cc001 	add	ip, ip, #1	; 0x1
   10254:	e35c000f 	cmp	ip, #15	; 0xf
   10258:	0a00001c 	beq	102d0 <getNewFiles+0xd8>
   1025c:	e080328c 	add	r3, r0, ip, lsl #5
   10260:	e283100c 	add	r1, r3, #12	; 0xc
   10264:	e3a02000 	mov	r2, #0	; 0x0
   10268:	eafffff0 	b	10230 <getNewFiles+0x38>
		}
	}
	else{
		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
   1026c:	e5d03006 	ldrb	r3, [r0, #6]
   10270:	e023c396 	mla	r3, r6, r3, ip
   10274:	e0853283 	add	r3, r5, r3, lsl #5
   10278:	e7d33002 	ldrb	r3, [r3, r2]
			}
		}
	}
	else{
		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
   1027c:	e2822001 	add	r2, r2, #1	; 0x1
   10280:	e352001e 	cmp	r2, #30	; 0x1e
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
   10284:	e4c13001 	strb	r3, [r1], #1
			}
		}
	}
	else{
		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
			for(int j=0; j<MAXFILENAMELEN; j++){
   10288:	1afffff7 	bne	1026c <getNewFiles+0x74>
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
			}
		}
	}
	else{
		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
   1028c:	e28cc001 	add	ip, ip, #1	; 0x1
   10290:	e5d03005 	ldrb	r3, [r0, #5]
   10294:	e0224397 	mla	r2, r7, r3, r4
   10298:	e15c0002 	cmp	ip, r2
   1029c:	a0803282 	addge	r3, r0, r2, lsl #5
   102a0:	a283000c 	addge	r0, r3, #12	; 0xc
			for(int j=0; j<MAXFILENAMELEN; j++){
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
			}
		}
		for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0]='\0';
   102a4:	a3a03000 	movge	r3, #0	; 0x0
   102a8:	aa000004 	bge	102c0 <getNewFiles+0xc8>
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
			}
		}
	}
	else{
		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
   102ac:	e080328c 	add	r3, r0, ip, lsl #5
   102b0:	e283100c 	add	r1, r3, #12	; 0xc
   102b4:	e3a02000 	mov	r2, #0	; 0x0
   102b8:	eaffffeb 	b	1026c <getNewFiles+0x74>
			for(int j=0; j<MAXFILENAMELEN; j++){
				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
			}
		}
		for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0]='\0';
   102bc:	e5403020 	strb	r3, [r0, #-32]
   102c0:	e352000e 	cmp	r2, #14	; 0xe
   102c4:	e2800020 	add	r0, r0, #32	; 0x20
   102c8:	e2822001 	add	r2, r2, #1	; 0x1
   102cc:	dafffffa 	ble	102bc <getNewFiles+0xc4>
	}
}
   102d0:	e8bd00f0 	pop	{r4, r5, r6, r7}
   102d4:	e12fff1e 	bx	lr
   102d8:	40000898 	.word	0x40000898

000102dc <fillSettings>:
//Usage: fillSettings(&settings_menu, &settings_values);
//Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
//		  SettingsStruct *values: settings struct whose initial values should be set
//This function fills the input display struct with a list of settings, along with a "settings" title.  It
//also loads the default display values along with the default settings values. 
void fillSettings(DisplayStruct *menu){
   102dc:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
	for(int i=0; i<MAXDISPLEN; i++){
		menu->list[0].file_name[i] = volume[i];
   102e0:	e59f90a4 	ldr	r9, [pc, #164]	; 1038c <fillSettings+0xb0>
		menu->list[1].file_name[i] = radio_power[i];
   102e4:	e59fa0a4 	ldr	sl, [pc, #164]	; 10390 <fillSettings+0xb4>
		menu->list[2].file_name[i] = radio_channel_menu[i];
   102e8:	e59f80a4 	ldr	r8, [pc, #164]	; 10394 <fillSettings+0xb8>
		menu->title[i] = settings[i];
   102ec:	e59f70a4 	ldr	r7, [pc, #164]	; 10398 <fillSettings+0xbc>
//Usage: fillSettings(&settings_menu, &settings_values);
//Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
//		  SettingsStruct *values: settings struct whose initial values should be set
//This function fills the input display struct with a list of settings, along with a "settings" title.  It
//also loads the default display values along with the default settings values. 
void fillSettings(DisplayStruct *menu){
   102f0:	e1a05000 	mov	r5, r0
   102f4:	e1a06000 	mov	r6, r0
   102f8:	e1a04000 	mov	r4, r0
   102fc:	e3a0c000 	mov	ip, #0	; 0x0
	for(int i=0; i<MAXDISPLEN; i++){
		menu->list[0].file_name[i] = volume[i];
   10300:	e7d9300c 	ldrb	r3, [r9, ip]
		menu->list[1].file_name[i] = radio_power[i];
   10304:	e7da200c 	ldrb	r2, [sl, ip]
		menu->list[2].file_name[i] = radio_channel_menu[i];
   10308:	e7d8100c 	ldrb	r1, [r8, ip]
		menu->title[i] = settings[i];
   1030c:	e7d7000c 	ldrb	r0, [r7, ip]
//Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
//		  SettingsStruct *values: settings struct whose initial values should be set
//This function fills the input display struct with a list of settings, along with a "settings" title.  It
//also loads the default display values along with the default settings values. 
void fillSettings(DisplayStruct *menu){
	for(int i=0; i<MAXDISPLEN; i++){
   10310:	e28cc001 	add	ip, ip, #1	; 0x1
   10314:	e35c0016 	cmp	ip, #22	; 0x16
		menu->list[0].file_name[i] = volume[i];
   10318:	e5c4300c 	strb	r3, [r4, #12]
		menu->list[1].file_name[i] = radio_power[i];
   1031c:	e5c4202c 	strb	r2, [r4, #44]
		menu->list[2].file_name[i] = radio_channel_menu[i];
   10320:	e5c4104c 	strb	r1, [r4, #76]
		menu->title[i] = settings[i];
   10324:	e5c401ec 	strb	r0, [r4, #492]
//Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
//		  SettingsStruct *values: settings struct whose initial values should be set
//This function fills the input display struct with a list of settings, along with a "settings" title.  It
//also loads the default display values along with the default settings values. 
void fillSettings(DisplayStruct *menu){
	for(int i=0; i<MAXDISPLEN; i++){
   10328:	e2844001 	add	r4, r4, #1	; 0x1
   1032c:	1afffff3 	bne	10300 <fillSettings+0x24>
   10330:	e3a03003 	mov	r3, #3	; 0x3
		menu->list[1].file_name[i] = radio_power[i];
		menu->list[2].file_name[i] = radio_channel_menu[i];
		menu->title[i] = settings[i];
	}
	for(int i=3; i<NUMROWS; i++){
		menu->list[i].file_name[0]='\0';
   10334:	e3a02000 	mov	r2, #0	; 0x0
		menu->list[0].file_name[i] = volume[i];
		menu->list[1].file_name[i] = radio_power[i];
		menu->list[2].file_name[i] = radio_channel_menu[i];
		menu->title[i] = settings[i];
	}
	for(int i=3; i<NUMROWS; i++){
   10338:	e2833001 	add	r3, r3, #1	; 0x1
   1033c:	e353000f 	cmp	r3, #15	; 0xf
		menu->list[i].file_name[0]='\0';
   10340:	e5c6206c 	strb	r2, [r6, #108]
   10344:	e3a01000 	mov	r1, #0	; 0x0
		menu->list[0].file_name[i] = volume[i];
		menu->list[1].file_name[i] = radio_power[i];
		menu->list[2].file_name[i] = radio_channel_menu[i];
		menu->title[i] = settings[i];
	}
	for(int i=3; i<NUMROWS; i++){
   10348:	e2866020 	add	r6, r6, #32	; 0x20
   1034c:	1afffff9 	bne	10338 <fillSettings+0x5c>
		menu->list[i].file_name[0]='\0';
	}
	menu->text_color=white;
   10350:	e59f3044 	ldr	r3, [pc, #68]	; 1039c <fillSettings+0xc0>
   10354:	e5d33000 	ldrb	r3, [r3]
   10358:	e5c53003 	strb	r3, [r5, #3]
	menu->back_color=black;
   1035c:	e59f303c 	ldr	r3, [pc, #60]	; 103a0 <fillSettings+0xc4>
   10360:	e5d32000 	ldrb	r2, [r3]
	menu->current_row=1;
   10364:	e3a03001 	mov	r3, #1	; 0x1
	menu->current_column=0;
	menu->current_index=0;
	menu->orientation = ORIENTLEFT;
	menu->current_page=0;
	menu->total_pages = 0;
   10368:	e5c51005 	strb	r1, [r5, #5]
	}
	for(int i=3; i<NUMROWS; i++){
		menu->list[i].file_name[0]='\0';
	}
	menu->text_color=white;
	menu->back_color=black;
   1036c:	e5c52004 	strb	r2, [r5, #4]
	menu->current_row=1;
	menu->current_column=0;
	menu->current_index=0;
	menu->orientation = ORIENTLEFT;
   10370:	e5c53002 	strb	r3, [r5, #2]
	for(int i=3; i<NUMROWS; i++){
		menu->list[i].file_name[0]='\0';
	}
	menu->text_color=white;
	menu->back_color=black;
	menu->current_row=1;
   10374:	e5c53000 	strb	r3, [r5]
	menu->current_column=0;
   10378:	e5c51001 	strb	r1, [r5, #1]
	menu->current_index=0;
   1037c:	e5851008 	str	r1, [r5, #8]
	menu->orientation = ORIENTLEFT;
	menu->current_page=0;
   10380:	e5c51006 	strb	r1, [r5, #6]
	menu->total_pages = 0;
}
   10384:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   10388:	e12fff1e 	bx	lr
   1038c:	00018a31 	.word	0x00018a31
   10390:	00018a41 	.word	0x00018a41
   10394:	00018a4c 	.word	0x00018a4c
   10398:	00018a59 	.word	0x00018a59
   1039c:	40000f28 	.word	0x40000f28
   103a0:	40000009 	.word	0x40000009

000103a4 <reset>:
}

// Intentionally faults Watchdog to trigger a reset condition
//
void reset(void) {
    WDMOD |= 3;
   103a4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
   103a8:	e5923000 	ldr	r3, [r2]
   103ac:	e3833003 	orr	r3, r3, #3	; 0x3
   103b0:	e5823000 	str	r3, [r2]
    WDFEED = 0xAA;
   103b4:	e3a010aa 	mov	r1, #170	; 0xaa
    WDFEED = 0x55;
   103b8:	e3a03055 	mov	r3, #85	; 0x55

// Intentionally faults Watchdog to trigger a reset condition
//
void reset(void) {
    WDMOD |= 3;
    WDFEED = 0xAA;
   103bc:	e5821008 	str	r1, [r2, #8]
    WDFEED = 0x55;
   103c0:	e5823008 	str	r3, [r2, #8]
    WDFEED = 0xAA;
    WDFEED = 0x00;
   103c4:	e3a03000 	mov	r3, #0	; 0x0
//
void reset(void) {
    WDMOD |= 3;
    WDFEED = 0xAA;
    WDFEED = 0x55;
    WDFEED = 0xAA;
   103c8:	e5821008 	str	r1, [r2, #8]
    WDFEED = 0x00;
   103cc:	e5823008 	str	r3, [r2, #8]
}
   103d0:	e12fff1e 	bx	lr

000103d4 <initializeFMTransmitter>:

// initializes the FM transmitter to a given frequency.
// Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
//
void initializeFMTransmitter(int frequency) {
  IOCLR1 |= FM_CS;      //Select SPI for FM Transmitter
   103d4:	e59f2068 	ldr	r2, [pc, #104]	; 10444 <initializeFMTransmitter+0x70>
   103d8:	e592301c 	ldr	r3, [r2, #28]
   103dc:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   103e0:	e582301c 	str	r3, [r2, #28]
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   103e4:	e59f205c 	ldr	r2, [pc, #92]	; 10448 <initializeFMTransmitter+0x74>
}

// initializes the FM transmitter to a given frequency.
// Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
//
void initializeFMTransmitter(int frequency) {
   103e8:	e92d4010 	push	{r4, lr}
  IOCLR1 |= FM_CS;      //Select SPI for FM Transmitter
   103ec:	e3a03000 	mov	r3, #0	; 0x0
}

// initializes the FM transmitter to a given frequency.
// Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
//
void initializeFMTransmitter(int frequency) {
   103f0:	e1a04000 	mov	r4, r0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   103f4:	e1a00000 	nop			(mov r0,r0)
   103f8:	e2833001 	add	r3, r3, #1	; 0x1
   103fc:	e1530002 	cmp	r3, r2
   10400:	1afffffb 	bne	103f4 <initializeFMTransmitter+0x20>
//
void initializeFMTransmitter(int frequency) {
  IOCLR1 |= FM_CS;      //Select SPI for FM Transmitter
  delay_ms(900);
  
  ns73Config();         //Configigure the FM Trans. I/O
   10404:	eb001551 	bl	15950 <ns73Config>
  ns73Init();           //Setup the Default Register Values
   10408:	eb001531 	bl	158d4 <ns73Init>
  ns73SetChannel(frequency);  //Transmit to 97.3 FM
   1040c:	e1a00004 	mov	r0, r4
   10410:	eb00151c 	bl	15888 <ns73SetChannel>
  
  IOSET1 |= FM_CS;      //Remove FM Transmitter from SPI bus
   10414:	e59f2028 	ldr	r2, [pc, #40]	; 10444 <initializeFMTransmitter+0x70>
   10418:	e5923014 	ldr	r3, [r2, #20]
   1041c:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   10420:	e5823014 	str	r3, [r2, #20]
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10424:	e59f2020 	ldr	r2, [pc, #32]	; 1044c <initializeFMTransmitter+0x78>
  
  ns73Config();         //Configigure the FM Trans. I/O
  ns73Init();           //Setup the Default Register Values
  ns73SetChannel(frequency);  //Transmit to 97.3 FM
  
  IOSET1 |= FM_CS;      //Remove FM Transmitter from SPI bus
   10428:	e3a03000 	mov	r3, #0	; 0x0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   1042c:	e1a00000 	nop			(mov r0,r0)
   10430:	e2833001 	add	r3, r3, #1	; 0x1
   10434:	e1530002 	cmp	r3, r2
   10438:	1afffffb 	bne	1042c <initializeFMTransmitter+0x58>
  ns73Init();           //Setup the Default Register Values
  ns73SetChannel(frequency);  //Transmit to 97.3 FM
  
  IOSET1 |= FM_CS;      //Remove FM Transmitter from SPI bus
  delay_ms(100);
   1043c:	e8bd4010 	pop	{r4, lr}
   10440:	e12fff1e 	bx	lr
   10444:	e0028000 	.word	0xe0028000
   10448:	00895440 	.word	0x00895440
   1044c:	000f4240 	.word	0x000f4240

00010450 <sendMP3Data>:
  IOSET1 |= FM_CS;      //Unselect the FM transmitter
}

// Sends a piece of mp3 data from the current song.
//
void sendMP3Data(void) {
   10450:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  vs1002Config();                                         // Enable MP3 Comm. Lines
   10454:	eb0013ed 	bl	15410 <vs1002Config>
  while (IOPIN0 & MP3_DREQ) {
   10458:	e59f8054 	ldr	r8, [pc, #84]	; 104b4 <sendMP3Data+0x64>
    vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
    if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over = 1; }  // Buffer more data if available
   1045c:	e59f7054 	ldr	r7, [pc, #84]	; 104b8 <sendMP3Data+0x68>
   10460:	e59f4054 	ldr	r4, [pc, #84]	; 104bc <sendMP3Data+0x6c>
    else song_is_over = 0;                                // If there's no more data available, set the flag, else leave it alone
   10464:	e3a06000 	mov	r6, #0	; 0x0
//
void sendMP3Data(void) {
  vs1002Config();                                         // Enable MP3 Comm. Lines
  while (IOPIN0 & MP3_DREQ) {
    vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
    if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over = 1; }  // Buffer more data if available
   10468:	e3a05001 	mov	r5, #1	; 0x1
   1046c:	ea000008 	b	10494 <sendMP3Data+0x44>
// Sends a piece of mp3 data from the current song.
//
void sendMP3Data(void) {
  vs1002Config();                                         // Enable MP3 Comm. Lines
  while (IOPIN0 & MP3_DREQ) {
    vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
   10470:	eb001403 	bl	15484 <vs1002SendMusic>
    if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over = 1; }  // Buffer more data if available
   10474:	e5970034 	ldr	r0, [r7, #52]
   10478:	e59f1040 	ldr	r1, [pc, #64]	; 104c0 <sendMP3Data+0x70>
   1047c:	e3a02020 	mov	r2, #32	; 0x20
   10480:	eb000c06 	bl	134a0 <fat16_read_file>
   10484:	e1a00800 	lsl	r0, r0, #16
   10488:	e3500000 	cmp	r0, #0	; 0x0
   1048c:	d5c45000 	strble	r5, [r4]
    else song_is_over = 0;                                // If there's no more data available, set the flag, else leave it alone
   10490:	c5c46000 	strbgt	r6, [r4]

// Sends a piece of mp3 data from the current song.
//
void sendMP3Data(void) {
  vs1002Config();                                         // Enable MP3 Comm. Lines
  while (IOPIN0 & MP3_DREQ) {
   10494:	e5983000 	ldr	r3, [r8]
   10498:	e3130602 	tst	r3, #2097152	; 0x200000
    vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
   1049c:	e59f001c 	ldr	r0, [pc, #28]	; 104c0 <sendMP3Data+0x70>
   104a0:	e3a01020 	mov	r1, #32	; 0x20

// Sends a piece of mp3 data from the current song.
//
void sendMP3Data(void) {
  vs1002Config();                                         // Enable MP3 Comm. Lines
  while (IOPIN0 & MP3_DREQ) {
   104a4:	1afffff1 	bne	10470 <sendMP3Data+0x20>
    vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
    if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over = 1; }  // Buffer more data if available
    else song_is_over = 0;                                // If there's no more data available, set the flag, else leave it alone
  }
  vs1002Finish();                                         // Disable MP3 Comm. Lines
   104a8:	eb0013e2 	bl	15438 <vs1002Finish>
}
   104ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   104b0:	e12fff1e 	bx	lr
   104b4:	e0028000 	.word	0xe0028000
   104b8:	400008a8 	.word	0x400008a8
   104bc:	40000895 	.word	0x40000895
   104c0:	400008e5 	.word	0x400008e5

000104c4 <timer1ISR>:
//  This function is a global interrupt called by a match on the Timer 0 match.
//  This interrupt is responsible for sending music to the MP3 player when it is needed. 
//  WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 playing at risk.
//           Adding superfluous code to this interrupt section may also contribute to improper MP3 playback.
//
static void timer1ISR(void) {
   104c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  sendMP3Data();
   104c8:	ebffffe0 	bl	10450 <sendMP3Data>
  T1IR = 0xFF;      // Clear the timer 0 interrupt
   104cc:	e59f3018 	ldr	r3, [pc, #24]	; 104ec <timer1ISR+0x28>
   104d0:	e3a020ff 	mov	r2, #255	; 0xff
   104d4:	e5832000 	str	r2, [r3]
  VICVectAddr = 0;  // Update VIC priorities
   104d8:	e3a02000 	mov	r2, #0	; 0x0
   104dc:	e3e03000 	mvn	r3, #0	; 0x0
   104e0:	e5032fcf 	str	r2, [r3, #-4047]
}
   104e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   104e8:	e12fff1e 	bx	lr
   104ec:	e0008000 	.word	0xe0008000

000104f0 <quickClear>:
//               will simply color all of the text the same color as the background, giving the illusion
//               of a clear screen.  Only works with the background color.  Much faster than LCDClear, and is
//               good to use while an MP3 is playing.
//
void quickClear(DisplayStruct *display){
  PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   104f0:	e59f20b8 	ldr	r2, [pc, #184]	; 105b0 <quickClear+0xc0>
   104f4:	e5923000 	ldr	r3, [r2]
//  Description: Rather than painting every pixel a specific color (like LCDClear does) this routine
//               will simply color all of the text the same color as the background, giving the illusion
//               of a clear screen.  Only works with the background color.  Much faster than LCDClear, and is
//               good to use while an MP3 is playing.
//
void quickClear(DisplayStruct *display){
   104f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   104fc:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   10500:	e3c33030 	bic	r3, r3, #48	; 0x30
   10504:	e5823000 	str	r3, [r2]
  //If we're on the first page of the menu, we also need to clear the title.
  if (display->current_page==0) {
   10508:	e5d0e006 	ldrb	lr, [r0, #6]
   1050c:	e35e0000 	cmp	lr, #0	; 0x0
//  Description: Rather than painting every pixel a specific color (like LCDClear does) this routine
//               will simply color all of the text the same color as the background, giving the illusion
//               of a clear screen.  Only works with the background color.  Much faster than LCDClear, and is
//               good to use while an MP3 is playing.
//
void quickClear(DisplayStruct *display){
   10510:	e24dd008 	sub	sp, sp, #8	; 0x8
   10514:	e1a05000 	mov	r5, r0
  PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
  //If we're on the first page of the menu, we also need to clear the title.
  if (display->current_page==0) {
   10518:	1a000007 	bne	1053c <quickClear+0x4c>
    LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
   1051c:	e5d0c002 	ldrb	ip, [r0, #2]
   10520:	e5d02004 	ldrb	r2, [r0, #4]
   10524:	e1a0100e 	mov	r1, lr
   10528:	e2800f7b 	add	r0, r0, #492	; 0x1ec
   1052c:	e1a0300e 	mov	r3, lr
   10530:	e58dc004 	str	ip, [sp, #4]
   10534:	e58de000 	str	lr, [sp]
   10538:	eb001232 	bl	14e08 <LCDPrintString>
  }
  LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
   1053c:	e5d50000 	ldrb	r0, [r5]
   10540:	e3a01000 	mov	r1, #0	; 0x0
   10544:	e5d52004 	ldrb	r2, [r5, #4]
   10548:	e5d53002 	ldrb	r3, [r5, #2]
   1054c:	eb0012ff 	bl	15150 <LCDSetRowColor>
   10550:	e3a04000 	mov	r4, #0	; 0x0
  for (int j=0; j<NUMROWS; j++) {
    LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation);
    LCDPrintString(newline, 0, black, j+1, 0, 0);
   10554:	e59f7058 	ldr	r7, [pc, #88]	; 105b4 <quickClear+0xc4>
  if (display->current_page==0) {
    LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
  }
  LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
  for (int j=0; j<NUMROWS; j++) {
    LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation);
   10558:	e1a06004 	mov	r6, r4
   1055c:	e5d5c002 	ldrb	ip, [r5, #2]
   10560:	e0850284 	add	r0, r5, r4, lsl #5
  PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
  //If we're on the first page of the menu, we also need to clear the title.
  if (display->current_page==0) {
    LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
  }
  LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
   10564:	e2844001 	add	r4, r4, #1	; 0x1
  for (int j=0; j<NUMROWS; j++) {
    LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation);
   10568:	e5d52004 	ldrb	r2, [r5, #4]
   1056c:	e280000c 	add	r0, r0, #12	; 0xc
   10570:	e1a01006 	mov	r1, r6
   10574:	e1a03004 	mov	r3, r4
   10578:	e88d1040 	stm	sp, {r6, ip}
   1057c:	eb001221 	bl	14e08 <LCDPrintString>
    LCDPrintString(newline, 0, black, j+1, 0, 0);
   10580:	e5d72000 	ldrb	r2, [r7]
   10584:	e59f002c 	ldr	r0, [pc, #44]	; 105b8 <quickClear+0xc8>
   10588:	e1a01006 	mov	r1, r6
   1058c:	e1a03004 	mov	r3, r4
   10590:	e58d6000 	str	r6, [sp]
   10594:	e58d6004 	str	r6, [sp, #4]
   10598:	eb00121a 	bl	14e08 <LCDPrintString>
  //If we're on the first page of the menu, we also need to clear the title.
  if (display->current_page==0) {
    LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
  }
  LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
  for (int j=0; j<NUMROWS; j++) {
   1059c:	e354000f 	cmp	r4, #15	; 0xf
   105a0:	1affffed 	bne	1055c <quickClear+0x6c>
    LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation);
    LCDPrintString(newline, 0, black, j+1, 0, 0);
  }
}
   105a4:	e28dd008 	add	sp, sp, #8	; 0x8
   105a8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   105ac:	e12fff1e 	bx	lr
   105b0:	e002c000 	.word	0xe002c000
   105b4:	40000009 	.word	0x40000009
   105b8:	00018a2f 	.word	0x00018a2f

000105bc <printMenu>:

//Usage: printMenu(&settings_menu);
//Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
//This function writes the title, along with all of the file names in the display struct to the screen.
void printMenu(DisplayStruct *display){
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   105bc:	e59f20c0 	ldr	r2, [pc, #192]	; 10684 <printMenu+0xc8>
   105c0:	e5923000 	ldr	r3, [r2]
}

//Usage: printMenu(&settings_menu);
//Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
//This function writes the title, along with all of the file names in the display struct to the screen.
void printMenu(DisplayStruct *display){
   105c4:	e92d4070 	push	{r4, r5, r6, lr}
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   105c8:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   105cc:	e3c33030 	bic	r3, r3, #48	; 0x30
   105d0:	e5823000 	str	r3, [r2]
	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->orientation);
   105d4:	e5d0e006 	ldrb	lr, [r0, #6]
   105d8:	e35e0000 	cmp	lr, #0	; 0x0
}

//Usage: printMenu(&settings_menu);
//Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
//This function writes the title, along with all of the file names in the display struct to the screen.
void printMenu(DisplayStruct *display){
   105dc:	e24dd008 	sub	sp, sp, #8	; 0x8
   105e0:	e1a05000 	mov	r5, r0
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->orientation);
   105e4:	1a000007 	bne	10608 <printMenu+0x4c>
   105e8:	e5d0c002 	ldrb	ip, [r0, #2]
   105ec:	e5d02003 	ldrb	r2, [r0, #3]
   105f0:	e1a0100e 	mov	r1, lr
   105f4:	e2800f7b 	add	r0, r0, #492	; 0x1ec
   105f8:	e1a0300e 	mov	r3, lr
   105fc:	e58dc004 	str	ip, [sp, #4]
   10600:	e58de000 	str	lr, [sp]
   10604:	eb0011ff 	bl	14e08 <LCDPrintString>
   10608:	e3a03000 	mov	r3, #0	; 0x0
	for(int j=0; j<NUMROWS; j++){
		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
   1060c:	e1a06003 	mov	r6, r3
   10610:	e2834001 	add	r4, r3, #1	; 0x1
   10614:	e5d5c002 	ldrb	ip, [r5, #2]
   10618:	e0850283 	add	r0, r5, r3, lsl #5
   1061c:	e5d52003 	ldrb	r2, [r5, #3]
   10620:	e1a03004 	mov	r3, r4
   10624:	e280000c 	add	r0, r0, #12	; 0xc
   10628:	e1a01006 	mov	r1, r6
   1062c:	e88d1040 	stm	sp, {r6, ip}
   10630:	eb0011f4 	bl	14e08 <LCDPrintString>
//Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
//This function writes the title, along with all of the file names in the display struct to the screen.
void printMenu(DisplayStruct *display){
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->orientation);
	for(int j=0; j<NUMROWS; j++){
   10634:	e354000f 	cmp	r4, #15	; 0xf
   10638:	e1a03004 	mov	r3, r4
   1063c:	1afffff3 	bne	10610 <printMenu+0x54>
		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
	}
	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
   10640:	e5d50000 	ldrb	r0, [r5]
   10644:	e1a01006 	mov	r1, r6
   10648:	e5d52003 	ldrb	r2, [r5, #3]
   1064c:	e5d53002 	ldrb	r3, [r5, #2]
   10650:	eb0012be 	bl	15150 <LCDSetRowColor>
	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->current_row,0,display->orientation);
   10654:	e5950008 	ldr	r0, [r5, #8]
   10658:	e5d5c002 	ldrb	ip, [r5, #2]
   1065c:	e0850280 	add	r0, r5, r0, lsl #5
   10660:	e5d52004 	ldrb	r2, [r5, #4]
   10664:	e5d53000 	ldrb	r3, [r5]
   10668:	e280000c 	add	r0, r0, #12	; 0xc
   1066c:	e1a01006 	mov	r1, r6
   10670:	e88d1040 	stm	sp, {r6, ip}
   10674:	eb0011e3 	bl	14e08 <LCDPrintString>
}
   10678:	e28dd008 	add	sp, sp, #8	; 0x8
   1067c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10680:	e12fff1e 	bx	lr
   10684:	e002c000 	.word	0xe002c000

00010688 <highlightRow>:
//Usage: highlightRow(&current_display, PREVIOUS);
//Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value should be changed.
//		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be highlighted
//Depending on "direction" this value highlights a row, and manages the current_row and current_index values.
void highlightRow(DisplayStruct *display, char direction){
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   10688:	e59f20d0 	ldr	r2, [pc, #208]	; 10760 <highlightRow+0xd8>
   1068c:	e5923000 	ldr	r3, [r2]

//Usage: highlightRow(&current_display, PREVIOUS);
//Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value should be changed.
//		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be highlighted
//Depending on "direction" this value highlights a row, and manages the current_row and current_index values.
void highlightRow(DisplayStruct *display, char direction){
   10690:	e92d4070 	push	{r4, r5, r6, lr}
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   10694:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   10698:	e3c33030 	bic	r3, r3, #48	; 0x30
   1069c:	e5823000 	str	r3, [r2]

//Usage: highlightRow(&current_display, PREVIOUS);
//Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value should be changed.
//		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be highlighted
//Depending on "direction" this value highlights a row, and manages the current_row and current_index values.
void highlightRow(DisplayStruct *display, char direction){
   106a0:	e1a06000 	mov	r6, r0
   106a4:	e24dd008 	sub	sp, sp, #8	; 0x8
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
   106a8:	e5d62004 	ldrb	r2, [r6, #4]
   106ac:	e5d63002 	ldrb	r3, [r6, #2]

//Usage: highlightRow(&current_display, PREVIOUS);
//Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value should be changed.
//		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be highlighted
//Depending on "direction" this value highlights a row, and manages the current_row and current_index values.
void highlightRow(DisplayStruct *display, char direction){
   106b0:	e1a04001 	mov	r4, r1
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
   106b4:	e5d00000 	ldrb	r0, [r0]
   106b8:	e3a01000 	mov	r1, #0	; 0x0
   106bc:	eb0012a3 	bl	15150 <LCDSetRowColor>
	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->current_row,0,display->orientation);
   106c0:	e5960008 	ldr	r0, [r6, #8]
   106c4:	e3a0c000 	mov	ip, #0	; 0x0
   106c8:	e5d65002 	ldrb	r5, [r6, #2]
   106cc:	e0860280 	add	r0, r6, r0, lsl #5
   106d0:	e5d62003 	ldrb	r2, [r6, #3]
   106d4:	e5d63000 	ldrb	r3, [r6]
   106d8:	e1a0100c 	mov	r1, ip
   106dc:	e280000c 	add	r0, r0, #12	; 0xc
   106e0:	e58dc000 	str	ip, [sp]

//Usage: highlightRow(&current_display, PREVIOUS);
//Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value should be changed.
//		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be highlighted
//Depending on "direction" this value highlights a row, and manages the current_row and current_index values.
void highlightRow(DisplayStruct *display, char direction){
   106e4:	e20440ff 	and	r4, r4, #255	; 0xff
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->current_row,0,display->orientation);
   106e8:	e58d5004 	str	r5, [sp, #4]
   106ec:	eb0011c5 	bl	14e08 <LCDPrintString>
   106f0:	e5d63000 	ldrb	r3, [r6]
	if(direction == PREVIOUS){
   106f4:	e3540001 	cmp	r4, #1	; 0x1
   106f8:	e5962008 	ldr	r2, [r6, #8]
		display->current_row--;
   106fc:	02433001 	subeq	r3, r3, #1	; 0x1
		display->current_index--;
	}
	else{
		display->current_row++;
   10700:	12833001 	addne	r3, r3, #1	; 0x1
   10704:	e5c63000 	strb	r3, [r6]
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->current_row,0,display->orientation);
	if(direction == PREVIOUS){
		display->current_row--;
		display->current_index--;
   10708:	02422001 	subeq	r2, r2, #1	; 0x1
	}
	else{
		display->current_row++;
		display->current_index++;		
   1070c:	12822001 	addne	r2, r2, #1	; 0x1
   10710:	e5862008 	str	r2, [r6, #8]
	}
	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
   10714:	e5d60000 	ldrb	r0, [r6]
   10718:	e5d62003 	ldrb	r2, [r6, #3]
   1071c:	e5d63002 	ldrb	r3, [r6, #2]
   10720:	e3a01000 	mov	r1, #0	; 0x0
   10724:	eb001289 	bl	15150 <LCDSetRowColor>
	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->current_row,0,display->orientation);	
   10728:	e5960008 	ldr	r0, [r6, #8]
   1072c:	e5d64002 	ldrb	r4, [r6, #2]
   10730:	e3a0c000 	mov	ip, #0	; 0x0
   10734:	e0860280 	add	r0, r6, r0, lsl #5
   10738:	e5d62004 	ldrb	r2, [r6, #4]
   1073c:	e5d63000 	ldrb	r3, [r6]
   10740:	e280000c 	add	r0, r0, #12	; 0xc
   10744:	e1a0100c 	mov	r1, ip
   10748:	e58d4004 	str	r4, [sp, #4]
   1074c:	e58dc000 	str	ip, [sp]
   10750:	eb0011ac 	bl	14e08 <LCDPrintString>
}
   10754:	e28dd008 	add	sp, sp, #8	; 0x8
   10758:	e8bd4070 	pop	{r4, r5, r6, lr}
   1075c:	e12fff1e 	bx	lr
   10760:	e002c000 	.word	0xe002c000

00010764 <handleDownButton>:
//Inputs: 	DisplayStruct *display: Display currently being shown to the user.
//			FileStruct *Files: List of files on the SD card
//Outputs: None
//Description: This function will highlight the next row on the screen.  If the file menu is being shown,
// and the last file is currently selected, the function will get the next group of files and display them.
void handleDownButton(DisplayStruct *display, FileStruct *Files){
   10764:	e92d4030 	push	{r4, r5, lr}
	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
   10768:	e5d03000 	ldrb	r3, [r0]
   1076c:	e353000e 	cmp	r3, #14	; 0xe
//Inputs: 	DisplayStruct *display: Display currently being shown to the user.
//			FileStruct *Files: List of files on the SD card
//Outputs: None
//Description: This function will highlight the next row on the screen.  If the file menu is being shown,
// and the last file is currently selected, the function will get the next group of files and display them.
void handleDownButton(DisplayStruct *display, FileStruct *Files){
   10770:	e1a04000 	mov	r4, r0
   10774:	e1a05001 	mov	r5, r1
	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
   10778:	8a000002 	bhi	10788 <handleDownButton+0x24>
		highlightRow(display, NEXT);	//If it's not, then highlight the next row
   1077c:	e3a01000 	mov	r1, #0	; 0x0
		display->current_row=1;
		display->current_index=0;
		getNewFiles(&file_manager, &Files[0]);
		printMenu(display);				
	}
}
   10780:	e8bd4030 	pop	{r4, r5, lr}
//Outputs: None
//Description: This function will highlight the next row on the screen.  If the file menu is being shown,
// and the last file is currently selected, the function will get the next group of files and display them.
void handleDownButton(DisplayStruct *display, FileStruct *Files){
	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
		highlightRow(display, NEXT);	//If it's not, then highlight the next row
   10784:	eaffffbf 	b	10688 <highlightRow>
	}
	//If the current highlighted row is at the bottom, and there're more songs, then get them
	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
   10788:	e353000f 	cmp	r3, #15	; 0xf
   1078c:	1a000010 	bne	107d4 <handleDownButton+0x70>
   10790:	e5d02006 	ldrb	r2, [r0, #6]
   10794:	e5d03005 	ldrb	r3, [r0, #5]
   10798:	e1530002 	cmp	r3, r2
   1079c:	9a00000c 	bls	107d4 <handleDownButton+0x70>
		//Load next 15 songs and reset row, index and offset values
		display->current_page+=1;		
   107a0:	e2823001 	add	r3, r2, #1	; 0x1
   107a4:	e5c03006 	strb	r3, [r0, #6]
		//if(file_is_open)quickClear(display);
		//else LCDClear(display->back_color);
		quickClear(display);
   107a8:	ebffff50 	bl	104f0 <quickClear>
		display->current_row=1;
   107ac:	e3a03001 	mov	r3, #1	; 0x1
   107b0:	e5c43000 	strb	r3, [r4]
		display->current_index=0;
   107b4:	e3a03000 	mov	r3, #0	; 0x0
   107b8:	e5843008 	str	r3, [r4, #8]
		getNewFiles(&file_manager, &Files[0]);
   107bc:	e1a01005 	mov	r1, r5
   107c0:	e59f0014 	ldr	r0, [pc, #20]	; 107dc <handleDownButton+0x78>
   107c4:	ebfffe8b 	bl	101f8 <getNewFiles>
		printMenu(display);				
   107c8:	e1a00004 	mov	r0, r4
	}
}
   107cc:	e8bd4030 	pop	{r4, r5, lr}
		//else LCDClear(display->back_color);
		quickClear(display);
		display->current_row=1;
		display->current_index=0;
		getNewFiles(&file_manager, &Files[0]);
		printMenu(display);				
   107d0:	eaffff79 	b	105bc <printMenu>
	}
}
   107d4:	e8bd4030 	pop	{r4, r5, lr}
   107d8:	e12fff1e 	bx	lr
   107dc:	40000908 	.word	0x40000908

000107e0 <handleUpButton>:
//Inputs: 	DisplayStruct *display: Display currently being shown to the user.
//			FileStruct *Files: List of files on the SD card
//Outputs: None
//Description: This function will highlight the previous row on the screen.  If the file menu is being shown,
// and the first file is currently selected, the function will get the previous group of files and display them.
void handleUpButton(DisplayStruct *display, FileStruct *Files){
   107e0:	e92d4030 	push	{r4, r5, lr}
	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
   107e4:	e5d03000 	ldrb	r3, [r0]
   107e8:	e3530001 	cmp	r3, #1	; 0x1
//Inputs: 	DisplayStruct *display: Display currently being shown to the user.
//			FileStruct *Files: List of files on the SD card
//Outputs: None
//Description: This function will highlight the previous row on the screen.  If the file menu is being shown,
// and the first file is currently selected, the function will get the previous group of files and display them.
void handleUpButton(DisplayStruct *display, FileStruct *Files){
   107ec:	e1a04000 	mov	r4, r0
   107f0:	e1a05001 	mov	r5, r1
	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
   107f4:	9a000002 	bls	10804 <handleUpButton+0x24>
		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
   107f8:	e3a01001 	mov	r1, #1	; 0x1
		display->current_row=15;					//Start current row at bottom of next screen
		display->current_index=14;					//
		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
		printMenu(display);							//	display previous page
	}
}
   107fc:	e8bd4030 	pop	{r4, r5, lr}
//Outputs: None
//Description: This function will highlight the previous row on the screen.  If the file menu is being shown,
// and the first file is currently selected, the function will get the previous group of files and display them.
void handleUpButton(DisplayStruct *display, FileStruct *Files){
	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
   10800:	eaffffa0 	b	10688 <highlightRow>
	}
	//If the current row is at the top of the page, and there are previous songs, then get them.
	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, load it
   10804:	1a00000f 	bne	10848 <handleUpButton+0x68>
   10808:	e5d03006 	ldrb	r3, [r0, #6]
   1080c:	e3530000 	cmp	r3, #0	; 0x0
   10810:	0a00000c 	beq	10848 <handleUpButton+0x68>
		//Load previous 15 songs and reset row, index and offset values
		display->current_page-=1;					//Set the "new" current page to be loaded
   10814:	e2433001 	sub	r3, r3, #1	; 0x1
   10818:	e5c03006 	strb	r3, [r0, #6]
		//if(file_is_open)quickClear(display);
		//else LCDClear(display->back_color);
		quickClear(display);
   1081c:	ebffff33 	bl	104f0 <quickClear>
		display->current_row=15;					//Start current row at bottom of next screen
   10820:	e3a0300f 	mov	r3, #15	; 0xf
   10824:	e5c43000 	strb	r3, [r4]
		display->current_index=14;					//
   10828:	e3a0300e 	mov	r3, #14	; 0xe
   1082c:	e5843008 	str	r3, [r4, #8]
		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
   10830:	e1a01005 	mov	r1, r5
   10834:	e59f0014 	ldr	r0, [pc, #20]	; 10850 <handleUpButton+0x70>
   10838:	ebfffe6e 	bl	101f8 <getNewFiles>
		printMenu(display);							//	display previous page
   1083c:	e1a00004 	mov	r0, r4
	}
}
   10840:	e8bd4030 	pop	{r4, r5, lr}
		//else LCDClear(display->back_color);
		quickClear(display);
		display->current_row=15;					//Start current row at bottom of next screen
		display->current_index=14;					//
		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
		printMenu(display);							//	display previous page
   10844:	eaffff5c 	b	105bc <printMenu>
	}
}
   10848:	e8bd4030 	pop	{r4, r5, lr}
   1084c:	e12fff1e 	bx	lr
   10850:	40000908 	.word	0x40000908

00010854 <disableRadio>:
  IOSET1 |= FM_CS;        //Unselect the FM transmitter
}

// Disables the radio.
//
void disableRadio(void) {
   10854:	e92d4030 	push	{r4, r5, lr}
  radio_enable=OFF;
   10858:	e59f3098 	ldr	r3, [pc, #152]	; 108f8 <disableRadio+0xa4>
  
  // graphics
  LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   1085c:	e59f5098 	ldr	r5, [pc, #152]	; 108fc <disableRadio+0xa8>
}

// Disables the radio.
//
void disableRadio(void) {
  radio_enable=OFF;
   10860:	e3a04000 	mov	r4, #0	; 0x0
   10864:	e5c34000 	strb	r4, [r3]
  
  // graphics
  LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10868:	e5952000 	ldr	r2, [r5]
  IOSET1 |= FM_CS;        //Unselect the FM transmitter
}

// Disables the radio.
//
void disableRadio(void) {
   1086c:	e24dd008 	sub	sp, sp, #8	; 0x8
  radio_enable=OFF;
  
  // graphics
  LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10870:	e5d23002 	ldrb	r3, [r2, #2]
   10874:	e3a00002 	mov	r0, #2	; 0x2
   10878:	e1a01004 	mov	r1, r4
   1087c:	e5d22004 	ldrb	r2, [r2, #4]
   10880:	eb001232 	bl	15150 <LCDSetRowColor>
  LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
   10884:	e5953000 	ldr	r3, [r5]
   10888:	e5d32003 	ldrb	r2, [r3, #3]
   1088c:	e58d4000 	str	r4, [sp]
   10890:	e5d3c002 	ldrb	ip, [r3, #2]
   10894:	e59f0064 	ldr	r0, [pc, #100]	; 10900 <disableRadio+0xac>
   10898:	e3a03002 	mov	r3, #2	; 0x2
   1089c:	e1a01004 	mov	r1, r4
   108a0:	e58dc004 	str	ip, [sp, #4]
   108a4:	eb001157 	bl	14e08 <LCDPrintString>
  
  // send data
  IOCLR1 |= FM_CS;      //Select the FM transmitter
   108a8:	e59f2054 	ldr	r2, [pc, #84]	; 10904 <disableRadio+0xb0>
   108ac:	e592301c 	ldr	r3, [r2, #28]
   108b0:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   108b4:	e582301c 	str	r3, [r2, #28]
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   108b8:	e59f3048 	ldr	r3, [pc, #72]	; 10908 <disableRadio+0xb4>
   108bc:	e1a00000 	nop			(mov r0,r0)
   108c0:	e2844001 	add	r4, r4, #1	; 0x1
   108c4:	e1540003 	cmp	r4, r3
   108c8:	1afffffb 	bne	108bc <disableRadio+0x68>
  LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
  
  // send data
  IOCLR1 |= FM_CS;      //Select the FM transmitter
  delay_ms(100);
  ns73Config();         //Configure the FM Trans. I/O
   108cc:	eb00141f 	bl	15950 <ns73Config>
  ns73Send(R0, MUTE);   // Mute the radio	
   108d0:	e3a00000 	mov	r0, #0	; 0x0
   108d4:	e3a01004 	mov	r1, #4	; 0x4
   108d8:	eb0013a7 	bl	1577c <ns73Send>
  IOSET1 |= FM_CS;      //Unselect the FM transmitter
   108dc:	e59f2020 	ldr	r2, [pc, #32]	; 10904 <disableRadio+0xb0>
   108e0:	e5923014 	ldr	r3, [r2, #20]
   108e4:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   108e8:	e5823014 	str	r3, [r2, #20]
}
   108ec:	e28dd008 	add	sp, sp, #8	; 0x8
   108f0:	e8bd4030 	pop	{r4, r5, lr}
   108f4:	e12fff1e 	bx	lr
   108f8:	40000894 	.word	0x40000894
   108fc:	40000d10 	.word	0x40000d10
   10900:	000190d8 	.word	0x000190d8
   10904:	e0028000 	.word	0xe0028000
   10908:	000f4240 	.word	0x000f4240

0001090c <enableRadio>:
    WDFEED = 0x00;
}

// Enables the radio.
//
void enableRadio(void) {
   1090c:	e92d4010 	push	{r4, lr}
  radio_enable = ON;
   10910:	e59f309c 	ldr	r3, [pc, #156]	; 109b4 <enableRadio+0xa8>
  
  // graphics
  LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10914:	e59f409c 	ldr	r4, [pc, #156]	; 109b8 <enableRadio+0xac>
}

// Enables the radio.
//
void enableRadio(void) {
  radio_enable = ON;
   10918:	e3a02001 	mov	r2, #1	; 0x1
   1091c:	e5c32000 	strb	r2, [r3]
  
  // graphics
  LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10920:	e5942000 	ldr	r2, [r4]
    WDFEED = 0x00;
}

// Enables the radio.
//
void enableRadio(void) {
   10924:	e24dd008 	sub	sp, sp, #8	; 0x8
  radio_enable = ON;
  
  // graphics
  LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10928:	e5d23002 	ldrb	r3, [r2, #2]
   1092c:	e3a00002 	mov	r0, #2	; 0x2
   10930:	e3a01000 	mov	r1, #0	; 0x0
   10934:	e5d22004 	ldrb	r2, [r2, #4]
   10938:	eb001204 	bl	15150 <LCDSetRowColor>
  LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
   1093c:	e5943000 	ldr	r3, [r4]
   10940:	e3a04000 	mov	r4, #0	; 0x0
   10944:	e5d32003 	ldrb	r2, [r3, #3]
   10948:	e58d4000 	str	r4, [sp]
   1094c:	e5d3c002 	ldrb	ip, [r3, #2]
   10950:	e59f0064 	ldr	r0, [pc, #100]	; 109bc <enableRadio+0xb0>
   10954:	e3a03002 	mov	r3, #2	; 0x2
   10958:	e1a01004 	mov	r1, r4
   1095c:	e58dc004 	str	ip, [sp, #4]
   10960:	eb001128 	bl	14e08 <LCDPrintString>
  
  // send data
  IOCLR1 |= FM_CS;        //Select the FM transmitter
   10964:	e59f2054 	ldr	r2, [pc, #84]	; 109c0 <enableRadio+0xb4>
   10968:	e592301c 	ldr	r3, [r2, #28]
   1096c:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   10970:	e582301c 	str	r3, [r2, #28]
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10974:	e59f3048 	ldr	r3, [pc, #72]	; 109c4 <enableRadio+0xb8>
   10978:	e1a00000 	nop			(mov r0,r0)
   1097c:	e2844001 	add	r4, r4, #1	; 0x1
   10980:	e1540003 	cmp	r4, r3
   10984:	1afffffb 	bne	10978 <enableRadio+0x6c>
  LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
  
  // send data
  IOCLR1 |= FM_CS;        //Select the FM transmitter
  delay_ms(100);
  ns73Config();           //Configure the FM Trans. I/O
   10988:	eb0013f0 	bl	15950 <ns73Config>
  ns73Send(R0, PE | AG);  //Power up the radio
   1098c:	e3a00000 	mov	r0, #0	; 0x0
   10990:	e3a01081 	mov	r1, #129	; 0x81
   10994:	eb001378 	bl	1577c <ns73Send>
  IOSET1 |= FM_CS;        //Unselect the FM transmitter
   10998:	e59f2020 	ldr	r2, [pc, #32]	; 109c0 <enableRadio+0xb4>
   1099c:	e5923014 	ldr	r3, [r2, #20]
   109a0:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   109a4:	e5823014 	str	r3, [r2, #20]
}
   109a8:	e28dd008 	add	sp, sp, #8	; 0x8
   109ac:	e8bd4010 	pop	{r4, lr}
   109b0:	e12fff1e 	bx	lr
   109b4:	40000894 	.word	0x40000894
   109b8:	40000d10 	.word	0x40000d10
   109bc:	000190dc 	.word	0x000190dc
   109c0:	e0028000 	.word	0xe0028000
   109c4:	000f4240 	.word	0x000f4240

000109c8 <closeSong>:
}

//Usage: CloseSong(&current_song);
//Inputs: SongStruct *song: Pointer to a song structure to be closed
//Function closes a song that is currently open.
void closeSong(SongStruct *song){
   109c8:	e92d4010 	push	{r4, lr}
	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
   109cc:	e59f4028 	ldr	r4, [pc, #40]	; 109fc <closeSong+0x34>
   109d0:	e5943000 	ldr	r3, [r4]
   109d4:	e3833c15 	orr	r3, r3, #5376	; 0x1500
   109d8:	e5843000 	str	r3, [r4]
	fat16_close_file(song->handle);
   109dc:	e5900034 	ldr	r0, [r0, #52]
   109e0:	eb000ded 	bl	1419c <fat16_close_file>
	PINSEL0 &= 0xFFFFC00F;
   109e4:	e5943000 	ldr	r3, [r4]
   109e8:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   109ec:	e3c33030 	bic	r3, r3, #48	; 0x30
   109f0:	e5843000 	str	r3, [r4]
}
   109f4:	e8bd4010 	pop	{r4, lr}
   109f8:	e12fff1e 	bx	lr
   109fc:	e002c000 	.word	0xe002c000

00010a00 <loadSongInfo>:
//Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
//		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
//The function takes the currently selected file name from the selected_song structure and loads
// the vital file information into the song structure.  The function also opens the song and prepares
// it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is returned.
char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
   10a00:	e92d4070 	push	{r4, r5, r6, lr}
   10a04:	e3a02000 	mov	r2, #0	; 0x0
   10a08:	e1a04000 	mov	r4, r0
	//Get the selected songs file name
	for(int i=0; i<MAXFILENAMELEN; i++){
		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
   10a0c:	e5913008 	ldr	r3, [r1, #8]
   10a10:	e0813283 	add	r3, r1, r3, lsl #5
   10a14:	e0833002 	add	r3, r3, r2
   10a18:	e5d3300c 	ldrb	r3, [r3, #12]
//The function takes the currently selected file name from the selected_song structure and loads
// the vital file information into the song structure.  The function also opens the song and prepares
// it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is returned.
char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
	//Get the selected songs file name
	for(int i=0; i<MAXFILENAMELEN; i++){
   10a1c:	e2822001 	add	r2, r2, #1	; 0x1
   10a20:	e352001e 	cmp	r2, #30	; 0x1e
		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
   10a24:	e5c03016 	strb	r3, [r0, #22]
//The function takes the currently selected file name from the selected_song structure and loads
// the vital file information into the song structure.  The function also opens the song and prepares
// it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is returned.
char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
	//Get the selected songs file name
	for(int i=0; i<MAXFILENAMELEN; i++){
   10a28:	e2800001 	add	r0, r0, #1	; 0x1
   10a2c:	1afffff6 	bne	10a0c <loadSongInfo+0xc>
   10a30:	e3a02000 	mov	r2, #0	; 0x0
		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
	}
	//Get the selected songs display name
	for(int i=0; i<MAXDISPLEN; i++){
		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
			song->name[i]='\0';
   10a34:	e1a01002 	mov	r1, r2
	for(int i=0; i<MAXFILENAMELEN; i++){
		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
	}
	//Get the selected songs display name
	for(int i=0; i<MAXDISPLEN; i++){
		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
   10a38:	e0843002 	add	r3, r4, r2
   10a3c:	e5d33016 	ldrb	r3, [r3, #22]
   10a40:	e3520015 	cmp	r2, #21	; 0x15
   10a44:	1353002e 	cmpne	r3, #46	; 0x2e
			song->name[i]='\0';
   10a48:	07c41002 	strbeq	r1, [r4, r2]
   10a4c:	03a02016 	moveq	r2, #22	; 0x16
			i=MAXDISPLEN;
		}	
		else song->name[i]=song->file_name[i];
   10a50:	17c43002 	strbne	r3, [r4, r2]
	//Get the selected songs file name
	for(int i=0; i<MAXFILENAMELEN; i++){
		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
	}
	//Get the selected songs display name
	for(int i=0; i<MAXDISPLEN; i++){
   10a54:	e2822001 	add	r2, r2, #1	; 0x1
   10a58:	e3520015 	cmp	r2, #21	; 0x15
   10a5c:	dafffff5 	ble	10a38 <loadSongInfo+0x38>
			i=MAXDISPLEN;
		}	
		else song->name[i]=song->file_name[i];
	}
	
	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
   10a60:	e59f606c 	ldr	r6, [pc, #108]	; 10ad4 <loadSongInfo+0xd4>
   10a64:	e5963000 	ldr	r3, [r6]
	//Check to see if the selected song is valid
	if(!root_file_exists(song->file_name)){
   10a68:	e2845016 	add	r5, r4, #22	; 0x16
			i=MAXDISPLEN;
		}	
		else song->name[i]=song->file_name[i];
	}
	
	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
   10a6c:	e3833c15 	orr	r3, r3, #5376	; 0x1500
	//Check to see if the selected song is valid
	if(!root_file_exists(song->file_name)){
   10a70:	e1a00005 	mov	r0, r5
			i=MAXDISPLEN;
		}	
		else song->name[i]=song->file_name[i];
	}
	
	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
   10a74:	e5863000 	str	r3, [r6]
	//Check to see if the selected song is valid
	if(!root_file_exists(song->file_name)){
   10a78:	eb000506 	bl	11e98 <root_file_exists>
   10a7c:	e3500000 	cmp	r0, #0	; 0x0
		PINSEL0 &= 0xFFFFC00F;
   10a80:	05963000 	ldreq	r3, [r6]
   10a84:	03c33dff 	biceq	r3, r3, #16320	; 0x3fc0
   10a88:	03c33030 	biceq	r3, r3, #48	; 0x30
   10a8c:	05863000 	streq	r3, [r6]
   10a90:	0a00000d 	beq	10acc <loadSongInfo+0xcc>
		return 0;
	}	
	//Open the selected song
	else{
		song->handle=root_open(song->file_name);
   10a94:	e1a00005 	mov	r0, r5
   10a98:	eb0005c8 	bl	121c0 <root_open>
   10a9c:	e5840034 	str	r0, [r4, #52]
		song->size=fat16_file_size(song->handle);
   10aa0:	eb000b61 	bl	1382c <fat16_file_size>
		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
   10aa4:	e284103d 	add	r1, r4, #61	; 0x3d
		return 0;
	}	
	//Open the selected song
	else{
		song->handle=root_open(song->file_name);
		song->size=fat16_file_size(song->handle);
   10aa8:	e5840038 	str	r0, [r4, #56]
		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
   10aac:	e3a02020 	mov	r2, #32	; 0x20
   10ab0:	e5940034 	ldr	r0, [r4, #52]
   10ab4:	eb000a79 	bl	134a0 <fat16_read_file>
	}
	
	
	PINSEL0 &= 0xFFFFC00F;
   10ab8:	e5963000 	ldr	r3, [r6]
   10abc:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   10ac0:	e3c33030 	bic	r3, r3, #48	; 0x30
   10ac4:	e5863000 	str	r3, [r6]
   10ac8:	e3a00001 	mov	r0, #1	; 0x1
	return 1;
}
   10acc:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ad0:	e12fff1e 	bx	lr
   10ad4:	e002c000 	.word	0xe002c000

00010ad8 <handleMiddleButton>:
//Description: This function is called when the middle button is pressed.
//  The function performs an action based on the current state of the MP3 player.
//	(1.-If the file menu is displayed, and a song is not being played, the function starts the currently highlighted song.)
//	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently playing song)
//	(3.-If the settings menu is displayed, the function opens the selected setting and allows the user to edit the setting.)
void handleMiddleButton(void){
   10ad8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VICIntEnClr = 0x10;
   10adc:	e3a02010 	mov	r2, #16	; 0x10
   10ae0:	e3e03000 	mvn	r3, #0	; 0x0
   10ae4:	e5032feb 	str	r2, [r3, #-4075]
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10ae8:	e59f2644 	ldr	r2, [pc, #1604]	; 11134 <handleMiddleButton+0x65c>
//Description: This function is called when the middle button is pressed.
//  The function performs an action based on the current state of the MP3 player.
//	(1.-If the file menu is displayed, and a song is not being played, the function starts the currently highlighted song.)
//	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently playing song)
//	(3.-If the settings menu is displayed, the function opens the selected setting and allows the user to edit the setting.)
void handleMiddleButton(void){
   10aec:	e24dd008 	sub	sp, sp, #8	; 0x8
	VICIntEnClr = 0x10;
   10af0:	e2833001 	add	r3, r3, #1	; 0x1
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10af4:	e1a00000 	nop			(mov r0,r0)
   10af8:	e2833001 	add	r3, r3, #1	; 0x1
   10afc:	e1530002 	cmp	r3, r2
   10b00:	1afffffb 	bne	10af4 <handleMiddleButton+0x1c>
void handleMiddleButton(void){
	VICIntEnClr = 0x10;
	delay_ms(250);
	
	//If the File Menu is being displayed, middle button acts like play/stop
	if(current_display == &file_manager){
   10b04:	e59f762c 	ldr	r7, [pc, #1580]	; 11138 <handleMiddleButton+0x660>
   10b08:	e59f362c 	ldr	r3, [pc, #1580]	; 1113c <handleMiddleButton+0x664>
   10b0c:	e5970000 	ldr	r0, [r7]
   10b10:	e1500003 	cmp	r0, r3
   10b14:	e59f6624 	ldr	r6, [pc, #1572]	; 11140 <handleMiddleButton+0x668>
   10b18:	1a00006c 	bne	10cd0 <handleMiddleButton+0x1f8>
		if(!file_is_open){				//If a file isn't already playing then this acts like a play button
   10b1c:	e5d65000 	ldrb	r5, [r6]
   10b20:	e3550000 	cmp	r5, #0	; 0x0
   10b24:	1a000049 	bne	10c50 <handleMiddleButton+0x178>
			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
   10b28:	e1a01000 	mov	r1, r0
   10b2c:	e59f0610 	ldr	r0, [pc, #1552]	; 11144 <handleMiddleButton+0x66c>
   10b30:	ebffffb2 	bl	10a00 <loadSongInfo>
			if(!file_is_open){			//Make sure this is a valid file
   10b34:	e3500000 	cmp	r0, #0	; 0x0
	delay_ms(250);
	
	//If the File Menu is being displayed, middle button acts like play/stop
	if(current_display == &file_manager){
		if(!file_is_open){				//If a file isn't already playing then this acts like a play button
			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
   10b38:	e1a04000 	mov	r4, r0
   10b3c:	e5c60000 	strb	r0, [r6]
			if(!file_is_open){			//Make sure this is a valid file
   10b40:	1a000017 	bne	10ba4 <handleMiddleButton+0xcc>
				LCDClear(white);
   10b44:	e59f35fc 	ldr	r3, [pc, #1532]	; 11148 <handleMiddleButton+0x670>
   10b48:	e5d30000 	ldrb	r0, [r3]
   10b4c:	eb000fef 	bl	14b10 <LCDClear>
				LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
   10b50:	e58d4000 	str	r4, [sp]
   10b54:	e5971000 	ldr	r1, [r7]
   10b58:	e59f35ec 	ldr	r3, [pc, #1516]	; 1114c <handleMiddleButton+0x674>
   10b5c:	e5d1c002 	ldrb	ip, [r1, #2]
   10b60:	e5d32000 	ldrb	r2, [r3]
   10b64:	e59f05e4 	ldr	r0, [pc, #1508]	; 11150 <handleMiddleButton+0x678>
   10b68:	e3a03001 	mov	r3, #1	; 0x1
   10b6c:	e1a01004 	mov	r1, r4
   10b70:	e58dc004 	str	ip, [sp, #4]
   10b74:	eb0010a3 	bl	14e08 <LCDPrintString>
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10b78:	e59f35d4 	ldr	r3, [pc, #1492]	; 11154 <handleMiddleButton+0x67c>
	if(current_display == &file_manager){
		if(!file_is_open){				//If a file isn't already playing then this acts like a play button
			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
			if(!file_is_open){			//Make sure this is a valid file
				LCDClear(white);
				LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
   10b7c:	e1a00004 	mov	r0, r4
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10b80:	e1a00000 	nop			(mov r0,r0)
   10b84:	e2800001 	add	r0, r0, #1	; 0x1
   10b88:	e1500003 	cmp	r0, r3
   10b8c:	1afffffb 	bne	10b80 <handleMiddleButton+0xa8>
			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
			if(!file_is_open){			//Make sure this is a valid file
				LCDClear(white);
				LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
				delay_ms(1000);
				LCDClear(black);
   10b90:	e59f35b4 	ldr	r3, [pc, #1460]	; 1114c <handleMiddleButton+0x674>
   10b94:	e5d30000 	ldrb	r0, [r3]
   10b98:	eb000fdc 	bl	14b10 <LCDClear>
				printMenu(&file_manager);
   10b9c:	e59f0598 	ldr	r0, [pc, #1432]	; 1113c <handleMiddleButton+0x664>
   10ba0:	ea00015b 	b	11114 <handleMiddleButton+0x63c>
			}	
			else{
				vs1002Config();							//Enable the MP3 Comm. Lines
   10ba4:	eb001219 	bl	15410 <vs1002Config>
				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
				vs1002Finish();							//Disable the MP3 Comm. Lines
				ledBlueOn();
   10ba8:	e59f45a8 	ldr	r4, [pc, #1448]	; 11158 <handleMiddleButton+0x680>
				LCDClear(black);
				printMenu(&file_manager);
			}	
			else{
				vs1002Config();							//Enable the MP3 Comm. Lines
				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
   10bac:	e1a00005 	mov	r0, r5
   10bb0:	e3a01b02 	mov	r1, #2048	; 0x800
   10bb4:	eb00125f 	bl	15538 <vs1002SCIWrite>
				vs1002Finish();							//Disable the MP3 Comm. Lines
   10bb8:	eb00121e 	bl	15438 <vs1002Finish>
				ledBlueOn();
   10bbc:	e3a03202 	mov	r3, #536870912	; 0x20000000
   10bc0:	e584300c 	str	r3, [r4, #12]
				//Send first song data
				vs1002Config();										//Enable MP3 Comm. Lines
				while((IOPIN0 & MP3_DREQ) != 0){
					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;	//Buffer more data if available
					else song_is_over=0;									//if there's no more data available, set the flag, else leave it alone
   10bc4:	e1a0a005 	mov	sl, r5
				vs1002Config();							//Enable the MP3 Comm. Lines
				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
				vs1002Finish();							//Disable the MP3 Comm. Lines
				ledBlueOn();
				//Send first song data
				vs1002Config();										//Enable MP3 Comm. Lines
   10bc8:	eb001210 	bl	15410 <vs1002Config>
				while((IOPIN0 & MP3_DREQ) != 0){
					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;	//Buffer more data if available
   10bcc:	e59f8570 	ldr	r8, [pc, #1392]	; 11144 <handleMiddleButton+0x66c>
   10bd0:	e59f6584 	ldr	r6, [pc, #1412]	; 1115c <handleMiddleButton+0x684>
   10bd4:	e3a07001 	mov	r7, #1	; 0x1
   10bd8:	ea000008 	b	10c00 <handleMiddleButton+0x128>
				vs1002Finish();							//Disable the MP3 Comm. Lines
				ledBlueOn();
				//Send first song data
				vs1002Config();										//Enable MP3 Comm. Lines
				while((IOPIN0 & MP3_DREQ) != 0){
					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
   10bdc:	eb001228 	bl	15484 <vs1002SendMusic>
					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;	//Buffer more data if available
   10be0:	e5980034 	ldr	r0, [r8, #52]
   10be4:	e59f1574 	ldr	r1, [pc, #1396]	; 11160 <handleMiddleButton+0x688>
   10be8:	e3a02020 	mov	r2, #32	; 0x20
   10bec:	eb000a2b 	bl	134a0 <fat16_read_file>
   10bf0:	e1a00800 	lsl	r0, r0, #16
   10bf4:	e3500000 	cmp	r0, #0	; 0x0
   10bf8:	d5c67000 	strble	r7, [r6]
					else song_is_over=0;									//if there's no more data available, set the flag, else leave it alone
   10bfc:	c5c6a000 	strbgt	sl, [r6]
				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
				vs1002Finish();							//Disable the MP3 Comm. Lines
				ledBlueOn();
				//Send first song data
				vs1002Config();										//Enable MP3 Comm. Lines
				while((IOPIN0 & MP3_DREQ) != 0){
   10c00:	e5943000 	ldr	r3, [r4]
   10c04:	e3130602 	tst	r3, #2097152	; 0x200000
					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
   10c08:	e59f0550 	ldr	r0, [pc, #1360]	; 11160 <handleMiddleButton+0x688>
   10c0c:	e3a01020 	mov	r1, #32	; 0x20
				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
				vs1002Finish();							//Disable the MP3 Comm. Lines
				ledBlueOn();
				//Send first song data
				vs1002Config();										//Enable MP3 Comm. Lines
				while((IOPIN0 & MP3_DREQ) != 0){
   10c10:	e59f5540 	ldr	r5, [pc, #1344]	; 11158 <handleMiddleButton+0x680>
   10c14:	1afffff0 	bne	10bdc <handleMiddleButton+0x104>
					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;	//Buffer more data if available
					else song_is_over=0;									//if there's no more data available, set the flag, else leave it alone
				}
				vs1002Finish();
   10c18:	eb001206 	bl	15438 <vs1002Finish>
				PINSEL1 |= 0x00000C00;						
   10c1c:	e59f2540 	ldr	r2, [pc, #1344]	; 11164 <handleMiddleButton+0x68c>
   10c20:	e5923004 	ldr	r3, [r2, #4]
   10c24:	e3833b03 	orr	r3, r3, #3072	; 0xc00
   10c28:	e5823004 	str	r3, [r2, #4]
				VICIntEnable |= 0x20;		//Enable Timer 1 Interrupts(This is the "Song Sending" interrupt).
   10c2c:	e3e02000 	mvn	r2, #0	; 0x0
   10c30:	e5123fef 	ldr	r3, [r2, #-4079]
   10c34:	e3833020 	orr	r3, r3, #32	; 0x20
   10c38:	e5023fef 	str	r3, [r2, #-4079]
				IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);		//Assign LCD pins as Outputs
   10c3c:	e5953008 	ldr	r3, [r5, #8]
   10c40:	e3833703 	orr	r3, r3, #786432	; 0xc0000
   10c44:	e3833050 	orr	r3, r3, #80	; 0x50
   10c48:	e5853008 	str	r3, [r5, #8]
   10c4c:	ea000131 	b	11118 <handleMiddleButton+0x640>
			}
		}	
		else{							//If a file is already open then this acts like a stop button
			VICIntEnClr = 0x20;											//Disable Time 0 Interrupts(Stop the "Song Sending" interrupt)
   10c50:	e3a02020 	mov	r2, #32	; 0x20
   10c54:	e3e03000 	mvn	r3, #0	; 0x0
   10c58:	e5032feb 	str	r2, [r3, #-4075]
			ledBlueOff();
   10c5c:	e59f34f4 	ldr	r3, [pc, #1268]	; 11158 <handleMiddleButton+0x680>
   10c60:	e3a02202 	mov	r2, #536870912	; 0x20000000
   10c64:	e5832004 	str	r2, [r3, #4]
			vs1002Config();												//Enable the MP3 Comm Lines
   10c68:	eb0011e8 	bl	15410 <vs1002Config>
			vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);						//Tell the MP3 Player to jump out of WAV decoding
   10c6c:	e3a00000 	mov	r0, #0	; 0x0
   10c70:	e3a01008 	mov	r1, #8	; 0x8
   10c74:	eb00122f 	bl	15538 <vs1002SCIWrite>
   10c78:	e3a04000 	mov	r4, #0	; 0x0
			for(int i=0; i<150; i++)vs1002SCIWrite(SCI_MODE, 0x00);	//Send 150 zeroes to the player to clear it's FIFO.
   10c7c:	e3a00000 	mov	r0, #0	; 0x0
   10c80:	e2844001 	add	r4, r4, #1	; 0x1
   10c84:	e1a01000 	mov	r1, r0
   10c88:	eb00122a 	bl	15538 <vs1002SCIWrite>
   10c8c:	e3540096 	cmp	r4, #150	; 0x96
   10c90:	1afffff9 	bne	10c7c <handleMiddleButton+0x1a4>
			vs1002Finish();												//Disable the MP3 Comm. Lines
   10c94:	eb0011e7 	bl	15438 <vs1002Finish>
			IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);			//Assign LCD pins as Outputs
   10c98:	e59f24b8 	ldr	r2, [pc, #1208]	; 11158 <handleMiddleButton+0x680>
   10c9c:	e5923008 	ldr	r3, [r2, #8]
   10ca0:	e3833703 	orr	r3, r3, #786432	; 0xc0000
   10ca4:	e3833050 	orr	r3, r3, #80	; 0x50
   10ca8:	e5823008 	str	r3, [r2, #8]
			closeSong(&current_song);									//Close the current song
   10cac:	e59f0490 	ldr	r0, [pc, #1168]	; 11144 <handleMiddleButton+0x66c>
   10cb0:	ebffff44 	bl	109c8 <closeSong>
			file_is_open=0;												//Clear the global flag
   10cb4:	e59f3484 	ldr	r3, [pc, #1156]	; 11140 <handleMiddleButton+0x668>
   10cb8:	e3a02000 	mov	r2, #0	; 0x0
   10cbc:	e5c32000 	strb	r2, [r3]
			VICIntEnable = 0x10;
   10cc0:	e2822010 	add	r2, r2, #16	; 0x10
   10cc4:	e3e03000 	mvn	r3, #0	; 0x0
   10cc8:	e5032fef 	str	r2, [r3, #-4079]
   10ccc:	ea000111 	b	11118 <handleMiddleButton+0x640>
		}
	}
	
	//Else we are on the Settings menu, and we need to handle the settins options
	else{
		if(file_is_open)quickClear(current_display);
   10cd0:	e5d63000 	ldrb	r3, [r6]
   10cd4:	e3530000 	cmp	r3, #0	; 0x0
   10cd8:	0a000001 	beq	10ce4 <handleMiddleButton+0x20c>
   10cdc:	ebfffe03 	bl	104f0 <quickClear>
   10ce0:	ea000002 	b	10cf0 <handleMiddleButton+0x218>
		else LCDClear(settings_menu.back_color);
   10ce4:	e59f347c 	ldr	r3, [pc, #1148]	; 11168 <handleMiddleButton+0x690>
   10ce8:	e5d30004 	ldrb	r0, [r3, #4]
   10cec:	eb000f87 	bl	14b10 <LCDClear>
		LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_display->text_color,1,0,current_display->orientation);
   10cf0:	e59f8440 	ldr	r8, [pc, #1088]	; 11138 <handleMiddleButton+0x660>
   10cf4:	e5983000 	ldr	r3, [r8]
   10cf8:	e3a07000 	mov	r7, #0	; 0x0
   10cfc:	e5930008 	ldr	r0, [r3, #8]
   10d00:	e5d32003 	ldrb	r2, [r3, #3]
   10d04:	e58d7000 	str	r7, [sp]
   10d08:	e0830280 	add	r0, r3, r0, lsl #5
   10d0c:	e5d3c002 	ldrb	ip, [r3, #2]
		VICIntEnable|=0x10;
   10d10:	e3e06000 	mvn	r6, #0	; 0x0
	
	//Else we are on the Settings menu, and we need to handle the settins options
	else{
		if(file_is_open)quickClear(current_display);
		else LCDClear(settings_menu.back_color);
		LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_display->text_color,1,0,current_display->orientation);
   10d14:	e3a03001 	mov	r3, #1	; 0x1
   10d18:	e280000c 	add	r0, r0, #12	; 0xc
   10d1c:	e1a01007 	mov	r1, r7
   10d20:	e58dc004 	str	ip, [sp, #4]
   10d24:	eb001037 	bl	14e08 <LCDPrintString>
		VICIntEnable|=0x10;
   10d28:	e5163fef 	ldr	r3, [r6, #-4079]
   10d2c:	e3833010 	orr	r3, r3, #16	; 0x10
   10d30:	e5063fef 	str	r3, [r6, #-4079]
		if(current_display->current_row==VOLUMEMENU){
   10d34:	e5982000 	ldr	r2, [r8]
   10d38:	e5d24000 	ldrb	r4, [r2]
   10d3c:	e3540001 	cmp	r4, #1	; 0x1
   10d40:	1a000055 	bne	10e9c <handleMiddleButton+0x3c4>
			VICIntEnable |= 0x10;
   10d44:	e5163fef 	ldr	r3, [r6, #-4079]
   10d48:	e3833010 	orr	r3, r3, #16	; 0x10
   10d4c:	e5063fef 	str	r3, [r6, #-4079]
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10d50:	e3a00002 	mov	r0, #2	; 0x2
   10d54:	e5d23002 	ldrb	r3, [r2, #2]
   10d58:	e1a01007 	mov	r1, r7
   10d5c:	e5d22004 	ldrb	r2, [r2, #4]
   10d60:	eb0010fa 	bl	15150 <LCDSetRowColor>
			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
   10d64:	e58d7000 	str	r7, [sp]
   10d68:	e5983000 	ldr	r3, [r8]
   10d6c:	e59f53d4 	ldr	r5, [pc, #980]	; 11148 <handleMiddleButton+0x670>
   10d70:	e59f43f4 	ldr	r4, [pc, #1012]	; 1116c <handleMiddleButton+0x694>
   10d74:	e5d3c002 	ldrb	ip, [r3, #2]
   10d78:	e5d52000 	ldrb	r2, [r5]
   10d7c:	e5941000 	ldr	r1, [r4]
   10d80:	e59f03e8 	ldr	r0, [pc, #1000]	; 11170 <handleMiddleButton+0x698>
   10d84:	e3a03002 	mov	r3, #2	; 0x2
   10d88:	e58dc004 	str	ip, [sp, #4]
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;				//Stop Interrupts to
   10d8c:	e1a0a006 	mov	sl, r6
						vs1002Config();			//Enable the MP3 Comm. Lines
						vs1002SetVolume(DECREASE);	//Lower the volume
						vs1002Finish();			//Disable MP3 Comm. Lines
					}
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
   10d90:	e1a0b005 	mov	fp, r5
						volume_setting--;
						vs1002Config();			//Enable the MP3 Comm. Lines
						vs1002SetVolume(DECREASE);	//Lower the volume
						vs1002Finish();			//Disable MP3 Comm. Lines
					}
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10d94:	e1a06008 	mov	r6, r8
		LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_display->text_color,1,0,current_display->orientation);
		VICIntEnable|=0x10;
		if(current_display->current_row==VOLUMEMENU){
			VICIntEnable |= 0x10;
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
   10d98:	eb00101a 	bl	14e08 <LCDPrintString>
			while(button_pressed < MID_BUT){
   10d9c:	e59f53d0 	ldr	r5, [pc, #976]	; 11174 <handleMiddleButton+0x69c>
				VICIntEnClr = 0x10;				//Stop Interrupts to
   10da0:	e3a09010 	mov	r9, #16	; 0x10
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10da4:	e59f83cc 	ldr	r8, [pc, #972]	; 11178 <handleMiddleButton+0x6a0>
   10da8:	ea000037 	b	10e8c <handleMiddleButton+0x3b4>
		if(current_display->current_row==VOLUMEMENU){
			VICIntEnable |= 0x10;
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;				//Stop Interrupts to
   10dac:	e50a9feb 	str	r9, [sl, #-4075]
   10db0:	e3a03000 	mov	r3, #0	; 0x0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10db4:	e1a00000 	nop			(mov r0,r0)
   10db8:	e2833001 	add	r3, r3, #1	; 0x1
   10dbc:	e1530008 	cmp	r3, r8
   10dc0:	1afffffb 	bne	10db4 <handleMiddleButton+0x2dc>
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;				//Stop Interrupts to
				delay_ms(150);					//	debounce the switch					
				if(button_pressed==UP_BUT){
   10dc4:	e3520002 	cmp	r2, #2	; 0x2
   10dc8:	1a000012 	bne	10e18 <handleMiddleButton+0x340>
					if(volume_setting < 32){
   10dcc:	e5943000 	ldr	r3, [r4]
   10dd0:	e353001f 	cmp	r3, #31	; 0x1f
   10dd4:	ca000005 	bgt	10df0 <handleMiddleButton+0x318>
						volume_setting+=1;
   10dd8:	e2833001 	add	r3, r3, #1	; 0x1
   10ddc:	e5843000 	str	r3, [r4]
						vs1002Config();				//Enable the MP3 Comm. Lines
   10de0:	eb00118a 	bl	15410 <vs1002Config>
						vs1002SetVolume(INCREASE);	//Lower the volume
   10de4:	e3a00031 	mov	r0, #49	; 0x31
   10de8:	eb00120e 	bl	15628 <vs1002SetVolume>
						vs1002Finish();				//Disable MP3 Comm. Lines
   10dec:	eb001191 	bl	15438 <vs1002Finish>
					}	
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10df0:	e5962000 	ldr	r2, [r6]
   10df4:	e3a00002 	mov	r0, #2	; 0x2
   10df8:	e5d23002 	ldrb	r3, [r2, #2]
   10dfc:	e3a01000 	mov	r1, #0	; 0x0
   10e00:	e5d22004 	ldrb	r2, [r2, #4]
   10e04:	eb0010d1 	bl	15150 <LCDSetRowColor>
					LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientation);
   10e08:	e5963000 	ldr	r3, [r6]
   10e0c:	e5d32003 	ldrb	r2, [r3, #3]
   10e10:	e58d7000 	str	r7, [sp]
   10e14:	ea000013 	b	10e68 <handleMiddleButton+0x390>
				}
				else if(button_pressed==DWN_BUT){
   10e18:	e3520001 	cmp	r2, #1	; 0x1
   10e1c:	1a000017 	bne	10e80 <handleMiddleButton+0x3a8>
					if(volume_setting >= 0){
   10e20:	e5943000 	ldr	r3, [r4]
   10e24:	e3530000 	cmp	r3, #0	; 0x0
   10e28:	ba000005 	blt	10e44 <handleMiddleButton+0x36c>
						volume_setting--;
   10e2c:	e2433001 	sub	r3, r3, #1	; 0x1
   10e30:	e5843000 	str	r3, [r4]
						vs1002Config();			//Enable the MP3 Comm. Lines
   10e34:	eb001175 	bl	15410 <vs1002Config>
						vs1002SetVolume(DECREASE);	//Lower the volume
   10e38:	e3a00030 	mov	r0, #48	; 0x30
   10e3c:	eb0011f9 	bl	15628 <vs1002SetVolume>
						vs1002Finish();			//Disable MP3 Comm. Lines
   10e40:	eb00117c 	bl	15438 <vs1002Finish>
					}
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10e44:	e5962000 	ldr	r2, [r6]
   10e48:	e3a00002 	mov	r0, #2	; 0x2
   10e4c:	e5d23002 	ldrb	r3, [r2, #2]
   10e50:	e3a01000 	mov	r1, #0	; 0x0
   10e54:	e5d22004 	ldrb	r2, [r2, #4]
   10e58:	eb0010bc 	bl	15150 <LCDSetRowColor>
					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
   10e5c:	e58d7000 	str	r7, [sp]
   10e60:	e5963000 	ldr	r3, [r6]
   10e64:	e5db2000 	ldrb	r2, [fp]
   10e68:	e5d3c002 	ldrb	ip, [r3, #2]
   10e6c:	e5941000 	ldr	r1, [r4]
   10e70:	e59f02f8 	ldr	r0, [pc, #760]	; 11170 <handleMiddleButton+0x698>
   10e74:	e3a03002 	mov	r3, #2	; 0x2
   10e78:	e58dc004 	str	ip, [sp, #4]
   10e7c:	eb000fe1 	bl	14e08 <LCDPrintString>
				}
				VICIntEnable |= 0x10;
   10e80:	e51a3fef 	ldr	r3, [sl, #-4079]
   10e84:	e3833010 	orr	r3, r3, #16	; 0x10
   10e88:	e50a3fef 	str	r3, [sl, #-4079]
		VICIntEnable|=0x10;
		if(current_display->current_row==VOLUMEMENU){
			VICIntEnable |= 0x10;
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
			while(button_pressed < MID_BUT){
   10e8c:	e5d52000 	ldrb	r2, [r5]
   10e90:	e3520002 	cmp	r2, #2	; 0x2
   10e94:	9affffc4 	bls	10dac <handleMiddleButton+0x2d4>
   10e98:	ea000090 	b	110e0 <handleMiddleButton+0x608>
					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
				}
				VICIntEnable |= 0x10;
			}
		}	
		else if(current_display->current_row==RADIOCMENU){
   10e9c:	e3540003 	cmp	r4, #3	; 0x3
   10ea0:	1a00005f 	bne	11024 <handleMiddleButton+0x54c>
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10ea4:	e5d23002 	ldrb	r3, [r2, #2]
   10ea8:	e1a01007 	mov	r1, r7
   10eac:	e3a00002 	mov	r0, #2	; 0x2
   10eb0:	e5d22004 	ldrb	r2, [r2, #4]
   10eb4:	eb0010a5 	bl	15150 <LCDSetRowColor>
			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
   10eb8:	e58d7000 	str	r7, [sp]
   10ebc:	e5983000 	ldr	r3, [r8]
   10ec0:	e59f5280 	ldr	r5, [pc, #640]	; 11148 <handleMiddleButton+0x670>
   10ec4:	e59f42b0 	ldr	r4, [pc, #688]	; 1117c <handleMiddleButton+0x6a4>
   10ec8:	e5d3c002 	ldrb	ip, [r3, #2]
   10ecc:	e5d52000 	ldrb	r2, [r5]
   10ed0:	e5941000 	ldr	r1, [r4]
   10ed4:	e3a03002 	mov	r3, #2	; 0x2
   10ed8:	e59f0290 	ldr	r0, [pc, #656]	; 11170 <handleMiddleButton+0x698>
   10edc:	e58dc004 	str	ip, [sp, #4]
   10ee0:	eb000fc8 	bl	14e08 <LCDPrintString>
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
   10ee4:	e5163fef 	ldr	r3, [r6, #-4079]
			}
		}	
		else if(current_display->current_row==RADIOCMENU){
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
			button_pressed=NO_BUT;
   10ee8:	e59f2284 	ldr	r2, [pc, #644]	; 11174 <handleMiddleButton+0x69c>
			VICIntEnable |= 0x10;
   10eec:	e3833010 	orr	r3, r3, #16	; 0x10
			}
		}	
		else if(current_display->current_row==RADIOCMENU){
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
			button_pressed=NO_BUT;
   10ef0:	e5c27000 	strb	r7, [r2]
			VICIntEnable |= 0x10;
			while(button_pressed < MID_BUT){
   10ef4:	e1a0b002 	mov	fp, r2
		}	
		else if(current_display->current_row==RADIOCMENU){
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
   10ef8:	e5063fef 	str	r3, [r6, #-4079]
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;	//Stop Interrupts to
   10efc:	e1a07006 	mov	r7, r6
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10f00:	e59f9278 	ldr	r9, [pc, #632]	; 11180 <handleMiddleButton+0x6a8>
					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
				}
				else if(button_pressed==DWN_BUT){
					//Decrease Radio Channel
					if(radio_channel > 885)radio_channel-=2;
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10f04:	e1a06008 	mov	r6, r8
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
				}
				else if(button_pressed==DWN_BUT){
					//Decrease Radio Channel
					if(radio_channel > 885)radio_channel-=2;
   10f08:	e59fa274 	ldr	sl, [pc, #628]	; 11184 <handleMiddleButton+0x6ac>
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;	//Stop Interrupts to
				delay_ms(100);		//	debounce the switch					
				if(button_pressed==UP_BUT){
					//Increase Radio Channel
					if(radio_channel < 1075)radio_channel+=2;
   10f0c:	e59f8274 	ldr	r8, [pc, #628]	; 11188 <handleMiddleButton+0x6b0>
   10f10:	ea00002d 	b	10fcc <handleMiddleButton+0x4f4>
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;	//Stop Interrupts to
   10f14:	e3a03010 	mov	r3, #16	; 0x10
   10f18:	e5073feb 	str	r3, [r7, #-4075]
   10f1c:	e3a03000 	mov	r3, #0	; 0x0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10f20:	e1a00000 	nop			(mov r0,r0)
   10f24:	e2833001 	add	r3, r3, #1	; 0x1
   10f28:	e1530009 	cmp	r3, r9
   10f2c:	1afffffb 	bne	10f20 <handleMiddleButton+0x448>
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;	//Stop Interrupts to
				delay_ms(100);		//	debounce the switch					
				if(button_pressed==UP_BUT){
   10f30:	e3520002 	cmp	r2, #2	; 0x2
   10f34:	1a000009 	bne	10f60 <handleMiddleButton+0x488>
					//Increase Radio Channel
					if(radio_channel < 1075)radio_channel+=2;
   10f38:	e5943000 	ldr	r3, [r4]
   10f3c:	e1530008 	cmp	r3, r8
   10f40:	d2833002 	addle	r3, r3, #2	; 0x2
   10f44:	d5843000 	strle	r3, [r4]
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10f48:	e5962000 	ldr	r2, [r6]
   10f4c:	e3a00002 	mov	r0, #2	; 0x2
   10f50:	e5d23002 	ldrb	r3, [r2, #2]
   10f54:	e3a01000 	mov	r1, #0	; 0x0
   10f58:	e5d22004 	ldrb	r2, [r2, #4]
   10f5c:	ea00000a 	b	10f8c <handleMiddleButton+0x4b4>
					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
				}
				else if(button_pressed==DWN_BUT){
   10f60:	e3520001 	cmp	r2, #1	; 0x1
   10f64:	1a000013 	bne	10fb8 <handleMiddleButton+0x4e0>
					//Decrease Radio Channel
					if(radio_channel > 885)radio_channel-=2;
   10f68:	e5943000 	ldr	r3, [r4]
   10f6c:	e153000a 	cmp	r3, sl
   10f70:	c2433002 	subgt	r3, r3, #2	; 0x2
   10f74:	c5843000 	strgt	r3, [r4]
					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   10f78:	e5962000 	ldr	r2, [r6]
   10f7c:	e5d23002 	ldrb	r3, [r2, #2]
   10f80:	e5d22004 	ldrb	r2, [r2, #4]
   10f84:	e3a00002 	mov	r0, #2	; 0x2
   10f88:	e3a01000 	mov	r1, #0	; 0x0
   10f8c:	eb00106f 	bl	15150 <LCDSetRowColor>
					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
   10f90:	e3a03000 	mov	r3, #0	; 0x0
   10f94:	e58d3000 	str	r3, [sp]
   10f98:	e5963000 	ldr	r3, [r6]
   10f9c:	e5d3c002 	ldrb	ip, [r3, #2]
   10fa0:	e5d52000 	ldrb	r2, [r5]
   10fa4:	e5941000 	ldr	r1, [r4]
   10fa8:	e59f01c0 	ldr	r0, [pc, #448]	; 11170 <handleMiddleButton+0x698>
   10fac:	e3a03002 	mov	r3, #2	; 0x2
   10fb0:	e58dc004 	str	ip, [sp, #4]
   10fb4:	eb000f93 	bl	14e08 <LCDPrintString>
				}
				ns73SetChannel(radio_channel);
   10fb8:	e5940000 	ldr	r0, [r4]
   10fbc:	eb001231 	bl	15888 <ns73SetChannel>
				VICIntEnable |= 0x10;
   10fc0:	e5173fef 	ldr	r3, [r7, #-4079]
   10fc4:	e3833010 	orr	r3, r3, #16	; 0x10
   10fc8:	e5073fef 	str	r3, [r7, #-4079]
		else if(current_display->current_row==RADIOCMENU){
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
			while(button_pressed < MID_BUT){
   10fcc:	e5db2000 	ldrb	r2, [fp]
   10fd0:	e3520002 	cmp	r2, #2	; 0x2
   10fd4:	9affffce 	bls	10f14 <handleMiddleButton+0x43c>
					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
				}
				ns73SetChannel(radio_channel);
				VICIntEnable |= 0x10;
			}
			IOCLR1 |= FM_CS;				//Select the FM transmitter
   10fd8:	e59f2178 	ldr	r2, [pc, #376]	; 11158 <handleMiddleButton+0x680>
   10fdc:	e592301c 	ldr	r3, [r2, #28]
   10fe0:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   10fe4:	e582301c 	str	r3, [r2, #28]
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10fe8:	e59f2190 	ldr	r2, [pc, #400]	; 11180 <handleMiddleButton+0x6a8>
					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
				}
				ns73SetChannel(radio_channel);
				VICIntEnable |= 0x10;
			}
			IOCLR1 |= FM_CS;				//Select the FM transmitter
   10fec:	e3a03000 	mov	r3, #0	; 0x0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   10ff0:	e1a00000 	nop			(mov r0,r0)
   10ff4:	e2833001 	add	r3, r3, #1	; 0x1
   10ff8:	e1530002 	cmp	r3, r2
   10ffc:	1afffffb 	bne	10ff0 <handleMiddleButton+0x518>
				ns73SetChannel(radio_channel);
				VICIntEnable |= 0x10;
			}
			IOCLR1 |= FM_CS;				//Select the FM transmitter
			delay_ms(100);
			ns73Config();					//Configigure the FM Trans. I/O
   11000:	eb001252 	bl	15950 <ns73Config>
			ns73SetChannel(radio_channel);	//Set the channel	
   11004:	e59f3170 	ldr	r3, [pc, #368]	; 1117c <handleMiddleButton+0x6a4>
   11008:	e5930000 	ldr	r0, [r3]
   1100c:	eb00121d 	bl	15888 <ns73SetChannel>
			IOSET1 |= FM_CS;				//Unselect the FM transmitter
   11010:	e59f2140 	ldr	r2, [pc, #320]	; 11158 <handleMiddleButton+0x680>
   11014:	e5923014 	ldr	r3, [r2, #20]
   11018:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   1101c:	e5823014 	str	r3, [r2, #20]
   11020:	ea00002e 	b	110e0 <handleMiddleButton+0x608>
		}
		else if(current_display->current_row==RADIOPMENU){
   11024:	e3540002 	cmp	r4, #2	; 0x2
   11028:	1a00002c 	bne	110e0 <handleMiddleButton+0x608>
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
   1102c:	e5d23002 	ldrb	r3, [r2, #2]
   11030:	e1a01007 	mov	r1, r7
   11034:	e1a00004 	mov	r0, r4
   11038:	e5d22004 	ldrb	r2, [r2, #4]
   1103c:	eb001043 	bl	15150 <LCDSetRowColor>
			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
   11040:	e59f3144 	ldr	r3, [pc, #324]	; 1118c <handleMiddleButton+0x6b4>
   11044:	e5d31000 	ldrb	r1, [r3]
   11048:	e3510000 	cmp	r1, #0	; 0x0
   1104c:	0a000007 	beq	11070 <handleMiddleButton+0x598>
   11050:	e5983000 	ldr	r3, [r8]
   11054:	e5d32003 	ldrb	r2, [r3, #3]
   11058:	e58d7000 	str	r7, [sp]
   1105c:	e1a01007 	mov	r1, r7
   11060:	e5d3c002 	ldrb	ip, [r3, #2]
   11064:	e59f0124 	ldr	r0, [pc, #292]	; 11190 <handleMiddleButton+0x6b8>
   11068:	e1a03004 	mov	r3, r4
   1106c:	ea000005 	b	11088 <handleMiddleButton+0x5b0>
			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
   11070:	e5983000 	ldr	r3, [r8]
   11074:	e5d32003 	ldrb	r2, [r3, #3]
   11078:	e58d1000 	str	r1, [sp]
   1107c:	e59f0110 	ldr	r0, [pc, #272]	; 11194 <handleMiddleButton+0x6bc>
   11080:	e5d3c002 	ldrb	ip, [r3, #2]
   11084:	e1a03004 	mov	r3, r4
   11088:	e58dc004 	str	ip, [sp, #4]
   1108c:	eb000f5d 	bl	14e08 <LCDPrintString>
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
   11090:	e3e01000 	mvn	r1, #0	; 0x0
   11094:	e5112fef 	ldr	r2, [r1, #-4079]
		}
		else if(current_display->current_row==RADIOPMENU){
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
			button_pressed=NO_BUT;
   11098:	e59f30d4 	ldr	r3, [pc, #212]	; 11174 <handleMiddleButton+0x69c>
			VICIntEnable |= 0x10;
   1109c:	e3822010 	orr	r2, r2, #16	; 0x10
		}
		else if(current_display->current_row==RADIOPMENU){
			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
			button_pressed=NO_BUT;
   110a0:	e3a00000 	mov	r0, #0	; 0x0
   110a4:	e5c30000 	strb	r0, [r3]
			VICIntEnable |= 0x10;
   110a8:	e5012fef 	str	r2, [r1, #-4079]
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;	//Stop Interrupts to
   110ac:	e2800010 	add	r0, r0, #16	; 0x10
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   110b0:	e59f20c8 	ldr	r2, [pc, #200]	; 11180 <handleMiddleButton+0x6a8>
   110b4:	ea000006 	b	110d4 <handleMiddleButton+0x5fc>
   110b8:	e1a00000 	nop			(mov r0,r0)
   110bc:	e2833001 	add	r3, r3, #1	; 0x1
   110c0:	e1530002 	cmp	r3, r2
   110c4:	1afffffb 	bne	110b8 <handleMiddleButton+0x5e0>
          enableRadio();
				}
				else if(button_pressed==DWN_BUT){
          disableRadio();
				}
				VICIntEnable |= 0x10;
   110c8:	e5113fef 	ldr	r3, [r1, #-4079]
   110cc:	e3833010 	orr	r3, r3, #16	; 0x10
   110d0:	e5013fef 	str	r3, [r1, #-4079]
			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
			button_pressed=NO_BUT;
			VICIntEnable |= 0x10;
			while(button_pressed < MID_BUT){
				VICIntEnClr = 0x10;	//Stop Interrupts to
   110d4:	e5010feb 	str	r0, [r1, #-4075]
   110d8:	e3a03000 	mov	r3, #0	; 0x0
   110dc:	eafffff5 	b	110b8 <handleMiddleButton+0x5e0>
          disableRadio();
				}
				VICIntEnable |= 0x10;
			}
		}
		if(file_is_open)quickClear(current_display);
   110e0:	e59f3058 	ldr	r3, [pc, #88]	; 11140 <handleMiddleButton+0x668>
   110e4:	e5d33000 	ldrb	r3, [r3]
   110e8:	e3530000 	cmp	r3, #0	; 0x0
   110ec:	e59f0044 	ldr	r0, [pc, #68]	; 11138 <handleMiddleButton+0x660>
   110f0:	0a000002 	beq	11100 <handleMiddleButton+0x628>
   110f4:	e5900000 	ldr	r0, [r0]
   110f8:	ebfffcfc 	bl	104f0 <quickClear>
   110fc:	ea000002 	b	1110c <handleMiddleButton+0x634>
		else LCDClear(current_display->back_color);
   11100:	e5903000 	ldr	r3, [r0]
   11104:	e5d30004 	ldrb	r0, [r3, #4]
   11108:	eb000e80 	bl	14b10 <LCDClear>
		printMenu(current_display);
   1110c:	e59f3024 	ldr	r3, [pc, #36]	; 11138 <handleMiddleButton+0x660>
   11110:	e5930000 	ldr	r0, [r3]
   11114:	ebfffd28 	bl	105bc <printMenu>
	}
	VICIntEnable |= 0x10;
   11118:	e3e02000 	mvn	r2, #0	; 0x0
   1111c:	e5123fef 	ldr	r3, [r2, #-4079]
   11120:	e3833010 	orr	r3, r3, #16	; 0x10
   11124:	e5023fef 	str	r3, [r2, #-4079]
}
   11128:	e28dd008 	add	sp, sp, #8	; 0x8
   1112c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11130:	e12fff1e 	bx	lr
   11134:	002625a0 	.word	0x002625a0
   11138:	40000d10 	.word	0x40000d10
   1113c:	40000908 	.word	0x40000908
   11140:	40000896 	.word	0x40000896
   11144:	400008a8 	.word	0x400008a8
   11148:	40000f28 	.word	0x40000f28
   1114c:	40000009 	.word	0x40000009
   11150:	00018a12 	.word	0x00018a12
   11154:	00989680 	.word	0x00989680
   11158:	e0028000 	.word	0xe0028000
   1115c:	40000895 	.word	0x40000895
   11160:	400008e5 	.word	0x400008e5
   11164:	e002c000 	.word	0xe002c000
   11168:	40000b0c 	.word	0x40000b0c
   1116c:	40000000 	.word	0x40000000
   11170:	000190df 	.word	0x000190df
   11174:	4000089c 	.word	0x4000089c
   11178:	0016e360 	.word	0x0016e360
   1117c:	40000004 	.word	0x40000004
   11180:	000f4240 	.word	0x000f4240
   11184:	00000375 	.word	0x00000375
   11188:	00000432 	.word	0x00000432
   1118c:	40000894 	.word	0x40000894
   11190:	000190dc 	.word	0x000190dc
   11194:	000190d8 	.word	0x000190d8

00011198 <bootUp>:

// Usage: bootUp();
// Inputs: None
// This function initializes the serial port, the SD card, the I/O pins and the interrupts
void bootUp(void)
{
   11198:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    rprintf_devopen(putc_serial0); //Init rprintf
   1119c:	e59f01b0 	ldr	r0, [pc, #432]	; 11354 <bootUp+0x1bc>
   111a0:	eb000232 	bl	11a70 <rprintf_devopen>
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   111a4:	e59f21ac 	ldr	r2, [pc, #428]	; 11358 <bootUp+0x1c0>
// Usage: bootUp();
// Inputs: None
// This function initializes the serial port, the SD card, the I/O pins and the interrupts
void bootUp(void)
{
    rprintf_devopen(putc_serial0); //Init rprintf
   111a8:	e3a03000 	mov	r3, #0	; 0x0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   111ac:	e1a00000 	nop			(mov r0,r0)
   111b0:	e2833001 	add	r3, r3, #1	; 0x1
   111b4:	e1530002 	cmp	r3, r2
   111b8:	1afffffb 	bne	111ac <bootUp+0x14>
{
    rprintf_devopen(putc_serial0); //Init rprintf
    delay_ms(10); //Delay for power to stablize

    //Bring up SD and FAT
    if(!sd_raw_init())
   111bc:	eb000672 	bl	12b8c <sd_raw_init>
   111c0:	e3500000 	cmp	r0, #0	; 0x0
    {
        rprintf("SD Init Error\n");
   111c4:	059f0190 	ldreq	r0, [pc, #400]	; 1135c <bootUp+0x1c4>
   111c8:	0b00023c 	bleq	11ac0 <rprintf>
    }
    if(openroot())
   111cc:	eb000418 	bl	12234 <openroot>
   111d0:	e3500000 	cmp	r0, #0	; 0x0
    {
        rprintf("SD OpenRoot Error\n");
   111d4:	159f0184 	ldrne	r0, [pc, #388]	; 11360 <bootUp+0x1c8>
   111d8:	1b000238 	blne	11ac0 <rprintf>
    }
     
  //Initialize I/O Ports and Peripherals
  //Setup the MP3 I/O Lines
  IODIR0 |= MP3_XCS;
   111dc:	e59f2180 	ldr	r2, [pc, #384]	; 11364 <bootUp+0x1cc>
   111e0:	e5923008 	ldr	r3, [r2, #8]
   111e4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
   111e8:	e5823008 	str	r3, [r2, #8]
  IODIR0 &= ~MP3_DREQ;
   111ec:	e5923008 	ldr	r3, [r2, #8]
   111f0:	e3c33602 	bic	r3, r3, #2097152	; 0x200000
   111f4:	e5823008 	str	r3, [r2, #8]
  PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
   111f8:	e59f1168 	ldr	r1, [pc, #360]	; 11368 <bootUp+0x1d0>
   111fc:	e5913004 	ldr	r3, [r1, #4]
   11200:	e3833b03 	orr	r3, r3, #3072	; 0xc00
   11204:	e5813004 	str	r3, [r1, #4]
  IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
   11208:	e5923018 	ldr	r3, [r2, #24]
   1120c:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
   11210:	e3833803 	orr	r3, r3, #196608	; 0x30000
   11214:	e5823018 	str	r3, [r2, #24]
  
  //Setupt the FM Trans. Lines
  IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
   11218:	e5923018 	ldr	r3, [r2, #24]
   1121c:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
   11220:	e5823018 	str	r3, [r2, #24]
  IODIR1 |= FM_CS;
   11224:	e5923018 	ldr	r3, [r2, #24]
   11228:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
   1122c:	e5823018 	str	r3, [r2, #24]
  
  //Setup the SD Card I/O Lines
  IODIR0 |= SD_CS;												//SD Card Outputs
   11230:	e5923008 	ldr	r3, [r2, #8]
   11234:	e3833080 	orr	r3, r3, #128	; 0x80
   11238:	e5823008 	str	r3, [r2, #8]
  
  //Setup the Accelerometer I/O Lines
  IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
   1123c:	e5923008 	ldr	r3, [r2, #8]
   11240:	e3833b03 	orr	r3, r3, #3072	; 0xc00
   11244:	e5823008 	str	r3, [r2, #8]
  PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Functions selected
   11248:	e5913000 	ldr	r3, [r1]
   1124c:	e38334cf 	orr	r3, r3, #-822083584	; 0xcf000000
   11250:	e5813000 	str	r3, [r1]
  IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
   11254:	e3a03b03 	mov	r3, #3072	; 0xc00
   11258:	e582300c 	str	r3, [r2, #12]
  
  //Setup the LCD I/O Lines
  IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
   1125c:	e5923008 	ldr	r3, [r2, #8]
   11260:	e3833703 	orr	r3, r3, #786432	; 0xc0000
   11264:	e5823008 	str	r3, [r2, #8]
  
  //Setup the LED Lines										
  IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
   11268:	e5923008 	ldr	r3, [r2, #8]
   1126c:	e3833207 	orr	r3, r3, #1879048192	; 0x70000000
   11270:	e5823008 	str	r3, [r2, #8]
  ledBlueOff();
   11274:	e3a03202 	mov	r3, #536870912	; 0x20000000
   11278:	e5823004 	str	r3, [r2, #4]
  ledRedOff();
   1127c:	e0833003 	add	r3, r3, r3
   11280:	e5823004 	str	r3, [r2, #4]
  ledGrnOff();
   11284:	e283320d 	add	r3, r3, #-805306368	; 0xd0000000
   11288:	e5823004 	str	r3, [r2, #4]
  
  //Setup the Buttons
  IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
   1128c:	e5923018 	ldr	r3, [r2, #24]
   11290:	e3c3360e 	bic	r3, r3, #14680064	; 0xe00000
   11294:	e5823018 	str	r3, [r2, #24]
  
  IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
   11298:	e5923008 	ldr	r3, [r2, #8]
   1129c:	e3c33502 	bic	r3, r3, #8388608	; 0x800000
   112a0:	e5823008 	str	r3, [r2, #8]
  
    //Setupt the Interrupts
  VPBDIV=1;										// Set PCLK equal to the System Clock	
   112a4:	e59f30c0 	ldr	r3, [pc, #192]	; 1136c <bootUp+0x1d4>
   112a8:	e3a02001 	mov	r2, #1	; 0x1
  VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
   112ac:	e3e01000 	mvn	r1, #0	; 0x0
  IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
  
  IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
  
    //Setupt the Interrupts
  VPBDIV=1;										// Set PCLK equal to the System Clock	
   112b0:	e5832100 	str	r2, [r3, #256]
  VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
   112b4:	e3e03030 	mvn	r3, #48	; 0x30
   112b8:	e5013ff3 	str	r3, [r1, #-4083]
    VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Timer 1)
   112bc:	e2833041 	add	r3, r3, #65	; 0x41
   112c0:	e5013fef 	str	r3, [r1, #-4079]
    VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
   112c4:	e2833015 	add	r3, r3, #21	; 0x15
   112c8:	e5013dff 	str	r3, [r1, #-3583]
    VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
   112cc:	e59f309c 	ldr	r3, [pc, #156]	; 11370 <bootUp+0x1d8>
   112d0:	e5013eff 	str	r3, [r1, #-3839]
    VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
   112d4:	e3a03024 	mov	r3, #36	; 0x24
   112d8:	e5013dfb 	str	r3, [r1, #-3579]
    VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
   112dc:	e59f3090 	ldr	r3, [pc, #144]	; 11374 <bootUp+0x1dc>
  
  //Configure Timer0
  T0PR = 300;										//Divide Clock by 300 for 40kHz PS
   112e0:	e59f0090 	ldr	r0, [pc, #144]	; 11378 <bootUp+0x1e0>
  VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
    VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Timer 1)
    VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
    VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
    VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
    VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
   112e4:	e5013efb 	str	r3, [r1, #-3835]
  
  //Configure Timer0
  T0PR = 300;										//Divide Clock by 300 for 40kHz PS
   112e8:	e3a03f4b 	mov	r3, #300	; 0x12c
   112ec:	e580300c 	str	r3, [r0, #12]
  T0TCR |=0X01;									//Enable the clock
   112f0:	e5903004 	ldr	r3, [r0, #4]
   112f4:	e3833001 	orr	r3, r3, #1	; 0x1
   112f8:	e5803004 	str	r3, [r0, #4]
  T0CTCR=0;										  //Timer Mode
   112fc:	e3a0c000 	mov	ip, #0	; 0x0
  T0MCR=0x0003;									//Interrupt and Reset Timer on Match
   11300:	e3a03003 	mov	r3, #3	; 0x3
    VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
  
  //Configure Timer0
  T0PR = 300;										//Divide Clock by 300 for 40kHz PS
  T0TCR |=0X01;									//Enable the clock
  T0CTCR=0;										  //Timer Mode
   11304:	e580c070 	str	ip, [r0, #112]
  T0MCR=0x0003;									//Interrupt and Reset Timer on Match
  T0MR0=1000;										//Interrupt on 40Hz
  
  //Configure Timer1
  T1PR = 200;										//Divide Clock by 200 for ??kHz PS
   11308:	e59f206c 	ldr	r2, [pc, #108]	; 1137c <bootUp+0x1e4>
  
  //Configure Timer0
  T0PR = 300;										//Divide Clock by 300 for 40kHz PS
  T0TCR |=0X01;									//Enable the clock
  T0CTCR=0;										  //Timer Mode
  T0MCR=0x0003;									//Interrupt and Reset Timer on Match
   1130c:	e5803014 	str	r3, [r0, #20]
  T0MR0=1000;										//Interrupt on 40Hz
   11310:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   11314:	e5803018 	str	r3, [r0, #24]
  
  //Configure Timer1
  T1PR = 200;										//Divide Clock by 200 for ??kHz PS
   11318:	e2433e32 	sub	r3, r3, #800	; 0x320
   1131c:	e582300c 	str	r3, [r2, #12]
  T1TCR |=0X01;									//Enable the clock
   11320:	e5923004 	ldr	r3, [r2, #4]
   11324:	e3833001 	orr	r3, r3, #1	; 0x1
   11328:	e5823004 	str	r3, [r2, #4]
  T1CTCR=0;									  	//Timer Mode
  T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
  
  //Setup the SPI Port
  S0SPCCR = 64;                 // SCK = 1 MHz, counter > 8 and even
   1132c:	e59f104c 	ldr	r1, [pc, #76]	; 11380 <bootUp+0x1e8>
  
  //Configure Timer1
  T1PR = 200;										//Divide Clock by 200 for ??kHz PS
  T1TCR |=0X01;									//Enable the clock
  T1CTCR=0;									  	//Timer Mode
  T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
   11330:	e3a03c0a 	mov	r3, #2560	; 0xa00
  T0MR0=1000;										//Interrupt on 40Hz
  
  //Configure Timer1
  T1PR = 200;										//Divide Clock by 200 for ??kHz PS
  T1TCR |=0X01;									//Enable the clock
  T1CTCR=0;									  	//Timer Mode
   11334:	e582c070 	str	ip, [r2, #112]
  T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
   11338:	e5823028 	str	r3, [r2, #40]
  
  //Setup the SPI Port
  S0SPCCR = 64;                 // SCK = 1 MHz, counter > 8 and even
   1133c:	e2433d27 	sub	r3, r3, #2496	; 0x9c0
   11340:	e581300c 	str	r3, [r1, #12]
  S0SPCR  = 0x20;               // Master, no interrupt enable, 8 bits	
   11344:	e3a03020 	mov	r3, #32	; 0x20
   11348:	e5813000 	str	r3, [r1]
}
   1134c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11350:	e12fff1e 	bx	lr
   11354:	00011dcc 	.word	0x00011dcc
   11358:	000186a0 	.word	0x000186a0
   1135c:	000190e2 	.word	0x000190e2
   11360:	000190f1 	.word	0x000190f1
   11364:	e0028000 	.word	0xe0028000
   11368:	e002c000 	.word	0xe002c000
   1136c:	e01fc000 	.word	0xe01fc000
   11370:	000104c4 	.word	0x000104c4
   11374:	00011384 	.word	0x00011384
   11378:	e0004000 	.word	0xe0004000
   1137c:	e0008000 	.word	0xe0008000
   11380:	e0020000 	.word	0xe0020000

00011384 <timer0ISR>:
//Inputs:  None
//Outputs: None
//Function returns the value of the button that is currently being pressed.
// UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
char getButton(void){
	if(!(IOPIN1 & SW_UP)) return UP_BUT;
   11384:	e59f20a8 	ldr	r2, [pc, #168]	; 11434 <timer0ISR+0xb0>
   11388:	e5923010 	ldr	r3, [r2, #16]
   1138c:	e3130502 	tst	r3, #8388608	; 0x800000
//Inputs: None
//This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
// is responsible for determining if a button has been pressed or if the screen has been rotated
// and setting the appropriate global flag if either has occured.
static void timer0ISR(void)
{
   11390:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
//Inputs:  None
//Outputs: None
//Function returns the value of the button that is currently being pressed.
// UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
char getButton(void){
	if(!(IOPIN1 & SW_UP)) return UP_BUT;
   11394:	03a02002 	moveq	r2, #2	; 0x2
   11398:	0a000007 	beq	113bc <timer0ISR+0x38>
	else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
   1139c:	e5923010 	ldr	r3, [r2, #16]
   113a0:	e3130602 	tst	r3, #2097152	; 0x200000
   113a4:	03a02001 	moveq	r2, #1	; 0x1
   113a8:	0a000003 	beq	113bc <timer0ISR+0x38>
	else if(!(IOPIN1 & SW_MID)) return MID_BUT;
   113ac:	e5923010 	ldr	r3, [r2, #16]
   113b0:	e3130501 	tst	r3, #4194304	; 0x400000
   113b4:	03a02003 	moveq	r2, #3	; 0x3
   113b8:	13a02000 	movne	r2, #0	; 0x0
//This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
// is responsible for determining if a button has been pressed or if the screen has been rotated
// and setting the appropriate global flag if either has occured.
static void timer0ISR(void)
{
	button_pressed=getButton();			//Find out if a button has been pressed, and which one
   113bc:	e59f3074 	ldr	r3, [pc, #116]	; 11438 <timer0ISR+0xb4>
   113c0:	e5c32000 	strb	r2, [r3]
	cur_position=MMA_get_y();			//Get the current position of the screen
   113c4:	eb000d6a 	bl	14974 <MMA_get_y>
	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=1; 
   113c8:	e59f306c 	ldr	r3, [pc, #108]	; 1143c <timer0ISR+0xb8>
   113cc:	e5932000 	ldr	r2, [r3]
// is responsible for determining if a button has been pressed or if the screen has been rotated
// and setting the appropriate global flag if either has occured.
static void timer0ISR(void)
{
	button_pressed=getButton();			//Find out if a button has been pressed, and which one
	cur_position=MMA_get_y();			//Get the current position of the screen
   113d0:	e59f3068 	ldr	r3, [pc, #104]	; 11440 <timer0ISR+0xbc>
	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=1; 
   113d4:	e3520faf 	cmp	r2, #700	; 0x2bc
// is responsible for determining if a button has been pressed or if the screen has been rotated
// and setting the appropriate global flag if either has occured.
static void timer0ISR(void)
{
	button_pressed=getButton();			//Find out if a button has been pressed, and which one
	cur_position=MMA_get_y();			//Get the current position of the screen
   113d8:	e5830000 	str	r0, [r3]
	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=1; 
   113dc:	aa000001 	bge	113e8 <timer0ISR+0x64>
   113e0:	e3500faf 	cmp	r0, #700	; 0x2bc
   113e4:	ca000003 	bgt	113f8 <timer0ISR+0x74>
   113e8:	e3520faf 	cmp	r2, #700	; 0x2bc
   113ec:	da000003 	ble	11400 <timer0ISR+0x7c>
   113f0:	e3500faf 	cmp	r0, #700	; 0x2bc
   113f4:	aa000001 	bge	11400 <timer0ISR+0x7c>
   113f8:	e3a02001 	mov	r2, #1	; 0x1
   113fc:	ea000000 	b	11404 <timer0ISR+0x80>
	else update_screen=0;				//Determine if the accelerometer has been rotated
   11400:	e3a02000 	mov	r2, #0	; 0x0
   11404:	e59f3038 	ldr	r3, [pc, #56]	; 11444 <timer0ISR+0xc0>
   11408:	e5c32000 	strb	r2, [r3]
	prev_position=cur_position;			//Save the position value for later reference
	T0IR = 0xFF;						//Clear the timer interrupt
   1140c:	e59f3034 	ldr	r3, [pc, #52]	; 11448 <timer0ISR+0xc4>
   11410:	e3a020ff 	mov	r2, #255	; 0xff
   11414:	e5832000 	str	r2, [r3]
{
	button_pressed=getButton();			//Find out if a button has been pressed, and which one
	cur_position=MMA_get_y();			//Get the current position of the screen
	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=1; 
	else update_screen=0;				//Determine if the accelerometer has been rotated
	prev_position=cur_position;			//Save the position value for later reference
   11418:	e59f301c 	ldr	r3, [pc, #28]	; 1143c <timer0ISR+0xb8>
	T0IR = 0xFF;						//Clear the timer interrupt
	VICVectAddr =0;						//Update the VIC priorities
   1141c:	e3a02000 	mov	r2, #0	; 0x0
{
	button_pressed=getButton();			//Find out if a button has been pressed, and which one
	cur_position=MMA_get_y();			//Get the current position of the screen
	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=1; 
	else update_screen=0;				//Determine if the accelerometer has been rotated
	prev_position=cur_position;			//Save the position value for later reference
   11420:	e5830000 	str	r0, [r3]
	T0IR = 0xFF;						//Clear the timer interrupt
	VICVectAddr =0;						//Update the VIC priorities
   11424:	e3e03000 	mvn	r3, #0	; 0x0
   11428:	e5032fcf 	str	r2, [r3, #-4047]
}
   1142c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11430:	e12fff1e 	bx	lr
   11434:	e0028000 	.word	0xe0028000
   11438:	4000089c 	.word	0x4000089c
   1143c:	400008a0 	.word	0x400008a0
   11440:	400008a4 	.word	0x400008a4
   11444:	4000089d 	.word	0x4000089d
   11448:	e0004000 	.word	0xe0004000

0001144c <main>:
const char radio_power[11]= "Radio Power";
const char radio_channel_menu[13]= "Radio Channel";
const char settings[10]="Settings:";

int main (void)
{
   1144c:	e1a0c00d 	mov	ip, sp
   11450:	e92ddff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
   11454:	e24cb004 	sub	fp, ip, #4	; 0x4
   11458:	e24dd008 	sub	sp, sp, #8	; 0x8

//*******************************************************
//					Main Code
//*******************************************************
  //Initialize ARM I/O
  bootUp();
   1145c:	ebffff4d 	bl	11198 <bootUp>
  
  //Initialize the MP3 player with double clock speed and lower volume
  vs1002Config();			//Configure MP3 I/O
   11460:	eb000fea 	bl	15410 <vs1002Config>
  vs1002Reset();			//Reset MP3 Player
   11464:	eb000ffa 	bl	15454 <vs1002Reset>
  vs1002Init();			//Double the clock speed and set to "New" mode
   11468:	eb00104c 	bl	155a0 <vs1002Init>
  for(char i=0; i<5; i++)vs1002SetVolume(DECREASE);		//Lower the Volume!!
   1146c:	e3a00030 	mov	r0, #48	; 0x30
   11470:	eb00106c 	bl	15628 <vs1002SetVolume>
   11474:	e3a00030 	mov	r0, #48	; 0x30
   11478:	eb00106a 	bl	15628 <vs1002SetVolume>
   1147c:	e3a00030 	mov	r0, #48	; 0x30
   11480:	eb001068 	bl	15628 <vs1002SetVolume>
   11484:	e3a00030 	mov	r0, #48	; 0x30
   11488:	eb001066 	bl	15628 <vs1002SetVolume>
   1148c:	e3a00030 	mov	r0, #48	; 0x30
   11490:	eb001064 	bl	15628 <vs1002SetVolume>
  vs1002Finish();			//Restore the SPI I/O lines
   11494:	eb000fe7 	bl	15438 <vs1002Finish>
  
  //Show the splash-screen (Sparkfun Logo)
  LCDInit();				//Initialize the LCD
   11498:	eb000f62 	bl	15228 <LCDInit>
  LCDClear(white);		//Clear the screen with white
   1149c:	e59f3514 	ldr	r3, [pc, #1300]	; 119b8 <main+0x56c>
   114a0:	e5d30000 	ldrb	r0, [r3]
   114a4:	eb000d99 	bl	14b10 <LCDClear>
  LCDPrintLogo();			//Print the Sparkfun Logo
   114a8:	eb000dd6 	bl	14c08 <LCDPrintLogo>
  
  // Initialize the FM Transmitter to 97.3
  initializeFMTransmitter(973);
   114ac:	e59f0508 	ldr	r0, [pc, #1288]	; 119bc <main+0x570>
   114b0:	ebfffbc7 	bl	103d4 <initializeFMTransmitter>

  // Find Out how many files are on the SD card
  PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
   114b4:	e59f2504 	ldr	r2, [pc, #1284]	; 119c0 <main+0x574>
   114b8:	e5923000 	ldr	r3, [r2]
   114bc:	e3833c15 	orr	r3, r3, #5376	; 0x1500
   114c0:	e5823000 	str	r3, [r2]
   114c4:	e3a05000 	mov	r5, #0	; 0x0
  do{
  	numberOfChars++;
  }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filenames on the SD card
   114c8:	e3a00000 	mov	r0, #0	; 0x0
   114cc:	eb0002d3 	bl	12020 <rootDirectory_files_stream>
   114d0:	e2506000 	subs	r6, r0, #0	; 0x0
  initializeFMTransmitter(973);

  // Find Out how many files are on the SD card
  PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
  do{
  	numberOfChars++;
   114d4:	e2855001 	add	r5, r5, #1	; 0x1
  }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filenames on the SD card
   114d8:	1afffffa 	bne	114c8 <main+0x7c>
  char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD card, seperated by '\0'
   114dc:	e2853006 	add	r3, r5, #6	; 0x6
   114e0:	e3c33003 	bic	r3, r3, #3	; 0x3
   114e4:	e063d00d 	rsb	sp, r3, sp
   114e8:	e28d7008 	add	r7, sp, #8	; 0x8
  NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
   114ec:	e1a00007 	mov	r0, r7
   114f0:	e2851001 	add	r1, r5, #1	; 0x1
   114f4:	eb00029d 	bl	11f70 <rootDirectory_files>
  FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
   114f8:	e1a03280 	lsl	r3, r0, #5
   114fc:	e2833004 	add	r3, r3, #4	; 0x4
   11500:	e063d00d 	rsb	sp, r3, sp
  PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
  do{
  	numberOfChars++;
  }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filenames on the SD card
  char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD card, seperated by '\0'
  NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
   11504:	e59f34b8 	ldr	r3, [pc, #1208]	; 119c4 <main+0x578>
   11508:	e1a04000 	mov	r4, r0
  FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
  
  //Get all of the filenames into a Global Array
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
   1150c:	e1a00006 	mov	r0, r6
  PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the card
  do{
  	numberOfChars++;
  }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filenames on the SD card
  char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD card, seperated by '\0'
  NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
   11510:	e5834000 	str	r4, [r3]
  FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
   11514:	e28d6008 	add	r6, sp, #8	; 0x8
  
  //Get all of the filenames into a Global Array
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
   11518:	e1a0e000 	mov	lr, r0
   1151c:	e1a08000 	mov	r8, r0
   11520:	ea000010 	b	11568 <main+0x11c>
   11524:	e3a03000 	mov	r3, #0	; 0x0
  				i=MAXFILENAMELEN+1;
  			}
  			else Files[j].file_name[i] = tempNames[chartracker];
  			chartracker++;
  		}
  		else Files[j].file_name[i] ='\0';
   11528:	e1a0c28e 	lsl	ip, lr, #5
  
  //Get all of the filenames into a Global Array
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
  	for(int i=0; i<=MAXFILENAMELEN+1; i++){
  		if(chartracker <= numberOfChars){
   1152c:	e1500005 	cmp	r0, r5
  				i=MAXFILENAMELEN+1;
  			}
  			else Files[j].file_name[i] = tempNames[chartracker];
  			chartracker++;
  		}
  		else Files[j].file_name[i] ='\0';
   11530:	e08c2003 	add	r2, ip, r3
   11534:	87c68002 	strbhi	r8, [r6, r2]
  
  //Get all of the filenames into a Global Array
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
  	for(int i=0; i<=MAXFILENAMELEN+1; i++){
  		if(chartracker <= numberOfChars){
   11538:	8a000006 	bhi	11558 <main+0x10c>
  			if(tempNames[chartracker]==','){
   1153c:	e7d71000 	ldrb	r1, [r7, r0]
   11540:	e351002c 	cmp	r1, #44	; 0x2c
  				Files[j].file_name[i] = '\0';
   11544:	01a03002 	moveq	r3, r2
  				i=MAXFILENAMELEN+1;
  			}
  			else Files[j].file_name[i] = tempNames[chartracker];
   11548:	17c61002 	strbne	r1, [r6, r2]
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
  	for(int i=0; i<=MAXFILENAMELEN+1; i++){
  		if(chartracker <= numberOfChars){
  			if(tempNames[chartracker]==','){
  				Files[j].file_name[i] = '\0';
   1154c:	07c68003 	strbeq	r8, [r6, r3]
  				i=MAXFILENAMELEN+1;
  			}
  			else Files[j].file_name[i] = tempNames[chartracker];
  			chartracker++;
   11550:	e2800001 	add	r0, r0, #1	; 0x1
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
  	for(int i=0; i<=MAXFILENAMELEN+1; i++){
  		if(chartracker <= numberOfChars){
  			if(tempNames[chartracker]==','){
  				Files[j].file_name[i] = '\0';
   11554:	03a0301f 	moveq	r3, #31	; 0x1f
  FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
  
  //Get all of the filenames into a Global Array
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
  	for(int i=0; i<=MAXFILENAMELEN+1; i++){
   11558:	e2833001 	add	r3, r3, #1	; 0x1
   1155c:	e3530020 	cmp	r3, #32	; 0x20
   11560:	1afffff1 	bne	1152c <main+0xe0>
  NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
  FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
  
  //Get all of the filenames into a Global Array
  int chartracker=0;	
  for(int j=0; j<NUMBEROFFILES; j++){
   11564:	e28ee001 	add	lr, lr, #1	; 0x1
   11568:	e15e0004 	cmp	lr, r4
   1156c:	baffffec 	blt	11524 <main+0xd8>
  	}	
  }
	
	
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
   11570:	e1a00004 	mov	r0, r4
   11574:	e3a0100f 	mov	r1, #15	; 0xf
   11578:	eb001c62 	bl	18708 <__aeabi_idiv>
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
   1157c:	e59f3440 	ldr	r3, [pc, #1088]	; 119c4 <main+0x578>
  	}	
  }
	
	
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
   11580:	e20040ff 	and	r4, r0, #255	; 0xff
   11584:	e59f543c 	ldr	r5, [pc, #1084]	; 119c8 <main+0x57c>
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
   11588:	e5930000 	ldr	r0, [r3]
  	}	
  }
	
	
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
   1158c:	e2443001 	sub	r3, r4, #1	; 0x1
   11590:	e5c53005 	strb	r3, [r5, #5]
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
   11594:	e3a0100f 	mov	r1, #15	; 0xf
   11598:	eb001cdd 	bl	18914 <__modsi3>
	
	file_manager.orientation =ORIENTUP;
	file_manager.text_color=white;
   1159c:	e59f3414 	ldr	r3, [pc, #1044]	; 119b8 <main+0x56c>
   115a0:	e5d32000 	ldrb	r2, [r3]
	file_manager.back_color=black;
   115a4:	e59f3420 	ldr	r3, [pc, #1056]	; 119cc <main+0x580>
  }
	
	
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
   115a8:	e3500000 	cmp	r0, #0	; 0x0
   115ac:	15c54005 	strbne	r4, [r5, #5]
	
	file_manager.orientation =ORIENTUP;
	file_manager.text_color=white;
	file_manager.back_color=black;
   115b0:	e5d33000 	ldrb	r3, [r3]
	
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
	
	file_manager.orientation =ORIENTUP;
   115b4:	e59f440c 	ldr	r4, [pc, #1036]	; 119c8 <main+0x57c>
   115b8:	e3a05000 	mov	r5, #0	; 0x0
	file_manager.text_color=white;
	file_manager.back_color=black;
   115bc:	e5c43004 	strb	r3, [r4, #4]
	
	file_manager.current_page=0;
	file_manager.current_row=1;
   115c0:	e3a03001 	mov	r3, #1	; 0x1
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
	
	file_manager.orientation =ORIENTUP;
	file_manager.text_color=white;
   115c4:	e5c42003 	strb	r2, [r4, #3]
	file_manager.back_color=black;
	
	file_manager.current_page=0;
	file_manager.current_row=1;
	file_manager.current_index=0;	
	getNewFiles(&file_manager, &Files[0]);
   115c8:	e1a00004 	mov	r0, r4
   115cc:	e1a01006 	mov	r1, r6
	file_manager.orientation =ORIENTUP;
	file_manager.text_color=white;
	file_manager.back_color=black;
	
	file_manager.current_page=0;
	file_manager.current_row=1;
   115d0:	e5c43000 	strb	r3, [r4]
	
	//Load the file manager with the songs/files on the SD card and set this as the current display
	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
	
	file_manager.orientation =ORIENTUP;
   115d4:	e5c45002 	strb	r5, [r4, #2]
	file_manager.text_color=white;
	file_manager.back_color=black;
	
	file_manager.current_page=0;
   115d8:	e5c45006 	strb	r5, [r4, #6]
	file_manager.current_row=1;
	file_manager.current_index=0;	
   115dc:	e5845008 	str	r5, [r4, #8]
	getNewFiles(&file_manager, &Files[0]);
   115e0:	ebfffb04 	bl	101f8 <getNewFiles>
	for(int i=0; i<MAXDISPLEN; i++)file_manager.title[i]=welcome[i];
   115e4:	e59f23e4 	ldr	r2, [pc, #996]	; 119d0 <main+0x584>
   115e8:	e7d23005 	ldrb	r3, [r2, r5]
   115ec:	e2855001 	add	r5, r5, #1	; 0x1
   115f0:	e3550016 	cmp	r5, #22	; 0x16
   115f4:	e5c431ec 	strb	r3, [r4, #492]
   115f8:	e2844001 	add	r4, r4, #1	; 0x1
   115fc:	1afffff9 	bne	115e8 <main+0x19c>
	
	//Generate the settings menu and fill in default settings values
	fillSettings(&settings_menu);
   11600:	e59f03cc 	ldr	r0, [pc, #972]	; 119d4 <main+0x588>
   11604:	ebfffb34 	bl	102dc <fillSettings>
	
	//Setup the menu
	current_display = &file_manager;
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   11608:	e59f13b0 	ldr	r1, [pc, #944]	; 119c0 <main+0x574>
   1160c:	e5913000 	ldr	r3, [r1]
	
	//Generate the settings menu and fill in default settings values
	fillSettings(&settings_menu);
	
	//Setup the menu
	current_display = &file_manager;
   11610:	e59f23b0 	ldr	r2, [pc, #944]	; 119c8 <main+0x57c>
   11614:	e59f43bc 	ldr	r4, [pc, #956]	; 119d8 <main+0x58c>
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   11618:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   1161c:	e3c33030 	bic	r3, r3, #48	; 0x30
	LCDClear(current_display->back_color);
   11620:	e5d20004 	ldrb	r0, [r2, #4]
	
	//Generate the settings menu and fill in default settings values
	fillSettings(&settings_menu);
	
	//Setup the menu
	current_display = &file_manager;
   11624:	e5842000 	str	r2, [r4]
	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
   11628:	e5813000 	str	r3, [r1]
	LCDClear(current_display->back_color);
   1162c:	eb000d37 	bl	14b10 <LCDClear>
	printMenu(current_display);
   11630:	e5940000 	ldr	r0, [r4]
   11634:	ebfffbe0 	bl	105bc <printMenu>
	
	// TODO Floere remove
	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
   11638:	e5943000 	ldr	r3, [r4]
   1163c:	e3a01000 	mov	r1, #0	; 0x0
   11640:	e5d32003 	ldrb	r2, [r3, #3]
   11644:	e58d1000 	str	r1, [sp]
   11648:	e5d3c002 	ldrb	ip, [r3, #2]
   1164c:	e59f0388 	ldr	r0, [pc, #904]	; 119dc <main+0x590>
   11650:	e3a03002 	mov	r3, #2	; 0x2
   11654:	e58dc004 	str	ip, [sp, #4]
   11658:	eb000dea 	bl	14e08 <LCDPrintString>
	
	while(1){
	  // USB connected!
		if(IOPIN0 & (1<<23))
   1165c:	e59f737c 	ldr	r7, [pc, #892]	; 119e0 <main+0x594>
		{
			LCDClear(white);
   11660:	e59f9350 	ldr	r9, [pc, #848]	; 119b8 <main+0x56c>
			reset();
		}
	
		//Wait for a button to be pressed or for the screen to be rotated.
		//while(!button_pressed && !update_screen){
		if(!button_pressed && !update_screen){
   11664:	e59f8378 	ldr	r8, [pc, #888]	; 119e4 <main+0x598>
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   11668:	e59fa378 	ldr	sl, [pc, #888]	; 119e8 <main+0x59c>
	// TODO Floere remove
	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
	
	while(1){
	  // USB connected!
		if(IOPIN0 & (1<<23))
   1166c:	e5973000 	ldr	r3, [r7]
   11670:	e3130502 	tst	r3, #8388608	; 0x800000
   11674:	0a000021 	beq	11700 <main+0x2b4>
		{
			LCDClear(white);
   11678:	e5d90000 	ldrb	r0, [r9]
   1167c:	eb000d23 	bl	14b10 <LCDClear>
			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
   11680:	e3a03004 	mov	r3, #4	; 0x4
   11684:	e58d3000 	str	r3, [sp]
   11688:	e5943000 	ldr	r3, [r4]
   1168c:	e59f1338 	ldr	r1, [pc, #824]	; 119cc <main+0x580>
   11690:	e5d3c002 	ldrb	ip, [r3, #2]
   11694:	e5d12000 	ldrb	r2, [r1]
   11698:	e3a03007 	mov	r3, #7	; 0x7
   1169c:	e59f0348 	ldr	r0, [pc, #840]	; 119ec <main+0x5a0>
   116a0:	e3a01000 	mov	r1, #0	; 0x0
   116a4:	e58dc004 	str	ip, [sp, #4]
   116a8:	eb000dd6 	bl	14e08 <LCDPrintString>
   116ac:	e3a03000 	mov	r3, #0	; 0x0
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   116b0:	e1a00000 	nop			(mov r0,r0)
   116b4:	e59f2334 	ldr	r2, [pc, #820]	; 119f0 <main+0x5a4>
   116b8:	e2833001 	add	r3, r3, #1	; 0x1
   116bc:	e1530002 	cmp	r3, r2
   116c0:	1afffffa 	bne	116b0 <main+0x264>
		if(IOPIN0 & (1<<23))
		{
			LCDClear(white);
			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
      delay_ms(1000);
			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
   116c4:	e3a02030 	mov	r2, #48	; 0x30
   116c8:	e3e03000 	mvn	r3, #0	; 0x0
   116cc:	e5032feb 	str	r2, [r3, #-4075]
			main_msc();
   116d0:	eb0010b1 	bl	1599c <main_msc>
}

// Intentionally faults Watchdog to trigger a reset condition
//
void reset(void) {
    WDMOD |= 3;
   116d4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
   116d8:	e5923000 	ldr	r3, [r2]
   116dc:	e3833003 	orr	r3, r3, #3	; 0x3
   116e0:	e5823000 	str	r3, [r2]
    WDFEED = 0xAA;
   116e4:	e3a010aa 	mov	r1, #170	; 0xaa
    WDFEED = 0x55;
   116e8:	e3a03055 	mov	r3, #85	; 0x55

// Intentionally faults Watchdog to trigger a reset condition
//
void reset(void) {
    WDMOD |= 3;
    WDFEED = 0xAA;
   116ec:	e5821008 	str	r1, [r2, #8]
    WDFEED = 0x55;
   116f0:	e5823008 	str	r3, [r2, #8]
    WDFEED = 0xAA;
    WDFEED = 0x00;
   116f4:	e3a03000 	mov	r3, #0	; 0x0
//
void reset(void) {
    WDMOD |= 3;
    WDFEED = 0xAA;
    WDFEED = 0x55;
    WDFEED = 0xAA;
   116f8:	e5821008 	str	r1, [r2, #8]
    WDFEED = 0x00;
   116fc:	e5823008 	str	r3, [r2, #8]
			reset();
		}
	
		//Wait for a button to be pressed or for the screen to be rotated.
		//while(!button_pressed && !update_screen){
		if(!button_pressed && !update_screen){
   11700:	e5d83000 	ldrb	r3, [r8]
   11704:	e3530000 	cmp	r3, #0	; 0x0
   11708:	1a000043 	bne	1181c <main+0x3d0>
   1170c:	e59f32e0 	ldr	r3, [pc, #736]	; 119f4 <main+0x5a8>
   11710:	e5d35000 	ldrb	r5, [r3]
   11714:	e3550000 	cmp	r5, #0	; 0x0
   11718:	1a00003f 	bne	1181c <main+0x3d0>
			//If the current song is done playing, start playing the next song if it's available.
			if(song_is_over){
   1171c:	e59f32d4 	ldr	r3, [pc, #724]	; 119f8 <main+0x5ac>
   11720:	e5d33000 	ldrb	r3, [r3]
   11724:	e3530000 	cmp	r3, #0	; 0x0
   11728:	0a00003b 	beq	1181c <main+0x3d0>
				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
   1172c:	e3a02020 	mov	r2, #32	; 0x20
   11730:	e3e03000 	mvn	r3, #0	; 0x0
   11734:	e5032feb 	str	r2, [r3, #-4075]
				closeSong(&current_song);	//Close the current song
   11738:	e59f02bc 	ldr	r0, [pc, #700]	; 119fc <main+0x5b0>
   1173c:	ebfffca1 	bl	109c8 <closeSong>
				file_is_open=0;				//change master flag
				ledBlueOff();
				//Get the next song on the page by changing rows
				if(file_manager.current_row < NUMROWS){
   11740:	e59f1280 	ldr	r1, [pc, #640]	; 119c8 <main+0x57c>
		if(!button_pressed && !update_screen){
			//If the current song is done playing, start playing the next song if it's available.
			if(song_is_over){
				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
				closeSong(&current_song);	//Close the current song
				file_is_open=0;				//change master flag
   11744:	e59f32b4 	ldr	r3, [pc, #692]	; 11a00 <main+0x5b4>
				ledBlueOff();
				//Get the next song on the page by changing rows
				if(file_manager.current_row < NUMROWS){
   11748:	e5d12000 	ldrb	r2, [r1]
		if(!button_pressed && !update_screen){
			//If the current song is done playing, start playing the next song if it's available.
			if(song_is_over){
				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
				closeSong(&current_song);	//Close the current song
				file_is_open=0;				//change master flag
   1174c:	e5c35000 	strb	r5, [r3]
				ledBlueOff();
				//Get the next song on the page by changing rows
				if(file_manager.current_row < NUMROWS){
   11750:	e352000e 	cmp	r2, #14	; 0xe
			//If the current song is done playing, start playing the next song if it's available.
			if(song_is_over){
				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
				closeSong(&current_song);	//Close the current song
				file_is_open=0;				//change master flag
				ledBlueOff();
   11754:	e3a03202 	mov	r3, #536870912	; 0x20000000
   11758:	e5873004 	str	r3, [r7, #4]
				//Get the next song on the page by changing rows
				if(file_manager.current_row < NUMROWS){
					file_manager.current_row++;
   1175c:	92822001 	addls	r2, r2, #1	; 0x1
					file_manager.current_index++;
   11760:	95913008 	ldrls	r3, [r1, #8]
				closeSong(&current_song);	//Close the current song
				file_is_open=0;				//change master flag
				ledBlueOff();
				//Get the next song on the page by changing rows
				if(file_manager.current_row < NUMROWS){
					file_manager.current_row++;
   11764:	95c12000 	strbls	r2, [r1]
					file_manager.current_index++;
				}
				//Go to the next page of songs if necessary
				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pages)){
   11768:	e59fc258 	ldr	ip, [pc, #600]	; 119c8 <main+0x57c>
				file_is_open=0;				//change master flag
				ledBlueOff();
				//Get the next song on the page by changing rows
				if(file_manager.current_row < NUMROWS){
					file_manager.current_row++;
					file_manager.current_index++;
   1176c:	92833001 	addls	r3, r3, #1	; 0x1
   11770:	95813008 	strls	r3, [r1, #8]
				}
				//Go to the next page of songs if necessary
				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pages)){
   11774:	e5dc3000 	ldrb	r3, [ip]
   11778:	e353000f 	cmp	r3, #15	; 0xf
   1177c:	1a00000c 	bne	117b4 <main+0x368>
   11780:	e5dc2006 	ldrb	r2, [ip, #6]
   11784:	e5dc3005 	ldrb	r3, [ip, #5]
   11788:	e1520003 	cmp	r2, r3
   1178c:	2a000008 	bcs	117b4 <main+0x368>
					file_manager.current_row=1;
					file_manager.current_index=0;
					file_manager.current_page++;
   11790:	e2823001 	add	r3, r2, #1	; 0x1
					file_manager.current_row++;
					file_manager.current_index++;
				}
				//Go to the next page of songs if necessary
				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pages)){
					file_manager.current_row=1;
   11794:	e3a02001 	mov	r2, #1	; 0x1
   11798:	e5cc2000 	strb	r2, [ip]
					file_manager.current_index=0;
   1179c:	e3a02000 	mov	r2, #0	; 0x0
					file_manager.current_page++;
					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
   117a0:	e1a0000c 	mov	r0, ip
   117a4:	e1a01006 	mov	r1, r6
					file_manager.current_index++;
				}
				//Go to the next page of songs if necessary
				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pages)){
					file_manager.current_row=1;
					file_manager.current_index=0;
   117a8:	e58c2008 	str	r2, [ip, #8]
					file_manager.current_page++;
   117ac:	e5cc3006 	strb	r3, [ip, #6]
					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
   117b0:	ebfffa90 	bl	101f8 <getNewFiles>
				}
				//If there is another song in the list, get it and play it!
				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
   117b4:	e59f520c 	ldr	r5, [pc, #524]	; 119c8 <main+0x57c>
   117b8:	e5d53000 	ldrb	r3, [r5]
   117bc:	e0853283 	add	r3, r5, r3, lsl #5
   117c0:	e5d3302c 	ldrb	r3, [r3, #44]
   117c4:	e3530000 	cmp	r3, #0	; 0x0
   117c8:	0a000013 	beq	1181c <main+0x3d0>
					LCDClear(file_manager.back_color);
   117cc:	e5d50004 	ldrb	r0, [r5, #4]
   117d0:	eb000cce 	bl	14b10 <LCDClear>
					printMenu(&file_manager);									//Print the menu with the next song!
   117d4:	e1a00005 	mov	r0, r5
   117d8:	ebfffb77 	bl	105bc <printMenu>
					file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
   117dc:	e1a01005 	mov	r1, r5
   117e0:	e59f0214 	ldr	r0, [pc, #532]	; 119fc <main+0x5b0>
   117e4:	ebfffc85 	bl	10a00 <loadSongInfo>
   117e8:	e59f3210 	ldr	r3, [pc, #528]	; 11a00 <main+0x5b4>
   117ec:	e5c30000 	strb	r0, [r3]
					vs1002Config();												//Enable the MP3 Comm. Lines
   117f0:	eb000f06 	bl	15410 <vs1002Config>
					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
   117f4:	e3a00000 	mov	r0, #0	; 0x0
   117f8:	e3a01b02 	mov	r1, #2048	; 0x800
   117fc:	eb000f4d 	bl	15538 <vs1002SCIWrite>
					vs1002Finish();												//Disable the MP3 Comm. Lines
   11800:	eb000f0c 	bl	15438 <vs1002Finish>
					ledBlueOn();
   11804:	e3a03202 	mov	r3, #536870912	; 0x20000000
   11808:	e587300c 	str	r3, [r7, #12]
					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
   1180c:	e3e02000 	mvn	r2, #0	; 0x0
   11810:	e5123fef 	ldr	r3, [r2, #-4079]
   11814:	e3833020 	orr	r3, r3, #32	; 0x20
   11818:	e5023fef 	str	r3, [r2, #-4079]
				}	
			}
		}

		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
   1181c:	e5d83000 	ldrb	r3, [r8]
   11820:	e3530002 	cmp	r3, #2	; 0x2
   11824:	1a000003 	bne	11838 <main+0x3ec>
   11828:	e5940000 	ldr	r0, [r4]
   1182c:	e1a01006 	mov	r1, r6
   11830:	ebfffbea 	bl	107e0 <handleUpButton>
   11834:	ea000058 	b	1199c <main+0x550>
		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
   11838:	e3530001 	cmp	r3, #1	; 0x1
   1183c:	1a000003 	bne	11850 <main+0x404>
   11840:	e5940000 	ldr	r0, [r4]
   11844:	e1a01006 	mov	r1, r6
   11848:	ebfffbc5 	bl	10764 <handleDownButton>
   1184c:	ea000052 	b	1199c <main+0x550>
		else if(button_pressed == MID_BUT)handleMiddleButton();
   11850:	e3530003 	cmp	r3, #3	; 0x3
   11854:	1a000001 	bne	11860 <main+0x414>
   11858:	ebfffc9e 	bl	10ad8 <handleMiddleButton>
   1185c:	ea00004e 	b	1199c <main+0x550>
		
		else if(update_screen){
   11860:	e59f318c 	ldr	r3, [pc, #396]	; 119f4 <main+0x5a8>
   11864:	e5d33000 	ldrb	r3, [r3]
   11868:	e3530000 	cmp	r3, #0	; 0x0
   1186c:	0a00004a 	beq	1199c <main+0x550>
			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
   11870:	e3e03000 	mvn	r3, #0	; 0x0
   11874:	e3a02010 	mov	r2, #16	; 0x10
   11878:	e5032feb 	str	r2, [r3, #-4075]
   1187c:	e2833001 	add	r3, r3, #1	; 0x1
// The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
    for (i = 0; i < count; i++) { asm volatile ("nop"); }
   11880:	e1a00000 	nop			(mov r0,r0)
   11884:	e2833001 	add	r3, r3, #1	; 0x1
   11888:	e153000a 	cmp	r3, sl
   1188c:	1afffffb 	bne	11880 <main+0x434>
		else if(button_pressed == MID_BUT)handleMiddleButton();
		
		else if(update_screen){
			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
			delay_ms(300);
			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is correct.
   11890:	eb000c37 	bl	14974 <MMA_get_y>
   11894:	e3500faf 	cmp	r0, #700	; 0x2bc
   11898:	da000019 	ble	11904 <main+0x4b8>
   1189c:	e59f3160 	ldr	r3, [pc, #352]	; 11a04 <main+0x5b8>
   118a0:	e5933000 	ldr	r3, [r3]
   118a4:	e3530faf 	cmp	r3, #700	; 0x2bc
   118a8:	da000015 	ble	11904 <main+0x4b8>
				if(file_is_open)quickClear(current_display);
   118ac:	e59f314c 	ldr	r3, [pc, #332]	; 11a00 <main+0x5b4>
   118b0:	e5d33000 	ldrb	r3, [r3]
   118b4:	e3530000 	cmp	r3, #0	; 0x0
   118b8:	0a000002 	beq	118c8 <main+0x47c>
   118bc:	e5940000 	ldr	r0, [r4]
   118c0:	ebfffb0a 	bl	104f0 <quickClear>
   118c4:	ea000002 	b	118d4 <main+0x488>
				else LCDClear(current_display->back_color);
   118c8:	e5943000 	ldr	r3, [r4]
   118cc:	e5d30004 	ldrb	r0, [r3, #4]
   118d0:	eb000c8e 	bl	14b10 <LCDClear>
				current_display = &settings_menu;
				current_display->orientation=ORIENTLEFT;
				ledBlueOff();
				if(file_is_open)ledGrnOn();
   118d4:	e59f3124 	ldr	r3, [pc, #292]	; 11a00 <main+0x5b4>
   118d8:	e5d33000 	ldrb	r3, [r3]
			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
			delay_ms(300);
			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is correct.
				if(file_is_open)quickClear(current_display);
				else LCDClear(current_display->back_color);
				current_display = &settings_menu;
   118dc:	e59f20f0 	ldr	r2, [pc, #240]	; 119d4 <main+0x588>
				current_display->orientation=ORIENTLEFT;
				ledBlueOff();
				if(file_is_open)ledGrnOn();
   118e0:	e3530000 	cmp	r3, #0	; 0x0
			delay_ms(300);
			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is correct.
				if(file_is_open)quickClear(current_display);
				else LCDClear(current_display->back_color);
				current_display = &settings_menu;
				current_display->orientation=ORIENTLEFT;
   118e4:	e3a03001 	mov	r3, #1	; 0x1
   118e8:	e5c23002 	strb	r3, [r2, #2]
				ledBlueOff();
   118ec:	e3a03202 	mov	r3, #536870912	; 0x20000000
   118f0:	e5873004 	str	r3, [r7, #4]
			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
			delay_ms(300);
			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is correct.
				if(file_is_open)quickClear(current_display);
				else LCDClear(current_display->back_color);
				current_display = &settings_menu;
   118f4:	e5842000 	str	r2, [r4]
				current_display->orientation=ORIENTLEFT;
				ledBlueOff();
				if(file_is_open)ledGrnOn();
   118f8:	1283320f 	addne	r3, r3, #-268435456	; 0xf0000000
				else ledRedOn();
   118fc:	03a03101 	moveq	r3, #1073741824	; 0x40000000
   11900:	ea00001e 	b	11980 <main+0x534>
			}
			else if(MMA_get_y()<700 && prev_position<700){
   11904:	eb000c1a 	bl	14974 <MMA_get_y>
   11908:	e59f20f8 	ldr	r2, [pc, #248]	; 11a08 <main+0x5bc>
   1190c:	e1500002 	cmp	r0, r2
   11910:	ca00001b 	bgt	11984 <main+0x538>
   11914:	e59f30e8 	ldr	r3, [pc, #232]	; 11a04 <main+0x5b8>
   11918:	e5933000 	ldr	r3, [r3]
   1191c:	e1530002 	cmp	r3, r2
   11920:	ca000017 	bgt	11984 <main+0x538>
				if(file_is_open)quickClear(current_display);
   11924:	e59f30d4 	ldr	r3, [pc, #212]	; 11a00 <main+0x5b4>
   11928:	e5d33000 	ldrb	r3, [r3]
   1192c:	e3530000 	cmp	r3, #0	; 0x0
   11930:	0a000002 	beq	11940 <main+0x4f4>
   11934:	e5940000 	ldr	r0, [r4]
   11938:	ebfffaec 	bl	104f0 <quickClear>
   1193c:	ea000002 	b	1194c <main+0x500>
				else LCDClear(current_display->back_color);
   11940:	e5943000 	ldr	r3, [r4]
   11944:	e5d30004 	ldrb	r0, [r3, #4]
   11948:	eb000c70 	bl	14b10 <LCDClear>
				current_display = &file_manager;
				current_display->orientation=ORIENTUP;
				ledGrnOff();
				ledRedOff();
				if(file_is_open)ledBlueOn();
   1194c:	e59f30ac 	ldr	r3, [pc, #172]	; 11a00 <main+0x5b4>
   11950:	e5d33000 	ldrb	r3, [r3]
				else ledRedOn();
			}
			else if(MMA_get_y()<700 && prev_position<700){
				if(file_is_open)quickClear(current_display);
				else LCDClear(current_display->back_color);
				current_display = &file_manager;
   11954:	e59f206c 	ldr	r2, [pc, #108]	; 119c8 <main+0x57c>
				current_display->orientation=ORIENTUP;
				ledGrnOff();
				ledRedOff();
				if(file_is_open)ledBlueOn();
   11958:	e3530000 	cmp	r3, #0	; 0x0
			}
			else if(MMA_get_y()<700 && prev_position<700){
				if(file_is_open)quickClear(current_display);
				else LCDClear(current_display->back_color);
				current_display = &file_manager;
				current_display->orientation=ORIENTUP;
   1195c:	e3a03000 	mov	r3, #0	; 0x0
   11960:	e5c23002 	strb	r3, [r2, #2]
				ledGrnOff();
   11964:	e2833201 	add	r3, r3, #268435456	; 0x10000000
   11968:	e5873004 	str	r3, [r7, #4]
				ledRedOff();
   1196c:	e2833203 	add	r3, r3, #805306368	; 0x30000000
   11970:	e5873004 	str	r3, [r7, #4]
				else ledRedOn();
			}
			else if(MMA_get_y()<700 && prev_position<700){
				if(file_is_open)quickClear(current_display);
				else LCDClear(current_display->back_color);
				current_display = &file_manager;
   11974:	e5842000 	str	r2, [r4]
				current_display->orientation=ORIENTUP;
				ledGrnOff();
				ledRedOff();
				if(file_is_open)ledBlueOn();
   11978:	0a000001 	beq	11984 <main+0x538>
   1197c:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
   11980:	e587300c 	str	r3, [r7, #12]
			}
			printMenu(current_display);					//If the screen has changed, show the new menu
   11984:	e5940000 	ldr	r0, [r4]
   11988:	ebfffb0b 	bl	105bc <printMenu>
			VICIntEnable |= 0x10;						//Re-enable interrupts
   1198c:	e3e02000 	mvn	r2, #0	; 0x0
   11990:	e5123fef 	ldr	r3, [r2, #-4079]
   11994:	e3833010 	orr	r3, r3, #16	; 0x10
   11998:	e5023fef 	str	r3, [r2, #-4079]
		}
		button_pressed=NO_BUT;
		VICIntEnable |= 0x10;
   1199c:	e3e03000 	mvn	r3, #0	; 0x0
   119a0:	e5132fef 	ldr	r2, [r3, #-4079]
   119a4:	e3822010 	orr	r2, r2, #16	; 0x10
   119a8:	e5032fef 	str	r2, [r3, #-4079]
				if(file_is_open)ledBlueOn();
			}
			printMenu(current_display);					//If the screen has changed, show the new menu
			VICIntEnable |= 0x10;						//Re-enable interrupts
		}
		button_pressed=NO_BUT;
   119ac:	e2833001 	add	r3, r3, #1	; 0x1
   119b0:	e5c83000 	strb	r3, [r8]
   119b4:	eaffff2c 	b	1166c <main+0x220>
   119b8:	40000f28 	.word	0x40000f28
   119bc:	000003cd 	.word	0x000003cd
   119c0:	e002c000 	.word	0xe002c000
   119c4:	40000898 	.word	0x40000898
   119c8:	40000908 	.word	0x40000908
   119cc:	40000009 	.word	0x40000009
   119d0:	000189fc 	.word	0x000189fc
   119d4:	40000b0c 	.word	0x40000b0c
   119d8:	40000d10 	.word	0x40000d10
   119dc:	00019104 	.word	0x00019104
   119e0:	e0028000 	.word	0xe0028000
   119e4:	4000089c 	.word	0x4000089c
   119e8:	002dc6c0 	.word	0x002dc6c0
   119ec:	00018a21 	.word	0x00018a21
   119f0:	00989680 	.word	0x00989680
   119f4:	4000089d 	.word	0x4000089d
   119f8:	40000895 	.word	0x40000895
   119fc:	400008a8 	.word	0x400008a8
   11a00:	40000896 	.word	0x40000896
   11a04:	400008a0 	.word	0x400008a0
   11a08:	000002bb 	.word	0x000002bb

00011a0c <_read_r>:
   11a0c:	e3a00000 	mov	r0, #0	; 0x0
   11a10:	e12fff1e 	bx	lr

00011a14 <_write_r>:
   11a14:	e1a00003 	mov	r0, r3
   11a18:	e12fff1e 	bx	lr

00011a1c <_close_r>:
   11a1c:	e3a00000 	mov	r0, #0	; 0x0
   11a20:	e12fff1e 	bx	lr

00011a24 <_lseek_r>:
   11a24:	e3a00000 	mov	r0, #0	; 0x0
   11a28:	e12fff1e 	bx	lr

00011a2c <_fstat_r>:
   11a2c:	e3a03a02 	mov	r3, #8192	; 0x2000
   11a30:	e3a00000 	mov	r0, #0	; 0x0
   11a34:	e5823004 	str	r3, [r2, #4]
   11a38:	e12fff1e 	bx	lr

00011a3c <isatty>:
   11a3c:	e3a00001 	mov	r0, #1	; 0x1
   11a40:	e12fff1e 	bx	lr

00011a44 <_sbrk_r>:
   11a44:	e59f201c 	ldr	r2, [pc, #28]	; 11a68 <_sbrk_r+0x24>
   11a48:	e5923000 	ldr	r3, [r2]
   11a4c:	e3530000 	cmp	r3, #0	; 0x0
   11a50:	059f3014 	ldreq	r3, [pc, #20]	; 11a6c <_sbrk_r+0x28>
   11a54:	05823000 	streq	r3, [r2]
   11a58:	e5920000 	ldr	r0, [r2]
   11a5c:	e0803001 	add	r3, r0, r1
   11a60:	e5823000 	str	r3, [r2]
   11a64:	e12fff1e 	bx	lr
   11a68:	40000d14 	.word	0x40000d14
   11a6c:	40001f00 	.word	0x40001f00

00011a70 <rprintf_devopen>:
   11a70:	e59f3004 	ldr	r3, [pc, #4]	; 11a7c <rprintf_devopen+0xc>
   11a74:	e5830000 	str	r0, [r3]
   11a78:	e12fff1e 	bx	lr
   11a7c:	40000d18 	.word	0x40000d18

00011a80 <myputchar>:
   11a80:	e92d4010 	push	{r4, lr}
   11a84:	e20040ff 	and	r4, r0, #255	; 0xff
   11a88:	e354000a 	cmp	r4, #10	; 0xa
   11a8c:	e3a0000d 	mov	r0, #13	; 0xd
   11a90:	059f3024 	ldreq	r3, [pc, #36]	; 11abc <myputchar+0x3c>
   11a94:	0593c000 	ldreq	ip, [r3]
   11a98:	01a0e00f 	moveq	lr, pc
   11a9c:	012fff1c 	bxeq	ip
   11aa0:	e1a00004 	mov	r0, r4
   11aa4:	e59f3010 	ldr	r3, [pc, #16]	; 11abc <myputchar+0x3c>
   11aa8:	e593c000 	ldr	ip, [r3]
   11aac:	e1a0e00f 	mov	lr, pc
   11ab0:	e12fff1c 	bx	ip
   11ab4:	e8bd4010 	pop	{r4, lr}
   11ab8:	e12fff1e 	bx	lr
   11abc:	40000d18 	.word	0x40000d18

00011ac0 <rprintf>:
   11ac0:	e92d000f 	push	{r0, r1, r2, r3}
   11ac4:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   11ac8:	e24dd010 	sub	sp, sp, #16	; 0x10
   11acc:	e28d3030 	add	r3, sp, #48	; 0x30
   11ad0:	e58d300c 	str	r3, [sp, #12]
   11ad4:	e59d502c 	ldr	r5, [sp, #44]
   11ad8:	e3a00001 	mov	r0, #1	; 0x1
   11adc:	ebfff9ac 	bl	10194 <delay_ms>
   11ae0:	ea000002 	b	11af0 <rprintf+0x30>
   11ae4:	e3530000 	cmp	r3, #0	; 0x0
   11ae8:	0a00008e 	beq	11d28 <rprintf+0x268>
   11aec:	ebffffe3 	bl	11a80 <myputchar>
   11af0:	e4d53001 	ldrb	r3, [r5], #1
   11af4:	e3530025 	cmp	r3, #37	; 0x25
   11af8:	e1a00003 	mov	r0, r3
   11afc:	1afffff8 	bne	11ae4 <rprintf+0x24>
   11b00:	e4d52001 	ldrb	r2, [r5], #1
   11b04:	e3520020 	cmp	r2, #32	; 0x20
   11b08:	13520030 	cmpne	r2, #48	; 0x30
   11b0c:	13a03000 	movne	r3, #0	; 0x0
   11b10:	03a03001 	moveq	r3, #1	; 0x1
   11b14:	11a07003 	movne	r7, r3
   11b18:	11a00002 	movne	r0, r2
   11b1c:	11a0a007 	movne	sl, r7
   11b20:	1a000007 	bne	11b44 <rprintf+0x84>
   11b24:	e4d50001 	ldrb	r0, [r5], #1
   11b28:	e2403030 	sub	r3, r0, #48	; 0x30
   11b2c:	e20370ff 	and	r7, r3, #255	; 0xff
   11b30:	e3570009 	cmp	r7, #9	; 0x9
   11b34:	94d50001 	ldrbls	r0, [r5], #1
   11b38:	81a0a002 	movhi	sl, r2
   11b3c:	83a07000 	movhi	r7, #0	; 0x0
   11b40:	91a0a002 	movls	sl, r2
   11b44:	e350004c 	cmp	r0, #76	; 0x4c
   11b48:	1350006c 	cmpne	r0, #108	; 0x6c
   11b4c:	04d50001 	ldrbeq	r0, [r5], #1
   11b50:	13a03000 	movne	r3, #0	; 0x0
   11b54:	03a03001 	moveq	r3, #1	; 0x1
   11b58:	03a03001 	moveq	r3, #1	; 0x1
   11b5c:	e3500058 	cmp	r0, #88	; 0x58
   11b60:	0a00003e 	beq	11c60 <rprintf+0x1a0>
   11b64:	8a00000b 	bhi	11b98 <rprintf+0xd8>
   11b68:	e3500049 	cmp	r0, #73	; 0x49
   11b6c:	0a00006a 	beq	11d1c <rprintf+0x25c>
   11b70:	8a000003 	bhi	11b84 <rprintf+0xc4>
   11b74:	e3500043 	cmp	r0, #67	; 0x43
   11b78:	0a000015 	beq	11bd4 <rprintf+0x114>
   11b7c:	e3500044 	cmp	r0, #68	; 0x44
   11b80:	ea00000a 	b	11bb0 <rprintf+0xf0>
   11b84:	e3500053 	cmp	r0, #83	; 0x53
   11b88:	0a000017 	beq	11bec <rprintf+0x12c>
   11b8c:	e3500055 	cmp	r0, #85	; 0x55
   11b90:	1a000013 	bne	11be4 <rprintf+0x124>
   11b94:	ea000020 	b	11c1c <rprintf+0x15c>
   11b98:	e3500069 	cmp	r0, #105	; 0x69
   11b9c:	0a00005e 	beq	11d1c <rprintf+0x25c>
   11ba0:	8a000004 	bhi	11bb8 <rprintf+0xf8>
   11ba4:	e3500063 	cmp	r0, #99	; 0x63
   11ba8:	0a000009 	beq	11bd4 <rprintf+0x114>
   11bac:	e3500064 	cmp	r0, #100	; 0x64
   11bb0:	1a00000b 	bne	11be4 <rprintf+0x124>
   11bb4:	ea000058 	b	11d1c <rprintf+0x25c>
   11bb8:	e3500075 	cmp	r0, #117	; 0x75
   11bbc:	0a000016 	beq	11c1c <rprintf+0x15c>
   11bc0:	e3500078 	cmp	r0, #120	; 0x78
   11bc4:	0a000025 	beq	11c60 <rprintf+0x1a0>
   11bc8:	e3500073 	cmp	r0, #115	; 0x73
   11bcc:	1a000004 	bne	11be4 <rprintf+0x124>
   11bd0:	ea000005 	b	11bec <rprintf+0x12c>
   11bd4:	e59d200c 	ldr	r2, [sp, #12]
   11bd8:	e2823004 	add	r3, r2, #4	; 0x4
   11bdc:	e58d300c 	str	r3, [sp, #12]
   11be0:	e5d20000 	ldrb	r0, [r2]
   11be4:	ebffffa5 	bl	11a80 <myputchar>
   11be8:	eaffffba 	b	11ad8 <rprintf+0x18>
   11bec:	e59d300c 	ldr	r3, [sp, #12]
   11bf0:	e5936000 	ldr	r6, [r3]
   11bf4:	e3a04000 	mov	r4, #0	; 0x0
   11bf8:	e2833004 	add	r3, r3, #4	; 0x4
   11bfc:	e58d300c 	str	r3, [sp, #12]
   11c00:	ea000000 	b	11c08 <rprintf+0x148>
   11c04:	ebffff9d 	bl	11a80 <myputchar>
   11c08:	e7d43006 	ldrb	r3, [r4, r6]
   11c0c:	e2530000 	subs	r0, r3, #0	; 0x0
   11c10:	e2844001 	add	r4, r4, #1	; 0x1
   11c14:	1afffffa 	bne	11c04 <rprintf+0x144>
   11c18:	eaffffae 	b	11ad8 <rprintf+0x18>
   11c1c:	e3a0800a 	mov	r8, #10	; 0xa
   11c20:	ea00000f 	b	11c64 <rprintf+0x1a4>
   11c24:	e59d300c 	ldr	r3, [sp, #12]
   11c28:	e5934000 	ldr	r4, [r3]
   11c2c:	e2833004 	add	r3, r3, #4	; 0x4
   11c30:	e58d300c 	str	r3, [sp, #12]
   11c34:	ea000003 	b	11c48 <rprintf+0x188>
   11c38:	e59d200c 	ldr	r2, [sp, #12]
   11c3c:	e2823004 	add	r3, r2, #4	; 0x4
   11c40:	e58d300c 	str	r3, [sp, #12]
   11c44:	e5924000 	ldr	r4, [r2]
   11c48:	e3540000 	cmp	r4, #0	; 0x0
   11c4c:	b3a0002d 	movlt	r0, #45	; 0x2d
   11c50:	b2644000 	rsblt	r4, r4, #0	; 0x0
   11c54:	bbffff89 	bllt	11a80 <myputchar>
   11c58:	e3a0800a 	mov	r8, #10	; 0xa
   11c5c:	ea000008 	b	11c84 <rprintf+0x1c4>
   11c60:	e3a08010 	mov	r8, #16	; 0x10
   11c64:	e59d200c 	ldr	r2, [sp, #12]
   11c68:	e3530000 	cmp	r3, #0	; 0x0
   11c6c:	12823004 	addne	r3, r2, #4	; 0x4
   11c70:	02823004 	addeq	r3, r2, #4	; 0x4
   11c74:	15924000 	ldrne	r4, [r2]
   11c78:	158d300c 	strne	r3, [sp, #12]
   11c7c:	058d300c 	streq	r3, [sp, #12]
   11c80:	05924000 	ldreq	r4, [r2]
   11c84:	e3a03000 	mov	r3, #0	; 0x0
   11c88:	e5cd300b 	strb	r3, [sp, #11]
   11c8c:	e28d600b 	add	r6, sp, #11	; 0xb
   11c90:	e1a00004 	mov	r0, r4
   11c94:	e1a01008 	mov	r1, r8
   11c98:	eb001aea 	bl	18848 <__umodsi3>
   11c9c:	e2800030 	add	r0, r0, #48	; 0x30
   11ca0:	e20030ff 	and	r3, r0, #255	; 0xff
   11ca4:	e3530039 	cmp	r3, #57	; 0x39
   11ca8:	e2832007 	add	r2, r3, #7	; 0x7
   11cac:	820230ff 	andhi	r3, r2, #255	; 0xff
   11cb0:	e5463001 	strb	r3, [r6, #-1]
   11cb4:	e1a00004 	mov	r0, r4
   11cb8:	e1a01008 	mov	r1, r8
   11cbc:	eb001a4d 	bl	185f8 <__aeabi_uidiv>
   11cc0:	e3570000 	cmp	r7, #0	; 0x0
   11cc4:	e2473001 	sub	r3, r7, #1	; 0x1
   11cc8:	120370ff 	andne	r7, r3, #255	; 0xff
   11ccc:	e3500000 	cmp	r0, #0	; 0x0
   11cd0:	e2466001 	sub	r6, r6, #1	; 0x1
   11cd4:	e1a04000 	mov	r4, r0
   11cd8:	1affffec 	bne	11c90 <rprintf+0x1d0>
   11cdc:	e1a01007 	mov	r1, r7
   11ce0:	e1a02006 	mov	r2, r6
   11ce4:	ea000000 	b	11cec <rprintf+0x22c>
   11ce8:	e562a001 	strb	sl, [r2, #-1]!
   11cec:	e2473001 	sub	r3, r7, #1	; 0x1
   11cf0:	e20370ff 	and	r7, r3, #255	; 0xff
   11cf4:	e35700ff 	cmp	r7, #255	; 0xff
   11cf8:	1afffffa 	bne	11ce8 <rprintf+0x228>
   11cfc:	e0614006 	rsb	r4, r1, r6
   11d00:	ea000000 	b	11d08 <rprintf+0x248>
   11d04:	ebffff5d 	bl	11a80 <myputchar>
   11d08:	e5d43000 	ldrb	r3, [r4]
   11d0c:	e2530000 	subs	r0, r3, #0	; 0x0
   11d10:	e2844001 	add	r4, r4, #1	; 0x1
   11d14:	1afffffa 	bne	11d04 <rprintf+0x244>
   11d18:	eaffff6e 	b	11ad8 <rprintf+0x18>
   11d1c:	e3530000 	cmp	r3, #0	; 0x0
   11d20:	1affffbf 	bne	11c24 <rprintf+0x164>
   11d24:	eaffffc3 	b	11c38 <rprintf+0x178>
   11d28:	e28dd010 	add	sp, sp, #16	; 0x10
   11d2c:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
   11d30:	e28dd010 	add	sp, sp, #16	; 0x10
   11d34:	e12fff1e 	bx	lr

00011d38 <init_serial0>:
   11d38:	e59f3040 	ldr	r3, [pc, #64]	; 11d80 <init_serial0+0x48>
   11d3c:	e92d4010 	push	{r4, lr}
   11d40:	e3a02005 	mov	r2, #5	; 0x5
   11d44:	e59f4038 	ldr	r4, [pc, #56]	; 11d84 <init_serial0+0x4c>
   11d48:	e5832000 	str	r2, [r3]
   11d4c:	e3a03083 	mov	r3, #131	; 0x83
   11d50:	e1a01000 	mov	r1, r0
   11d54:	e584300c 	str	r3, [r4, #12]
   11d58:	e59f0028 	ldr	r0, [pc, #40]	; 11d88 <init_serial0+0x50>
   11d5c:	eb001a25 	bl	185f8 <__aeabi_uidiv>
   11d60:	e20030ff 	and	r3, r0, #255	; 0xff
   11d64:	e1a00420 	lsr	r0, r0, #8
   11d68:	e5840004 	str	r0, [r4, #4]
   11d6c:	e5843000 	str	r3, [r4]
   11d70:	e3a03003 	mov	r3, #3	; 0x3
   11d74:	e584300c 	str	r3, [r4, #12]
   11d78:	e8bd4010 	pop	{r4, lr}
   11d7c:	e12fff1e 	bx	lr
   11d80:	e002c000 	.word	0xe002c000
   11d84:	e000c000 	.word	0xe000c000
   11d88:	000e4e1c 	.word	0x000e4e1c

00011d8c <putchar_serial0>:
   11d8c:	e350000a 	cmp	r0, #10	; 0xa
   11d90:	1a000005 	bne	11dac <putchar_serial0+0x20>
   11d94:	e59f202c 	ldr	r2, [pc, #44]	; 11dc8 <putchar_serial0+0x3c>
   11d98:	e5923014 	ldr	r3, [r2, #20]
   11d9c:	e3130020 	tst	r3, #32	; 0x20
   11da0:	0afffffb 	beq	11d94 <putchar_serial0+0x8>
   11da4:	e3a0300d 	mov	r3, #13	; 0xd
   11da8:	e5823000 	str	r3, [r2]
   11dac:	e59f2014 	ldr	r2, [pc, #20]	; 11dc8 <putchar_serial0+0x3c>
   11db0:	e5923014 	ldr	r3, [r2, #20]
   11db4:	e3130020 	tst	r3, #32	; 0x20
   11db8:	0afffffb 	beq	11dac <putchar_serial0+0x20>
   11dbc:	e5820000 	str	r0, [r2]
   11dc0:	e5920000 	ldr	r0, [r2]
   11dc4:	e12fff1e 	bx	lr
   11dc8:	e000c000 	.word	0xe000c000

00011dcc <putc_serial0>:
   11dcc:	e59f2014 	ldr	r2, [pc, #20]	; 11de8 <putc_serial0+0x1c>
   11dd0:	e5923014 	ldr	r3, [r2, #20]
   11dd4:	e3130020 	tst	r3, #32	; 0x20
   11dd8:	0afffffb 	beq	11dcc <putc_serial0>
   11ddc:	e5820000 	str	r0, [r2]
   11de0:	e5920000 	ldr	r0, [r2]
   11de4:	e12fff1e 	bx	lr
   11de8:	e000c000 	.word	0xe000c000

00011dec <putstring_serial0>:
   11dec:	e92d4010 	push	{r4, lr}
   11df0:	e1a04000 	mov	r4, r0
   11df4:	ea000000 	b	11dfc <putstring_serial0+0x10>
   11df8:	ebffffe3 	bl	11d8c <putchar_serial0>
   11dfc:	e5d43000 	ldrb	r3, [r4]
   11e00:	e2530000 	subs	r0, r3, #0	; 0x0
   11e04:	e2844001 	add	r4, r4, #1	; 0x1
   11e08:	1afffffa 	bne	11df8 <putstring_serial0+0xc>
   11e0c:	e8bd4010 	pop	{r4, lr}
   11e10:	e12fff1e 	bx	lr

00011e14 <getkey_serial0>:
   11e14:	e59f2010 	ldr	r2, [pc, #16]	; 11e2c <getkey_serial0+0x18>
   11e18:	e5923014 	ldr	r3, [r2, #20]
   11e1c:	e2133001 	ands	r3, r3, #1	; 0x1
   11e20:	e1a00003 	mov	r0, r3
   11e24:	15920000 	ldrne	r0, [r2]
   11e28:	e12fff1e 	bx	lr
   11e2c:	e000c000 	.word	0xe000c000

00011e30 <getc0>:
   11e30:	e59f2010 	ldr	r2, [pc, #16]	; 11e48 <getc0+0x18>
   11e34:	e5923014 	ldr	r3, [r2, #20]
   11e38:	e3130001 	tst	r3, #1	; 0x1
   11e3c:	0afffffb 	beq	11e30 <getc0>
   11e40:	e5920000 	ldr	r0, [r2]
   11e44:	e12fff1e 	bx	lr
   11e48:	e000c000 	.word	0xe000c000

00011e4c <SPI0_send_recv>:
   11e4c:	e59f3024 	ldr	r3, [pc, #36]	; 11e78 <SPI0_send_recv+0x2c>
   11e50:	e20000ff 	and	r0, r0, #255	; 0xff
   11e54:	e5830008 	str	r0, [r3, #8]
   11e58:	e59f2018 	ldr	r2, [pc, #24]	; 11e78 <SPI0_send_recv+0x2c>
   11e5c:	e5923004 	ldr	r3, [r2, #4]
   11e60:	e3130080 	tst	r3, #128	; 0x80
   11e64:	0afffffb 	beq	11e58 <SPI0_send_recv+0xc>
   11e68:	e5923004 	ldr	r3, [r2, #4]
   11e6c:	e5920008 	ldr	r0, [r2, #8]
   11e70:	e20000ff 	and	r0, r0, #255	; 0xff
   11e74:	e12fff1e 	bx	lr
   11e78:	e0020000 	.word	0xe0020000

00011e7c <SPI0_recv>:
   11e7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11e80:	e3a000ff 	mov	r0, #255	; 0xff
   11e84:	ebfffff0 	bl	11e4c <SPI0_send_recv>
   11e88:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11e8c:	e12fff1e 	bx	lr

00011e90 <SPI0_send>:
   11e90:	e20000ff 	and	r0, r0, #255	; 0xff
   11e94:	eaffffec 	b	11e4c <SPI0_send_recv>

00011e98 <root_file_exists>:
   11e98:	e59f3020 	ldr	r3, [pc, #32]	; 11ec0 <root_file_exists+0x28>
   11e9c:	e5931000 	ldr	r1, [r3]
   11ea0:	e59f301c 	ldr	r3, [pc, #28]	; 11ec4 <root_file_exists+0x2c>
   11ea4:	e1a02000 	mov	r2, r0
   11ea8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11eac:	e5930000 	ldr	r0, [r3]
   11eb0:	e59f3010 	ldr	r3, [pc, #16]	; 11ec8 <root_file_exists+0x30>
   11eb4:	eb0006e4 	bl	13a4c <find_file_in_dir>
   11eb8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11ebc:	e12fff1e 	bx	lr
   11ec0:	40001270 	.word	0x40001270
   11ec4:	40001238 	.word	0x40001238
   11ec8:	4000123c 	.word	0x4000123c

00011ecc <root_delete>:
   11ecc:	e92d4010 	push	{r4, lr}
   11ed0:	e59f3038 	ldr	r3, [pc, #56]	; 11f10 <root_delete+0x44>
   11ed4:	e59f4038 	ldr	r4, [pc, #56]	; 11f14 <root_delete+0x48>
   11ed8:	e5931000 	ldr	r1, [r3]
   11edc:	e1a02000 	mov	r2, r0
   11ee0:	e59f3030 	ldr	r3, [pc, #48]	; 11f18 <root_delete+0x4c>
   11ee4:	e5940000 	ldr	r0, [r4]
   11ee8:	eb0006d7 	bl	13a4c <find_file_in_dir>
   11eec:	e3500000 	cmp	r0, #0	; 0x0
   11ef0:	e59f1020 	ldr	r1, [pc, #32]	; 11f18 <root_delete+0x4c>
   11ef4:	e3a00001 	mov	r0, #1	; 0x1
   11ef8:	0a000002 	beq	11f08 <root_delete+0x3c>
   11efc:	e5940000 	ldr	r0, [r4]
   11f00:	eb0005d4 	bl	13658 <fat16_delete_file>
   11f04:	e3a00000 	mov	r0, #0	; 0x0
   11f08:	e8bd4010 	pop	{r4, lr}
   11f0c:	e12fff1e 	bx	lr
   11f10:	40001270 	.word	0x40001270
   11f14:	40001238 	.word	0x40001238
   11f18:	4000123c 	.word	0x4000123c

00011f1c <root_format>:
   11f1c:	e92d4010 	push	{r4, lr}
   11f20:	e59f303c 	ldr	r3, [pc, #60]	; 11f64 <root_format+0x48>
   11f24:	e5930000 	ldr	r0, [r3]
   11f28:	ea000003 	b	11f3c <root_format+0x20>
   11f2c:	e59f3034 	ldr	r3, [pc, #52]	; 11f68 <root_format+0x4c>
   11f30:	e5930000 	ldr	r0, [r3]
   11f34:	eb0005c7 	bl	13658 <fat16_delete_file>
   11f38:	e5940000 	ldr	r0, [r4]
   11f3c:	e59f4020 	ldr	r4, [pc, #32]	; 11f64 <root_format+0x48>
   11f40:	eb0005bd 	bl	1363c <fat16_reset_dir>
   11f44:	e59f1020 	ldr	r1, [pc, #32]	; 11f6c <root_format+0x50>
   11f48:	e5940000 	ldr	r0, [r4]
   11f4c:	eb000638 	bl	13834 <fat16_read_dir>
   11f50:	e3500000 	cmp	r0, #0	; 0x0
   11f54:	e59f1010 	ldr	r1, [pc, #16]	; 11f6c <root_format+0x50>
   11f58:	1afffff3 	bne	11f2c <root_format+0x10>
   11f5c:	e8bd4010 	pop	{r4, lr}
   11f60:	e12fff1e 	bx	lr
   11f64:	40001270 	.word	0x40001270
   11f68:	40001238 	.word	0x40001238
   11f6c:	4000123c 	.word	0x4000123c

00011f70 <rootDirectory_files>:
   11f70:	e59f30a0 	ldr	r3, [pc, #160]	; 12018 <rootDirectory_files+0xa8>
   11f74:	e92d4070 	push	{r4, r5, r6, lr}
   11f78:	e1a04000 	mov	r4, r0
   11f7c:	e5930000 	ldr	r0, [r3]
   11f80:	e1a05001 	mov	r5, r1
   11f84:	eb0005ac 	bl	1363c <fat16_reset_dir>
   11f88:	e3a06000 	mov	r6, #0	; 0x0
   11f8c:	ea000017 	b	11ff0 <rootDirectory_files+0x80>
   11f90:	e3520001 	cmp	r2, #1	; 0x1
   11f94:	e5c41000 	strb	r1, [r4]
   11f98:	e1a04000 	mov	r4, r0
   11f9c:	1a000004 	bne	11fb4 <rootDirectory_files+0x44>
   11fa0:	e3a03000 	mov	r3, #0	; 0x0
   11fa4:	e1a06002 	mov	r6, r2
   11fa8:	e5c03000 	strb	r3, [r0]
   11fac:	ea000016 	b	1200c <rootDirectory_files+0x9c>
   11fb0:	e59f3064 	ldr	r3, [pc, #100]	; 1201c <rootDirectory_files+0xac>
   11fb4:	e5d31000 	ldrb	r1, [r3]
   11fb8:	e2452001 	sub	r2, r5, #1	; 0x1
   11fbc:	e3510000 	cmp	r1, #0	; 0x0
   11fc0:	e2833001 	add	r3, r3, #1	; 0x1
   11fc4:	e1a05002 	mov	r5, r2
   11fc8:	e2840001 	add	r0, r4, #1	; 0x1
   11fcc:	1affffef 	bne	11f90 <rootDirectory_files+0x20>
   11fd0:	e3a0302c 	mov	r3, #44	; 0x2c
   11fd4:	e3520001 	cmp	r2, #1	; 0x1
   11fd8:	e5c43000 	strb	r3, [r4]
   11fdc:	e1a04000 	mov	r4, r0
   11fe0:	01a06002 	moveq	r6, r2
   11fe4:	05c01000 	strbeq	r1, [r0]
   11fe8:	0a000007 	beq	1200c <rootDirectory_files+0x9c>
   11fec:	e2866001 	add	r6, r6, #1	; 0x1
   11ff0:	e59f3020 	ldr	r3, [pc, #32]	; 12018 <rootDirectory_files+0xa8>
   11ff4:	e59f1020 	ldr	r1, [pc, #32]	; 1201c <rootDirectory_files+0xac>
   11ff8:	e5930000 	ldr	r0, [r3]
   11ffc:	eb00060c 	bl	13834 <fat16_read_dir>
   12000:	e3500000 	cmp	r0, #0	; 0x0
   12004:	1affffe9 	bne	11fb0 <rootDirectory_files+0x40>
   12008:	e5c40000 	strb	r0, [r4]
   1200c:	e1a00006 	mov	r0, r6
   12010:	e8bd4070 	pop	{r4, r5, r6, lr}
   12014:	e12fff1e 	bx	lr
   12018:	40001270 	.word	0x40001270
   1201c:	4000123c 	.word	0x4000123c

00012020 <rootDirectory_files_stream>:
   12020:	e3500000 	cmp	r0, #0	; 0x0
   12024:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12028:	0a000004 	beq	12040 <rootDirectory_files_stream+0x20>
   1202c:	e59f3064 	ldr	r3, [pc, #100]	; 12098 <rootDirectory_files_stream+0x78>
   12030:	e5930000 	ldr	r0, [r3]
   12034:	eb000580 	bl	1363c <fat16_reset_dir>
   12038:	e3a00000 	mov	r0, #0	; 0x0
   1203c:	ea000013 	b	12090 <rootDirectory_files_stream+0x70>
   12040:	e59f3054 	ldr	r3, [pc, #84]	; 1209c <rootDirectory_files_stream+0x7c>
   12044:	e5933000 	ldr	r3, [r3]
   12048:	e3530000 	cmp	r3, #0	; 0x0
   1204c:	e59f104c 	ldr	r1, [pc, #76]	; 120a0 <rootDirectory_files_stream+0x80>
   12050:	1a000004 	bne	12068 <rootDirectory_files_stream+0x48>
   12054:	e59f303c 	ldr	r3, [pc, #60]	; 12098 <rootDirectory_files_stream+0x78>
   12058:	e5930000 	ldr	r0, [r3]
   1205c:	eb0005f4 	bl	13834 <fat16_read_dir>
   12060:	e3500000 	cmp	r0, #0	; 0x0
   12064:	0a000009 	beq	12090 <rootDirectory_files_stream+0x70>
   12068:	e59f102c 	ldr	r1, [pc, #44]	; 1209c <rootDirectory_files_stream+0x7c>
   1206c:	e59f302c 	ldr	r3, [pc, #44]	; 120a0 <rootDirectory_files_stream+0x80>
   12070:	e5912000 	ldr	r2, [r1]
   12074:	e7d33002 	ldrb	r3, [r3, r2]
   12078:	e2822001 	add	r2, r2, #1	; 0x1
   1207c:	e3530000 	cmp	r3, #0	; 0x0
   12080:	05813000 	streq	r3, [r1]
   12084:	15812000 	strne	r2, [r1]
   12088:	e3a0002c 	mov	r0, #44	; 0x2c
   1208c:	11a00003 	movne	r0, r3
   12090:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12094:	e12fff1e 	bx	lr
   12098:	40001270 	.word	0x40001270
   1209c:	40000d1c 	.word	0x40000d1c
   120a0:	4000123c 	.word	0x4000123c

000120a4 <print_disk_info>:
   120a4:	e92d4030 	push	{r4, r5, lr}
   120a8:	e2505000 	subs	r5, r0, #0	; 0x0
   120ac:	e24dd01c 	sub	sp, sp, #28	; 0x1c
   120b0:	e1a0400d 	mov	r4, sp
   120b4:	e1a0000d 	mov	r0, sp
   120b8:	0a00002d 	beq	12174 <print_disk_info+0xd0>
   120bc:	eb0000f2 	bl	1248c <sd_raw_get_info>
   120c0:	e3500000 	cmp	r0, #0	; 0x0
   120c4:	e59f00b8 	ldr	r0, [pc, #184]	; 12184 <print_disk_info+0xe0>
   120c8:	0a000029 	beq	12174 <print_disk_info+0xd0>
   120cc:	e5dd1000 	ldrb	r1, [sp]
   120d0:	ebfffe7a 	bl	11ac0 <rprintf>
   120d4:	e59f00ac 	ldr	r0, [pc, #172]	; 12188 <print_disk_info+0xe4>
   120d8:	e28d1001 	add	r1, sp, #1	; 0x1
   120dc:	ebfffe77 	bl	11ac0 <rprintf>
   120e0:	e28d1004 	add	r1, sp, #4	; 0x4
   120e4:	e59f00a0 	ldr	r0, [pc, #160]	; 1218c <print_disk_info+0xe8>
   120e8:	ebfffe74 	bl	11ac0 <rprintf>
   120ec:	e59f009c 	ldr	r0, [pc, #156]	; 12190 <print_disk_info+0xec>
   120f0:	e5dd100a 	ldrb	r1, [sp, #10]
   120f4:	ebfffe71 	bl	11ac0 <rprintf>
   120f8:	e59f0094 	ldr	r0, [pc, #148]	; 12194 <print_disk_info+0xf0>
   120fc:	e59d100c 	ldr	r1, [sp, #12]
   12100:	ebfffe6e 	bl	11ac0 <rprintf>
   12104:	e5dd2010 	ldrb	r2, [sp, #16]
   12108:	e59f0088 	ldr	r0, [pc, #136]	; 12198 <print_disk_info+0xf4>
   1210c:	e5dd1011 	ldrb	r1, [sp, #17]
   12110:	ebfffe6a 	bl	11ac0 <rprintf>
   12114:	e59f0080 	ldr	r0, [pc, #128]	; 1219c <print_disk_info+0xf8>
   12118:	e59d1014 	ldr	r1, [sp, #20]
   1211c:	ebfffe67 	bl	11ac0 <rprintf>
   12120:	e59f0078 	ldr	r0, [pc, #120]	; 121a0 <print_disk_info+0xfc>
   12124:	e5dd1018 	ldrb	r1, [sp, #24]
   12128:	ebfffe64 	bl	11ac0 <rprintf>
   1212c:	e5dd2019 	ldrb	r2, [sp, #25]
   12130:	e59f006c 	ldr	r0, [pc, #108]	; 121a4 <print_disk_info+0x100>
   12134:	e5dd101a 	ldrb	r1, [sp, #26]
   12138:	ebfffe60 	bl	11ac0 <rprintf>
   1213c:	e5dd101b 	ldrb	r1, [sp, #27]
   12140:	e59f0060 	ldr	r0, [pc, #96]	; 121a8 <print_disk_info+0x104>
   12144:	ebfffe5d 	bl	11ac0 <rprintf>
   12148:	e1a00005 	mov	r0, r5
   1214c:	eb000575 	bl	13728 <fat16_get_fs_free>
   12150:	e1a04000 	mov	r4, r0
   12154:	e1a00005 	mov	r0, r5
   12158:	eb000569 	bl	13704 <fat16_get_fs_size>
   1215c:	e1a01004 	mov	r1, r4
   12160:	e1a02000 	mov	r2, r0
   12164:	e59f0040 	ldr	r0, [pc, #64]	; 121ac <print_disk_info+0x108>
   12168:	ebfffe54 	bl	11ac0 <rprintf>
   1216c:	e3a00001 	mov	r0, #1	; 0x1
   12170:	ea000000 	b	12178 <print_disk_info+0xd4>
   12174:	e3a00000 	mov	r0, #0	; 0x0
   12178:	e28dd01c 	add	sp, sp, #28	; 0x1c
   1217c:	e8bd4030 	pop	{r4, r5, lr}
   12180:	e12fff1e 	bx	lr
   12184:	00019110 	.word	0x00019110
   12188:	00019124 	.word	0x00019124
   1218c:	00019134 	.word	0x00019134
   12190:	00019144 	.word	0x00019144
   12194:	00019154 	.word	0x00019154
   12198:	00019168 	.word	0x00019168
   1219c:	0001917c 	.word	0x0001917c
   121a0:	0001918c 	.word	0x0001918c
   121a4:	0001919c 	.word	0x0001919c
   121a8:	000191ac 	.word	0x000191ac
   121ac:	000191bc 	.word	0x000191bc

000121b0 <root_disk_info>:
   121b0:	e59f3004 	ldr	r3, [pc, #4]	; 121bc <root_disk_info+0xc>
   121b4:	e5930000 	ldr	r0, [r3]
   121b8:	eaffffb9 	b	120a4 <print_disk_info>
   121bc:	40001238 	.word	0x40001238

000121c0 <root_open>:
   121c0:	e59f301c 	ldr	r3, [pc, #28]	; 121e4 <root_open+0x24>
   121c4:	e5931000 	ldr	r1, [r3]
   121c8:	e59f3018 	ldr	r3, [pc, #24]	; 121e8 <root_open+0x28>
   121cc:	e1a02000 	mov	r2, r0
   121d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   121d4:	e5930000 	ldr	r0, [r3]
   121d8:	eb000839 	bl	142c4 <open_file_in_dir>
   121dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   121e0:	e12fff1e 	bx	lr
   121e4:	40001270 	.word	0x40001270
   121e8:	40001238 	.word	0x40001238

000121ec <root_open_new>:
   121ec:	e92d4030 	push	{r4, r5, lr}
   121f0:	e59f5030 	ldr	r5, [pc, #48]	; 12228 <root_open_new+0x3c>
   121f4:	e1a04000 	mov	r4, r0
   121f8:	e1a01000 	mov	r1, r0
   121fc:	e59f2028 	ldr	r2, [pc, #40]	; 1222c <root_open_new+0x40>
   12200:	e5950000 	ldr	r0, [r5]
   12204:	eb000905 	bl	14620 <fat16_create_file>
   12208:	e3500000 	cmp	r0, #0	; 0x0
   1220c:	e1a02004 	mov	r2, r4
   12210:	159f3018 	ldrne	r3, [pc, #24]	; 12230 <root_open_new+0x44>
   12214:	15951000 	ldrne	r1, [r5]
   12218:	15930000 	ldrne	r0, [r3]
   1221c:	1b000828 	blne	142c4 <open_file_in_dir>
   12220:	e8bd4030 	pop	{r4, r5, lr}
   12224:	e12fff1e 	bx	lr
   12228:	40001270 	.word	0x40001270
   1222c:	4000123c 	.word	0x4000123c
   12230:	40001238 	.word	0x40001238

00012234 <openroot>:
   12234:	e92d4030 	push	{r4, r5, lr}
   12238:	e3a03000 	mov	r3, #0	; 0x0
   1223c:	e59f10ac 	ldr	r1, [pc, #172]	; 122f0 <openroot+0xbc>
   12240:	e59f20ac 	ldr	r2, [pc, #172]	; 122f4 <openroot+0xc0>
   12244:	e59f00ac 	ldr	r0, [pc, #172]	; 122f8 <openroot+0xc4>
   12248:	eb000970 	bl	14810 <partition_open>
   1224c:	e59f40a8 	ldr	r4, [pc, #168]	; 122fc <openroot+0xc8>
   12250:	e1a0c000 	mov	ip, r0
   12254:	e35c0000 	cmp	ip, #0	; 0x0
   12258:	e3e03000 	mvn	r3, #0	; 0x0
   1225c:	e59f108c 	ldr	r1, [pc, #140]	; 122f0 <openroot+0xbc>
   12260:	e59f208c 	ldr	r2, [pc, #140]	; 122f4 <openroot+0xc0>
   12264:	e59f008c 	ldr	r0, [pc, #140]	; 122f8 <openroot+0xc4>
   12268:	e59f5090 	ldr	r5, [pc, #144]	; 12300 <openroot+0xcc>
   1226c:	e584c000 	str	ip, [r4]
   12270:	1a000005 	bne	1228c <openroot+0x58>
   12274:	eb000965 	bl	14810 <partition_open>
   12278:	e1a03000 	mov	r3, r0
   1227c:	e3530000 	cmp	r3, #0	; 0x0
   12280:	e59f007c 	ldr	r0, [pc, #124]	; 12304 <openroot+0xd0>
   12284:	e5843000 	str	r3, [r4]
   12288:	0a000013 	beq	122dc <openroot+0xa8>
   1228c:	e59f3068 	ldr	r3, [pc, #104]	; 122fc <openroot+0xc8>
   12290:	e5930000 	ldr	r0, [r3]
   12294:	eb000864 	bl	1442c <fat16_open>
   12298:	e3500000 	cmp	r0, #0	; 0x0
   1229c:	e5850000 	str	r0, [r5]
   122a0:	e59f2060 	ldr	r2, [pc, #96]	; 12308 <openroot+0xd4>
   122a4:	e59f1060 	ldr	r1, [pc, #96]	; 1230c <openroot+0xd8>
   122a8:	059f0060 	ldreq	r0, [pc, #96]	; 12310 <openroot+0xdc>
   122ac:	0a00000a 	beq	122dc <openroot+0xa8>
   122b0:	eb000814 	bl	14308 <fat16_get_dir_entry_of_path>
   122b4:	e59f104c 	ldr	r1, [pc, #76]	; 12308 <openroot+0xd4>
   122b8:	e5950000 	ldr	r0, [r5]
   122bc:	eb0007c0 	bl	141c4 <fat16_open_dir>
   122c0:	e59f304c 	ldr	r3, [pc, #76]	; 12314 <openroot+0xe0>
   122c4:	e1a02000 	mov	r2, r0
   122c8:	e3500000 	cmp	r0, #0	; 0x0
   122cc:	e3a01000 	mov	r1, #0	; 0x0
   122d0:	e59f0040 	ldr	r0, [pc, #64]	; 12318 <openroot+0xe4>
   122d4:	e5832000 	str	r2, [r3]
   122d8:	1a000001 	bne	122e4 <openroot+0xb0>
   122dc:	ebfffdf7 	bl	11ac0 <rprintf>
   122e0:	e3a01001 	mov	r1, #1	; 0x1
   122e4:	e1a00001 	mov	r0, r1
   122e8:	e8bd4030 	pop	{r4, r5, lr}
   122ec:	e12fff1e 	bx	lr
   122f0:	00012adc 	.word	0x00012adc
   122f4:	00012880 	.word	0x00012880
   122f8:	00012720 	.word	0x00012720
   122fc:	4000126c 	.word	0x4000126c
   12300:	40001238 	.word	0x40001238
   12304:	000191d0 	.word	0x000191d0
   12308:	4000123c 	.word	0x4000123c
   1230c:	00019208 	.word	0x00019208
   12310:	000191ec 	.word	0x000191ec
   12314:	40001270 	.word	0x40001270
   12318:	0001920c 	.word	0x0001920c

0001231c <sd_raw_available>:
   1231c:	e59f2028 	ldr	r2, [pc, #40]	; 1234c <sd_raw_available+0x30>
   12320:	e5923008 	ldr	r3, [r2, #8]
   12324:	e3c33080 	bic	r3, r3, #128	; 0x80
   12328:	e5823008 	str	r3, [r2, #8]
   1232c:	e5921000 	ldr	r1, [r2]
   12330:	e5923008 	ldr	r3, [r2, #8]
   12334:	e3110080 	tst	r1, #128	; 0x80
   12338:	e3833080 	orr	r3, r3, #128	; 0x80
   1233c:	03a00000 	moveq	r0, #0	; 0x0
   12340:	13a00001 	movne	r0, #1	; 0x1
   12344:	e5823008 	str	r3, [r2, #8]
   12348:	e12fff1e 	bx	lr
   1234c:	e0028000 	.word	0xe0028000

00012350 <sd_raw_locked>:
   12350:	e3a00001 	mov	r0, #1	; 0x1
   12354:	e12fff1e 	bx	lr

00012358 <sd_raw_rec_byte>:
   12358:	e59f3020 	ldr	r3, [pc, #32]	; 12380 <sd_raw_rec_byte+0x28>
   1235c:	e3a020ff 	mov	r2, #255	; 0xff
   12360:	e5832008 	str	r2, [r3, #8]
   12364:	e59f2014 	ldr	r2, [pc, #20]	; 12380 <sd_raw_rec_byte+0x28>
   12368:	e5923004 	ldr	r3, [r2, #4]
   1236c:	e3130080 	tst	r3, #128	; 0x80
   12370:	0afffffb 	beq	12364 <sd_raw_rec_byte+0xc>
   12374:	e5920008 	ldr	r0, [r2, #8]
   12378:	e20000ff 	and	r0, r0, #255	; 0xff
   1237c:	e12fff1e 	bx	lr
   12380:	e0020000 	.word	0xe0020000

00012384 <sd_raw_send_command_r1>:
   12384:	e92d4030 	push	{r4, r5, lr}
   12388:	e20050ff 	and	r5, r0, #255	; 0xff
   1238c:	e1a04001 	mov	r4, r1
   12390:	ebfffff0 	bl	12358 <sd_raw_rec_byte>
   12394:	e59f30c4 	ldr	r3, [pc, #196]	; 12460 <sd_raw_send_command_r1+0xdc>
   12398:	e3852040 	orr	r2, r5, #64	; 0x40
   1239c:	e5832008 	str	r2, [r3, #8]
   123a0:	e59f20b8 	ldr	r2, [pc, #184]	; 12460 <sd_raw_send_command_r1+0xdc>
   123a4:	e5923004 	ldr	r3, [r2, #4]
   123a8:	e3130080 	tst	r3, #128	; 0x80
   123ac:	0afffffb 	beq	123a0 <sd_raw_send_command_r1+0x1c>
   123b0:	e1a03c24 	lsr	r3, r4, #24
   123b4:	e5823008 	str	r3, [r2, #8]
   123b8:	e59f20a0 	ldr	r2, [pc, #160]	; 12460 <sd_raw_send_command_r1+0xdc>
   123bc:	e5923004 	ldr	r3, [r2, #4]
   123c0:	e3130080 	tst	r3, #128	; 0x80
   123c4:	0afffffb 	beq	123b8 <sd_raw_send_command_r1+0x34>
   123c8:	e1a03824 	lsr	r3, r4, #16
   123cc:	e20330ff 	and	r3, r3, #255	; 0xff
   123d0:	e5823008 	str	r3, [r2, #8]
   123d4:	e59f2084 	ldr	r2, [pc, #132]	; 12460 <sd_raw_send_command_r1+0xdc>
   123d8:	e5923004 	ldr	r3, [r2, #4]
   123dc:	e3130080 	tst	r3, #128	; 0x80
   123e0:	0afffffb 	beq	123d4 <sd_raw_send_command_r1+0x50>
   123e4:	e1a03424 	lsr	r3, r4, #8
   123e8:	e20330ff 	and	r3, r3, #255	; 0xff
   123ec:	e5823008 	str	r3, [r2, #8]
   123f0:	e59f2068 	ldr	r2, [pc, #104]	; 12460 <sd_raw_send_command_r1+0xdc>
   123f4:	e5923004 	ldr	r3, [r2, #4]
   123f8:	e3130080 	tst	r3, #128	; 0x80
   123fc:	0afffffb 	beq	123f0 <sd_raw_send_command_r1+0x6c>
   12400:	e20430ff 	and	r3, r4, #255	; 0xff
   12404:	e5823008 	str	r3, [r2, #8]
   12408:	e59f2050 	ldr	r2, [pc, #80]	; 12460 <sd_raw_send_command_r1+0xdc>
   1240c:	e5923004 	ldr	r3, [r2, #4]
   12410:	e3130080 	tst	r3, #128	; 0x80
   12414:	0afffffb 	beq	12408 <sd_raw_send_command_r1+0x84>
   12418:	e3550000 	cmp	r5, #0	; 0x0
   1241c:	13a030ff 	movne	r3, #255	; 0xff
   12420:	03a03095 	moveq	r3, #149	; 0x95
   12424:	e5823008 	str	r3, [r2, #8]
   12428:	e59f3030 	ldr	r3, [pc, #48]	; 12460 <sd_raw_send_command_r1+0xdc>
   1242c:	e5933004 	ldr	r3, [r3, #4]
   12430:	e3130080 	tst	r3, #128	; 0x80
   12434:	0afffffb 	beq	12428 <sd_raw_send_command_r1+0xa4>
   12438:	e3a04000 	mov	r4, #0	; 0x0
   1243c:	ebffffc5 	bl	12358 <sd_raw_rec_byte>
   12440:	e2843001 	add	r3, r4, #1	; 0x1
   12444:	e35000ff 	cmp	r0, #255	; 0xff
   12448:	e20340ff 	and	r4, r3, #255	; 0xff
   1244c:	1a000001 	bne	12458 <sd_raw_send_command_r1+0xd4>
   12450:	e354000a 	cmp	r4, #10	; 0xa
   12454:	1afffff8 	bne	1243c <sd_raw_send_command_r1+0xb8>
   12458:	e8bd4030 	pop	{r4, r5, lr}
   1245c:	e12fff1e 	bx	lr
   12460:	e0020000 	.word	0xe0020000

00012464 <SDoff>:
   12464:	e59f201c 	ldr	r2, [pc, #28]	; 12488 <SDoff+0x24>
   12468:	e5923018 	ldr	r3, [r2, #24]
   1246c:	e3c33080 	bic	r3, r3, #128	; 0x80
   12470:	e5823018 	str	r3, [r2, #24]
   12474:	e2822901 	add	r2, r2, #16384	; 0x4000
   12478:	e5923000 	ldr	r3, [r2]
   1247c:	e3c33c15 	bic	r3, r3, #5376	; 0x1500
   12480:	e5823000 	str	r3, [r2]
   12484:	e12fff1e 	bx	lr
   12488:	e0028000 	.word	0xe0028000

0001248c <sd_raw_get_info>:
   1248c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12490:	e2504000 	subs	r4, r0, #0	; 0x0
   12494:	0a000097 	beq	126f8 <sd_raw_get_info+0x26c>
   12498:	ebffff9f 	bl	1231c <sd_raw_available>
   1249c:	e3500000 	cmp	r0, #0	; 0x0
   124a0:	0a000094 	beq	126f8 <sd_raw_get_info+0x26c>
   124a4:	e59f5270 	ldr	r5, [pc, #624]	; 1271c <sd_raw_get_info+0x290>
   124a8:	e3a01000 	mov	r1, #0	; 0x0
   124ac:	e3a0201c 	mov	r2, #28	; 0x1c
   124b0:	e1a00004 	mov	r0, r4
   124b4:	eb0015ea 	bl	17c64 <memset>
   124b8:	e595300c 	ldr	r3, [r5, #12]
   124bc:	e3833080 	orr	r3, r3, #128	; 0x80
   124c0:	e3a0000a 	mov	r0, #10	; 0xa
   124c4:	e3a01000 	mov	r1, #0	; 0x0
   124c8:	e585300c 	str	r3, [r5, #12]
   124cc:	ebffffac 	bl	12384 <sd_raw_send_command_r1>
   124d0:	e3500000 	cmp	r0, #0	; 0x0
   124d4:	15953004 	ldrne	r3, [r5, #4]
   124d8:	13a00000 	movne	r0, #0	; 0x0
   124dc:	13833080 	orrne	r3, r3, #128	; 0x80
   124e0:	15853004 	strne	r3, [r5, #4]
   124e4:	1a00008a 	bne	12714 <sd_raw_get_info+0x288>
   124e8:	ebffff9a 	bl	12358 <sd_raw_rec_byte>
   124ec:	e35000fe 	cmp	r0, #254	; 0xfe
   124f0:	1afffffc 	bne	124e8 <sd_raw_get_info+0x5c>
   124f4:	ebffff97 	bl	12358 <sd_raw_rec_byte>
   124f8:	e3a05000 	mov	r5, #0	; 0x0
   124fc:	ea000012 	b	1254c <sd_raw_get_info+0xc0>
   12500:	ebffff94 	bl	12358 <sd_raw_rec_byte>
   12504:	e355000e 	cmp	r5, #14	; 0xe
   12508:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   1250c:	ea000026 	b	125ac <sd_raw_get_info+0x120>
   12510:	0001254c 	.word	0x0001254c
   12514:	00012554 	.word	0x00012554
   12518:	00012554 	.word	0x00012554
   1251c:	0001255c 	.word	0x0001255c
   12520:	0001255c 	.word	0x0001255c
   12524:	0001255c 	.word	0x0001255c
   12528:	0001255c 	.word	0x0001255c
   1252c:	0001255c 	.word	0x0001255c
   12530:	00012568 	.word	0x00012568
   12534:	00012570 	.word	0x00012570
   12538:	00012570 	.word	0x00012570
   1253c:	00012570 	.word	0x00012570
   12540:	00012570 	.word	0x00012570
   12544:	00012588 	.word	0x00012588
   12548:	00012594 	.word	0x00012594
   1254c:	e5c40000 	strb	r0, [r4]
   12550:	ea00006a 	b	12700 <sd_raw_get_info+0x274>
   12554:	e7c50004 	strb	r0, [r5, r4]
   12558:	ea000013 	b	125ac <sd_raw_get_info+0x120>
   1255c:	e0853004 	add	r3, r5, r4
   12560:	e5c30001 	strb	r0, [r3, #1]
   12564:	ea000010 	b	125ac <sd_raw_get_info+0x120>
   12568:	e5c4000a 	strb	r0, [r4, #10]
   1256c:	ea000063 	b	12700 <sd_raw_get_info+0x274>
   12570:	e594200c 	ldr	r2, [r4, #12]
   12574:	e265300c 	rsb	r3, r5, #12	; 0xc
   12578:	e1a03183 	lsl	r3, r3, #3
   1257c:	e1822310 	orr	r2, r2, r0, lsl r3
   12580:	e584200c 	str	r2, [r4, #12]
   12584:	ea000008 	b	125ac <sd_raw_get_info+0x120>
   12588:	e1a03200 	lsl	r3, r0, #4
   1258c:	e5c43010 	strb	r3, [r4, #16]
   12590:	ea00005a 	b	12700 <sd_raw_get_info+0x274>
   12594:	e5d43010 	ldrb	r3, [r4, #16]
   12598:	e200200f 	and	r2, r0, #15	; 0xf
   1259c:	e1833220 	orr	r3, r3, r0, lsr #4
   125a0:	e5c43010 	strb	r3, [r4, #16]
   125a4:	e5c42011 	strb	r2, [r4, #17]
   125a8:	ea000054 	b	12700 <sd_raw_get_info+0x274>
   125ac:	e2853001 	add	r3, r5, #1	; 0x1
   125b0:	e20350ff 	and	r5, r3, #255	; 0xff
   125b4:	e3550011 	cmp	r5, #17	; 0x11
   125b8:	9affffd0 	bls	12500 <sd_raw_get_info+0x74>
   125bc:	e3a00009 	mov	r0, #9	; 0x9
   125c0:	e3a01000 	mov	r1, #0	; 0x0
   125c4:	ebffff6e 	bl	12384 <sd_raw_send_command_r1>
   125c8:	e3500000 	cmp	r0, #0	; 0x0
   125cc:	159f2148 	ldrne	r2, [pc, #328]	; 1271c <sd_raw_get_info+0x290>
   125d0:	15923004 	ldrne	r3, [r2, #4]
   125d4:	13a00000 	movne	r0, #0	; 0x0
   125d8:	13833080 	orrne	r3, r3, #128	; 0x80
   125dc:	1a000043 	bne	126f0 <sd_raw_get_info+0x264>
   125e0:	ebffff5c 	bl	12358 <sd_raw_rec_byte>
   125e4:	e35000fe 	cmp	r0, #254	; 0xfe
   125e8:	1afffffc 	bne	125e0 <sd_raw_get_info+0x154>
   125ec:	ebffff59 	bl	12358 <sd_raw_rec_byte>
   125f0:	e3a07000 	mov	r7, #0	; 0x0
   125f4:	e3a05001 	mov	r5, #1	; 0x1
   125f8:	e1a08007 	mov	r8, r7
   125fc:	e1a06007 	mov	r6, r7
   12600:	ebffff54 	bl	12358 <sd_raw_rec_byte>
   12604:	e2453005 	sub	r3, r5, #5	; 0x5
   12608:	e2852001 	add	r2, r5, #1	; 0x1
   1260c:	e3530009 	cmp	r3, #9	; 0x9
   12610:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   12614:	ea00002e 	b	126d4 <sd_raw_get_info+0x248>
   12618:	00012640 	.word	0x00012640
   1261c:	00012648 	.word	0x00012648
   12620:	00012654 	.word	0x00012654
   12624:	00012660 	.word	0x00012660
   12628:	00012678 	.word	0x00012678
   1262c:	00012684 	.word	0x00012684
   12630:	000126d4 	.word	0x000126d4
   12634:	000126d4 	.word	0x000126d4
   12638:	000126d4 	.word	0x000126d4
   1263c:	000126a0 	.word	0x000126a0
   12640:	e200800f 	and	r8, r0, #15	; 0xf
   12644:	ea000030 	b	1270c <sd_raw_get_info+0x280>
   12648:	e2003003 	and	r3, r0, #3	; 0x3
   1264c:	e1a06403 	lsl	r6, r3, #8
   12650:	ea00002d 	b	1270c <sd_raw_get_info+0x280>
   12654:	e1863000 	orr	r3, r6, r0
   12658:	e1a03903 	lsl	r3, r3, #18
   1265c:	ea000003 	b	12670 <sd_raw_get_info+0x1e4>
   12660:	e1a03900 	lsl	r3, r0, #18
   12664:	e1863c23 	orr	r3, r6, r3, lsr #24
   12668:	e2833001 	add	r3, r3, #1	; 0x1
   1266c:	e1a03803 	lsl	r3, r3, #16
   12670:	e1a06823 	lsr	r6, r3, #16
   12674:	ea000024 	b	1270c <sd_raw_get_info+0x280>
   12678:	e2003003 	and	r3, r0, #3	; 0x3
   1267c:	e1a07083 	lsl	r7, r3, #1
   12680:	ea000021 	b	1270c <sd_raw_get_info+0x280>
   12684:	e18733a0 	orr	r3, r7, r0, lsr #7
   12688:	e20370ff 	and	r7, r3, #255	; 0xff
   1268c:	e2883002 	add	r3, r8, #2	; 0x2
   12690:	e0873003 	add	r3, r7, r3
   12694:	e1a03316 	lsl	r3, r6, r3
   12698:	e5843014 	str	r3, [r4, #20]
   1269c:	ea00001a 	b	1270c <sd_raw_get_info+0x280>
   126a0:	e3100040 	tst	r0, #64	; 0x40
   126a4:	13a03001 	movne	r3, #1	; 0x1
   126a8:	15c43018 	strbne	r3, [r4, #24]
   126ac:	e3100020 	tst	r0, #32	; 0x20
   126b0:	13a03001 	movne	r3, #1	; 0x1
   126b4:	15c43019 	strbne	r3, [r4, #25]
   126b8:	e3100010 	tst	r0, #16	; 0x10
   126bc:	13a03001 	movne	r3, #1	; 0x1
   126c0:	15c4301a 	strbne	r3, [r4, #26]
   126c4:	e200300c 	and	r3, r0, #12	; 0xc
   126c8:	e1a03143 	asr	r3, r3, #2
   126cc:	e5c4301b 	strb	r3, [r4, #27]
   126d0:	ea00000d 	b	1270c <sd_raw_get_info+0x280>
   126d4:	e20250ff 	and	r5, r2, #255	; 0xff
   126d8:	e3550011 	cmp	r5, #17	; 0x11
   126dc:	9affffc7 	bls	12600 <sd_raw_get_info+0x174>
   126e0:	e59f2034 	ldr	r2, [pc, #52]	; 1271c <sd_raw_get_info+0x290>
   126e4:	e5923004 	ldr	r3, [r2, #4]
   126e8:	e3a00001 	mov	r0, #1	; 0x1
   126ec:	e3833080 	orr	r3, r3, #128	; 0x80
   126f0:	e5823004 	str	r3, [r2, #4]
   126f4:	ea000006 	b	12714 <sd_raw_get_info+0x288>
   126f8:	e3a00000 	mov	r0, #0	; 0x0
   126fc:	ea000004 	b	12714 <sd_raw_get_info+0x288>
   12700:	e2853001 	add	r3, r5, #1	; 0x1
   12704:	e20350ff 	and	r5, r3, #255	; 0xff
   12708:	eaffff7c 	b	12500 <sd_raw_get_info+0x74>
   1270c:	e20250ff 	and	r5, r2, #255	; 0xff
   12710:	eaffffba 	b	12600 <sd_raw_get_info+0x174>
   12714:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12718:	e12fff1e 	bx	lr
   1271c:	e0028000 	.word	0xe0028000

00012720 <sd_raw_read>:
   12720:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12724:	e1a02802 	lsl	r2, r2, #16
   12728:	e1a09000 	mov	r9, r0
   1272c:	e1a0a001 	mov	sl, r1
   12730:	e1a08822 	lsr	r8, r2, #16
   12734:	ea000046 	b	12854 <sd_raw_read+0x134>
   12738:	e1a06b89 	lsl	r6, r9, #23
   1273c:	e1a06ba6 	lsr	r6, r6, #23
   12740:	e59f3120 	ldr	r3, [pc, #288]	; 12868 <sd_raw_read+0x148>
   12744:	e2662c02 	rsb	r2, r6, #512	; 0x200
   12748:	e1a02802 	lsl	r2, r2, #16
   1274c:	e5930000 	ldr	r0, [r3]
   12750:	e3c95f7f 	bic	r5, r9, #508	; 0x1fc
   12754:	e3c55003 	bic	r5, r5, #3	; 0x3
   12758:	e1a02822 	lsr	r2, r2, #16
   1275c:	e1580002 	cmp	r8, r2
   12760:	31a07008 	movcc	r7, r8
   12764:	21a07002 	movcs	r7, r2
   12768:	e1550000 	cmp	r5, r0
   1276c:	0a00002f 	beq	12830 <sd_raw_read+0x110>
   12770:	e59f30f4 	ldr	r3, [pc, #244]	; 1286c <sd_raw_read+0x14c>
   12774:	e5d33000 	ldrb	r3, [r3]
   12778:	e3530000 	cmp	r3, #0	; 0x0
   1277c:	1a000004 	bne	12794 <sd_raw_read+0x74>
   12780:	e59f10e8 	ldr	r1, [pc, #232]	; 12870 <sd_raw_read+0x150>
   12784:	e3a02c02 	mov	r2, #512	; 0x200
   12788:	eb00003c 	bl	12880 <sd_raw_write>
   1278c:	e3500000 	cmp	r0, #0	; 0x0
   12790:	0a000032 	beq	12860 <sd_raw_read+0x140>
   12794:	e59f40d8 	ldr	r4, [pc, #216]	; 12874 <sd_raw_read+0x154>
   12798:	e594300c 	ldr	r3, [r4, #12]
   1279c:	e3833080 	orr	r3, r3, #128	; 0x80
   127a0:	e3a00011 	mov	r0, #17	; 0x11
   127a4:	e1a01005 	mov	r1, r5
   127a8:	e584300c 	str	r3, [r4, #12]
   127ac:	ebfffef4 	bl	12384 <sd_raw_send_command_r1>
   127b0:	e3500000 	cmp	r0, #0	; 0x0
   127b4:	15943004 	ldrne	r3, [r4, #4]
   127b8:	13a00000 	movne	r0, #0	; 0x0
   127bc:	13833080 	orrne	r3, r3, #128	; 0x80
   127c0:	15843004 	strne	r3, [r4, #4]
   127c4:	1a000025 	bne	12860 <sd_raw_read+0x140>
   127c8:	ebfffee2 	bl	12358 <sd_raw_rec_byte>
   127cc:	e35000fe 	cmp	r0, #254	; 0xfe
   127d0:	1afffffc 	bne	127c8 <sd_raw_read+0xa8>
   127d4:	e59f409c 	ldr	r4, [pc, #156]	; 12878 <sd_raw_read+0x158>
   127d8:	ebfffede 	bl	12358 <sd_raw_rec_byte>
   127dc:	e59f3098 	ldr	r3, [pc, #152]	; 1287c <sd_raw_read+0x15c>
   127e0:	e5440001 	strb	r0, [r4, #-1]
   127e4:	e2844001 	add	r4, r4, #1	; 0x1
   127e8:	e1540003 	cmp	r4, r3
   127ec:	1afffff9 	bne	127d8 <sd_raw_read+0xb8>
   127f0:	e59f3070 	ldr	r3, [pc, #112]	; 12868 <sd_raw_read+0x148>
   127f4:	e59f1074 	ldr	r1, [pc, #116]	; 12870 <sd_raw_read+0x150>
   127f8:	e1a02007 	mov	r2, r7
   127fc:	e5835000 	str	r5, [r3]
   12800:	e0861001 	add	r1, r6, r1
   12804:	e1a0000a 	mov	r0, sl
   12808:	eb0014d6 	bl	17b68 <memcpy>
   1280c:	ebfffed1 	bl	12358 <sd_raw_rec_byte>
   12810:	ebfffed0 	bl	12358 <sd_raw_rec_byte>
   12814:	e59f2058 	ldr	r2, [pc, #88]	; 12874 <sd_raw_read+0x154>
   12818:	e5923004 	ldr	r3, [r2, #4]
   1281c:	e3833080 	orr	r3, r3, #128	; 0x80
   12820:	e5823004 	str	r3, [r2, #4]
   12824:	e08aa007 	add	sl, sl, r7
   12828:	ebfffeca 	bl	12358 <sd_raw_rec_byte>
   1282c:	ea000004 	b	12844 <sd_raw_read+0x124>
   12830:	e59f1038 	ldr	r1, [pc, #56]	; 12870 <sd_raw_read+0x150>
   12834:	e1a0000a 	mov	r0, sl
   12838:	e0861001 	add	r1, r6, r1
   1283c:	e1a02007 	mov	r2, r7
   12840:	eb0014c8 	bl	17b68 <memcpy>
   12844:	e0673008 	rsb	r3, r7, r8
   12848:	e1a03803 	lsl	r3, r3, #16
   1284c:	e0899007 	add	r9, r9, r7
   12850:	e1a08823 	lsr	r8, r3, #16
   12854:	e3580000 	cmp	r8, #0	; 0x0
   12858:	1affffb6 	bne	12738 <sd_raw_read+0x18>
   1285c:	e3a00001 	mov	r0, #1	; 0x1
   12860:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12864:	e12fff1e 	bx	lr
   12868:	40000f20 	.word	0x40000f20
   1286c:	40000f24 	.word	0x40000f24
   12870:	40000d20 	.word	0x40000d20
   12874:	e0028000 	.word	0xe0028000
   12878:	40000d21 	.word	0x40000d21
   1287c:	40000f21 	.word	0x40000f21

00012880 <sd_raw_write>:
   12880:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12884:	e1a02802 	lsl	r2, r2, #16
   12888:	e1a0a000 	mov	sl, r0
   1288c:	e1a08001 	mov	r8, r1
   12890:	e1a07822 	lsr	r7, r2, #16
   12894:	ea000069 	b	12a40 <sd_raw_write+0x1c0>
   12898:	e1a04b8a 	lsl	r4, sl, #23
   1289c:	e1a04ba4 	lsr	r4, r4, #23
   128a0:	e59f91cc 	ldr	r9, [pc, #460]	; 12a74 <sd_raw_write+0x1f4>
   128a4:	e2643c02 	rsb	r3, r4, #512	; 0x200
   128a8:	e1a03803 	lsl	r3, r3, #16
   128ac:	e3ca5f7f 	bic	r5, sl, #508	; 0x1fc
   128b0:	e5990000 	ldr	r0, [r9]
   128b4:	e3c55003 	bic	r5, r5, #3	; 0x3
   128b8:	e1a03823 	lsr	r3, r3, #16
   128bc:	e1570003 	cmp	r7, r3
   128c0:	31a06007 	movcc	r6, r7
   128c4:	21a06003 	movcs	r6, r3
   128c8:	e1550000 	cmp	r5, r0
   128cc:	0a000017 	beq	12930 <sd_raw_write+0xb0>
   128d0:	e59f31a0 	ldr	r3, [pc, #416]	; 12a78 <sd_raw_write+0x1f8>
   128d4:	e5d33000 	ldrb	r3, [r3]
   128d8:	e3530000 	cmp	r3, #0	; 0x0
   128dc:	1a000004 	bne	128f4 <sd_raw_write+0x74>
   128e0:	e59f1194 	ldr	r1, [pc, #404]	; 12a7c <sd_raw_write+0x1fc>
   128e4:	e3a02c02 	mov	r2, #512	; 0x200
   128e8:	ebffffe4 	bl	12880 <sd_raw_write>
   128ec:	e3500000 	cmp	r0, #0	; 0x0
   128f0:	0a000055 	beq	12a4c <sd_raw_write+0x1cc>
   128f4:	e59f3184 	ldr	r3, [pc, #388]	; 12a80 <sd_raw_write+0x200>
   128f8:	e1560003 	cmp	r6, r3
   128fc:	83a03000 	movhi	r3, #0	; 0x0
   12900:	93a03001 	movls	r3, #1	; 0x1
   12904:	e3540000 	cmp	r4, #0	; 0x0
   12908:	13833001 	orrne	r3, r3, #1	; 0x1
   1290c:	e3530000 	cmp	r3, #0	; 0x0
   12910:	0a000005 	beq	1292c <sd_raw_write+0xac>
   12914:	e1a00005 	mov	r0, r5
   12918:	e59f115c 	ldr	r1, [pc, #348]	; 12a7c <sd_raw_write+0x1fc>
   1291c:	e3a02c02 	mov	r2, #512	; 0x200
   12920:	ebffff7e 	bl	12720 <sd_raw_read>
   12924:	e3500000 	cmp	r0, #0	; 0x0
   12928:	0a000047 	beq	12a4c <sd_raw_write+0x1cc>
   1292c:	e5895000 	str	r5, [r9]
   12930:	e59f3144 	ldr	r3, [pc, #324]	; 12a7c <sd_raw_write+0x1fc>
   12934:	e1580003 	cmp	r8, r3
   12938:	0a000008 	beq	12960 <sd_raw_write+0xe0>
   1293c:	e0840003 	add	r0, r4, r3
   12940:	e1a02006 	mov	r2, r6
   12944:	e1a01008 	mov	r1, r8
   12948:	eb001486 	bl	17b68 <memcpy>
   1294c:	e59f3124 	ldr	r3, [pc, #292]	; 12a78 <sd_raw_write+0x1f8>
   12950:	e3a02000 	mov	r2, #0	; 0x0
   12954:	e1570006 	cmp	r7, r6
   12958:	e5c32000 	strb	r2, [r3]
   1295c:	0a000041 	beq	12a68 <sd_raw_write+0x1e8>
   12960:	e59f411c 	ldr	r4, [pc, #284]	; 12a84 <sd_raw_write+0x204>
   12964:	e594300c 	ldr	r3, [r4, #12]
   12968:	e3833080 	orr	r3, r3, #128	; 0x80
   1296c:	e1a01005 	mov	r1, r5
   12970:	e3a00018 	mov	r0, #24	; 0x18
   12974:	e584300c 	str	r3, [r4, #12]
   12978:	ebfffe81 	bl	12384 <sd_raw_send_command_r1>
   1297c:	e3500000 	cmp	r0, #0	; 0x0
   12980:	1a000033 	bne	12a54 <sd_raw_write+0x1d4>
   12984:	e59f30fc 	ldr	r3, [pc, #252]	; 12a88 <sd_raw_write+0x208>
   12988:	e3a020fe 	mov	r2, #254	; 0xfe
   1298c:	e5832008 	str	r2, [r3, #8]
   12990:	e59f30f0 	ldr	r3, [pc, #240]	; 12a88 <sd_raw_write+0x208>
   12994:	e5933004 	ldr	r3, [r3, #4]
   12998:	e3130080 	tst	r3, #128	; 0x80
   1299c:	0afffffb 	beq	12990 <sd_raw_write+0x110>
   129a0:	e59f10e4 	ldr	r1, [pc, #228]	; 12a8c <sd_raw_write+0x20c>
   129a4:	e5512001 	ldrb	r2, [r1, #-1]
   129a8:	e59f30d8 	ldr	r3, [pc, #216]	; 12a88 <sd_raw_write+0x208>
   129ac:	e5832008 	str	r2, [r3, #8]
   129b0:	e59f20d0 	ldr	r2, [pc, #208]	; 12a88 <sd_raw_write+0x208>
   129b4:	e5923004 	ldr	r3, [r2, #4]
   129b8:	e3130080 	tst	r3, #128	; 0x80
   129bc:	0afffffb 	beq	129b0 <sd_raw_write+0x130>
   129c0:	e59f30c8 	ldr	r3, [pc, #200]	; 12a90 <sd_raw_write+0x210>
   129c4:	e2811001 	add	r1, r1, #1	; 0x1
   129c8:	e1510003 	cmp	r1, r3
   129cc:	1afffff4 	bne	129a4 <sd_raw_write+0x124>
   129d0:	e3a030ff 	mov	r3, #255	; 0xff
   129d4:	e5823008 	str	r3, [r2, #8]
   129d8:	e59f20a8 	ldr	r2, [pc, #168]	; 12a88 <sd_raw_write+0x208>
   129dc:	e5923004 	ldr	r3, [r2, #4]
   129e0:	e3130080 	tst	r3, #128	; 0x80
   129e4:	0afffffb 	beq	129d8 <sd_raw_write+0x158>
   129e8:	e3a030ff 	mov	r3, #255	; 0xff
   129ec:	e5823008 	str	r3, [r2, #8]
   129f0:	e59f3090 	ldr	r3, [pc, #144]	; 12a88 <sd_raw_write+0x208>
   129f4:	e5933004 	ldr	r3, [r3, #4]
   129f8:	e3130080 	tst	r3, #128	; 0x80
   129fc:	0afffffb 	beq	129f0 <sd_raw_write+0x170>
   12a00:	ebfffe54 	bl	12358 <sd_raw_rec_byte>
   12a04:	e35000ff 	cmp	r0, #255	; 0xff
   12a08:	1afffffc 	bne	12a00 <sd_raw_write+0x180>
   12a0c:	ebfffe51 	bl	12358 <sd_raw_rec_byte>
   12a10:	e59f206c 	ldr	r2, [pc, #108]	; 12a84 <sd_raw_write+0x204>
   12a14:	e5923004 	ldr	r3, [r2, #4]
   12a18:	e3833080 	orr	r3, r3, #128	; 0x80
   12a1c:	e5823004 	str	r3, [r2, #4]
   12a20:	e59f3050 	ldr	r3, [pc, #80]	; 12a78 <sd_raw_write+0x1f8>
   12a24:	e0661007 	rsb	r1, r6, r7
   12a28:	e3a02001 	mov	r2, #1	; 0x1
   12a2c:	e1a01801 	lsl	r1, r1, #16
   12a30:	e5c32000 	strb	r2, [r3]
   12a34:	e08aa006 	add	sl, sl, r6
   12a38:	e0888006 	add	r8, r8, r6
   12a3c:	e1a07821 	lsr	r7, r1, #16
   12a40:	e3570000 	cmp	r7, #0	; 0x0
   12a44:	1affff93 	bne	12898 <sd_raw_write+0x18>
   12a48:	ea000006 	b	12a68 <sd_raw_write+0x1e8>
   12a4c:	e3a00000 	mov	r0, #0	; 0x0
   12a50:	ea000005 	b	12a6c <sd_raw_write+0x1ec>
   12a54:	e5943004 	ldr	r3, [r4, #4]
   12a58:	e3a00000 	mov	r0, #0	; 0x0
   12a5c:	e3833080 	orr	r3, r3, #128	; 0x80
   12a60:	e5843004 	str	r3, [r4, #4]
   12a64:	ea000000 	b	12a6c <sd_raw_write+0x1ec>
   12a68:	e3a00001 	mov	r0, #1	; 0x1
   12a6c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a70:	e12fff1e 	bx	lr
   12a74:	40000f20 	.word	0x40000f20
   12a78:	40000f24 	.word	0x40000f24
   12a7c:	40000d20 	.word	0x40000d20
   12a80:	000001ff 	.word	0x000001ff
   12a84:	e0028000 	.word	0xe0028000
   12a88:	e0020000 	.word	0xe0020000
   12a8c:	40000d21 	.word	0x40000d21
   12a90:	40000f21 	.word	0x40000f21

00012a94 <sd_raw_sync>:
   12a94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12a98:	e59f3030 	ldr	r3, [pc, #48]	; 12ad0 <sd_raw_sync+0x3c>
   12a9c:	e5d33000 	ldrb	r3, [r3]
   12aa0:	e3530000 	cmp	r3, #0	; 0x0
   12aa4:	e59f1028 	ldr	r1, [pc, #40]	; 12ad4 <sd_raw_sync+0x40>
   12aa8:	e3a02c02 	mov	r2, #512	; 0x200
   12aac:	e3a00001 	mov	r0, #1	; 0x1
   12ab0:	1a000004 	bne	12ac8 <sd_raw_sync+0x34>
   12ab4:	e59f301c 	ldr	r3, [pc, #28]	; 12ad8 <sd_raw_sync+0x44>
   12ab8:	e5930000 	ldr	r0, [r3]
   12abc:	ebffff6f 	bl	12880 <sd_raw_write>
   12ac0:	e2500000 	subs	r0, r0, #0	; 0x0
   12ac4:	13a00001 	movne	r0, #1	; 0x1
   12ac8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12acc:	e12fff1e 	bx	lr
   12ad0:	40000f24 	.word	0x40000f24
   12ad4:	40000d20 	.word	0x40000d20
   12ad8:	40000f20 	.word	0x40000f20

00012adc <sd_raw_read_interval>:
   12adc:	e1a02802 	lsl	r2, r2, #16
   12ae0:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   12ae4:	e1a03803 	lsl	r3, r3, #16
   12ae8:	e3520000 	cmp	r2, #0	; 0x0
   12aec:	13510000 	cmpne	r1, #0	; 0x0
   12af0:	e1a07001 	mov	r7, r1
   12af4:	e1a06000 	mov	r6, r0
   12af8:	e1a05823 	lsr	r5, r3, #16
   12afc:	e28d801c 	add	r8, sp, #28	; 0x1c
   12b00:	e8980500 	ldm	r8, {r8, sl}
   12b04:	e1a04822 	lsr	r4, r2, #16
   12b08:	0a00001a 	beq	12b78 <sd_raw_read_interval+0x9c>
   12b0c:	e2783001 	rsbs	r3, r8, #1	; 0x1
   12b10:	33a03000 	movcc	r3, #0	; 0x0
   12b14:	e1550004 	cmp	r5, r4
   12b18:	33833001 	orrcc	r3, r3, #1	; 0x1
   12b1c:	e3530000 	cmp	r3, #0	; 0x0
   12b20:	0a00000e 	beq	12b60 <sd_raw_read_interval+0x84>
   12b24:	ea000013 	b	12b78 <sd_raw_read_interval+0x9c>
   12b28:	ebfffefc 	bl	12720 <sd_raw_read>
   12b2c:	e3500000 	cmp	r0, #0	; 0x0
   12b30:	e1a01006 	mov	r1, r6
   12b34:	e1a0200a 	mov	r2, sl
   12b38:	e1a00007 	mov	r0, r7
   12b3c:	e0866004 	add	r6, r6, r4
   12b40:	0a00000c 	beq	12b78 <sd_raw_read_interval+0x9c>
   12b44:	e1a0e00f 	mov	lr, pc
   12b48:	e12fff18 	bx	r8
   12b4c:	e3500000 	cmp	r0, #0	; 0x0
   12b50:	0a00000a 	beq	12b80 <sd_raw_read_interval+0xa4>
   12b54:	e0643005 	rsb	r3, r4, r5
   12b58:	e1a03803 	lsl	r3, r3, #16
   12b5c:	e1a05823 	lsr	r5, r3, #16
   12b60:	e1550004 	cmp	r5, r4
   12b64:	e1a00006 	mov	r0, r6
   12b68:	e1a01007 	mov	r1, r7
   12b6c:	e1a02004 	mov	r2, r4
   12b70:	2affffec 	bcs	12b28 <sd_raw_read_interval+0x4c>
   12b74:	ea000001 	b	12b80 <sd_raw_read_interval+0xa4>
   12b78:	e3a00000 	mov	r0, #0	; 0x0
   12b7c:	ea000000 	b	12b84 <sd_raw_read_interval+0xa8>
   12b80:	e3a00001 	mov	r0, #1	; 0x1
   12b84:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
   12b88:	e12fff1e 	bx	lr

00012b8c <sd_raw_init>:
   12b8c:	e92d4030 	push	{r4, r5, lr}
   12b90:	e59f41e4 	ldr	r4, [pc, #484]	; 12d7c <sd_raw_init+0x1f0>
   12b94:	e5943008 	ldr	r3, [r4, #8]
   12b98:	e3833080 	orr	r3, r3, #128	; 0x80
   12b9c:	e5843008 	str	r3, [r4, #8]
   12ba0:	e59f21d8 	ldr	r2, [pc, #472]	; 12d80 <sd_raw_init+0x1f4>
   12ba4:	e5923000 	ldr	r3, [r2]
   12ba8:	e3833a01 	orr	r3, r3, #4096	; 0x1000
   12bac:	e5823000 	str	r3, [r2]
   12bb0:	e5923000 	ldr	r3, [r2]
   12bb4:	e3833b01 	orr	r3, r3, #1024	; 0x400
   12bb8:	e5823000 	str	r3, [r2]
   12bbc:	e5923000 	ldr	r3, [r2]
   12bc0:	e3833c01 	orr	r3, r3, #256	; 0x100
   12bc4:	e5823000 	str	r3, [r2]
   12bc8:	e5943004 	ldr	r3, [r4, #4]
   12bcc:	e3833080 	orr	r3, r3, #128	; 0x80
   12bd0:	e5843004 	str	r3, [r4, #4]
   12bd4:	e2422903 	sub	r2, r2, #49152	; 0xc000
   12bd8:	e3a03096 	mov	r3, #150	; 0x96
   12bdc:	e582300c 	str	r3, [r2, #12]
   12be0:	e3a03038 	mov	r3, #56	; 0x38
   12be4:	e5823000 	str	r3, [r2]
   12be8:	ebfffdcb 	bl	1231c <sd_raw_available>
   12bec:	e2505000 	subs	r5, r0, #0	; 0x0
   12bf0:	1a000002 	bne	12c00 <sd_raw_init+0x74>
   12bf4:	e59f0188 	ldr	r0, [pc, #392]	; 12d84 <sd_raw_init+0x1f8>
   12bf8:	ebfffbb0 	bl	11ac0 <rprintf>
   12bfc:	ea00004f 	b	12d40 <sd_raw_init+0x1b4>
   12c00:	e5943008 	ldr	r3, [r4, #8]
   12c04:	e3833080 	orr	r3, r3, #128	; 0x80
   12c08:	e5843008 	str	r3, [r4, #8]
   12c0c:	e5943004 	ldr	r3, [r4, #4]
   12c10:	e3833080 	orr	r3, r3, #128	; 0x80
   12c14:	e5843004 	str	r3, [r4, #4]
   12c18:	e3a04000 	mov	r4, #0	; 0x0
   12c1c:	ebfffdcd 	bl	12358 <sd_raw_rec_byte>
   12c20:	e2843001 	add	r3, r4, #1	; 0x1
   12c24:	e1a03803 	lsl	r3, r3, #16
   12c28:	e1a04823 	lsr	r4, r3, #16
   12c2c:	e354000a 	cmp	r4, #10	; 0xa
   12c30:	1afffff9 	bne	12c1c <sd_raw_init+0x90>
   12c34:	e59f2140 	ldr	r2, [pc, #320]	; 12d7c <sd_raw_init+0x1f0>
   12c38:	e592300c 	ldr	r3, [r2, #12]
   12c3c:	e3833080 	orr	r3, r3, #128	; 0x80
   12c40:	e582300c 	str	r3, [r2, #12]
   12c44:	e3a05000 	mov	r5, #0	; 0x0
   12c48:	e3a00000 	mov	r0, #0	; 0x0
   12c4c:	e1a01000 	mov	r1, r0
   12c50:	ebfffdcb 	bl	12384 <sd_raw_send_command_r1>
   12c54:	e1a04000 	mov	r4, r0
   12c58:	e1a01005 	mov	r1, r5
   12c5c:	e59f0124 	ldr	r0, [pc, #292]	; 12d88 <sd_raw_init+0x1fc>
   12c60:	e1a02004 	mov	r2, r4
   12c64:	ebfffb95 	bl	11ac0 <rprintf>
   12c68:	e3540001 	cmp	r4, #1	; 0x1
   12c6c:	e2855001 	add	r5, r5, #1	; 0x1
   12c70:	0a00000a 	beq	12ca0 <sd_raw_init+0x114>
   12c74:	e3550c02 	cmp	r5, #512	; 0x200
   12c78:	1afffff2 	bne	12c48 <sd_raw_init+0xbc>
   12c7c:	e59f0108 	ldr	r0, [pc, #264]	; 12d8c <sd_raw_init+0x200>
   12c80:	e1a01004 	mov	r1, r4
   12c84:	ebfffb8d 	bl	11ac0 <rprintf>
   12c88:	e59f20ec 	ldr	r2, [pc, #236]	; 12d7c <sd_raw_init+0x1f0>
   12c8c:	e5923004 	ldr	r3, [r2, #4]
   12c90:	e3a00000 	mov	r0, #0	; 0x0
   12c94:	e3833080 	orr	r3, r3, #128	; 0x80
   12c98:	e5823004 	str	r3, [r2, #4]
   12c9c:	ea000034 	b	12d74 <sd_raw_init+0x1e8>
   12ca0:	e3a04000 	mov	r4, #0	; 0x0
   12ca4:	e3a01000 	mov	r1, #0	; 0x0
   12ca8:	e3a00001 	mov	r0, #1	; 0x1
   12cac:	ebfffdb4 	bl	12384 <sd_raw_send_command_r1>
   12cb0:	e2843001 	add	r3, r4, #1	; 0x1
   12cb4:	e3100001 	tst	r0, #1	; 0x1
   12cb8:	e1a02803 	lsl	r2, r3, #16
   12cbc:	0a000004 	beq	12cd4 <sd_raw_init+0x148>
   12cc0:	e59f30c8 	ldr	r3, [pc, #200]	; 12d90 <sd_raw_init+0x204>
   12cc4:	e1540003 	cmp	r4, r3
   12cc8:	e1a04822 	lsr	r4, r2, #16
   12ccc:	0a00001d 	beq	12d48 <sd_raw_init+0x1bc>
   12cd0:	eafffff3 	b	12ca4 <sd_raw_init+0x118>
   12cd4:	e3a00010 	mov	r0, #16	; 0x10
   12cd8:	e3a01c02 	mov	r1, #512	; 0x200
   12cdc:	ebfffda8 	bl	12384 <sd_raw_send_command_r1>
   12ce0:	e3500000 	cmp	r0, #0	; 0x0
   12ce4:	159f2090 	ldrne	r2, [pc, #144]	; 12d7c <sd_raw_init+0x1f0>
   12ce8:	15923004 	ldrne	r3, [r2, #4]
   12cec:	159f00a0 	ldrne	r0, [pc, #160]	; 12d94 <sd_raw_init+0x208>
   12cf0:	13833080 	orrne	r3, r3, #128	; 0x80
   12cf4:	1a000017 	bne	12d58 <sd_raw_init+0x1cc>
   12cf8:	e59fc07c 	ldr	ip, [pc, #124]	; 12d7c <sd_raw_init+0x1f0>
   12cfc:	e59c3004 	ldr	r3, [ip, #4]
   12d00:	e3833080 	orr	r3, r3, #128	; 0x80
   12d04:	e58c3004 	str	r3, [ip, #4]
   12d08:	e59f3088 	ldr	r3, [pc, #136]	; 12d98 <sd_raw_init+0x20c>
   12d0c:	e3e0c000 	mvn	ip, #0	; 0x0
   12d10:	e583c000 	str	ip, [r3]
   12d14:	e59f3080 	ldr	r3, [pc, #128]	; 12d9c <sd_raw_init+0x210>
   12d18:	e28cc03d 	add	ip, ip, #61	; 0x3d
   12d1c:	e583c00c 	str	ip, [r3, #12]
   12d20:	e59f3078 	ldr	r3, [pc, #120]	; 12da0 <sd_raw_init+0x214>
   12d24:	e3a05001 	mov	r5, #1	; 0x1
   12d28:	e59f1074 	ldr	r1, [pc, #116]	; 12da4 <sd_raw_init+0x218>
   12d2c:	e3a02c02 	mov	r2, #512	; 0x200
   12d30:	e5c35000 	strb	r5, [r3]
   12d34:	ebfffe79 	bl	12720 <sd_raw_read>
   12d38:	e2504000 	subs	r4, r0, #0	; 0x0
   12d3c:	0a000009 	beq	12d68 <sd_raw_init+0x1dc>
   12d40:	e1a00005 	mov	r0, r5
   12d44:	ea00000a 	b	12d74 <sd_raw_init+0x1e8>
   12d48:	e59f202c 	ldr	r2, [pc, #44]	; 12d7c <sd_raw_init+0x1f0>
   12d4c:	e5923004 	ldr	r3, [r2, #4]
   12d50:	e59f0050 	ldr	r0, [pc, #80]	; 12da8 <sd_raw_init+0x21c>
   12d54:	e3833080 	orr	r3, r3, #128	; 0x80
   12d58:	e5823004 	str	r3, [r2, #4]
   12d5c:	ebfffb57 	bl	11ac0 <rprintf>
   12d60:	e3a00000 	mov	r0, #0	; 0x0
   12d64:	ea000002 	b	12d74 <sd_raw_init+0x1e8>
   12d68:	e59f003c 	ldr	r0, [pc, #60]	; 12dac <sd_raw_init+0x220>
   12d6c:	ebfffb53 	bl	11ac0 <rprintf>
   12d70:	e1a00004 	mov	r0, r4
   12d74:	e8bd4030 	pop	{r4, r5, lr}
   12d78:	e12fff1e 	bx	lr
   12d7c:	e0028000 	.word	0xe0028000
   12d80:	e002c000 	.word	0xe002c000
   12d84:	0001922c 	.word	0x0001922c
   12d88:	00019244 	.word	0x00019244
   12d8c:	00019258 	.word	0x00019258
   12d90:	00007fff 	.word	0x00007fff
   12d94:	0001927c 	.word	0x0001927c
   12d98:	40000f20 	.word	0x40000f20
   12d9c:	e0020000 	.word	0xe0020000
   12da0:	40000f24 	.word	0x40000f24
   12da4:	40000d20 	.word	0x40000d20
   12da8:	0001926c 	.word	0x0001926c
   12dac:	00019294 	.word	0x00019294

00012db0 <format_card>:
   12db0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12db4:	e20000ff 	and	r0, r0, #255	; 0xff
   12db8:	e35000aa 	cmp	r0, #170	; 0xaa
   12dbc:	e24ddc02 	sub	sp, sp, #512	; 0x200
   12dc0:	13a00000 	movne	r0, #0	; 0x0
   12dc4:	1a00006d 	bne	12f80 <format_card+0x1d0>
   12dc8:	e3a04000 	mov	r4, #0	; 0x0
   12dcc:	e3a06000 	mov	r6, #0	; 0x0
   12dd0:	e7c4600d 	strb	r6, [r4, sp]
   12dd4:	e2844001 	add	r4, r4, #1	; 0x1
   12dd8:	e3540c02 	cmp	r4, #512	; 0x200
   12ddc:	1afffffa 	bne	12dcc <format_card+0x1c>
   12de0:	ebffff69 	bl	12b8c <sd_raw_init>
   12de4:	ebffff2a 	bl	12a94 <sd_raw_sync>
   12de8:	e1a02004 	mov	r2, r4
   12dec:	e1a0100d 	mov	r1, sp
   12df0:	e1a00006 	mov	r0, r6
   12df4:	ebfffea1 	bl	12880 <sd_raw_write>
   12df8:	ebffff25 	bl	12a94 <sd_raw_sync>
   12dfc:	e1a02004 	mov	r2, r4
   12e00:	e1a0100d 	mov	r1, sp
   12e04:	e3a00702 	mov	r0, #524288	; 0x80000
   12e08:	ebfffe9c 	bl	12880 <sd_raw_write>
   12e0c:	e3a04703 	mov	r4, #786432	; 0xc0000
   12e10:	ebffff1f 	bl	12a94 <sd_raw_sync>
   12e14:	e1a00004 	mov	r0, r4
   12e18:	e1a0100d 	mov	r1, sp
   12e1c:	e3a02c02 	mov	r2, #512	; 0x200
   12e20:	ebfffe96 	bl	12880 <sd_raw_write>
   12e24:	e59f3160 	ldr	r3, [pc, #352]	; 12f8c <format_card+0x1dc>
   12e28:	e2844c02 	add	r4, r4, #512	; 0x200
   12e2c:	e1540003 	cmp	r4, r3
   12e30:	e1a0900d 	mov	r9, sp
   12e34:	1afffff5 	bne	12e10 <format_card+0x60>
   12e38:	e3a03006 	mov	r3, #6	; 0x6
   12e3c:	e5cd31c2 	strb	r3, [sp, #450]
   12e40:	e2833019 	add	r3, r3, #25	; 0x19
   12e44:	e5cd31c3 	strb	r3, [sp, #451]
   12e48:	e3e0301f 	mvn	r3, #31	; 0x1f
   12e4c:	e3a04000 	mov	r4, #0	; 0x0
   12e50:	e3a02001 	mov	r2, #1	; 0x1
   12e54:	e3a05055 	mov	r5, #85	; 0x55
   12e58:	e3a06004 	mov	r6, #4	; 0x4
   12e5c:	e3a0704c 	mov	r7, #76	; 0x4c
   12e60:	e3a0800f 	mov	r8, #15	; 0xf
   12e64:	e3e0a055 	mvn	sl, #85	; 0x55
   12e68:	e5cd31c4 	strb	r3, [sp, #452]
   12e6c:	e3e0302c 	mvn	r3, #44	; 0x2c
   12e70:	e5cd31c5 	strb	r3, [sp, #453]
   12e74:	e5cd21c1 	strb	r2, [sp, #449]
   12e78:	e5cd21c0 	strb	r2, [sp, #448]
   12e7c:	e5cd41be 	strb	r4, [sp, #446]
   12e80:	e5cd41bf 	strb	r4, [sp, #447]
   12e84:	e5cd41c6 	strb	r4, [sp, #454]
   12e88:	e5cd61c7 	strb	r6, [sp, #455]
   12e8c:	e5cd41c8 	strb	r4, [sp, #456]
   12e90:	e5cd41c9 	strb	r4, [sp, #457]
   12e94:	e5cd41ca 	strb	r4, [sp, #458]
   12e98:	e5cd71cb 	strb	r7, [sp, #459]
   12e9c:	e5cd81cc 	strb	r8, [sp, #460]
   12ea0:	e5cd51fe 	strb	r5, [sp, #510]
   12ea4:	e5cda1ff 	strb	sl, [sp, #511]
   12ea8:	ebfffef9 	bl	12a94 <sd_raw_sync>
   12eac:	e1a0100d 	mov	r1, sp
   12eb0:	e3a02c02 	mov	r2, #512	; 0x200
   12eb4:	e1a00004 	mov	r0, r4
   12eb8:	ebfffe70 	bl	12880 <sd_raw_write>
   12ebc:	ebfffef4 	bl	12a94 <sd_raw_sync>
   12ec0:	e3e03014 	mvn	r3, #20	; 0x14
   12ec4:	e5cd3000 	strb	r3, [sp]
   12ec8:	e2833013 	add	r3, r3, #19	; 0x13
   12ecc:	e5cd3001 	strb	r3, [sp, #1]
   12ed0:	e3e0306f 	mvn	r3, #111	; 0x6f
   12ed4:	e5cd3002 	strb	r3, [sp, #2]
   12ed8:	e2833080 	add	r3, r3, #128	; 0x80
   12edc:	e5cd300d 	strb	r3, [sp, #13]
   12ee0:	e2833006 	add	r3, r3, #6	; 0x6
   12ee4:	e5cd300e 	strb	r3, [sp, #14]
   12ee8:	e3e03007 	mvn	r3, #7	; 0x7
   12eec:	e5cd3015 	strb	r3, [sp, #21]
   12ef0:	e3e0300a 	mvn	r3, #10	; 0xa
   12ef4:	e5cd3016 	strb	r3, [sp, #22]
   12ef8:	e2833034 	add	r3, r3, #52	; 0x34
   12efc:	e5cd3026 	strb	r3, [sp, #38]
   12f00:	e283301d 	add	r3, r3, #29	; 0x1d
   12f04:	e5cd3036 	strb	r3, [sp, #54]
   12f08:	e3a03041 	mov	r3, #65	; 0x41
   12f0c:	e5cd3037 	strb	r3, [sp, #55]
   12f10:	e2833013 	add	r3, r3, #19	; 0x13
   12f14:	e5cd3038 	strb	r3, [sp, #56]
   12f18:	e3a03031 	mov	r3, #49	; 0x31
   12f1c:	e3a02020 	mov	r2, #32	; 0x20
   12f20:	e3a01002 	mov	r1, #2	; 0x2
   12f24:	e5cd3039 	strb	r3, [sp, #57]
   12f28:	e2833005 	add	r3, r3, #5	; 0x5
   12f2c:	e5cd303a 	strb	r3, [sp, #58]
   12f30:	e5cd1012 	strb	r1, [sp, #18]
   12f34:	e5cd203d 	strb	r2, [sp, #61]
   12f38:	e5cd100c 	strb	r1, [sp, #12]
   12f3c:	e5cd1010 	strb	r1, [sp, #16]
   12f40:	e5cd2018 	strb	r2, [sp, #24]
   12f44:	e5cd201a 	strb	r2, [sp, #26]
   12f48:	e5cd203b 	strb	r2, [sp, #59]
   12f4c:	e5cd203c 	strb	r2, [sp, #60]
   12f50:	e5cd601d 	strb	r6, [sp, #29]
   12f54:	e5cd7021 	strb	r7, [sp, #33]
   12f58:	e5cd8022 	strb	r8, [sp, #34]
   12f5c:	e5cda1ff 	strb	sl, [sp, #511]
   12f60:	e5cd51fe 	strb	r5, [sp, #510]
   12f64:	ebfffeca 	bl	12a94 <sd_raw_sync>
   12f68:	e1a0100d 	mov	r1, sp
   12f6c:	e3a02c02 	mov	r2, #512	; 0x200
   12f70:	e3a00702 	mov	r0, #524288	; 0x80000
   12f74:	ebfffe41 	bl	12880 <sd_raw_write>
   12f78:	ebfffec5 	bl	12a94 <sd_raw_sync>
   12f7c:	e1a00005 	mov	r0, r5
   12f80:	e28ddc02 	add	sp, sp, #512	; 0x200
   12f84:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f88:	e12fff1e 	bx	lr
   12f8c:	000dea00 	.word	0x000dea00

00012f90 <fat16_dir_entry_seek_callback>:
   12f90:	e5d03000 	ldrb	r3, [r0]
   12f94:	e3530000 	cmp	r3, #0	; 0x0
   12f98:	135300e5 	cmpne	r3, #229	; 0xe5
   12f9c:	0a000015 	beq	12ff8 <fat16_dir_entry_seek_callback+0x68>
   12fa0:	e1d2c0b0 	ldrh	ip, [r2]
   12fa4:	e1d230b2 	ldrh	r3, [r2, #2]
   12fa8:	e153000c 	cmp	r3, ip
   12fac:	1a00000b 	bne	12fe0 <fat16_dir_entry_seek_callback+0x50>
   12fb0:	e5821004 	str	r1, [r2, #4]
   12fb4:	e5d0300b 	ldrb	r3, [r0, #11]
   12fb8:	e353000f 	cmp	r3, #15	; 0xf
   12fbc:	05d03000 	ldrbeq	r3, [r0]
   12fc0:	0203303f 	andeq	r3, r3, #63	; 0x3f
   12fc4:	01a03283 	lsleq	r3, r3, #5
   12fc8:	02833020 	addeq	r3, r3, #32	; 0x20
   12fcc:	e3a01020 	mov	r1, #32	; 0x20
   12fd0:	e3a00000 	mov	r0, #0	; 0x0
   12fd4:	020310ff 	andeq	r1, r3, #255	; 0xff
   12fd8:	e5c21008 	strb	r1, [r2, #8]
   12fdc:	e12fff1e 	bx	lr
   12fe0:	e5d0300b 	ldrb	r3, [r0, #11]
   12fe4:	e28c1001 	add	r1, ip, #1	; 0x1
   12fe8:	e353000f 	cmp	r3, #15	; 0xf
   12fec:	e3a00001 	mov	r0, #1	; 0x1
   12ff0:	11c210b0 	strhne	r1, [r2]
   12ff4:	112fff1e 	bxne	lr
   12ff8:	e3a00001 	mov	r0, #1	; 0x1
   12ffc:	e12fff1e 	bx	lr

00013000 <fat16_dir_entry_read_callback>:
   13000:	e92d4030 	push	{r4, r5, lr}
   13004:	e5d03000 	ldrb	r3, [r0]
   13008:	e3530000 	cmp	r3, #0	; 0x0
   1300c:	135300e5 	cmpne	r3, #229	; 0xe5
   13010:	e1a0c002 	mov	ip, r2
   13014:	0a000062 	beq	131a4 <fat16_dir_entry_read_callback+0x1a4>
   13018:	e5923028 	ldr	r3, [r2, #40]
   1301c:	e3530000 	cmp	r3, #0	; 0x0
   13020:	05821028 	streq	r1, [r2, #40]
   13024:	e5d02000 	ldrb	r2, [r0]
   13028:	e3520000 	cmp	r2, #0	; 0x0
   1302c:	0a00005c 	beq	131a4 <fat16_dir_entry_read_callback+0x1a4>
   13030:	e5d0300b 	ldrb	r3, [r0, #11]
   13034:	e353000f 	cmp	r3, #15	; 0xf
   13038:	e280500b 	add	r5, r0, #11	; 0xb
   1303c:	1a000026 	bne	130dc <fat16_dir_entry_read_callback+0xdc>
   13040:	e202203f 	and	r2, r2, #63	; 0x3f
   13044:	e3a0300d 	mov	r3, #13	; 0xd
   13048:	e0030392 	mul	r3, r2, r3
   1304c:	e243300d 	sub	r3, r3, #13	; 0xd
   13050:	e1a03803 	lsl	r3, r3, #16
   13054:	e1a02823 	lsr	r2, r3, #16
   13058:	e282300c 	add	r3, r2, #12	; 0xc
   1305c:	e353001f 	cmp	r3, #31	; 0x1f
   13060:	83a00001 	movhi	r0, #1	; 0x1
   13064:	8a00004f 	bhi	131a8 <fat16_dir_entry_read_callback+0x1a8>
   13068:	e5d03001 	ldrb	r3, [r0, #1]
   1306c:	e7cc3002 	strb	r3, [ip, r2]
   13070:	e5d03003 	ldrb	r3, [r0, #3]
   13074:	e08c2002 	add	r2, ip, r2
   13078:	e5c23001 	strb	r3, [r2, #1]
   1307c:	e5d03005 	ldrb	r3, [r0, #5]
   13080:	e5c23002 	strb	r3, [r2, #2]
   13084:	e5d03007 	ldrb	r3, [r0, #7]
   13088:	e5c23003 	strb	r3, [r2, #3]
   1308c:	e5d03009 	ldrb	r3, [r0, #9]
   13090:	e5c23004 	strb	r3, [r2, #4]
   13094:	e5d0300e 	ldrb	r3, [r0, #14]
   13098:	e5c23005 	strb	r3, [r2, #5]
   1309c:	e5d03010 	ldrb	r3, [r0, #16]
   130a0:	e5c23006 	strb	r3, [r2, #6]
   130a4:	e5d03012 	ldrb	r3, [r0, #18]
   130a8:	e5c23007 	strb	r3, [r2, #7]
   130ac:	e5d03014 	ldrb	r3, [r0, #20]
   130b0:	e5c23008 	strb	r3, [r2, #8]
   130b4:	e5d03016 	ldrb	r3, [r0, #22]
   130b8:	e5c23009 	strb	r3, [r2, #9]
   130bc:	e5d03018 	ldrb	r3, [r0, #24]
   130c0:	e5c2300a 	strb	r3, [r2, #10]
   130c4:	e5d0301c 	ldrb	r3, [r0, #28]
   130c8:	e5c2300b 	strb	r3, [r2, #11]
   130cc:	e5d0301e 	ldrb	r3, [r0, #30]
   130d0:	e3a00001 	mov	r0, #1	; 0x1
   130d4:	e5c2300c 	strb	r3, [r2, #12]
   130d8:	ea000032 	b	131a8 <fat16_dir_entry_read_callback+0x1a8>
   130dc:	e5dc2000 	ldrb	r2, [ip]
   130e0:	e3520000 	cmp	r2, #0	; 0x0
   130e4:	1a00001d 	bne	13160 <fat16_dir_entry_read_callback+0x160>
   130e8:	e1a01002 	mov	r1, r2
   130ec:	e7d23000 	ldrb	r3, [r2, r0]
   130f0:	e3530020 	cmp	r3, #32	; 0x20
   130f4:	e281e001 	add	lr, r1, #1	; 0x1
   130f8:	0a000004 	beq	13110 <fat16_dir_entry_read_callback+0x110>
   130fc:	e20e10ff 	and	r1, lr, #255	; 0xff
   13100:	e3510008 	cmp	r1, #8	; 0x8
   13104:	e7c2300c 	strb	r3, [r2, ip]
   13108:	e2822001 	add	r2, r2, #1	; 0x1
   1310c:	1afffff6 	bne	130ec <fat16_dir_entry_read_callback+0xec>
   13110:	e5d03008 	ldrb	r3, [r0, #8]
   13114:	e3530020 	cmp	r3, #32	; 0x20
   13118:	0a00000e 	beq	13158 <fat16_dir_entry_read_callback+0x158>
   1311c:	e3a0302e 	mov	r3, #46	; 0x2e
   13120:	e2812001 	add	r2, r1, #1	; 0x1
   13124:	e7cc3001 	strb	r3, [ip, r1]
   13128:	e20210ff 	and	r1, r2, #255	; 0xff
   1312c:	e1a03000 	mov	r3, r0
   13130:	e5d32008 	ldrb	r2, [r3, #8]
   13134:	e3520020 	cmp	r2, #32	; 0x20
   13138:	e280e003 	add	lr, r0, #3	; 0x3
   1313c:	e2814001 	add	r4, r1, #1	; 0x1
   13140:	e2833001 	add	r3, r3, #1	; 0x1
   13144:	0a000003 	beq	13158 <fat16_dir_entry_read_callback+0x158>
   13148:	e153000e 	cmp	r3, lr
   1314c:	e7cc2001 	strb	r2, [ip, r1]
   13150:	e20410ff 	and	r1, r4, #255	; 0xff
   13154:	1afffff5 	bne	13130 <fat16_dir_entry_read_callback+0x130>
   13158:	e3a03000 	mov	r3, #0	; 0x0
   1315c:	e7cc3001 	strb	r3, [ip, r1]
   13160:	e5d53000 	ldrb	r3, [r5]
   13164:	e5cc3020 	strb	r3, [ip, #32]
   13168:	e5d0201b 	ldrb	r2, [r0, #27]
   1316c:	e5d0301a 	ldrb	r3, [r0, #26]
   13170:	e1833402 	orr	r3, r3, r2, lsl #8
   13174:	e1cc32b2 	strh	r3, [ip, #34]
   13178:	e5d0301e 	ldrb	r3, [r0, #30]
   1317c:	e5d0201c 	ldrb	r2, [r0, #28]
   13180:	e5d0101d 	ldrb	r1, [r0, #29]
   13184:	e5d0001f 	ldrb	r0, [r0, #31]
   13188:	e1a03803 	lsl	r3, r3, #16
   1318c:	e1833c00 	orr	r3, r3, r0, lsl #24
   13190:	e1822401 	orr	r2, r2, r1, lsl #8
   13194:	e1822003 	orr	r2, r2, r3
   13198:	e3a00000 	mov	r0, #0	; 0x0
   1319c:	e58c2024 	str	r2, [ip, #36]
   131a0:	ea000000 	b	131a8 <fat16_dir_entry_read_callback+0x1a8>
   131a4:	e3a00000 	mov	r0, #0	; 0x0
   131a8:	e8bd4030 	pop	{r4, r5, lr}
   131ac:	e12fff1e 	bx	lr

000131b0 <fat16_get_next_cluster>:
   131b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   131b4:	e1a03801 	lsl	r3, r1, #16
   131b8:	e1a03823 	lsr	r3, r3, #16
   131bc:	e24dd004 	sub	sp, sp, #4	; 0x4
   131c0:	e3a02002 	mov	r2, #2	; 0x2
   131c4:	e3500000 	cmp	r0, #0	; 0x0
   131c8:	13530001 	cmpne	r3, #1	; 0x1
   131cc:	e08d1002 	add	r1, sp, r2
   131d0:	e1a0c000 	mov	ip, r0
   131d4:	9a00001a 	bls	13244 <fat16_get_next_cluster+0x94>
   131d8:	e5900008 	ldr	r0, [r0, #8]
   131dc:	e0200293 	mla	r0, r3, r2, r0
   131e0:	e59c3000 	ldr	r3, [ip]
   131e4:	e593c000 	ldr	ip, [r3]
   131e8:	e1a0e00f 	mov	lr, pc
   131ec:	e12fff1c 	bx	ip
   131f0:	e3500000 	cmp	r0, #0	; 0x0
   131f4:	e59f1058 	ldr	r1, [pc, #88]	; 13254 <fat16_get_next_cluster+0xa4>
   131f8:	0a000011 	beq	13244 <fat16_get_next_cluster+0x94>
   131fc:	e5dd2002 	ldrb	r2, [sp, #2]
   13200:	e5dd3003 	ldrb	r3, [sp, #3]
   13204:	e1920403 	orrs	r0, r2, r3, lsl #8
   13208:	13a03000 	movne	r3, #0	; 0x0
   1320c:	03a03001 	moveq	r3, #1	; 0x1
   13210:	e1500001 	cmp	r0, r1
   13214:	03833001 	orreq	r3, r3, #1	; 0x1
   13218:	e2802010 	add	r2, r0, #16	; 0x10
   1321c:	e3530000 	cmp	r3, #0	; 0x0
   13220:	e1a02802 	lsl	r2, r2, #16
   13224:	1a000006 	bne	13244 <fat16_get_next_cluster+0x94>
   13228:	e1500001 	cmp	r0, r1
   1322c:	93a03000 	movls	r3, #0	; 0x0
   13230:	83a03001 	movhi	r3, #1	; 0x1
   13234:	e3520806 	cmp	r2, #393216	; 0x60000
   13238:	93833001 	orrls	r3, r3, #1	; 0x1
   1323c:	e3530000 	cmp	r3, #0	; 0x0
   13240:	0a000000 	beq	13248 <fat16_get_next_cluster+0x98>
   13244:	e3a00000 	mov	r0, #0	; 0x0
   13248:	e28dd004 	add	sp, sp, #4	; 0x4
   1324c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   13250:	e12fff1e 	bx	lr
   13254:	0000fff7 	.word	0x0000fff7

00013258 <fat16_free_clusters>:
   13258:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1325c:	e1a01801 	lsl	r1, r1, #16
   13260:	e1a03821 	lsr	r3, r1, #16
   13264:	e3500000 	cmp	r0, #0	; 0x0
   13268:	13530001 	cmpne	r3, #1	; 0x1
   1326c:	e24dd004 	sub	sp, sp, #4	; 0x4
   13270:	e1a05000 	mov	r5, r0
   13274:	85907008 	ldrhi	r7, [r0, #8]
   13278:	8a00001d 	bhi	132f4 <fat16_free_clusters+0x9c>
   1327c:	ea000024 	b	13314 <fat16_free_clusters+0xbc>
   13280:	e5953000 	ldr	r3, [r5]
   13284:	e593c000 	ldr	ip, [r3]
   13288:	e1a0e00f 	mov	lr, pc
   1328c:	e12fff1c 	bx	ip
   13290:	e3a0e000 	mov	lr, #0	; 0x0
   13294:	e150000e 	cmp	r0, lr
   13298:	e1a01006 	mov	r1, r6
   1329c:	e3a02002 	mov	r2, #2	; 0x2
   132a0:	e1a00004 	mov	r0, r4
   132a4:	0a00001a 	beq	13314 <fat16_free_clusters+0xbc>
   132a8:	e5dd3002 	ldrb	r3, [sp, #2]
   132ac:	e5ddc003 	ldrb	ip, [sp, #3]
   132b0:	e193340c 	orrs	r3, r3, ip, lsl #8
   132b4:	e1a04003 	mov	r4, r3
   132b8:	e2833010 	add	r3, r3, #16	; 0x10
   132bc:	e1a03803 	lsl	r3, r3, #16
   132c0:	0a000015 	beq	1331c <fat16_free_clusters+0xc4>
   132c4:	e3530807 	cmp	r3, #458752	; 0x70000
   132c8:	9a000011 	bls	13314 <fat16_free_clusters+0xbc>
   132cc:	e59f3058 	ldr	r3, [pc, #88]	; 1332c <fat16_free_clusters+0xd4>
   132d0:	e5cde003 	strb	lr, [sp, #3]
   132d4:	e5cde002 	strb	lr, [sp, #2]
   132d8:	e1540003 	cmp	r4, r3
   132dc:	81a0400e 	movhi	r4, lr
   132e0:	e5953000 	ldr	r3, [r5]
   132e4:	e593c008 	ldr	ip, [r3, #8]
   132e8:	e1a0e00f 	mov	lr, pc
   132ec:	e12fff1c 	bx	ip
   132f0:	e1a03004 	mov	r3, r4
   132f4:	e0874083 	add	r4, r7, r3, lsl #1
   132f8:	e28d6002 	add	r6, sp, #2	; 0x2
   132fc:	e3530000 	cmp	r3, #0	; 0x0
   13300:	e1a01006 	mov	r1, r6
   13304:	e3a02002 	mov	r2, #2	; 0x2
   13308:	e1a00004 	mov	r0, r4
   1330c:	1affffdb 	bne	13280 <fat16_free_clusters+0x28>
   13310:	ea000001 	b	1331c <fat16_free_clusters+0xc4>
   13314:	e3a00000 	mov	r0, #0	; 0x0
   13318:	ea000000 	b	13320 <fat16_free_clusters+0xc8>
   1331c:	e3a00001 	mov	r0, #1	; 0x1
   13320:	e28dd004 	add	sp, sp, #4	; 0x4
   13324:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13328:	e12fff1e 	bx	lr
   1332c:	0000fff7 	.word	0x0000fff7

00013330 <fat16_append_clusters>:
   13330:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13334:	e1a01801 	lsl	r1, r1, #16
   13338:	e24dd014 	sub	sp, sp, #20	; 0x14
   1333c:	e1a02802 	lsl	r2, r2, #16
   13340:	e1a01821 	lsr	r1, r1, #16
   13344:	e2507000 	subs	r7, r0, #0	; 0x0
   13348:	e58d1000 	str	r1, [sp]
   1334c:	e1a09822 	lsr	r9, r2, #16
   13350:	0a00004e 	beq	13490 <fat16_append_clusters+0x160>
   13354:	e5972000 	ldr	r2, [r7]
   13358:	e597300c 	ldr	r3, [r7, #12]
   1335c:	e5921008 	ldr	r1, [r2, #8]
   13360:	e1a03783 	lsl	r3, r3, #15
   13364:	e3a04000 	mov	r4, #0	; 0x0
   13368:	e5922000 	ldr	r2, [r2]
   1336c:	e597b008 	ldr	fp, [r7, #8]
   13370:	e1a03823 	lsr	r3, r3, #16
   13374:	e1a05009 	mov	r5, r9
   13378:	e1a0a004 	mov	sl, r4
   1337c:	e58d1008 	str	r1, [sp, #8]
   13380:	e58d2004 	str	r2, [sp, #4]
   13384:	e58d300c 	str	r3, [sp, #12]
   13388:	ea000023 	b	1341c <fat16_append_clusters+0xec>
   1338c:	e08b8086 	add	r8, fp, r6, lsl #1
   13390:	e1a00008 	mov	r0, r8
   13394:	e28d1012 	add	r1, sp, #18	; 0x12
   13398:	e3a02002 	mov	r2, #2	; 0x2
   1339c:	e59d3004 	ldr	r3, [sp, #4]
   133a0:	e1a0e00f 	mov	lr, pc
   133a4:	e12fff13 	bx	r3
   133a8:	e3500000 	cmp	r0, #0	; 0x0
   133ac:	0a000037 	beq	13490 <fat16_append_clusters+0x160>
   133b0:	e5dd3012 	ldrb	r3, [sp, #18]
   133b4:	e3530000 	cmp	r3, #0	; 0x0
   133b8:	1a000016 	bne	13418 <fat16_append_clusters+0xe8>
   133bc:	e5dd3013 	ldrb	r3, [sp, #19]
   133c0:	e3530000 	cmp	r3, #0	; 0x0
   133c4:	1a000013 	bne	13418 <fat16_append_clusters+0xe8>
   133c8:	e1550009 	cmp	r5, r9
   133cc:	03e03000 	mvneq	r3, #0	; 0x0
   133d0:	11a03424 	lsrne	r3, r4, #8
   133d4:	05cd3013 	strbeq	r3, [sp, #19]
   133d8:	05cd3012 	strbeq	r3, [sp, #18]
   133dc:	15cd3013 	strbne	r3, [sp, #19]
   133e0:	15cd4012 	strbne	r4, [sp, #18]
   133e4:	e1a00008 	mov	r0, r8
   133e8:	e28d1012 	add	r1, sp, #18	; 0x12
   133ec:	e3a02002 	mov	r2, #2	; 0x2
   133f0:	e59d3008 	ldr	r3, [sp, #8]
   133f4:	e1a0e00f 	mov	lr, pc
   133f8:	e12fff13 	bx	r3
   133fc:	e3500000 	cmp	r0, #0	; 0x0
   13400:	0a00000a 	beq	13430 <fat16_append_clusters+0x100>
   13404:	e2453001 	sub	r3, r5, #1	; 0x1
   13408:	e1a03803 	lsl	r3, r3, #16
   1340c:	e1b05823 	lsrs	r5, r3, #16
   13410:	0a000019 	beq	1347c <fat16_append_clusters+0x14c>
   13414:	e1a04006 	mov	r4, r6
   13418:	e28aa001 	add	sl, sl, #1	; 0x1
   1341c:	e59d100c 	ldr	r1, [sp, #12]
   13420:	e1a0380a 	lsl	r3, sl, #16
   13424:	e15a0001 	cmp	sl, r1
   13428:	e1a06823 	lsr	r6, r3, #16
   1342c:	1affffd6 	bne	1338c <fat16_append_clusters+0x5c>
   13430:	e3550000 	cmp	r5, #0	; 0x0
   13434:	1a000012 	bne	13484 <fat16_append_clusters+0x154>
   13438:	e59d3000 	ldr	r3, [sp]
   1343c:	e3530001 	cmp	r3, #1	; 0x1
   13440:	9a00000b 	bls	13474 <fat16_append_clusters+0x144>
   13444:	e59d1000 	ldr	r1, [sp]
   13448:	e1a03424 	lsr	r3, r4, #8
   1344c:	e5cd3013 	strb	r3, [sp, #19]
   13450:	e08b0081 	add	r0, fp, r1, lsl #1
   13454:	e5cd4012 	strb	r4, [sp, #18]
   13458:	e28d1012 	add	r1, sp, #18	; 0x12
   1345c:	e3a02002 	mov	r2, #2	; 0x2
   13460:	e59d3008 	ldr	r3, [sp, #8]
   13464:	e1a0e00f 	mov	lr, pc
   13468:	e12fff13 	bx	r3
   1346c:	e3500000 	cmp	r0, #0	; 0x0
   13470:	0a000003 	beq	13484 <fat16_append_clusters+0x154>
   13474:	e1a00004 	mov	r0, r4
   13478:	ea000005 	b	13494 <fat16_append_clusters+0x164>
   1347c:	e1a04006 	mov	r4, r6
   13480:	eaffffec 	b	13438 <fat16_append_clusters+0x108>
   13484:	e1a00007 	mov	r0, r7
   13488:	e1a01004 	mov	r1, r4
   1348c:	ebffff71 	bl	13258 <fat16_free_clusters>
   13490:	e3a00000 	mov	r0, #0	; 0x0
   13494:	e28dd014 	add	sp, sp, #20	; 0x14
   13498:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1349c:	e12fff1e 	bx	lr

000134a0 <fat16_read_file>:
   134a0:	e1a02802 	lsl	r2, r2, #16
   134a4:	e3510000 	cmp	r1, #0	; 0x0
   134a8:	13500000 	cmpne	r0, #0	; 0x0
   134ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b0:	e1a06000 	mov	r6, r0
   134b4:	e1a0b001 	mov	fp, r1
   134b8:	e1a08822 	lsr	r8, r2, #16
   134bc:	0a000050 	beq	13604 <fat16_read_file+0x164>
   134c0:	e3580000 	cmp	r8, #0	; 0x0
   134c4:	0a00004e 	beq	13604 <fat16_read_file+0x164>
   134c8:	e5907030 	ldr	r7, [r0, #48]
   134cc:	e5902028 	ldr	r2, [r0, #40]
   134d0:	e0873008 	add	r3, r7, r8
   134d4:	e1530002 	cmp	r3, r2
   134d8:	9a000003 	bls	134ec <fat16_read_file+0x4c>
   134dc:	e0673002 	rsb	r3, r7, r2
   134e0:	e1a03803 	lsl	r3, r3, #16
   134e4:	e1b08823 	lsrs	r8, r3, #16
   134e8:	0a000050 	beq	13630 <fat16_read_file+0x190>
   134ec:	e1d653b4 	ldrh	r5, [r6, #52]
   134f0:	e5963000 	ldr	r3, [r6]
   134f4:	e3550000 	cmp	r5, #0	; 0x0
   134f8:	e1d391b2 	ldrh	r9, [r3, #18]
   134fc:	1a000011 	bne	13548 <fat16_read_file+0xa8>
   13500:	e1d652b6 	ldrh	r5, [r6, #38]
   13504:	e3550000 	cmp	r5, #0	; 0x0
   13508:	1a000002 	bne	13518 <fat16_read_file+0x78>
   1350c:	e3570000 	cmp	r7, #0	; 0x0
   13510:	0a000046 	beq	13630 <fat16_read_file+0x190>
   13514:	ea00003a 	b	13604 <fat16_read_file+0x164>
   13518:	e3570000 	cmp	r7, #0	; 0x0
   1351c:	11a04007 	movne	r4, r7
   13520:	1a000004 	bne	13538 <fat16_read_file+0x98>
   13524:	ea000007 	b	13548 <fat16_read_file+0xa8>
   13528:	e5960000 	ldr	r0, [r6]
   1352c:	ebffff1f 	bl	131b0 <fat16_get_next_cluster>
   13530:	e2505000 	subs	r5, r0, #0	; 0x0
   13534:	0a000032 	beq	13604 <fat16_read_file+0x164>
   13538:	e1540009 	cmp	r4, r9
   1353c:	e1a01005 	mov	r1, r5
   13540:	e0694004 	rsb	r4, r9, r4
   13544:	2afffff7 	bcs	13528 <fat16_read_file+0x88>
   13548:	e1a00007 	mov	r0, r7
   1354c:	e1a01009 	mov	r1, r9
   13550:	eb0014bc 	bl	18848 <__umodsi3>
   13554:	e1a00800 	lsl	r0, r0, #16
   13558:	e1a0a820 	lsr	sl, r0, #16
   1355c:	e1a07008 	mov	r7, r8
   13560:	e06a3009 	rsb	r3, sl, r9
   13564:	e596c000 	ldr	ip, [r6]
   13568:	e1a03803 	lsl	r3, r3, #16
   1356c:	e1a03823 	lsr	r3, r3, #16
   13570:	e1570003 	cmp	r7, r3
   13574:	31a03007 	movcc	r3, r7
   13578:	e59c2018 	ldr	r2, [ip, #24]
   1357c:	e1a03803 	lsl	r3, r3, #16
   13580:	e1a04823 	lsr	r4, r3, #16
   13584:	e08a2002 	add	r2, sl, r2
   13588:	e2453002 	sub	r3, r5, #2	; 0x2
   1358c:	e0202399 	mla	r0, r9, r3, r2
   13590:	e1a0100b 	mov	r1, fp
   13594:	e1a02004 	mov	r2, r4
   13598:	e59c3000 	ldr	r3, [ip]
   1359c:	e593c000 	ldr	ip, [r3]
   135a0:	e1a0e00f 	mov	lr, pc
   135a4:	e12fff1c 	bx	ip
   135a8:	e0643007 	rsb	r3, r4, r7
   135ac:	e3500000 	cmp	r0, #0	; 0x0
   135b0:	e1a01005 	mov	r1, r5
   135b4:	e08bb004 	add	fp, fp, r4
   135b8:	e08a2004 	add	r2, sl, r4
   135bc:	e1a00803 	lsl	r0, r3, #16
   135c0:	0a000011 	beq	1360c <fat16_read_file+0x16c>
   135c4:	e5963030 	ldr	r3, [r6, #48]
   135c8:	e1520009 	cmp	r2, r9
   135cc:	e0833004 	add	r3, r3, r4
   135d0:	e5863030 	str	r3, [r6, #48]
   135d4:	e1a07820 	lsr	r7, r0, #16
   135d8:	ba000004 	blt	135f0 <fat16_read_file+0x150>
   135dc:	e5960000 	ldr	r0, [r6]
   135e0:	ebfffef2 	bl	131b0 <fat16_get_next_cluster>
   135e4:	e2505000 	subs	r5, r0, #0	; 0x0
   135e8:	e3a0a000 	mov	sl, #0	; 0x0
   135ec:	0a00000a 	beq	1361c <fat16_read_file+0x17c>
   135f0:	e3570000 	cmp	r7, #0	; 0x0
   135f4:	e1c653b4 	strh	r5, [r6, #52]
   135f8:	1affffd8 	bne	13560 <fat16_read_file+0xc0>
   135fc:	e1a03808 	lsl	r3, r8, #16
   13600:	ea000003 	b	13614 <fat16_read_file+0x174>
   13604:	e3e00000 	mvn	r0, #0	; 0x0
   13608:	ea000009 	b	13634 <fat16_read_file+0x194>
   1360c:	e0673008 	rsb	r3, r7, r8
   13610:	e1a03803 	lsl	r3, r3, #16
   13614:	e1a00843 	asr	r0, r3, #16
   13618:	ea000005 	b	13634 <fat16_read_file+0x194>
   1361c:	e0673008 	rsb	r3, r7, r8
   13620:	e1a03803 	lsl	r3, r3, #16
   13624:	e1a00843 	asr	r0, r3, #16
   13628:	e1c653b4 	strh	r5, [r6, #52]
   1362c:	ea000000 	b	13634 <fat16_read_file+0x194>
   13630:	e3a00000 	mov	r0, #0	; 0x0
   13634:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13638:	e12fff1e 	bx	lr

0001363c <fat16_reset_dir>:
   1363c:	e3500000 	cmp	r0, #0	; 0x0
   13640:	e1a03000 	mov	r3, r0
   13644:	13a03000 	movne	r3, #0	; 0x0
   13648:	11c033b0 	strhne	r3, [r0, #48]
   1364c:	13a03001 	movne	r3, #1	; 0x1
   13650:	e1a00003 	mov	r0, r3
   13654:	e12fff1e 	bx	lr

00013658 <fat16_delete_file>:
   13658:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1365c:	e3510000 	cmp	r1, #0	; 0x0
   13660:	13500000 	cmpne	r0, #0	; 0x0
   13664:	e24dd00c 	sub	sp, sp, #12	; 0xc
   13668:	e1a06000 	mov	r6, r0
   1366c:	e1a07001 	mov	r7, r1
   13670:	0a00001f 	beq	136f4 <fat16_delete_file+0x9c>
   13674:	e5915028 	ldr	r5, [r1, #40]
   13678:	e3550000 	cmp	r5, #0	; 0x0
   1367c:	0a00001c 	beq	136f4 <fat16_delete_file+0x9c>
   13680:	e1a0100d 	mov	r1, sp
   13684:	e1a00005 	mov	r0, r5
   13688:	e3a0200c 	mov	r2, #12	; 0xc
   1368c:	e5963000 	ldr	r3, [r6]
   13690:	e593c000 	ldr	ip, [r3]
   13694:	e1a0e00f 	mov	lr, pc
   13698:	e12fff1c 	bx	ip
   1369c:	e3500000 	cmp	r0, #0	; 0x0
   136a0:	e1a0400d 	mov	r4, sp
   136a4:	e1a00005 	mov	r0, r5
   136a8:	e1a0100d 	mov	r1, sp
   136ac:	e3a0200c 	mov	r2, #12	; 0xc
   136b0:	e2855020 	add	r5, r5, #32	; 0x20
   136b4:	0a00000e 	beq	136f4 <fat16_delete_file+0x9c>
   136b8:	e3e0301a 	mvn	r3, #26	; 0x1a
   136bc:	e5cd3000 	strb	r3, [sp]
   136c0:	e5963000 	ldr	r3, [r6]
   136c4:	e593c008 	ldr	ip, [r3, #8]
   136c8:	e1a0e00f 	mov	lr, pc
   136cc:	e12fff1c 	bx	ip
   136d0:	e3500000 	cmp	r0, #0	; 0x0
   136d4:	0a000006 	beq	136f4 <fat16_delete_file+0x9c>
   136d8:	e5dd300b 	ldrb	r3, [sp, #11]
   136dc:	e353000f 	cmp	r3, #15	; 0xf
   136e0:	0affffe6 	beq	13680 <fat16_delete_file+0x28>
   136e4:	e1a00006 	mov	r0, r6
   136e8:	e1d712b2 	ldrh	r1, [r7, #34]
   136ec:	ebfffed9 	bl	13258 <fat16_free_clusters>
   136f0:	ea000000 	b	136f8 <fat16_delete_file+0xa0>
   136f4:	e3a00000 	mov	r0, #0	; 0x0
   136f8:	e28dd00c 	add	sp, sp, #12	; 0xc
   136fc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13700:	e12fff1e 	bx	lr

00013704 <fat16_get_fs_size>:
   13704:	e3500000 	cmp	r0, #0	; 0x0
   13708:	1590300c 	ldrne	r3, [r0, #12]
   1370c:	e1a02000 	mov	r2, r0
   13710:	11a030a3 	lsrne	r3, r3, #1
   13714:	11d021b2 	ldrhne	r2, [r0, #18]
   13718:	12433002 	subne	r3, r3, #2	; 0x2
   1371c:	10020293 	mulne	r2, r3, r2
   13720:	e1a00002 	mov	r0, r2
   13724:	e12fff1e 	bx	lr

00013728 <fat16_get_fs_free>:
   13728:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1372c:	e2506000 	subs	r6, r0, #0	; 0x0
   13730:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   13734:	0a000021 	beq	137c0 <fat16_get_fs_free+0x98>
   13738:	e3a03020 	mov	r3, #32	; 0x20
   1373c:	e5cd302a 	strb	r3, [sp, #42]
   13740:	e5967008 	ldr	r7, [r6, #8]
   13744:	e596500c 	ldr	r5, [r6, #12]
   13748:	e3a03000 	mov	r3, #0	; 0x0
   1374c:	e1cd32b8 	strh	r3, [sp, #40]
   13750:	ea000012 	b	137a0 <fat16_get_fs_free+0x78>
   13754:	e59f3074 	ldr	r3, [pc, #116]	; 137d0 <fat16_get_fs_free+0xa8>
   13758:	e1550003 	cmp	r5, r3
   1375c:	e59f3070 	ldr	r3, [pc, #112]	; 137d4 <fat16_get_fs_free+0xac>
   13760:	91a04822 	lsrls	r4, r2, #16
   13764:	e596c000 	ldr	ip, [r6]
   13768:	e58d3000 	str	r3, [sp]
   1376c:	e28d3028 	add	r3, sp, #40	; 0x28
   13770:	e58d3004 	str	r3, [sp, #4]
   13774:	e1a00007 	mov	r0, r7
   13778:	e28d1008 	add	r1, sp, #8	; 0x8
   1377c:	e3a02020 	mov	r2, #32	; 0x20
   13780:	e1a03004 	mov	r3, r4
   13784:	e59cc004 	ldr	ip, [ip, #4]
   13788:	e1a0e00f 	mov	lr, pc
   1378c:	e12fff1c 	bx	ip
   13790:	e3500000 	cmp	r0, #0	; 0x0
   13794:	0a000009 	beq	137c0 <fat16_get_fs_free+0x98>
   13798:	e0645005 	rsb	r5, r4, r5
   1379c:	e0877004 	add	r7, r7, r4
   137a0:	e3550000 	cmp	r5, #0	; 0x0
   137a4:	e59f402c 	ldr	r4, [pc, #44]	; 137d8 <fat16_get_fs_free+0xb0>
   137a8:	e1a02805 	lsl	r2, r5, #16
   137ac:	1affffe8 	bne	13754 <fat16_get_fs_free+0x2c>
   137b0:	e1d621b2 	ldrh	r2, [r6, #18]
   137b4:	e1dd32b8 	ldrh	r3, [sp, #40]
   137b8:	e0000392 	mul	r0, r2, r3
   137bc:	ea000000 	b	137c4 <fat16_get_fs_free+0x9c>
   137c0:	e3a00000 	mov	r0, #0	; 0x0
   137c4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   137c8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   137cc:	e12fff1e 	bx	lr
   137d0:	0000fffd 	.word	0x0000fffd
   137d4:	000137dc 	.word	0x000137dc
   137d8:	0000fffe 	.word	0x0000fffe

000137dc <fat16_get_fs_free_callback>:
   137dc:	e92d4010 	push	{r4, lr}
   137e0:	e5d24002 	ldrb	r4, [r2, #2]
   137e4:	e1a0c002 	mov	ip, r2
   137e8:	e1a01000 	mov	r1, r0
   137ec:	e3a0e000 	mov	lr, #0	; 0x0
   137f0:	ea000007 	b	13814 <fat16_get_fs_free_callback+0x38>
   137f4:	e7de3000 	ldrb	r3, [lr, r0]
   137f8:	e5d12001 	ldrb	r2, [r1, #1]
   137fc:	e1932402 	orrs	r2, r3, r2, lsl #8
   13800:	01dc30b0 	ldrheq	r3, [ip]
   13804:	02833001 	addeq	r3, r3, #1	; 0x1
   13808:	01cc30b0 	strheq	r3, [ip]
   1380c:	e2811002 	add	r1, r1, #2	; 0x2
   13810:	e28ee002 	add	lr, lr, #2	; 0x2
   13814:	e20e30ff 	and	r3, lr, #255	; 0xff
   13818:	e1530004 	cmp	r3, r4
   1381c:	3afffff4 	bcc	137f4 <fat16_get_fs_free_callback+0x18>
   13820:	e3a00001 	mov	r0, #1	; 0x1
   13824:	e8bd4010 	pop	{r4, lr}
   13828:	e12fff1e 	bx	lr

0001382c <fat16_file_size>:
   1382c:	e5900028 	ldr	r0, [r0, #40]
   13830:	e12fff1e 	bx	lr

00013834 <fat16_read_dir>:
   13834:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13838:	e1a0a001 	mov	sl, r1
   1383c:	e2711001 	rsbs	r1, r1, #1	; 0x1
   13840:	33a01000 	movcc	r1, #0	; 0x0
   13844:	e35a0000 	cmp	sl, #0	; 0x0
   13848:	13500000 	cmpne	r0, #0	; 0x0
   1384c:	e24dd038 	sub	sp, sp, #56	; 0x38
   13850:	e1a08000 	mov	r8, r0
   13854:	0a000076 	beq	13a34 <fat16_read_dir+0x200>
   13858:	e1d032b6 	ldrh	r3, [r0, #38]
   1385c:	e3530000 	cmp	r3, #0	; 0x0
   13860:	e1d093b0 	ldrh	r9, [r0, #48]
   13864:	e5906000 	ldr	r6, [r0]
   13868:	1a00002c 	bne	13920 <fat16_read_dir+0xec>
   1386c:	e3560000 	cmp	r6, #0	; 0x0
   13870:	11a07001 	movne	r7, r1
   13874:	03817001 	orreq	r7, r1, #1	; 0x1
   13878:	e3570000 	cmp	r7, #0	; 0x0
   1387c:	1a00006a 	bne	13a2c <fat16_read_dir+0x1f8>
   13880:	e5963000 	ldr	r3, [r6]
   13884:	e28d502c 	add	r5, sp, #44	; 0x2c
   13888:	e2864004 	add	r4, r6, #4	; 0x4
   1388c:	e1a01007 	mov	r1, r7
   13890:	e3a0200c 	mov	r2, #12	; 0xc
   13894:	e1a00005 	mov	r0, r5
   13898:	e5936004 	ldr	r6, [r3, #4]
   1389c:	eb0010f0 	bl	17c64 <memset>
   138a0:	e2840010 	add	r0, r4, #16	; 0x10
   138a4:	e8900009 	ldm	r0, {r0, r3}
   138a8:	e59f2194 	ldr	r2, [pc, #404]	; 13a44 <fat16_read_dir+0x210>
   138ac:	e0603003 	rsb	r3, r0, r3
   138b0:	e1a03803 	lsl	r3, r3, #16
   138b4:	e28d400c 	add	r4, sp, #12	; 0xc
   138b8:	e58d2000 	str	r2, [sp]
   138bc:	e1cd92be 	strh	r9, [sp, #46]
   138c0:	e58d5004 	str	r5, [sp, #4]
   138c4:	e1a03823 	lsr	r3, r3, #16
   138c8:	e1a01004 	mov	r1, r4
   138cc:	e3a02020 	mov	r2, #32	; 0x20
   138d0:	e1a0e00f 	mov	lr, pc
   138d4:	e12fff16 	bx	r6
   138d8:	e3500000 	cmp	r0, #0	; 0x0
   138dc:	0a000052 	beq	13a2c <fat16_read_dir+0x1f8>
   138e0:	e59d3030 	ldr	r3, [sp, #48]
   138e4:	e3530000 	cmp	r3, #0	; 0x0
   138e8:	0a00004f 	beq	13a2c <fat16_read_dir+0x1f8>
   138ec:	e1a01007 	mov	r1, r7
   138f0:	e3a0202c 	mov	r2, #44	; 0x2c
   138f4:	e1a0000a 	mov	r0, sl
   138f8:	eb0010d9 	bl	17c64 <memset>
   138fc:	e59f2144 	ldr	r2, [pc, #324]	; 13a48 <fat16_read_dir+0x214>
   13900:	e5dd3034 	ldrb	r3, [sp, #52]
   13904:	e88d0404 	stm	sp, {r2, sl}
   13908:	e1a01004 	mov	r1, r4
   1390c:	e59d0030 	ldr	r0, [sp, #48]
   13910:	e3a02020 	mov	r2, #32	; 0x20
   13914:	e1a0e00f 	mov	lr, pc
   13918:	e12fff16 	bx	r6
   1391c:	ea000039 	b	13a08 <fat16_read_dir+0x1d4>
   13920:	e3560000 	cmp	r6, #0	; 0x0
   13924:	e58d9008 	str	r9, [sp, #8]
   13928:	0a00003f 	beq	13a2c <fat16_read_dir+0x1f8>
   1392c:	e3510000 	cmp	r1, #0	; 0x0
   13930:	1a00003d 	bne	13a2c <fat16_read_dir+0x1f8>
   13934:	e2800004 	add	r0, r0, #4	; 0x4
   13938:	e5d03020 	ldrb	r3, [r0, #32]
   1393c:	e3130010 	tst	r3, #16	; 0x10
   13940:	0a000039 	beq	13a2c <fat16_read_dir+0x1f8>
   13944:	e1d072b2 	ldrh	r7, [r0, #34]
   13948:	e1d691b2 	ldrh	r9, [r6, #18]
   1394c:	e5962018 	ldr	r2, [r6, #24]
   13950:	e2473002 	sub	r3, r7, #2	; 0x2
   13954:	e0252399 	mla	r5, r9, r3, r2
   13958:	e28d402c 	add	r4, sp, #44	; 0x2c
   1395c:	e3a01000 	mov	r1, #0	; 0x0
   13960:	e3a0200c 	mov	r2, #12	; 0xc
   13964:	e1a00004 	mov	r0, r4
   13968:	eb0010bd 	bl	17c64 <memset>
   1396c:	e59d3008 	ldr	r3, [sp, #8]
   13970:	e1cd32be 	strh	r3, [sp, #46]
   13974:	e59f30c8 	ldr	r3, [pc, #200]	; 13a44 <fat16_read_dir+0x210>
   13978:	e28db00c 	add	fp, sp, #12	; 0xc
   1397c:	e596c000 	ldr	ip, [r6]
   13980:	e1a0100b 	mov	r1, fp
   13984:	e58d3000 	str	r3, [sp]
   13988:	e1a00005 	mov	r0, r5
   1398c:	e58d4004 	str	r4, [sp, #4]
   13990:	e3a02020 	mov	r2, #32	; 0x20
   13994:	e1a03009 	mov	r3, r9
   13998:	e59cc004 	ldr	ip, [ip, #4]
   1399c:	e1a0e00f 	mov	lr, pc
   139a0:	e12fff1c 	bx	ip
   139a4:	e3500000 	cmp	r0, #0	; 0x0
   139a8:	e1a01007 	mov	r1, r7
   139ac:	e1a00006 	mov	r0, r6
   139b0:	0a00001d 	beq	13a2c <fat16_read_dir+0x1f8>
   139b4:	e59d3030 	ldr	r3, [sp, #48]
   139b8:	e3530000 	cmp	r3, #0	; 0x0
   139bc:	1a000003 	bne	139d0 <fat16_read_dir+0x19c>
   139c0:	ebfffdfa 	bl	131b0 <fat16_get_next_cluster>
   139c4:	e2507000 	subs	r7, r0, #0	; 0x0
   139c8:	0a000017 	beq	13a2c <fat16_read_dir+0x1f8>
   139cc:	eaffffde 	b	1394c <fat16_read_dir+0x118>
   139d0:	e3a01000 	mov	r1, #0	; 0x0
   139d4:	e3a0202c 	mov	r2, #44	; 0x2c
   139d8:	e1a0000a 	mov	r0, sl
   139dc:	eb0010a0 	bl	17c64 <memset>
   139e0:	e59f2060 	ldr	r2, [pc, #96]	; 13a48 <fat16_read_dir+0x214>
   139e4:	e596c000 	ldr	ip, [r6]
   139e8:	e5dd3034 	ldrb	r3, [sp, #52]
   139ec:	e88d0404 	stm	sp, {r2, sl}
   139f0:	e1a0100b 	mov	r1, fp
   139f4:	e59d0030 	ldr	r0, [sp, #48]
   139f8:	e3a02020 	mov	r2, #32	; 0x20
   139fc:	e59cc004 	ldr	ip, [ip, #4]
   13a00:	e1a0e00f 	mov	lr, pc
   13a04:	e12fff1c 	bx	ip
   13a08:	e3500000 	cmp	r0, #0	; 0x0
   13a0c:	0a000006 	beq	13a2c <fat16_read_dir+0x1f8>
   13a10:	e5da3000 	ldrb	r3, [sl]
   13a14:	e3530000 	cmp	r3, #0	; 0x0
   13a18:	11d833b0 	ldrhne	r3, [r8, #48]
   13a1c:	13a00001 	movne	r0, #1	; 0x1
   13a20:	12833001 	addne	r3, r3, #1	; 0x1
   13a24:	11c833b0 	strhne	r3, [r8, #48]
   13a28:	1a000002 	bne	13a38 <fat16_read_dir+0x204>
   13a2c:	e3a03000 	mov	r3, #0	; 0x0
   13a30:	e1c833b0 	strh	r3, [r8, #48]
   13a34:	e3a00000 	mov	r0, #0	; 0x0
   13a38:	e28dd038 	add	sp, sp, #56	; 0x38
   13a3c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a40:	e12fff1e 	bx	lr
   13a44:	00012f90 	.word	0x00012f90
   13a48:	00013000 	.word	0x00013000

00013a4c <find_file_in_dir>:
   13a4c:	e92d4070 	push	{r4, r5, r6, lr}
   13a50:	e1a04001 	mov	r4, r1
   13a54:	e1a06002 	mov	r6, r2
   13a58:	e1a05003 	mov	r5, r3
   13a5c:	ea000007 	b	13a80 <find_file_in_dir+0x34>
   13a60:	eb001102 	bl	17e70 <strcmp>
   13a64:	e3500000 	cmp	r0, #0	; 0x0
   13a68:	1a000004 	bne	13a80 <find_file_in_dir+0x34>
   13a6c:	e3540000 	cmp	r4, #0	; 0x0
   13a70:	03a03001 	moveq	r3, #1	; 0x1
   13a74:	13a03001 	movne	r3, #1	; 0x1
   13a78:	11c403b0 	strhne	r0, [r4, #48]
   13a7c:	ea000006 	b	13a9c <find_file_in_dir+0x50>
   13a80:	e1a01005 	mov	r1, r5
   13a84:	e1a00004 	mov	r0, r4
   13a88:	ebffff69 	bl	13834 <fat16_read_dir>
   13a8c:	e2503000 	subs	r3, r0, #0	; 0x0
   13a90:	e1a01006 	mov	r1, r6
   13a94:	e1a00005 	mov	r0, r5
   13a98:	1afffff0 	bne	13a60 <find_file_in_dir+0x14>
   13a9c:	e1a00003 	mov	r0, r3
   13aa0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13aa4:	e12fff1e 	bx	lr

00013aa8 <fat16_write_dir_entry>:
   13aa8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13aac:	e3510000 	cmp	r1, #0	; 0x0
   13ab0:	13500000 	cmpne	r0, #0	; 0x0
   13ab4:	e24dd020 	sub	sp, sp, #32	; 0x20
   13ab8:	e1a06001 	mov	r6, r1
   13abc:	0a000098 	beq	13d24 <fat16_write_dir_entry+0x27c>
   13ac0:	e5903000 	ldr	r3, [r0]
   13ac4:	e1a00001 	mov	r0, r1
   13ac8:	e5939008 	ldr	r9, [r3, #8]
   13acc:	eb001121 	bl	17f58 <strlen>
   13ad0:	e20050ff 	and	r5, r0, #255	; 0xff
   13ad4:	e3a0100d 	mov	r1, #13	; 0xd
   13ad8:	e285000c 	add	r0, r5, #12	; 0xc
   13adc:	eb001309 	bl	18708 <__aeabi_idiv>
   13ae0:	e3a01020 	mov	r1, #32	; 0x20
   13ae4:	e1a03000 	mov	r3, r0
   13ae8:	e3a0200b 	mov	r2, #11	; 0xb
   13aec:	e1a0000d 	mov	r0, sp
   13af0:	e203a0ff 	and	sl, r3, #255	; 0xff
   13af4:	e5968028 	ldr	r8, [r6, #40]
   13af8:	eb001059 	bl	17c64 <memset>
   13afc:	e1a00006 	mov	r0, r6
   13b00:	e3a0102e 	mov	r1, #46	; 0x2e
   13b04:	eb0011ce 	bl	18244 <strrchr>
   13b08:	e3500000 	cmp	r0, #0	; 0x0
   13b0c:	e1a0700d 	mov	r7, sp
   13b10:	0a00000b 	beq	13b44 <fat16_write_dir_entry+0x9c>
   13b14:	e2804001 	add	r4, r0, #1	; 0x1
   13b18:	e1a00004 	mov	r0, r4
   13b1c:	eb00110d 	bl	17f58 <strlen>
   13b20:	e20020ff 	and	r2, r0, #255	; 0xff
   13b24:	e0623005 	rsb	r3, r2, r5
   13b28:	e2433001 	sub	r3, r3, #1	; 0x1
   13b2c:	e3520003 	cmp	r2, #3	; 0x3
   13b30:	23a02003 	movcs	r2, #3	; 0x3
   13b34:	e1a01004 	mov	r1, r4
   13b38:	e28d0008 	add	r0, sp, #8	; 0x8
   13b3c:	e20350ff 	and	r5, r3, #255	; 0xff
   13b40:	eb001008 	bl	17b68 <memcpy>
   13b44:	e3550008 	cmp	r5, #8	; 0x8
   13b48:	8a000004 	bhi	13b60 <fat16_write_dir_entry+0xb8>
   13b4c:	e1a0000d 	mov	r0, sp
   13b50:	e1a02005 	mov	r2, r5
   13b54:	e1a01006 	mov	r1, r6
   13b58:	eb001002 	bl	17b68 <memcpy>
   13b5c:	ea00000e 	b	13b9c <fat16_write_dir_entry+0xf4>
   13b60:	e3a02008 	mov	r2, #8	; 0x8
   13b64:	e1a0000d 	mov	r0, sp
   13b68:	e1a01006 	mov	r1, r6
   13b6c:	eb000ffd 	bl	17b68 <memcpy>
   13b70:	e5d63022 	ldrb	r3, [r6, #34]
   13b74:	e353009f 	cmp	r3, #159	; 0x9f
   13b78:	e1a02223 	lsr	r2, r3, #4
   13b7c:	e203300f 	and	r3, r3, #15	; 0xf
   13b80:	92822030 	addls	r2, r2, #48	; 0x30
   13b84:	82822061 	addhi	r2, r2, #97	; 0x61
   13b88:	e3530009 	cmp	r3, #9	; 0x9
   13b8c:	92833030 	addls	r3, r3, #48	; 0x30
   13b90:	82833061 	addhi	r3, r3, #97	; 0x61
   13b94:	e5cd2006 	strb	r2, [sp, #6]
   13b98:	e5cd3007 	strb	r3, [sp, #7]
   13b9c:	e3a01000 	mov	r1, #0	; 0x0
   13ba0:	e3a02015 	mov	r2, #21	; 0x15
   13ba4:	e28d000b 	add	r0, sp, #11	; 0xb
   13ba8:	eb00102d 	bl	17c64 <memset>
   13bac:	e5d63020 	ldrb	r3, [r6, #32]
   13bb0:	e5cd300b 	strb	r3, [sp, #11]
   13bb4:	e1d622b2 	ldrh	r2, [r6, #34]
   13bb8:	e1a03422 	lsr	r3, r2, #8
   13bbc:	e5cd201a 	strb	r2, [sp, #26]
   13bc0:	e5cd301b 	strb	r3, [sp, #27]
   13bc4:	e5963024 	ldr	r3, [r6, #36]
   13bc8:	e1a00c23 	lsr	r0, r3, #24
   13bcc:	e1a02423 	lsr	r2, r3, #8
   13bd0:	e1a01823 	lsr	r1, r3, #16
   13bd4:	e5cd201d 	strb	r2, [sp, #29]
   13bd8:	e5cd101e 	strb	r1, [sp, #30]
   13bdc:	e5cd001f 	strb	r0, [sp, #31]
   13be0:	e5cd301c 	strb	r3, [sp, #28]
   13be4:	e088028a 	add	r0, r8, sl, lsl #5
   13be8:	e1a0100d 	mov	r1, sp
   13bec:	e3a02020 	mov	r2, #32	; 0x20
   13bf0:	e1a0e00f 	mov	lr, pc
   13bf4:	e12fff19 	bx	r9
   13bf8:	e3500000 	cmp	r0, #0	; 0x0
   13bfc:	e1a0400d 	mov	r4, sp
   13c00:	0a000047 	beq	13d24 <fat16_write_dir_entry+0x27c>
   13c04:	e5dd7000 	ldrb	r7, [sp]
   13c08:	e1a0100d 	mov	r1, sp
   13c0c:	e5f12001 	ldrb	r2, [r1, #1]!
   13c10:	e1a03387 	lsl	r3, r7, #7
   13c14:	e18330a7 	orr	r3, r3, r7, lsr #1
   13c18:	e0833002 	add	r3, r3, r2
   13c1c:	e28d200a 	add	r2, sp, #10	; 0xa
   13c20:	e1510002 	cmp	r1, r2
   13c24:	e20370ff 	and	r7, r3, #255	; 0xff
   13c28:	1afffff7 	bne	13c0c <fat16_write_dir_entry+0x164>
   13c2c:	e1a0500a 	mov	r5, sl
   13c30:	ea000037 	b	13d14 <fat16_write_dir_entry+0x26c>
   13c34:	e3a01000 	mov	r1, #0	; 0x0
   13c38:	e3a02020 	mov	r2, #32	; 0x20
   13c3c:	e1a0000d 	mov	r0, sp
   13c40:	eb001007 	bl	17c64 <memset>
   13c44:	e3a010ff 	mov	r1, #255	; 0xff
   13c48:	e3a0200a 	mov	r2, #10	; 0xa
   13c4c:	e28d0001 	add	r0, sp, #1	; 0x1
   13c50:	eb001003 	bl	17c64 <memset>
   13c54:	e3a010ff 	mov	r1, #255	; 0xff
   13c58:	e3a0200c 	mov	r2, #12	; 0xc
   13c5c:	e28d000e 	add	r0, sp, #14	; 0xe
   13c60:	eb000fff 	bl	17c64 <memset>
   13c64:	e28d001c 	add	r0, sp, #28	; 0x1c
   13c68:	e3a010ff 	mov	r1, #255	; 0xff
   13c6c:	e3a02004 	mov	r2, #4	; 0x4
   13c70:	eb000ffb 	bl	17c64 <memset>
   13c74:	e155000a 	cmp	r5, sl
   13c78:	03853040 	orreq	r3, r5, #64	; 0x40
   13c7c:	e5cd5000 	strb	r5, [sp]
   13c80:	05cd3000 	strbeq	r3, [sp]
   13c84:	e3a0300d 	mov	r3, #13	; 0xd
   13c88:	e02e6395 	mla	lr, r5, r3, r6
   13c8c:	e3a0c001 	mov	ip, #1	; 0x1
   13c90:	e28c3001 	add	r3, ip, #1	; 0x1
   13c94:	e20330ff 	and	r3, r3, #255	; 0xff
   13c98:	e2832001 	add	r2, r3, #1	; 0x1
   13c9c:	e28d4020 	add	r4, sp, #32	; 0x20
   13ca0:	e55e000d 	ldrb	r0, [lr, #-13]
   13ca4:	e084100c 	add	r1, r4, ip
   13ca8:	e202c0ff 	and	ip, r2, #255	; 0xff
   13cac:	e35c000b 	cmp	ip, #11	; 0xb
   13cb0:	e0842003 	add	r2, r4, r3
   13cb4:	e3a03000 	mov	r3, #0	; 0x0
   13cb8:	e5410020 	strb	r0, [r1, #-32]
   13cbc:	03a0c00e 	moveq	ip, #14	; 0xe
   13cc0:	e5423020 	strb	r3, [r2, #-32]
   13cc4:	0a000001 	beq	13cd0 <fat16_write_dir_entry+0x228>
   13cc8:	e35c001a 	cmp	ip, #26	; 0x1a
   13ccc:	028cc002 	addeq	ip, ip, #2	; 0x2
   13cd0:	e55e300d 	ldrb	r3, [lr, #-13]
   13cd4:	e3530000 	cmp	r3, #0	; 0x0
   13cd8:	e28ee001 	add	lr, lr, #1	; 0x1
   13cdc:	0a000001 	beq	13ce8 <fat16_write_dir_entry+0x240>
   13ce0:	e35c001e 	cmp	ip, #30	; 0x1e
   13ce4:	9affffe9 	bls	13c90 <fat16_write_dir_entry+0x1e8>
   13ce8:	e3a0300f 	mov	r3, #15	; 0xf
   13cec:	e5cd300b 	strb	r3, [sp, #11]
   13cf0:	e1a00008 	mov	r0, r8
   13cf4:	e5cd700d 	strb	r7, [sp, #13]
   13cf8:	e1a0100d 	mov	r1, sp
   13cfc:	e3a02020 	mov	r2, #32	; 0x20
   13d00:	e1a0e00f 	mov	lr, pc
   13d04:	e12fff19 	bx	r9
   13d08:	e2453001 	sub	r3, r5, #1	; 0x1
   13d0c:	e2888020 	add	r8, r8, #32	; 0x20
   13d10:	e20350ff 	and	r5, r3, #255	; 0xff
   13d14:	e3550000 	cmp	r5, #0	; 0x0
   13d18:	1affffc5 	bne	13c34 <fat16_write_dir_entry+0x18c>
   13d1c:	e3a00001 	mov	r0, #1	; 0x1
   13d20:	ea000000 	b	13d28 <fat16_write_dir_entry+0x280>
   13d24:	e3a00000 	mov	r0, #0	; 0x0
   13d28:	e28dd020 	add	sp, sp, #32	; 0x20
   13d2c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d30:	e12fff1e 	bx	lr

00013d34 <fat16_resize_file>:
   13d34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d38:	e2506000 	subs	r6, r0, #0	; 0x0
   13d3c:	e24dd004 	sub	sp, sp, #4	; 0x4
   13d40:	e1a0a001 	mov	sl, r1
   13d44:	0a00005b 	beq	13eb8 <fat16_resize_file+0x184>
   13d48:	e1d642b6 	ldrh	r4, [r6, #38]
   13d4c:	e5963000 	ldr	r3, [r6]
   13d50:	e2719001 	rsbs	r9, r1, #1	; 0x1
   13d54:	33a09000 	movcc	r9, #0	; 0x0
   13d58:	e3540000 	cmp	r4, #0	; 0x0
   13d5c:	03510000 	cmpeq	r1, #0	; 0x0
   13d60:	e1d381b2 	ldrh	r8, [r3, #18]
   13d64:	11a07001 	movne	r7, r1
   13d68:	1a000006 	bne	13d88 <fat16_resize_file+0x54>
   13d6c:	ea000049 	b	13e98 <fat16_resize_file+0x164>
   13d70:	e5960000 	ldr	r0, [r6]
   13d74:	ebfffd0d 	bl	131b0 <fat16_get_next_cluster>
   13d78:	e3500000 	cmp	r0, #0	; 0x0
   13d7c:	0a00004f 	beq	13ec0 <fat16_resize_file+0x18c>
   13d80:	e0687007 	rsb	r7, r8, r7
   13d84:	e1a04000 	mov	r4, r0
   13d88:	e1570008 	cmp	r7, r8
   13d8c:	e1a01004 	mov	r1, r4
   13d90:	8afffff6 	bhi	13d70 <fat16_resize_file+0x3c>
   13d94:	e2745001 	rsbs	r5, r4, #1	; 0x1
   13d98:	33a05000 	movcc	r5, #0	; 0x0
   13d9c:	e3550000 	cmp	r5, #0	; 0x0
   13da0:	0a000011 	beq	13dec <fat16_resize_file+0xb8>
   13da4:	e1a01008 	mov	r1, r8
   13da8:	e1a00007 	mov	r0, r7
   13dac:	eb001211 	bl	185f8 <__aeabi_uidiv>
   13db0:	e1a00800 	lsl	r0, r0, #16
   13db4:	e1a02820 	lsr	r2, r0, #16
   13db8:	e0030298 	mul	r3, r8, r2
   13dbc:	e1530007 	cmp	r3, r7
   13dc0:	32823001 	addcc	r3, r2, #1	; 0x1
   13dc4:	31a03803 	lslcc	r3, r3, #16
   13dc8:	31a02823 	lsrcc	r2, r3, #16
   13dcc:	e5960000 	ldr	r0, [r6]
   13dd0:	e1a01004 	mov	r1, r4
   13dd4:	ebfffd55 	bl	13330 <fat16_append_clusters>
   13dd8:	e3500000 	cmp	r0, #0	; 0x0
   13ddc:	0a000035 	beq	13eb8 <fat16_resize_file+0x184>
   13de0:	e3550000 	cmp	r5, #0	; 0x0
   13de4:	11c602b6 	strhne	r0, [r6, #38]
   13de8:	11a04000 	movne	r4, r0
   13dec:	e3590000 	cmp	r9, #0	; 0x0
   13df0:	13a03000 	movne	r3, #0	; 0x0
   13df4:	11c632b6 	strhne	r3, [r6, #38]
   13df8:	e586a028 	str	sl, [r6, #40]
   13dfc:	e5960000 	ldr	r0, [r6]
   13e00:	e2861004 	add	r1, r6, #4	; 0x4
   13e04:	ebffff27 	bl	13aa8 <fat16_write_dir_entry>
   13e08:	e3500000 	cmp	r0, #0	; 0x0
   13e0c:	0a000029 	beq	13eb8 <fat16_resize_file+0x184>
   13e10:	e3590000 	cmp	r9, #0	; 0x0
   13e14:	11a01004 	movne	r1, r4
   13e18:	15960000 	ldrne	r0, [r6]
   13e1c:	1a00001c 	bne	13e94 <fat16_resize_file+0x160>
   13e20:	e1570008 	cmp	r7, r8
   13e24:	8a00001b 	bhi	13e98 <fat16_resize_file+0x164>
   13e28:	e1a03804 	lsl	r3, r4, #16
   13e2c:	e5965000 	ldr	r5, [r6]
   13e30:	e1a04823 	lsr	r4, r3, #16
   13e34:	e3550000 	cmp	r5, #0	; 0x0
   13e38:	13540001 	cmpne	r4, #1	; 0x1
   13e3c:	9a000015 	bls	13e98 <fat16_resize_file+0x164>
   13e40:	e1a01004 	mov	r1, r4
   13e44:	e1a00005 	mov	r0, r5
   13e48:	ebfffcd8 	bl	131b0 <fat16_get_next_cluster>
   13e4c:	e3e03000 	mvn	r3, #0	; 0x0
   13e50:	e5cd3003 	strb	r3, [sp, #3]
   13e54:	e5cd3002 	strb	r3, [sp, #2]
   13e58:	e1a07000 	mov	r7, r0
   13e5c:	e5950008 	ldr	r0, [r5, #8]
   13e60:	e5953000 	ldr	r3, [r5]
   13e64:	e0800084 	add	r0, r0, r4, lsl #1
   13e68:	e28d1002 	add	r1, sp, #2	; 0x2
   13e6c:	e3a02002 	mov	r2, #2	; 0x2
   13e70:	e593c008 	ldr	ip, [r3, #8]
   13e74:	e1a0e00f 	mov	lr, pc
   13e78:	e12fff1c 	bx	ip
   13e7c:	e3500000 	cmp	r0, #0	; 0x0
   13e80:	0a000004 	beq	13e98 <fat16_resize_file+0x164>
   13e84:	e3570000 	cmp	r7, #0	; 0x0
   13e88:	0a000002 	beq	13e98 <fat16_resize_file+0x164>
   13e8c:	e1a00005 	mov	r0, r5
   13e90:	e1a01007 	mov	r1, r7
   13e94:	ebfffcef 	bl	13258 <fat16_free_clusters>
   13e98:	e5963030 	ldr	r3, [r6, #48]
   13e9c:	e15a0003 	cmp	sl, r3
   13ea0:	33a03000 	movcc	r3, #0	; 0x0
   13ea4:	23a00001 	movcs	r0, #1	; 0x1
   13ea8:	33a00001 	movcc	r0, #1	; 0x1
   13eac:	3586a030 	strcc	sl, [r6, #48]
   13eb0:	31c633b4 	strhcc	r3, [r6, #52]
   13eb4:	ea000004 	b	13ecc <fat16_resize_file+0x198>
   13eb8:	e3a00000 	mov	r0, #0	; 0x0
   13ebc:	ea000002 	b	13ecc <fat16_resize_file+0x198>
   13ec0:	e2745001 	rsbs	r5, r4, #1	; 0x1
   13ec4:	33a05000 	movcc	r5, #0	; 0x0
   13ec8:	eaffffb5 	b	13da4 <fat16_resize_file+0x70>
   13ecc:	e28dd004 	add	sp, sp, #4	; 0x4
   13ed0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ed4:	e12fff1e 	bx	lr

00013ed8 <fat16_seek_file>:
   13ed8:	e3510000 	cmp	r1, #0	; 0x0
   13edc:	13500000 	cmpne	r0, #0	; 0x0
   13ee0:	e92d4070 	push	{r4, r5, r6, lr}
   13ee4:	e20220ff 	and	r2, r2, #255	; 0xff
   13ee8:	e1a05000 	mov	r5, r0
   13eec:	e1a06001 	mov	r6, r1
   13ef0:	0a00001b 	beq	13f64 <fat16_seek_file+0x8c>
   13ef4:	e3520001 	cmp	r2, #1	; 0x1
   13ef8:	e5901030 	ldr	r1, [r0, #48]
   13efc:	0a000004 	beq	13f14 <fat16_seek_file+0x3c>
   13f00:	35964000 	ldrcc	r4, [r6]
   13f04:	3a000008 	bcc	13f2c <fat16_seek_file+0x54>
   13f08:	e3520002 	cmp	r2, #2	; 0x2
   13f0c:	1a000014 	bne	13f64 <fat16_seek_file+0x8c>
   13f10:	ea000002 	b	13f20 <fat16_seek_file+0x48>
   13f14:	e5963000 	ldr	r3, [r6]
   13f18:	e0814003 	add	r4, r1, r3
   13f1c:	ea000002 	b	13f2c <fat16_seek_file+0x54>
   13f20:	e5902028 	ldr	r2, [r0, #40]
   13f24:	e5963000 	ldr	r3, [r6]
   13f28:	e0824003 	add	r4, r2, r3
   13f2c:	e5953028 	ldr	r3, [r5, #40]
   13f30:	e1540003 	cmp	r4, r3
   13f34:	9a000004 	bls	13f4c <fat16_seek_file+0x74>
   13f38:	e1a00005 	mov	r0, r5
   13f3c:	e1a01004 	mov	r1, r4
   13f40:	ebffff7b 	bl	13d34 <fat16_resize_file>
   13f44:	e3500000 	cmp	r0, #0	; 0x0
   13f48:	0a000005 	beq	13f64 <fat16_seek_file+0x8c>
   13f4c:	e3a03000 	mov	r3, #0	; 0x0
   13f50:	e3a00001 	mov	r0, #1	; 0x1
   13f54:	e5854030 	str	r4, [r5, #48]
   13f58:	e1c533b4 	strh	r3, [r5, #52]
   13f5c:	e5864000 	str	r4, [r6]
   13f60:	ea000000 	b	13f68 <fat16_seek_file+0x90>
   13f64:	e3a00000 	mov	r0, #0	; 0x0
   13f68:	e8bd4070 	pop	{r4, r5, r6, lr}
   13f6c:	e12fff1e 	bx	lr

00013f70 <fat16_write_file>:
   13f70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f74:	e1a02802 	lsl	r2, r2, #16
   13f78:	e24dd004 	sub	sp, sp, #4	; 0x4
   13f7c:	e1a02822 	lsr	r2, r2, #16
   13f80:	e3510000 	cmp	r1, #0	; 0x0
   13f84:	13500000 	cmpne	r0, #0	; 0x0
   13f88:	e1a04000 	mov	r4, r0
   13f8c:	e1a0b001 	mov	fp, r1
   13f90:	e58d2000 	str	r2, [sp]
   13f94:	0a000077 	beq	14178 <fat16_write_file+0x208>
   13f98:	e3520000 	cmp	r2, #0	; 0x0
   13f9c:	0a000075 	beq	14178 <fat16_write_file+0x208>
   13fa0:	e590a030 	ldr	sl, [r0, #48]
   13fa4:	e5903028 	ldr	r3, [r0, #40]
   13fa8:	e15a0003 	cmp	sl, r3
   13fac:	8a000071 	bhi	14178 <fat16_write_file+0x208>
   13fb0:	e1d053b4 	ldrh	r5, [r0, #52]
   13fb4:	e5900000 	ldr	r0, [r0]
   13fb8:	e3550000 	cmp	r5, #0	; 0x0
   13fbc:	e1d081b2 	ldrh	r8, [r0, #18]
   13fc0:	1a000020 	bne	14048 <fat16_write_file+0xd8>
   13fc4:	e1d452b6 	ldrh	r5, [r4, #38]
   13fc8:	e3550000 	cmp	r5, #0	; 0x0
   13fcc:	1a000008 	bne	13ff4 <fat16_write_file+0x84>
   13fd0:	e35a0000 	cmp	sl, #0	; 0x0
   13fd4:	1a000067 	bne	14178 <fat16_write_file+0x208>
   13fd8:	e1a01005 	mov	r1, r5
   13fdc:	e3a02001 	mov	r2, #1	; 0x1
   13fe0:	ebfffcd2 	bl	13330 <fat16_append_clusters>
   13fe4:	e3500000 	cmp	r0, #0	; 0x0
   13fe8:	e1a05000 	mov	r5, r0
   13fec:	e1c402b6 	strh	r0, [r4, #38]
   13ff0:	0a000060 	beq	14178 <fat16_write_file+0x208>
   13ff4:	e5946030 	ldr	r6, [r4, #48]
   13ff8:	e3560000 	cmp	r6, #0	; 0x0
   13ffc:	12689000 	rsbne	r9, r8, #0	; 0x0
   14000:	10687006 	rsbne	r7, r8, r6
   14004:	1a00000c 	bne	1403c <fat16_write_file+0xcc>
   14008:	ea00000e 	b	14048 <fat16_write_file+0xd8>
   1400c:	e5940000 	ldr	r0, [r4]
   14010:	ebfffc66 	bl	131b0 <fat16_get_next_cluster>
   14014:	e3500000 	cmp	r0, #0	; 0x0
   14018:	03570000 	cmpeq	r7, #0	; 0x0
   1401c:	e0866009 	add	r6, r6, r9
   14020:	e0877009 	add	r7, r7, r9
   14024:	e1a01005 	mov	r1, r5
   14028:	e3a02001 	mov	r2, #1	; 0x1
   1402c:	05940000 	ldreq	r0, [r4]
   14030:	0bfffcbe 	bleq	13330 <fat16_append_clusters>
   14034:	e2505000 	subs	r5, r0, #0	; 0x0
   14038:	0a00004e 	beq	14178 <fat16_write_file+0x208>
   1403c:	e1560008 	cmp	r6, r8
   14040:	e1a01005 	mov	r1, r5
   14044:	2afffff0 	bcs	1400c <fat16_write_file+0x9c>
   14048:	e1a0000a 	mov	r0, sl
   1404c:	e1a01008 	mov	r1, r8
   14050:	eb0011fc 	bl	18848 <__umodsi3>
   14054:	e59d7000 	ldr	r7, [sp]
   14058:	e1a00800 	lsl	r0, r0, #16
   1405c:	e1a0a820 	lsr	sl, r0, #16
   14060:	e594c000 	ldr	ip, [r4]
   14064:	e06a3008 	rsb	r3, sl, r8
   14068:	e59c2018 	ldr	r2, [ip, #24]
   1406c:	e1a03803 	lsl	r3, r3, #16
   14070:	e1a03823 	lsr	r3, r3, #16
   14074:	e1570003 	cmp	r7, r3
   14078:	31a06007 	movcc	r6, r7
   1407c:	21a06003 	movcs	r6, r3
   14080:	e08a2002 	add	r2, sl, r2
   14084:	e2453002 	sub	r3, r5, #2	; 0x2
   14088:	e0202398 	mla	r0, r8, r3, r2
   1408c:	e1a0100b 	mov	r1, fp
   14090:	e1a02006 	mov	r2, r6
   14094:	e59c3000 	ldr	r3, [ip]
   14098:	e593c008 	ldr	ip, [r3, #8]
   1409c:	e1a0e00f 	mov	lr, pc
   140a0:	e12fff1c 	bx	ip
   140a4:	e0663007 	rsb	r3, r6, r7
   140a8:	e3500000 	cmp	r0, #0	; 0x0
   140ac:	e1a01005 	mov	r1, r5
   140b0:	e08bb006 	add	fp, fp, r6
   140b4:	e08a2006 	add	r2, sl, r6
   140b8:	e1a00803 	lsl	r0, r3, #16
   140bc:	0a000018 	beq	14124 <fat16_write_file+0x1b4>
   140c0:	e5943030 	ldr	r3, [r4, #48]
   140c4:	e1520008 	cmp	r2, r8
   140c8:	e0833006 	add	r3, r3, r6
   140cc:	e5843030 	str	r3, [r4, #48]
   140d0:	e1a07820 	lsr	r7, r0, #16
   140d4:	ba00000f 	blt	14118 <fat16_write_file+0x1a8>
   140d8:	e5940000 	ldr	r0, [r4]
   140dc:	ebfffc33 	bl	131b0 <fat16_get_next_cluster>
   140e0:	e3a0a000 	mov	sl, #0	; 0x0
   140e4:	e150000a 	cmp	r0, sl
   140e8:	13a03000 	movne	r3, #0	; 0x0
   140ec:	03a03001 	moveq	r3, #1	; 0x1
   140f0:	e157000a 	cmp	r7, sl
   140f4:	03a03000 	moveq	r3, #0	; 0x0
   140f8:	e153000a 	cmp	r3, sl
   140fc:	e1a01005 	mov	r1, r5
   14100:	e3a02001 	mov	r2, #1	; 0x1
   14104:	15940000 	ldrne	r0, [r4]
   14108:	1bfffc88 	blne	13330 <fat16_append_clusters>
   1410c:	e3500000 	cmp	r0, #0	; 0x0
   14110:	e1a05000 	mov	r5, r0
   14114:	0a000015 	beq	14170 <fat16_write_file+0x200>
   14118:	e3570000 	cmp	r7, #0	; 0x0
   1411c:	e1c453b4 	strh	r5, [r4, #52]
   14120:	1affffce 	bne	14060 <fat16_write_file+0xf0>
   14124:	e5943030 	ldr	r3, [r4, #48]
   14128:	e5945028 	ldr	r5, [r4, #40]
   1412c:	e1530005 	cmp	r3, r5
   14130:	9a000009 	bls	1415c <fat16_write_file+0x1ec>
   14134:	e5843028 	str	r3, [r4, #40]
   14138:	e5940000 	ldr	r0, [r4]
   1413c:	e2841004 	add	r1, r4, #4	; 0x4
   14140:	ebfffe58 	bl	13aa8 <fat16_write_dir_entry>
   14144:	e3500000 	cmp	r0, #0	; 0x0
   14148:	05943030 	ldreq	r3, [r4, #48]
   1414c:	00653003 	rsbeq	r3, r5, r3
   14150:	01a03803 	lsleq	r3, r3, #16
   14154:	05845030 	streq	r5, [r4, #48]
   14158:	01a07823 	lsreq	r7, r3, #16
   1415c:	e59d2000 	ldr	r2, [sp]
   14160:	e0673002 	rsb	r3, r7, r2
   14164:	e1a03803 	lsl	r3, r3, #16
   14168:	e1a00843 	asr	r0, r3, #16
   1416c:	ea000002 	b	1417c <fat16_write_file+0x20c>
   14170:	e1c403b4 	strh	r0, [r4, #52]
   14174:	eaffffea 	b	14124 <fat16_write_file+0x1b4>
   14178:	e3e00000 	mvn	r0, #0	; 0x0
   1417c:	e28dd004 	add	sp, sp, #4	; 0x4
   14180:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14184:	e12fff1e 	bx	lr

00014188 <fat16_close_dir>:
   14188:	e3500000 	cmp	r0, #0	; 0x0
   1418c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   14190:	1b000c9d 	blne	1740c <free>
   14194:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   14198:	e12fff1e 	bx	lr

0001419c <fat16_close_file>:
   1419c:	e3500000 	cmp	r0, #0	; 0x0
   141a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   141a4:	1b000c98 	blne	1740c <free>
   141a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   141ac:	e12fff1e 	bx	lr

000141b0 <fat16_close>:
   141b0:	e3500000 	cmp	r0, #0	; 0x0
   141b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   141b8:	1b000c93 	blne	1740c <free>
   141bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   141c0:	e12fff1e 	bx	lr

000141c4 <fat16_open_dir>:
   141c4:	e3510000 	cmp	r1, #0	; 0x0
   141c8:	13500000 	cmpne	r0, #0	; 0x0
   141cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   141d0:	e1a07000 	mov	r7, r0
   141d4:	e1a05001 	mov	r5, r1
   141d8:	13a08000 	movne	r8, #0	; 0x0
   141dc:	03a08001 	moveq	r8, #1	; 0x1
   141e0:	0a000013 	beq	14234 <fat16_open_dir+0x70>
   141e4:	e5d13020 	ldrb	r3, [r1, #32]
   141e8:	e3130010 	tst	r3, #16	; 0x10
   141ec:	e3a00034 	mov	r0, #52	; 0x34
   141f0:	0a00000f 	beq	14234 <fat16_open_dir+0x70>
   141f4:	eb000c89 	bl	17420 <malloc>
   141f8:	e3500000 	cmp	r0, #0	; 0x0
   141fc:	e1a06000 	mov	r6, r0
   14200:	e2804004 	add	r4, r0, #4	; 0x4
   14204:	0a00000a 	beq	14234 <fat16_open_dir+0x70>
   14208:	e1a0c005 	mov	ip, r5
   1420c:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   14210:	e1a0e004 	mov	lr, r4
   14214:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14218:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   1421c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14220:	e89c0007 	ldm	ip, {r0, r1, r2}
   14224:	e5867000 	str	r7, [r6]
   14228:	e88e0007 	stm	lr, {r0, r1, r2}
   1422c:	e1c683b0 	strh	r8, [r6, #48]
   14230:	ea000000 	b	14238 <fat16_open_dir+0x74>
   14234:	e3a06000 	mov	r6, #0	; 0x0
   14238:	e1a00006 	mov	r0, r6
   1423c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   14240:	e12fff1e 	bx	lr

00014244 <fat16_open_file>:
   14244:	e3510000 	cmp	r1, #0	; 0x0
   14248:	13500000 	cmpne	r0, #0	; 0x0
   1424c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14250:	e1a05001 	mov	r5, r1
   14254:	e1a07000 	mov	r7, r0
   14258:	0a000015 	beq	142b4 <fat16_open_file+0x70>
   1425c:	e5d13020 	ldrb	r3, [r1, #32]
   14260:	e2138010 	ands	r8, r3, #16	; 0x10
   14264:	e3a00038 	mov	r0, #56	; 0x38
   14268:	1a000011 	bne	142b4 <fat16_open_file+0x70>
   1426c:	eb000c6b 	bl	17420 <malloc>
   14270:	e3500000 	cmp	r0, #0	; 0x0
   14274:	e1a06000 	mov	r6, r0
   14278:	e2804004 	add	r4, r0, #4	; 0x4
   1427c:	0a00000c 	beq	142b4 <fat16_open_file+0x70>
   14280:	e1a0c005 	mov	ip, r5
   14284:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   14288:	e1a0e004 	mov	lr, r4
   1428c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14290:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   14294:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14298:	e89c0007 	ldm	ip, {r0, r1, r2}
   1429c:	e88e0007 	stm	lr, {r0, r1, r2}
   142a0:	e1d552b2 	ldrh	r5, [r5, #34]
   142a4:	e5867000 	str	r7, [r6]
   142a8:	e5868030 	str	r8, [r6, #48]
   142ac:	e1c653b4 	strh	r5, [r6, #52]
   142b0:	ea000000 	b	142b8 <fat16_open_file+0x74>
   142b4:	e3a06000 	mov	r6, #0	; 0x0
   142b8:	e1a00006 	mov	r0, r6
   142bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   142c0:	e12fff1e 	bx	lr

000142c4 <open_file_in_dir>:
   142c4:	e92d4030 	push	{r4, r5, lr}
   142c8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   142cc:	e1a0300d 	mov	r3, sp
   142d0:	e1a04000 	mov	r4, r0
   142d4:	ebfffddc 	bl	13a4c <find_file_in_dir>
   142d8:	e3500000 	cmp	r0, #0	; 0x0
   142dc:	e1a03000 	mov	r3, r0
   142e0:	e1a0500d 	mov	r5, sp
   142e4:	e1a00004 	mov	r0, r4
   142e8:	e1a0100d 	mov	r1, sp
   142ec:	0a000001 	beq	142f8 <open_file_in_dir+0x34>
   142f0:	ebffffd3 	bl	14244 <fat16_open_file>
   142f4:	e1a03000 	mov	r3, r0
   142f8:	e1a00003 	mov	r0, r3
   142fc:	e28dd02c 	add	sp, sp, #44	; 0x2c
   14300:	e8bd4030 	pop	{r4, r5, lr}
   14304:	e12fff1e 	bx	lr

00014308 <fat16_get_dir_entry_of_path>:
   14308:	e3510000 	cmp	r1, #0	; 0x0
   1430c:	13500000 	cmpne	r0, #0	; 0x0
   14310:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14314:	e1a09000 	mov	r9, r0
   14318:	e1a04001 	mov	r4, r1
   1431c:	e1a05002 	mov	r5, r2
   14320:	0a00003c 	beq	14418 <fat16_get_dir_entry_of_path+0x110>
   14324:	e5d13000 	ldrb	r3, [r1]
   14328:	e3520000 	cmp	r2, #0	; 0x0
   1432c:	13530000 	cmpne	r3, #0	; 0x0
   14330:	13a01000 	movne	r1, #0	; 0x0
   14334:	03a01001 	moveq	r1, #1	; 0x1
   14338:	0a000036 	beq	14418 <fat16_get_dir_entry_of_path+0x110>
   1433c:	e353002f 	cmp	r3, #47	; 0x2f
   14340:	e1a00002 	mov	r0, r2
   14344:	e3a0202c 	mov	r2, #44	; 0x2c
   14348:	02844001 	addeq	r4, r4, #1	; 0x1
   1434c:	eb000e44 	bl	17c64 <memset>
   14350:	e3a03010 	mov	r3, #16	; 0x10
   14354:	e5c53020 	strb	r3, [r5, #32]
   14358:	e5d43000 	ldrb	r3, [r4]
   1435c:	e3530000 	cmp	r3, #0	; 0x0
   14360:	0a00002e 	beq	14420 <fat16_get_dir_entry_of_path+0x118>
   14364:	e1a00009 	mov	r0, r9
   14368:	e1a01005 	mov	r1, r5
   1436c:	ebffff94 	bl	141c4 <fat16_open_dir>
   14370:	e2507000 	subs	r7, r0, #0	; 0x0
   14374:	0a000027 	beq	14418 <fat16_get_dir_entry_of_path+0x110>
   14378:	e1a00004 	mov	r0, r4
   1437c:	e3a0102f 	mov	r1, #47	; 0x2f
   14380:	eb000e6d 	bl	17d3c <strchr>
   14384:	e2508000 	subs	r8, r0, #0	; 0x0
   14388:	1a000002 	bne	14398 <fat16_get_dir_entry_of_path+0x90>
   1438c:	e1a00004 	mov	r0, r4
   14390:	eb000ef0 	bl	17f58 <strlen>
   14394:	e0848000 	add	r8, r4, r0
   14398:	e0643008 	rsb	r3, r4, r8
   1439c:	e20360ff 	and	r6, r3, #255	; 0xff
   143a0:	ea000013 	b	143f4 <fat16_get_dir_entry_of_path+0xec>
   143a4:	eb000eeb 	bl	17f58 <strlen>
   143a8:	e1500006 	cmp	r0, r6
   143ac:	e1a01005 	mov	r1, r5
   143b0:	e1a02006 	mov	r2, r6
   143b4:	e1a00004 	mov	r0, r4
   143b8:	1a00000d 	bne	143f4 <fat16_get_dir_entry_of_path+0xec>
   143bc:	eb000f0c 	bl	17ff4 <strncmp>
   143c0:	e250a000 	subs	sl, r0, #0	; 0x0
   143c4:	1a00000a 	bne	143f4 <fat16_get_dir_entry_of_path+0xec>
   143c8:	e1a00007 	mov	r0, r7
   143cc:	ebffff6d 	bl	14188 <fat16_close_dir>
   143d0:	e7d43006 	ldrb	r3, [r4, r6]
   143d4:	e3530000 	cmp	r3, #0	; 0x0
   143d8:	0a000010 	beq	14420 <fat16_get_dir_entry_of_path+0x118>
   143dc:	e5d53020 	ldrb	r3, [r5, #32]
   143e0:	e3130010 	tst	r3, #16	; 0x10
   143e4:	0a00000b 	beq	14418 <fat16_get_dir_entry_of_path+0x110>
   143e8:	e2884001 	add	r4, r8, #1	; 0x1
   143ec:	e1a0700a 	mov	r7, sl
   143f0:	ea000005 	b	1440c <fat16_get_dir_entry_of_path+0x104>
   143f4:	e1a01005 	mov	r1, r5
   143f8:	e1a00007 	mov	r0, r7
   143fc:	ebfffd0c 	bl	13834 <fat16_read_dir>
   14400:	e3500000 	cmp	r0, #0	; 0x0
   14404:	e1a00005 	mov	r0, r5
   14408:	1affffe5 	bne	143a4 <fat16_get_dir_entry_of_path+0x9c>
   1440c:	e1a00007 	mov	r0, r7
   14410:	ebffff5c 	bl	14188 <fat16_close_dir>
   14414:	eaffffd2 	b	14364 <fat16_get_dir_entry_of_path+0x5c>
   14418:	e3a00000 	mov	r0, #0	; 0x0
   1441c:	ea000000 	b	14424 <fat16_get_dir_entry_of_path+0x11c>
   14420:	e3a00001 	mov	r0, #1	; 0x1
   14424:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14428:	e12fff1e 	bx	lr

0001442c <fat16_open>:
   1442c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14430:	e2508000 	subs	r8, r0, #0	; 0x0
   14434:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   14438:	0a000071 	beq	14604 <fat16_open+0x1d8>
   1443c:	e5983008 	ldr	r3, [r8, #8]
   14440:	e3530000 	cmp	r3, #0	; 0x0
   14444:	0a00006e 	beq	14604 <fat16_open+0x1d8>
   14448:	e3a0001c 	mov	r0, #28	; 0x1c
   1444c:	eb000bf3 	bl	17420 <malloc>
   14450:	e250b000 	subs	fp, r0, #0	; 0x0
   14454:	1a000003 	bne	14468 <fat16_open+0x3c>
   14458:	e59f01b8 	ldr	r0, [pc, #440]	; 14618 <fat16_open+0x1ec>
   1445c:	ebfff597 	bl	11ac0 <rprintf>
   14460:	e1a0a00b 	mov	sl, fp
   14464:	ea000067 	b	14608 <fat16_open+0x1dc>
   14468:	e3a01000 	mov	r1, #0	; 0x0
   1446c:	e3a0201c 	mov	r2, #28	; 0x1c
   14470:	eb000dfb 	bl	17c64 <memset>
   14474:	e5983010 	ldr	r3, [r8, #16]
   14478:	e1a03483 	lsl	r3, r3, #9
   1447c:	e58d3008 	str	r3, [sp, #8]
   14480:	e58b8000 	str	r8, [fp]
   14484:	e283000b 	add	r0, r3, #11	; 0xb
   14488:	e28d1023 	add	r1, sp, #35	; 0x23
   1448c:	e3a02019 	mov	r2, #25	; 0x19
   14490:	e598c000 	ldr	ip, [r8]
   14494:	e1a0e00f 	mov	lr, pc
   14498:	e12fff1c 	bx	ip
   1449c:	e3500000 	cmp	r0, #0	; 0x0
   144a0:	e1a0a00b 	mov	sl, fp
   144a4:	0a000052 	beq	145f4 <fat16_open+0x1c8>
   144a8:	e5dd202e 	ldrb	r2, [sp, #46]
   144ac:	e5dd302f 	ldrb	r3, [sp, #47]
   144b0:	e1923403 	orrs	r3, r2, r3, lsl #8
   144b4:	e5dd0023 	ldrb	r0, [sp, #35]
   144b8:	e5dd2024 	ldrb	r2, [sp, #36]
   144bc:	e58d3010 	str	r3, [sp, #16]
   144c0:	e5dd6026 	ldrb	r6, [sp, #38]
   144c4:	e5dd3025 	ldrb	r3, [sp, #37]
   144c8:	e58d001c 	str	r0, [sp, #28]
   144cc:	e58d2018 	str	r2, [sp, #24]
   144d0:	e58d3004 	str	r3, [sp, #4]
   144d4:	e58d6014 	str	r6, [sp, #20]
   144d8:	e5dd1027 	ldrb	r1, [sp, #39]
   144dc:	e5dd9028 	ldrb	r9, [sp, #40]
   144e0:	e5dd7029 	ldrb	r7, [sp, #41]
   144e4:	e5dd502a 	ldrb	r5, [sp, #42]
   144e8:	e5dd402b 	ldrb	r4, [sp, #43]
   144ec:	e5dde02c 	ldrb	lr, [sp, #44]
   144f0:	e5ddc038 	ldrb	ip, [sp, #56]
   144f4:	e5dd2039 	ldrb	r2, [sp, #57]
   144f8:	e5dd303a 	ldrb	r3, [sp, #58]
   144fc:	e5dd003b 	ldrb	r0, [sp, #59]
   14500:	0a00003b 	beq	145f4 <fat16_open+0x1c8>
   14504:	e1a03803 	lsl	r3, r3, #16
   14508:	e18c2402 	orr	r2, ip, r2, lsl #8
   1450c:	e1833c00 	orr	r3, r3, r0, lsl #24
   14510:	e1926003 	orrs	r6, r2, r3
   14514:	1a000002 	bne	14524 <fat16_open+0xf8>
   14518:	e194240e 	orrs	r2, r4, lr, lsl #8
   1451c:	0a000034 	beq	145f4 <fat16_open+0x1c8>
   14520:	e1a06002 	mov	r6, r2
   14524:	e59d0010 	ldr	r0, [sp, #16]
   14528:	e0000099 	mul	r0, r9, r0
   1452c:	e59d201c 	ldr	r2, [sp, #28]
   14530:	e58d000c 	str	r0, [sp, #12]
   14534:	e59d0018 	ldr	r0, [sp, #24]
   14538:	e1873405 	orr	r3, r7, r5, lsl #8
   1453c:	e1825400 	orr	r5, r2, r0, lsl #8
   14540:	e59d2014 	ldr	r2, [sp, #20]
   14544:	e1a03283 	lsl	r3, r3, #5
   14548:	e1829401 	orr	r9, r2, r1, lsl #8
   1454c:	e58d3000 	str	r3, [sp]
   14550:	e0830005 	add	r0, r3, r5
   14554:	e59d300c 	ldr	r3, [sp, #12]
   14558:	e1a01005 	mov	r1, r5
   1455c:	e2400001 	sub	r0, r0, #1	; 0x1
   14560:	e0694006 	rsb	r4, r9, r6
   14564:	e0634004 	rsb	r4, r3, r4
   14568:	eb001066 	bl	18708 <__aeabi_idiv>
   1456c:	e59d1004 	ldr	r1, [sp, #4]
   14570:	e0600004 	rsb	r0, r0, r4
   14574:	eb00101f 	bl	185f8 <__aeabi_uidiv>
   14578:	e2403eff 	sub	r3, r0, #4080	; 0xff0
   1457c:	e2433005 	sub	r3, r3, #5	; 0x5
   14580:	e3530a0f 	cmp	r3, #61440	; 0xf000
   14584:	e1a07000 	mov	r7, r0
   14588:	2a000019 	bcs	145f4 <fat16_open+0x1c8>
   1458c:	e28a4004 	add	r4, sl, #4	; 0x4
   14590:	e3a03006 	mov	r3, #6	; 0x6
   14594:	e5c8300c 	strb	r3, [r8, #12]
   14598:	e3a01000 	mov	r1, #0	; 0x0
   1459c:	e3a02018 	mov	r2, #24	; 0x18
   145a0:	e1a00004 	mov	r0, r4
   145a4:	eb000dae 	bl	17c64 <memset>
   145a8:	e59dc008 	ldr	ip, [sp, #8]
   145ac:	e02cc995 	mla	ip, r5, r9, ip
   145b0:	e59de00c 	ldr	lr, [sp, #12]
   145b4:	e59d0004 	ldr	r0, [sp, #4]
   145b8:	e02ece95 	mla	lr, r5, lr, ip
   145bc:	e0010695 	mul	r1, r5, r6
   145c0:	e0000095 	mul	r0, r5, r0
   145c4:	e59d6000 	ldr	r6, [sp]
   145c8:	e1a03087 	lsl	r3, r7, #1
   145cc:	e08e2006 	add	r2, lr, r6
   145d0:	e2833004 	add	r3, r3, #4	; 0x4
   145d4:	e5842014 	str	r2, [r4, #20]
   145d8:	e58a1004 	str	r1, [sl, #4]
   145dc:	e5843008 	str	r3, [r4, #8]
   145e0:	e1c400be 	strh	r0, [r4, #14]
   145e4:	e584c004 	str	ip, [r4, #4]
   145e8:	e1c450bc 	strh	r5, [r4, #12]
   145ec:	e584e010 	str	lr, [r4, #16]
   145f0:	ea000004 	b	14608 <fat16_open+0x1dc>
   145f4:	e59f0020 	ldr	r0, [pc, #32]	; 1461c <fat16_open+0x1f0>
   145f8:	ebfff530 	bl	11ac0 <rprintf>
   145fc:	e1a0000b 	mov	r0, fp
   14600:	eb000b81 	bl	1740c <free>
   14604:	e3a0a000 	mov	sl, #0	; 0x0
   14608:	e1a0000a 	mov	r0, sl
   1460c:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14610:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14614:	e12fff1e 	bx	lr
   14618:	000192a8 	.word	0x000192a8
   1461c:	000192b8 	.word	0x000192b8

00014620 <fat16_create_file>:
   14620:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	e2706001 	rsbs	r6, r0, #1	; 0x1
   14628:	33a06000 	movcc	r6, #0	; 0x0
   1462c:	e3500000 	cmp	r0, #0	; 0x0
   14630:	13510000 	cmpne	r1, #0	; 0x0
   14634:	e24dd004 	sub	sp, sp, #4	; 0x4
   14638:	e1a05000 	mov	r5, r0
   1463c:	e1a04001 	mov	r4, r1
   14640:	e1a08002 	mov	r8, r2
   14644:	0a000065 	beq	147e0 <fat16_create_file+0x1c0>
   14648:	e5d13000 	ldrb	r3, [r1]
   1464c:	e3530000 	cmp	r3, #0	; 0x0
   14650:	0a000062 	beq	147e0 <fat16_create_file+0x1c0>
   14654:	e1a01008 	mov	r1, r8
   14658:	e1a00005 	mov	r0, r5
   1465c:	ebfffc74 	bl	13834 <fat16_read_dir>
   14660:	e250a000 	subs	sl, r0, #0	; 0x0
   14664:	e1a01008 	mov	r1, r8
   14668:	e1a00004 	mov	r0, r4
   1466c:	0a000007 	beq	14690 <fat16_create_file+0x70>
   14670:	eb000dfe 	bl	17e70 <strcmp>
   14674:	e3500000 	cmp	r0, #0	; 0x0
   14678:	1afffff5 	bne	14654 <fat16_create_file+0x34>
   1467c:	e3560000 	cmp	r6, #0	; 0x0
   14680:	12800001 	addne	r0, r0, #1	; 0x1
   14684:	03a00001 	moveq	r0, #1	; 0x1
   14688:	01c563b0 	strheq	r6, [r5, #48]
   1468c:	ea000054 	b	147e4 <fat16_create_file+0x1c4>
   14690:	e1a0100a 	mov	r1, sl
   14694:	e3a0202c 	mov	r2, #44	; 0x2c
   14698:	e1a00008 	mov	r0, r8
   1469c:	eb000d70 	bl	17c64 <memset>
   146a0:	e1a01004 	mov	r1, r4
   146a4:	e3a0201f 	mov	r2, #31	; 0x1f
   146a8:	e1a00008 	mov	r0, r8
   146ac:	eb000ea1 	bl	18138 <strncpy>
   146b0:	e1a00004 	mov	r0, r4
   146b4:	eb000e27 	bl	17f58 <strlen>
   146b8:	e3a0100d 	mov	r1, #13	; 0xd
   146bc:	eb000fcd 	bl	185f8 <__aeabi_uidiv>
   146c0:	e1d572b6 	ldrh	r7, [r5, #38]
   146c4:	e5955000 	ldr	r5, [r5]
   146c8:	e3570000 	cmp	r7, #0	; 0x0
   146cc:	05954014 	ldreq	r4, [r5, #20]
   146d0:	11a0600a 	movne	r6, sl
   146d4:	e2800002 	add	r0, r0, #2	; 0x2
   146d8:	0595a018 	ldreq	sl, [r5, #24]
   146dc:	e200b0ff 	and	fp, r0, #255	; 0xff
   146e0:	11a04006 	movne	r4, r6
   146e4:	11a0a006 	movne	sl, r6
   146e8:	01a06004 	moveq	r6, r4
   146ec:	e3a09000 	mov	r9, #0	; 0x0
   146f0:	e154000a 	cmp	r4, sl
   146f4:	1a00001b 	bne	14768 <fat16_create_file+0x148>
   146f8:	e3570000 	cmp	r7, #0	; 0x0
   146fc:	0a000037 	beq	147e0 <fat16_create_file+0x1c0>
   14700:	e3540000 	cmp	r4, #0	; 0x0
   14704:	0a000010 	beq	1474c <fat16_create_file+0x12c>
   14708:	e1a00005 	mov	r0, r5
   1470c:	e1a01007 	mov	r1, r7
   14710:	ebfffaa6 	bl	131b0 <fat16_get_next_cluster>
   14714:	e3500000 	cmp	r0, #0	; 0x0
   14718:	1a00000a 	bne	14748 <fat16_create_file+0x128>
   1471c:	e1a01007 	mov	r1, r7
   14720:	e1a00005 	mov	r0, r5
   14724:	e3a02001 	mov	r2, #1	; 0x1
   14728:	ebfffb00 	bl	13330 <fat16_append_clusters>
   1472c:	e3500000 	cmp	r0, #0	; 0x0
   14730:	0a00002a 	beq	147e0 <fat16_create_file+0x1c0>
   14734:	e1d511b2 	ldrh	r1, [r5, #18]
   14738:	e5952018 	ldr	r2, [r5, #24]
   1473c:	e2403002 	sub	r3, r0, #2	; 0x2
   14740:	e0262391 	mla	r6, r1, r3, r2
   14744:	ea00001e 	b	147c4 <fat16_create_file+0x1a4>
   14748:	e1a07000 	mov	r7, r0
   1474c:	e1d511b2 	ldrh	r1, [r5, #18]
   14750:	e5952018 	ldr	r2, [r5, #24]
   14754:	e2473002 	sub	r3, r7, #2	; 0x2
   14758:	e0242391 	mla	r4, r1, r3, r2
   1475c:	e3a09000 	mov	r9, #0	; 0x0
   14760:	e084a001 	add	sl, r4, r1
   14764:	e1a06004 	mov	r6, r4
   14768:	e5953000 	ldr	r3, [r5]
   1476c:	e1a00004 	mov	r0, r4
   14770:	e28d1003 	add	r1, sp, #3	; 0x3
   14774:	e3a02001 	mov	r2, #1	; 0x1
   14778:	e593c000 	ldr	ip, [r3]
   1477c:	e1a0e00f 	mov	lr, pc
   14780:	e12fff1c 	bx	ip
   14784:	e3500000 	cmp	r0, #0	; 0x0
   14788:	0a000014 	beq	147e0 <fat16_create_file+0x1c0>
   1478c:	e5dd3003 	ldrb	r3, [sp, #3]
   14790:	e3530000 	cmp	r3, #0	; 0x0
   14794:	135300e5 	cmpne	r3, #229	; 0xe5
   14798:	13a03000 	movne	r3, #0	; 0x0
   1479c:	03a03001 	moveq	r3, #1	; 0x1
   147a0:	12846020 	addne	r6, r4, #32	; 0x20
   147a4:	11a09003 	movne	r9, r3
   147a8:	11a04006 	movne	r4, r6
   147ac:	1affffcf 	bne	146f0 <fat16_create_file+0xd0>
   147b0:	e2893001 	add	r3, r9, #1	; 0x1
   147b4:	e20390ff 	and	r9, r3, #255	; 0xff
   147b8:	e159000b 	cmp	r9, fp
   147bc:	32844020 	addcc	r4, r4, #32	; 0x20
   147c0:	3affffca 	bcc	146f0 <fat16_create_file+0xd0>
   147c4:	e5886028 	str	r6, [r8, #40]
   147c8:	e1a00005 	mov	r0, r5
   147cc:	e1a01008 	mov	r1, r8
   147d0:	ebfffcb4 	bl	13aa8 <fat16_write_dir_entry>
   147d4:	e2500000 	subs	r0, r0, #0	; 0x0
   147d8:	13a00001 	movne	r0, #1	; 0x1
   147dc:	ea000000 	b	147e4 <fat16_create_file+0x1c4>
   147e0:	e3a00000 	mov	r0, #0	; 0x0
   147e4:	e28dd004 	add	sp, sp, #4	; 0x4
   147e8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ec:	e12fff1e 	bx	lr

000147f0 <partition_close>:
   147f0:	e2503000 	subs	r3, r0, #0	; 0x0
   147f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   147f8:	0a000001 	beq	14804 <partition_close+0x14>
   147fc:	eb000b02 	bl	1740c <free>
   14800:	e3a03001 	mov	r3, #1	; 0x1
   14804:	e1a00003 	mov	r0, r3
   14808:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1480c:	e12fff1e 	bx	lr

00014810 <partition_open>:
   14810:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14814:	e3510000 	cmp	r1, #0	; 0x0
   14818:	13500000 	cmpne	r0, #0	; 0x0
   1481c:	e24dd010 	sub	sp, sp, #16	; 0x10
   14820:	e1a06000 	mov	r6, r0
   14824:	e1a07001 	mov	r7, r1
   14828:	13a04000 	movne	r4, #0	; 0x0
   1482c:	03a04001 	moveq	r4, #1	; 0x1
   14830:	e1a08002 	mov	r8, r2
   14834:	e20330ff 	and	r3, r3, #255	; 0xff
   14838:	0a000033 	beq	1490c <partition_open+0xfc>
   1483c:	e1a03c03 	lsl	r3, r3, #24
   14840:	e1a05c43 	asr	r5, r3, #24
   14844:	e3550003 	cmp	r5, #3	; 0x3
   14848:	ca00002f 	bgt	1490c <partition_open+0xfc>
   1484c:	e3550000 	cmp	r5, #0	; 0x0
   14850:	ba00000b 	blt	14884 <partition_open+0x74>
   14854:	e1a00205 	lsl	r0, r5, #4
   14858:	e2800f6f 	add	r0, r0, #444	; 0x1bc
   1485c:	e2800002 	add	r0, r0, #2	; 0x2
   14860:	e1a0100d 	mov	r1, sp
   14864:	e3a02010 	mov	r2, #16	; 0x10
   14868:	e1a0e00f 	mov	lr, pc
   1486c:	e12fff16 	bx	r6
   14870:	e3500000 	cmp	r0, #0	; 0x0
   14874:	0a000024 	beq	1490c <partition_open+0xfc>
   14878:	e5dd3004 	ldrb	r3, [sp, #4]
   1487c:	e3530000 	cmp	r3, #0	; 0x0
   14880:	0a000021 	beq	1490c <partition_open+0xfc>
   14884:	e3a00018 	mov	r0, #24	; 0x18
   14888:	eb000ae4 	bl	17420 <malloc>
   1488c:	e2503000 	subs	r3, r0, #0	; 0x0
   14890:	0a00001d 	beq	1490c <partition_open+0xfc>
   14894:	e1a01004 	mov	r1, r4
   14898:	e3a02018 	mov	r2, #24	; 0x18
   1489c:	e1a04003 	mov	r4, r3
   148a0:	eb000cef 	bl	17c64 <memset>
   148a4:	e3550000 	cmp	r5, #0	; 0x0
   148a8:	b3e03000 	mvnlt	r3, #0	; 0x0
   148ac:	e88401c0 	stm	r4, {r6, r7, r8}
   148b0:	b5c4300c 	strblt	r3, [r4, #12]
   148b4:	ba000015 	blt	14910 <partition_open+0x100>
   148b8:	e5dd3004 	ldrb	r3, [sp, #4]
   148bc:	e5c4300c 	strb	r3, [r4, #12]
   148c0:	e5dd300a 	ldrb	r3, [sp, #10]
   148c4:	e5dd1009 	ldrb	r1, [sp, #9]
   148c8:	e5dd000b 	ldrb	r0, [sp, #11]
   148cc:	e5dd2008 	ldrb	r2, [sp, #8]
   148d0:	e1a03803 	lsl	r3, r3, #16
   148d4:	e1833c00 	orr	r3, r3, r0, lsl #24
   148d8:	e1822401 	orr	r2, r2, r1, lsl #8
   148dc:	e1822003 	orr	r2, r2, r3
   148e0:	e5842010 	str	r2, [r4, #16]
   148e4:	e5dd300e 	ldrb	r3, [sp, #14]
   148e8:	e5dd200c 	ldrb	r2, [sp, #12]
   148ec:	e5dd100d 	ldrb	r1, [sp, #13]
   148f0:	e5dd000f 	ldrb	r0, [sp, #15]
   148f4:	e1a03803 	lsl	r3, r3, #16
   148f8:	e1822401 	orr	r2, r2, r1, lsl #8
   148fc:	e1833c00 	orr	r3, r3, r0, lsl #24
   14900:	e1822003 	orr	r2, r2, r3
   14904:	e5842014 	str	r2, [r4, #20]
   14908:	ea000000 	b	14910 <partition_open+0x100>
   1490c:	e3a04000 	mov	r4, #0	; 0x0
   14910:	e1a00004 	mov	r0, r4
   14914:	e28dd010 	add	sp, sp, #16	; 0x10
   14918:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1491c:	e12fff1e 	bx	lr

00014920 <get_adc_1>:
   14920:	e59f2040 	ldr	r2, [pc, #64]	; 14968 <get_adc_1+0x48>
   14924:	e3800602 	orr	r0, r0, #2097152	; 0x200000
   14928:	e3a03000 	mov	r3, #0	; 0x0
   1492c:	e3800c06 	orr	r0, r0, #1536	; 0x600
   14930:	e5823000 	str	r3, [r2]
   14934:	e5823004 	str	r3, [r2, #4]
   14938:	e5820000 	str	r0, [r2]
   1493c:	e5923000 	ldr	r3, [r2]
   14940:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
   14944:	e5823000 	str	r3, [r2]
   14948:	e59f3018 	ldr	r3, [pc, #24]	; 14968 <get_adc_1+0x48>
   1494c:	e5930004 	ldr	r0, [r3, #4]
   14950:	e3500000 	cmp	r0, #0	; 0x0
   14954:	aafffffb 	bge	14948 <get_adc_1+0x28>
   14958:	e1a00340 	asr	r0, r0, #6
   1495c:	e1a00b00 	lsl	r0, r0, #22
   14960:	e1a00b20 	lsr	r0, r0, #22
   14964:	e12fff1e 	bx	lr
   14968:	e0060000 	.word	0xe0060000

0001496c <MMA_get_z>:
   1496c:	e3a00020 	mov	r0, #32	; 0x20
   14970:	eaffffea 	b	14920 <get_adc_1>

00014974 <MMA_get_y>:
   14974:	e3a00010 	mov	r0, #16	; 0x10
   14978:	eaffffe8 	b	14920 <get_adc_1>

0001497c <MMA_get_x>:
   1497c:	e3a00008 	mov	r0, #8	; 0x8
   14980:	eaffffe6 	b	14920 <get_adc_1>

00014984 <MMA_change_mode>:
   14984:	e59f205c 	ldr	r2, [pc, #92]	; 149e8 <MMA_change_mode+0x64>
   14988:	e5923008 	ldr	r3, [r2, #8]
   1498c:	e20000ff 	and	r0, r0, #255	; 0xff
   14990:	e3833b03 	orr	r3, r3, #3072	; 0xc00
   14994:	e3500031 	cmp	r0, #49	; 0x31
   14998:	e5823008 	str	r3, [r2, #8]
   1499c:	03a03b03 	moveq	r3, #3072	; 0xc00
   149a0:	0a000004 	beq	149b8 <MMA_change_mode+0x34>
   149a4:	e3500032 	cmp	r0, #50	; 0x32
   149a8:	1a000004 	bne	149c0 <MMA_change_mode+0x3c>
   149ac:	e3a03b02 	mov	r3, #2048	; 0x800
   149b0:	e5823004 	str	r3, [r2, #4]
   149b4:	e2433b01 	sub	r3, r3, #1024	; 0x400
   149b8:	e582300c 	str	r3, [r2, #12]
   149bc:	e12fff1e 	bx	lr
   149c0:	e3500033 	cmp	r0, #51	; 0x33
   149c4:	03a03b02 	moveq	r3, #2048	; 0x800
   149c8:	0582300c 	streq	r3, [r2, #12]
   149cc:	02433b01 	subeq	r3, r3, #1024	; 0x400
   149d0:	0a000002 	beq	149e0 <MMA_change_mode+0x5c>
   149d4:	e3500034 	cmp	r0, #52	; 0x34
   149d8:	112fff1e 	bxne	lr
   149dc:	e3a03b03 	mov	r3, #3072	; 0xc00
   149e0:	e5823004 	str	r3, [r2, #4]
   149e4:	e12fff1e 	bx	lr
   149e8:	e0028000 	.word	0xe0028000

000149ec <LCDCommand>:
   149ec:	e59f2080 	ldr	r2, [pc, #128]	; 14a74 <LCDCommand+0x88>
   149f0:	e5923008 	ldr	r3, [r2, #8]
   149f4:	e3833703 	orr	r3, r3, #786432	; 0xc0000
   149f8:	e3833050 	orr	r3, r3, #80	; 0x50
   149fc:	e5823008 	str	r3, [r2, #8]
   14a00:	e3a03702 	mov	r3, #524288	; 0x80000
   14a04:	e582300c 	str	r3, [r2, #12]
   14a08:	e3a01010 	mov	r1, #16	; 0x10
   14a0c:	e3a03040 	mov	r3, #64	; 0x40
   14a10:	e582300c 	str	r3, [r2, #12]
   14a14:	e582100c 	str	r1, [r2, #12]
   14a18:	e5821004 	str	r1, [r2, #4]
   14a1c:	e20000ff 	and	r0, r0, #255	; 0xff
   14a20:	e3a0c000 	mov	ip, #0	; 0x0
   14a24:	e3100080 	tst	r0, #128	; 0x80
   14a28:	159f3044 	ldrne	r3, [pc, #68]	; 14a74 <LCDCommand+0x88>
   14a2c:	059f3040 	ldreq	r3, [pc, #64]	; 14a74 <LCDCommand+0x88>
   14a30:	13a02040 	movne	r2, #64	; 0x40
   14a34:	03a02040 	moveq	r2, #64	; 0x40
   14a38:	15832004 	strne	r2, [r3, #4]
   14a3c:	0583200c 	streq	r2, [r3, #12]
   14a40:	e28c3001 	add	r3, ip, #1	; 0x1
   14a44:	e59f1028 	ldr	r1, [pc, #40]	; 14a74 <LCDCommand+0x88>
   14a48:	e203c0ff 	and	ip, r3, #255	; 0xff
   14a4c:	e1a02080 	lsl	r2, r0, #1
   14a50:	e3a03010 	mov	r3, #16	; 0x10
   14a54:	e35c0008 	cmp	ip, #8	; 0x8
   14a58:	e581300c 	str	r3, [r1, #12]
   14a5c:	e20200ff 	and	r0, r2, #255	; 0xff
   14a60:	e5813004 	str	r3, [r1, #4]
   14a64:	1affffee 	bne	14a24 <LCDCommand+0x38>
   14a68:	e3a03702 	mov	r3, #524288	; 0x80000
   14a6c:	e5813004 	str	r3, [r1, #4]
   14a70:	e12fff1e 	bx	lr
   14a74:	e0028000 	.word	0xe0028000

00014a78 <LCDData>:
   14a78:	e59f208c 	ldr	r2, [pc, #140]	; 14b0c <LCDData+0x94>
   14a7c:	e5923008 	ldr	r3, [r2, #8]
   14a80:	e3833703 	orr	r3, r3, #786432	; 0xc0000
   14a84:	e3833050 	orr	r3, r3, #80	; 0x50
   14a88:	e5823008 	str	r3, [r2, #8]
   14a8c:	e3a01010 	mov	r1, #16	; 0x10
   14a90:	e3a03702 	mov	r3, #524288	; 0x80000
   14a94:	e582100c 	str	r1, [r2, #12]
   14a98:	e20000ff 	and	r0, r0, #255	; 0xff
   14a9c:	e582300c 	str	r3, [r2, #12]
   14aa0:	e1a00000 	nop			(mov r0,r0)
   14aa4:	e3a03040 	mov	r3, #64	; 0x40
   14aa8:	e5823004 	str	r3, [r2, #4]
   14aac:	e582100c 	str	r1, [r2, #12]
   14ab0:	e1a00000 	nop			(mov r0,r0)
   14ab4:	e5821004 	str	r1, [r2, #4]
   14ab8:	e3a0c000 	mov	ip, #0	; 0x0
   14abc:	e3100080 	tst	r0, #128	; 0x80
   14ac0:	159f3044 	ldrne	r3, [pc, #68]	; 14b0c <LCDData+0x94>
   14ac4:	059f3040 	ldreq	r3, [pc, #64]	; 14b0c <LCDData+0x94>
   14ac8:	13a02040 	movne	r2, #64	; 0x40
   14acc:	03a02040 	moveq	r2, #64	; 0x40
   14ad0:	15832004 	strne	r2, [r3, #4]
   14ad4:	0583200c 	streq	r2, [r3, #12]
   14ad8:	e28c3001 	add	r3, ip, #1	; 0x1
   14adc:	e59f1028 	ldr	r1, [pc, #40]	; 14b0c <LCDData+0x94>
   14ae0:	e203c0ff 	and	ip, r3, #255	; 0xff
   14ae4:	e1a02080 	lsl	r2, r0, #1
   14ae8:	e3a03010 	mov	r3, #16	; 0x10
   14aec:	e35c0008 	cmp	ip, #8	; 0x8
   14af0:	e581300c 	str	r3, [r1, #12]
   14af4:	e20200ff 	and	r0, r2, #255	; 0xff
   14af8:	e5813004 	str	r3, [r1, #4]
   14afc:	1affffee 	bne	14abc <LCDData+0x44>
   14b00:	e3a03702 	mov	r3, #524288	; 0x80000
   14b04:	e5813004 	str	r3, [r1, #4]
   14b08:	e12fff1e 	bx	lr
   14b0c:	e0028000 	.word	0xe0028000

00014b10 <LCDClear>:
   14b10:	e92d4030 	push	{r4, r5, lr}
   14b14:	e1a03000 	mov	r3, r0
   14b18:	e3a0002b 	mov	r0, #43	; 0x2b
   14b1c:	e20350ff 	and	r5, r3, #255	; 0xff
   14b20:	ebffffb1 	bl	149ec <LCDCommand>
   14b24:	e3a00000 	mov	r0, #0	; 0x0
   14b28:	ebffffd2 	bl	14a78 <LCDData>
   14b2c:	e3a00083 	mov	r0, #131	; 0x83
   14b30:	ebffffd0 	bl	14a78 <LCDData>
   14b34:	e3a0002a 	mov	r0, #42	; 0x2a
   14b38:	ebffffab 	bl	149ec <LCDCommand>
   14b3c:	e3a00000 	mov	r0, #0	; 0x0
   14b40:	ebffffcc 	bl	14a78 <LCDData>
   14b44:	e3a00083 	mov	r0, #131	; 0x83
   14b48:	ebffffca 	bl	14a78 <LCDData>
   14b4c:	e3a0002c 	mov	r0, #44	; 0x2c
   14b50:	ebffffa5 	bl	149ec <LCDCommand>
   14b54:	e3a04001 	mov	r4, #1	; 0x1
   14b58:	e1a00005 	mov	r0, r5
   14b5c:	ebffffc5 	bl	14a78 <LCDData>
   14b60:	e59f3024 	ldr	r3, [pc, #36]	; 14b8c <LCDClear+0x7c>
   14b64:	e2844001 	add	r4, r4, #1	; 0x1
   14b68:	e1540003 	cmp	r4, r3
   14b6c:	1afffff9 	bne	14b58 <LCDClear+0x48>
   14b70:	e59f2018 	ldr	r2, [pc, #24]	; 14b90 <LCDClear+0x80>
   14b74:	e3a03000 	mov	r3, #0	; 0x0
   14b78:	e5c23000 	strb	r3, [r2]
   14b7c:	e59f2010 	ldr	r2, [pc, #16]	; 14b94 <LCDClear+0x84>
   14b80:	e5c23000 	strb	r3, [r2]
   14b84:	e8bd4030 	pop	{r4, r5, lr}
   14b88:	e12fff1e 	bx	lr
   14b8c:	00004410 	.word	0x00004410
   14b90:	40000f2a 	.word	0x40000f2a
   14b94:	40000f29 	.word	0x40000f29

00014b98 <LCDSetPixel>:
   14b98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14b9c:	e3a03020 	mov	r3, #32	; 0x20
   14ba0:	e3e07000 	mvn	r7, #0	; 0x0
   14ba4:	e20140ff 	and	r4, r1, #255	; 0xff
   14ba8:	e5178fef 	ldr	r8, [r7, #-4079]
   14bac:	e1a06000 	mov	r6, r0
   14bb0:	e5073feb 	str	r3, [r7, #-4075]
   14bb4:	e3a0002b 	mov	r0, #43	; 0x2b
   14bb8:	e20250ff 	and	r5, r2, #255	; 0xff
   14bbc:	ebffff8a 	bl	149ec <LCDCommand>
   14bc0:	e1a00004 	mov	r0, r4
   14bc4:	ebffffab 	bl	14a78 <LCDData>
   14bc8:	e3a00084 	mov	r0, #132	; 0x84
   14bcc:	ebffffa9 	bl	14a78 <LCDData>
   14bd0:	e3a0002a 	mov	r0, #42	; 0x2a
   14bd4:	ebffff84 	bl	149ec <LCDCommand>
   14bd8:	e1a00005 	mov	r0, r5
   14bdc:	ebffffa5 	bl	14a78 <LCDData>
   14be0:	e3a00082 	mov	r0, #130	; 0x82
   14be4:	ebffffa3 	bl	14a78 <LCDData>
   14be8:	e20660ff 	and	r6, r6, #255	; 0xff
   14bec:	e3a0002c 	mov	r0, #44	; 0x2c
   14bf0:	ebffff7d 	bl	149ec <LCDCommand>
   14bf4:	e1a00006 	mov	r0, r6
   14bf8:	ebffff9e 	bl	14a78 <LCDData>
   14bfc:	e5078fef 	str	r8, [r7, #-4079]
   14c00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   14c04:	e12fff1e 	bx	lr

00014c08 <LCDPrintLogo>:
   14c08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14c0c:	e59f7060 	ldr	r7, [pc, #96]	; 14c74 <LCDPrintLogo+0x6c>
   14c10:	e3a05004 	mov	r5, #4	; 0x4
   14c14:	e3a08019 	mov	r8, #25	; 0x19
   14c18:	e5d74000 	ldrb	r4, [r7]
   14c1c:	e3a06000 	mov	r6, #0	; 0x0
   14c20:	e3140080 	tst	r4, #128	; 0x80
   14c24:	e20520ff 	and	r2, r5, #255	; 0xff
   14c28:	e2866001 	add	r6, r6, #1	; 0x1
   14c2c:	e20810ff 	and	r1, r8, #255	; 0xff
   14c30:	e2855001 	add	r5, r5, #1	; 0x1
   14c34:	159f303c 	ldrne	r3, [pc, #60]	; 14c78 <LCDPrintLogo+0x70>
   14c38:	15d30000 	ldrbne	r0, [r3]
   14c3c:	1bffffd5 	blne	14b98 <LCDSetPixel>
   14c40:	e3550084 	cmp	r5, #132	; 0x84
   14c44:	e1a03084 	lsl	r3, r4, #1
   14c48:	02888001 	addeq	r8, r8, #1	; 0x1
   14c4c:	03a05004 	moveq	r5, #4	; 0x4
   14c50:	e3560008 	cmp	r6, #8	; 0x8
   14c54:	e20340ff 	and	r4, r3, #255	; 0xff
   14c58:	1afffff0 	bne	14c20 <LCDPrintLogo+0x18>
   14c5c:	e59f3018 	ldr	r3, [pc, #24]	; 14c7c <LCDPrintLogo+0x74>
   14c60:	e2877001 	add	r7, r7, #1	; 0x1
   14c64:	e1570003 	cmp	r7, r3
   14c68:	1affffea 	bne	14c18 <LCDPrintLogo+0x10>
   14c6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   14c70:	e12fff1e 	bx	lr
   14c74:	00018c3e 	.word	0x00018c3e
   14c78:	40000008 	.word	0x40000008
   14c7c:	0001909e 	.word	0x0001909e

00014c80 <LCDPrintChar>:
   14c80:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c84:	e20000ff 	and	r0, r0, #255	; 0xff
   14c88:	e350000a 	cmp	r0, #10	; 0xa
   14c8c:	e1a06002 	mov	r6, r2
   14c90:	e1a05003 	mov	r5, r3
   14c94:	e201b0ff 	and	fp, r1, #255	; 0xff
   14c98:	e5dda024 	ldrb	sl, [sp, #36]
   14c9c:	0a000055 	beq	14df8 <LCDPrintChar+0x178>
   14ca0:	e350000d 	cmp	r0, #13	; 0xd
   14ca4:	0a000053 	beq	14df8 <LCDPrintChar+0x178>
   14ca8:	e3a03005 	mov	r3, #5	; 0x5
   14cac:	e0030390 	mul	r3, r0, r3
   14cb0:	e24330a0 	sub	r3, r3, #160	; 0xa0
   14cb4:	e1a03803 	lsl	r3, r3, #16
   14cb8:	e1a08823 	lsr	r8, r3, #16
   14cbc:	e1a07008 	mov	r7, r8
   14cc0:	ea000029 	b	14d6c <LCDPrintChar+0xec>
   14cc4:	e59f3138 	ldr	r3, [pc, #312]	; 14e04 <LCDPrintChar+0x184>
   14cc8:	e7d34002 	ldrb	r4, [r3, r2]
   14ccc:	e3a09000 	mov	r9, #0	; 0x0
   14cd0:	e35a0000 	cmp	sl, #0	; 0x0
   14cd4:	e20930ff 	and	r3, r9, #255	; 0xff
   14cd8:	1a00000e 	bne	14d18 <LCDPrintChar+0x98>
   14cdc:	e3140080 	tst	r4, #128	; 0x80
   14ce0:	e1a0000b 	mov	r0, fp
   14ce4:	0a000008 	beq	14d0c <LCDPrintChar+0x8c>
   14ce8:	e5d62000 	ldrb	r2, [r6]
   14cec:	e5d51000 	ldrb	r1, [r5]
   14cf0:	e0872002 	add	r2, r7, r2
   14cf4:	e0682002 	rsb	r2, r8, r2
   14cf8:	e0831001 	add	r1, r3, r1
   14cfc:	e2822002 	add	r2, r2, #2	; 0x2
   14d00:	e20110ff 	and	r1, r1, #255	; 0xff
   14d04:	e20220ff 	and	r2, r2, #255	; 0xff
   14d08:	ebffffa2 	bl	14b98 <LCDSetPixel>
   14d0c:	e1a03084 	lsl	r3, r4, #1
   14d10:	e20340ff 	and	r4, r3, #255	; 0xff
   14d14:	ea00000e 	b	14d54 <LCDPrintChar+0xd4>
   14d18:	e35a0001 	cmp	sl, #1	; 0x1
   14d1c:	1a00000c 	bne	14d54 <LCDPrintChar+0xd4>
   14d20:	e3140001 	tst	r4, #1	; 0x1
   14d24:	e1a0000b 	mov	r0, fp
   14d28:	e1a040a4 	lsr	r4, r4, #1
   14d2c:	0a000008 	beq	14d54 <LCDPrintChar+0xd4>
   14d30:	e5d51000 	ldrb	r1, [r5]
   14d34:	e5d62000 	ldrb	r2, [r6]
   14d38:	e0871001 	add	r1, r7, r1
   14d3c:	e0681001 	rsb	r1, r8, r1
   14d40:	e0832002 	add	r2, r3, r2
   14d44:	e2811002 	add	r1, r1, #2	; 0x2
   14d48:	e20110ff 	and	r1, r1, #255	; 0xff
   14d4c:	e20220ff 	and	r2, r2, #255	; 0xff
   14d50:	ebffff90 	bl	14b98 <LCDSetPixel>
   14d54:	e2899001 	add	r9, r9, #1	; 0x1
   14d58:	e3590008 	cmp	r9, #8	; 0x8
   14d5c:	1affffdb 	bne	14cd0 <LCDPrintChar+0x50>
   14d60:	e2873001 	add	r3, r7, #1	; 0x1
   14d64:	e1a03803 	lsl	r3, r3, #16
   14d68:	e1a07823 	lsr	r7, r3, #16
   14d6c:	e1a03808 	lsl	r3, r8, #16
   14d70:	e1a03843 	asr	r3, r3, #16
   14d74:	e1a02807 	lsl	r2, r7, #16
   14d78:	e1a02842 	asr	r2, r2, #16
   14d7c:	e2833005 	add	r3, r3, #5	; 0x5
   14d80:	e1520003 	cmp	r2, r3
   14d84:	baffffce 	blt	14cc4 <LCDPrintChar+0x44>
   14d88:	e35a0000 	cmp	sl, #0	; 0x0
   14d8c:	1a000007 	bne	14db0 <LCDPrintChar+0x130>
   14d90:	e5d63000 	ldrb	r3, [r6]
   14d94:	e3530078 	cmp	r3, #120	; 0x78
   14d98:	c5c6a000 	strbgt	sl, [r6]
   14d9c:	c5d53000 	ldrbgt	r3, [r5]
   14da0:	d2833006 	addle	r3, r3, #6	; 0x6
   14da4:	c2833008 	addgt	r3, r3, #8	; 0x8
   14da8:	da00000a 	ble	14dd8 <LCDPrintChar+0x158>
   14dac:	ea00000b 	b	14de0 <LCDPrintChar+0x160>
   14db0:	e35a0001 	cmp	sl, #1	; 0x1
   14db4:	1a00000a 	bne	14de4 <LCDPrintChar+0x164>
   14db8:	e5d53000 	ldrb	r3, [r5]
   14dbc:	e3530078 	cmp	r3, #120	; 0x78
   14dc0:	d2833006 	addle	r3, r3, #6	; 0x6
   14dc4:	da000005 	ble	14de0 <LCDPrintChar+0x160>
   14dc8:	e3a03000 	mov	r3, #0	; 0x0
   14dcc:	e5c53000 	strb	r3, [r5]
   14dd0:	e5d63000 	ldrb	r3, [r6]
   14dd4:	e2833008 	add	r3, r3, #8	; 0x8
   14dd8:	e5c63000 	strb	r3, [r6]
   14ddc:	ea000000 	b	14de4 <LCDPrintChar+0x164>
   14de0:	e5c53000 	strb	r3, [r5]
   14de4:	e5d53000 	ldrb	r3, [r5]
   14de8:	e353007c 	cmp	r3, #124	; 0x7c
   14dec:	d3a00000 	movle	r0, #0	; 0x0
   14df0:	c3a00001 	movgt	r0, #1	; 0x1
   14df4:	ea000000 	b	14dfc <LCDPrintChar+0x17c>
   14df8:	e3a00000 	mov	r0, #0	; 0x0
   14dfc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e00:	e12fff1e 	bx	lr
   14e04:	00018a63 	.word	0x00018a63

00014e08 <LCDPrintString>:
   14e08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e0c:	e24dd018 	sub	sp, sp, #24	; 0x18
   14e10:	e5dd503c 	ldrb	r5, [sp, #60]
   14e14:	e3550000 	cmp	r5, #0	; 0x0
   14e18:	e1a09000 	mov	r9, r0
   14e1c:	e1a07001 	mov	r7, r1
   14e20:	e202a0ff 	and	sl, r2, #255	; 0xff
   14e24:	e20300ff 	and	r0, r3, #255	; 0xff
   14e28:	e5dd1038 	ldrb	r1, [sp, #56]
   14e2c:	1a000005 	bne	14e48 <LCDPrintString+0x40>
   14e30:	e3a03006 	mov	r3, #6	; 0x6
   14e34:	e0020391 	mul	r2, r1, r3
   14e38:	e59f3304 	ldr	r3, [pc, #772]	; 15144 <LCDPrintString+0x33c>
   14e3c:	e1a01180 	lsl	r1, r0, #3
   14e40:	e5c32000 	strb	r2, [r3]
   14e44:	ea000008 	b	14e6c <LCDPrintString+0x64>
   14e48:	e3550001 	cmp	r5, #1	; 0x1
   14e4c:	1a000008 	bne	14e74 <LCDPrintString+0x6c>
   14e50:	e3a03006 	mov	r3, #6	; 0x6
   14e54:	e0010193 	mul	r1, r3, r1
   14e58:	e260300f 	rsb	r3, r0, #15	; 0xf
   14e5c:	e1a03183 	lsl	r3, r3, #3
   14e60:	e59f22dc 	ldr	r2, [pc, #732]	; 15144 <LCDPrintString+0x33c>
   14e64:	e2833003 	add	r3, r3, #3	; 0x3
   14e68:	e5c23000 	strb	r3, [r2]
   14e6c:	e59f32d4 	ldr	r3, [pc, #724]	; 15148 <LCDPrintString+0x340>
   14e70:	e5c31000 	strb	r1, [r3]
   14e74:	e3a08000 	mov	r8, #0	; 0x0
   14e78:	e1a03808 	lsl	r3, r8, #16
   14e7c:	e1a03843 	asr	r3, r3, #16
   14e80:	e7d90003 	ldrb	r0, [r9, r3]
   14e84:	e3500000 	cmp	r0, #0	; 0x0
   14e88:	0a0000aa 	beq	15138 <LCDPrintString+0x330>
   14e8c:	e3500025 	cmp	r0, #37	; 0x25
   14e90:	1a000085 	bne	150ac <LCDPrintString+0x2a4>
   14e94:	e2883001 	add	r3, r8, #1	; 0x1
   14e98:	e1a03803 	lsl	r3, r3, #16
   14e9c:	e7d92843 	ldrb	r2, [r9, r3, asr #16]
   14ea0:	e3520000 	cmp	r2, #0	; 0x0
   14ea4:	e1a08823 	lsr	r8, r3, #16
   14ea8:	0a0000a2 	beq	15138 <LCDPrintString+0x330>
   14eac:	e352005c 	cmp	r2, #92	; 0x5c
   14eb0:	1a000009 	bne	14edc <LCDPrintString+0xd4>
   14eb4:	e288c001 	add	ip, r8, #1	; 0x1
   14eb8:	e59f328c 	ldr	r3, [pc, #652]	; 1514c <LCDPrintString+0x344>
   14ebc:	e1a0c80c 	lsl	ip, ip, #16
   14ec0:	e5d31000 	ldrb	r1, [r3]
   14ec4:	e7d9084c 	ldrb	r0, [r9, ip, asr #16]
   14ec8:	e59f2274 	ldr	r2, [pc, #628]	; 15144 <LCDPrintString+0x33c>
   14ecc:	e59f3274 	ldr	r3, [pc, #628]	; 15148 <LCDPrintString+0x340>
   14ed0:	e1a0882c 	lsr	r8, ip, #16
   14ed4:	e58d5000 	str	r5, [sp]
   14ed8:	ea000090 	b	15120 <LCDPrintString+0x318>
   14edc:	e3520062 	cmp	r2, #98	; 0x62
   14ee0:	1a000019 	bne	14f4c <LCDPrintString+0x144>
   14ee4:	e3a04001 	mov	r4, #1	; 0x1
   14ee8:	e59f125c 	ldr	r1, [pc, #604]	; 1514c <LCDPrintString+0x344>
   14eec:	e3570000 	cmp	r7, #0	; 0x0
   14ef0:	e59f224c 	ldr	r2, [pc, #588]	; 15144 <LCDPrintString+0x33c>
   14ef4:	e59f324c 	ldr	r3, [pc, #588]	; 15148 <LCDPrintString+0x340>
   14ef8:	b5d11000 	ldrblt	r1, [r1]
   14efc:	a5d11000 	ldrbge	r1, [r1]
   14f00:	a59f223c 	ldrge	r2, [pc, #572]	; 15144 <LCDPrintString+0x33c>
   14f04:	a59f323c 	ldrge	r3, [pc, #572]	; 15148 <LCDPrintString+0x340>
   14f08:	e3a00031 	mov	r0, #49	; 0x31
   14f0c:	a3a00030 	movge	r0, #48	; 0x30
   14f10:	e58d5000 	str	r5, [sp]
   14f14:	ebffff59 	bl	14c80 <LCDPrintChar>
   14f18:	e3140003 	tst	r4, #3	; 0x3
   14f1c:	e59f2220 	ldr	r2, [pc, #544]	; 15144 <LCDPrintString+0x33c>
   14f20:	e59f3220 	ldr	r3, [pc, #544]	; 15148 <LCDPrintString+0x340>
   14f24:	e3a00020 	mov	r0, #32	; 0x20
   14f28:	e1a07087 	lsl	r7, r7, #1
   14f2c:	e2844001 	add	r4, r4, #1	; 0x1
   14f30:	059f1214 	ldreq	r1, [pc, #532]	; 1514c <LCDPrintString+0x344>
   14f34:	05d11000 	ldrbeq	r1, [r1]
   14f38:	058d5000 	streq	r5, [sp]
   14f3c:	0bffff4f 	bleq	14c80 <LCDPrintChar>
   14f40:	e3540021 	cmp	r4, #33	; 0x21
   14f44:	0a000076 	beq	15124 <LCDPrintString+0x31c>
   14f48:	eaffffe6 	b	14ee8 <LCDPrintString+0xe0>
   14f4c:	e3520064 	cmp	r2, #100	; 0x64
   14f50:	1a000032 	bne	15020 <LCDPrintString+0x218>
   14f54:	e3570000 	cmp	r7, #0	; 0x0
   14f58:	aa000006 	bge	14f78 <LCDPrintString+0x170>
   14f5c:	e3a0002d 	mov	r0, #45	; 0x2d
   14f60:	e1a0100a 	mov	r1, sl
   14f64:	e59f21d8 	ldr	r2, [pc, #472]	; 15144 <LCDPrintString+0x33c>
   14f68:	e59f31d8 	ldr	r3, [pc, #472]	; 15148 <LCDPrintString+0x340>
   14f6c:	e58d5000 	str	r5, [sp]
   14f70:	ebffff42 	bl	14c80 <LCDPrintChar>
   14f74:	e2677000 	rsb	r7, r7, #0	; 0x0
   14f78:	e3570000 	cmp	r7, #0	; 0x0
   14f7c:	13a06009 	movne	r6, #9	; 0x9
   14f80:	128d4018 	addne	r4, sp, #24	; 0x18
   14f84:	1a00000e 	bne	14fc4 <LCDPrintString+0x1bc>
   14f88:	e59f21b4 	ldr	r2, [pc, #436]	; 15144 <LCDPrintString+0x33c>
   14f8c:	e59f31b4 	ldr	r3, [pc, #436]	; 15148 <LCDPrintString+0x340>
   14f90:	e1a0100a 	mov	r1, sl
   14f94:	e3a00030 	mov	r0, #48	; 0x30
   14f98:	ea00005f 	b	1511c <LCDPrintString+0x314>
   14f9c:	eb000e5c 	bl	18914 <__modsi3>
   14fa0:	e2803030 	add	r3, r0, #48	; 0x30
   14fa4:	e1c430b2 	strh	r3, [r4, #2]
   14fa8:	e1a00007 	mov	r0, r7
   14fac:	e3a0100a 	mov	r1, #10	; 0xa
   14fb0:	eb000dd4 	bl	18708 <__aeabi_idiv>
   14fb4:	e2463001 	sub	r3, r6, #1	; 0x1
   14fb8:	e1a03803 	lsl	r3, r3, #16
   14fbc:	e1a07000 	mov	r7, r0
   14fc0:	e1a06823 	lsr	r6, r3, #16
   14fc4:	e3570000 	cmp	r7, #0	; 0x0
   14fc8:	e1a00007 	mov	r0, r7
   14fcc:	e3a0100a 	mov	r1, #10	; 0xa
   14fd0:	e2444002 	sub	r4, r4, #2	; 0x2
   14fd4:	cafffff0 	bgt	14f9c <LCDPrintString+0x194>
   14fd8:	e2863001 	add	r3, r6, #1	; 0x1
   14fdc:	ea000003 	b	14ff0 <LCDPrintString+0x1e8>
   14fe0:	e55c0012 	ldrb	r0, [ip, #-18]
   14fe4:	e58d5000 	str	r5, [sp]
   14fe8:	ebffff24 	bl	14c80 <LCDPrintChar>
   14fec:	e2843001 	add	r3, r4, #1	; 0x1
   14ff0:	e1a03803 	lsl	r3, r3, #16
   14ff4:	e1a04823 	lsr	r4, r3, #16
   14ff8:	e1a00804 	lsl	r0, r4, #16
   14ffc:	e1a00840 	asr	r0, r0, #16
   15000:	e28de018 	add	lr, sp, #24	; 0x18
   15004:	e3500009 	cmp	r0, #9	; 0x9
   15008:	e1a0100a 	mov	r1, sl
   1500c:	e59f2130 	ldr	r2, [pc, #304]	; 15144 <LCDPrintString+0x33c>
   15010:	e59f3130 	ldr	r3, [pc, #304]	; 15148 <LCDPrintString+0x340>
   15014:	e08ec080 	add	ip, lr, r0, lsl #1
   15018:	dafffff0 	ble	14fe0 <LCDPrintString+0x1d8>
   1501c:	ea000040 	b	15124 <LCDPrintString+0x31c>
   15020:	e3520068 	cmp	r2, #104	; 0x68
   15024:	1a000014 	bne	1507c <LCDPrintString+0x274>
   15028:	e59f411c 	ldr	r4, [pc, #284]	; 1514c <LCDPrintString+0x344>
   1502c:	e59f2110 	ldr	r2, [pc, #272]	; 15144 <LCDPrintString+0x33c>
   15030:	e5d41000 	ldrb	r1, [r4]
   15034:	e59f310c 	ldr	r3, [pc, #268]	; 15148 <LCDPrintString+0x340>
   15038:	e3a00030 	mov	r0, #48	; 0x30
   1503c:	e58d5000 	str	r5, [sp]
   15040:	ebffff0e 	bl	14c80 <LCDPrintChar>
   15044:	e5d41000 	ldrb	r1, [r4]
   15048:	e59f30f8 	ldr	r3, [pc, #248]	; 15148 <LCDPrintString+0x340>
   1504c:	e3a00078 	mov	r0, #120	; 0x78
   15050:	e59f20ec 	ldr	r2, [pc, #236]	; 15144 <LCDPrintString+0x33c>
   15054:	e58d5000 	str	r5, [sp]
   15058:	ebffff08 	bl	14c80 <LCDPrintChar>
   1505c:	e3a03000 	mov	r3, #0	; 0x0
   15060:	e2833001 	add	r3, r3, #1	; 0x1
   15064:	e1a03803 	lsl	r3, r3, #16
   15068:	e3530702 	cmp	r3, #524288	; 0x80000
   1506c:	e1a07207 	lsl	r7, r7, #4
   15070:	e1a03823 	lsr	r3, r3, #16
   15074:	0a00002a 	beq	15124 <LCDPrintString+0x31c>
   15078:	eafffff8 	b	15060 <LCDPrintString+0x258>
   1507c:	e3520066 	cmp	r2, #102	; 0x66
   15080:	1a000005 	bne	1509c <LCDPrintString+0x294>
   15084:	e59f30c0 	ldr	r3, [pc, #192]	; 1514c <LCDPrintString+0x344>
   15088:	e59f20b4 	ldr	r2, [pc, #180]	; 15144 <LCDPrintString+0x33c>
   1508c:	e5d31000 	ldrb	r1, [r3]
   15090:	e59f30b0 	ldr	r3, [pc, #176]	; 15148 <LCDPrintString+0x340>
   15094:	e3a00021 	mov	r0, #33	; 0x21
   15098:	ea00001f 	b	1511c <LCDPrintString+0x314>
   1509c:	e3520075 	cmp	r2, #117	; 0x75
   150a0:	020700ff 	andeq	r0, r7, #255	; 0xff
   150a4:	0a000019 	beq	15110 <LCDPrintString+0x308>
   150a8:	ea00001d 	b	15124 <LCDPrintString+0x31c>
   150ac:	e350002f 	cmp	r0, #47	; 0x2f
   150b0:	1a000016 	bne	15110 <LCDPrintString+0x308>
   150b4:	e0893003 	add	r3, r9, r3
   150b8:	e5d33001 	ldrb	r3, [r3, #1]
   150bc:	e3530072 	cmp	r3, #114	; 0x72
   150c0:	1a000005 	bne	150dc <LCDPrintString+0x2d4>
   150c4:	e59f3080 	ldr	r3, [pc, #128]	; 1514c <LCDPrintString+0x344>
   150c8:	e59f2074 	ldr	r2, [pc, #116]	; 15144 <LCDPrintString+0x33c>
   150cc:	e5d31000 	ldrb	r1, [r3]
   150d0:	e59f3070 	ldr	r3, [pc, #112]	; 15148 <LCDPrintString+0x340>
   150d4:	e3a0000d 	mov	r0, #13	; 0xd
   150d8:	ea000006 	b	150f8 <LCDPrintString+0x2f0>
   150dc:	e353006e 	cmp	r3, #110	; 0x6e
   150e0:	1a000006 	bne	15100 <LCDPrintString+0x2f8>
   150e4:	e59f3060 	ldr	r3, [pc, #96]	; 1514c <LCDPrintString+0x344>
   150e8:	e59f2054 	ldr	r2, [pc, #84]	; 15144 <LCDPrintString+0x33c>
   150ec:	e5d31000 	ldrb	r1, [r3]
   150f0:	e59f3050 	ldr	r3, [pc, #80]	; 15148 <LCDPrintString+0x340>
   150f4:	e3a0000a 	mov	r0, #10	; 0xa
   150f8:	e58d5000 	str	r5, [sp]
   150fc:	ebfffedf 	bl	14c80 <LCDPrintChar>
   15100:	e2883001 	add	r3, r8, #1	; 0x1
   15104:	e1a03803 	lsl	r3, r3, #16
   15108:	e1a08823 	lsr	r8, r3, #16
   1510c:	ea000004 	b	15124 <LCDPrintString+0x31c>
   15110:	e59f202c 	ldr	r2, [pc, #44]	; 15144 <LCDPrintString+0x33c>
   15114:	e59f302c 	ldr	r3, [pc, #44]	; 15148 <LCDPrintString+0x340>
   15118:	e1a0100a 	mov	r1, sl
   1511c:	e58d5000 	str	r5, [sp]
   15120:	ebfffed6 	bl	14c80 <LCDPrintChar>
   15124:	e2883001 	add	r3, r8, #1	; 0x1
   15128:	e1a03803 	lsl	r3, r3, #16
   1512c:	e3530815 	cmp	r3, #1376256	; 0x150000
   15130:	e1a08823 	lsr	r8, r3, #16
   15134:	daffff4f 	ble	14e78 <LCDPrintString+0x70>
   15138:	e28dd018 	add	sp, sp, #24	; 0x18
   1513c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15140:	e12fff1e 	bx	lr
   15144:	40000f29 	.word	0x40000f29
   15148:	40000f2a 	.word	0x40000f2a
   1514c:	40000f28 	.word	0x40000f28

00015150 <LCDSetRowColor>:
   15150:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15154:	e213a0ff 	ands	sl, r3, #255	; 0xff
   15158:	03a03006 	moveq	r3, #6	; 0x6
   1515c:	e20070ff 	and	r7, r0, #255	; 0xff
   15160:	e20160ff 	and	r6, r1, #255	; 0xff
   15164:	e202b0ff 	and	fp, r2, #255	; 0xff
   15168:	00020396 	muleq	r2, r6, r3
   1516c:	01a03187 	lsleq	r3, r7, #3
   15170:	0a000006 	beq	15190 <LCDSetRowColor+0x40>
   15174:	e35a0001 	cmp	sl, #1	; 0x1
   15178:	1a000006 	bne	15198 <LCDSetRowColor+0x48>
   1517c:	e3a03006 	mov	r3, #6	; 0x6
   15180:	e0020396 	mul	r2, r6, r3
   15184:	e267300f 	rsb	r3, r7, #15	; 0xf
   15188:	e1a03183 	lsl	r3, r3, #3
   1518c:	e2833003 	add	r3, r3, #3	; 0x3
   15190:	e20370ff 	and	r7, r3, #255	; 0xff
   15194:	e20260ff 	and	r6, r2, #255	; 0xff
   15198:	e1a05006 	mov	r5, r6
   1519c:	e3a09000 	mov	r9, #0	; 0x0
   151a0:	ea000014 	b	151f8 <LCDSetRowColor+0xa8>
   151a4:	e1a04007 	mov	r4, r7
   151a8:	e3a08000 	mov	r8, #0	; 0x0
   151ac:	e35a0000 	cmp	sl, #0	; 0x0
   151b0:	e1a0000b 	mov	r0, fp
   151b4:	e1a01004 	mov	r1, r4
   151b8:	e1a02005 	mov	r2, r5
   151bc:	0a000004 	beq	151d4 <LCDSetRowColor+0x84>
   151c0:	e35a0001 	cmp	sl, #1	; 0x1
   151c4:	e1a02004 	mov	r2, r4
   151c8:	e1a0000b 	mov	r0, fp
   151cc:	e1a01005 	mov	r1, r5
   151d0:	1a000000 	bne	151d8 <LCDSetRowColor+0x88>
   151d4:	ebfffe6f 	bl	14b98 <LCDSetPixel>
   151d8:	e2888001 	add	r8, r8, #1	; 0x1
   151dc:	e2843001 	add	r3, r4, #1	; 0x1
   151e0:	e3580008 	cmp	r8, #8	; 0x8
   151e4:	e20340ff 	and	r4, r3, #255	; 0xff
   151e8:	1affffef 	bne	151ac <LCDSetRowColor+0x5c>
   151ec:	e2853001 	add	r3, r5, #1	; 0x1
   151f0:	e2899001 	add	r9, r9, #1	; 0x1
   151f4:	e20350ff 	and	r5, r3, #255	; 0xff
   151f8:	e0863009 	add	r3, r6, r9
   151fc:	e3530083 	cmp	r3, #131	; 0x83
   15200:	daffffe7 	ble	151a4 <LCDSetRowColor+0x54>
   15204:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15208:	e12fff1e 	bx	lr

0001520c <LCDContrast>:
   1520c:	e92d4010 	push	{r4, lr}
   15210:	e20040ff 	and	r4, r0, #255	; 0xff
   15214:	e3a00025 	mov	r0, #37	; 0x25
   15218:	ebfffdf3 	bl	149ec <LCDCommand>
   1521c:	e1a00004 	mov	r0, r4
   15220:	e8bd4010 	pop	{r4, lr}
   15224:	eafffdf0 	b	149ec <LCDCommand>

00015228 <LCDInit>:
   15228:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1522c:	e3a000c8 	mov	r0, #200	; 0xc8
   15230:	ebffebd7 	bl	10194 <delay_ms>
   15234:	e59f21d0 	ldr	r2, [pc, #464]	; 1540c <LCDInit+0x1e4>
   15238:	e5923008 	ldr	r3, [r2, #8]
   1523c:	e3833703 	orr	r3, r3, #786432	; 0xc0000
   15240:	e3833050 	orr	r3, r3, #80	; 0x50
   15244:	e5823008 	str	r3, [r2, #8]
   15248:	e3a0c050 	mov	ip, #80	; 0x50
   1524c:	e3a01701 	mov	r1, #262144	; 0x40000
   15250:	e3a03702 	mov	r3, #524288	; 0x80000
   15254:	e582c00c 	str	ip, [r2, #12]
   15258:	e3a000ca 	mov	r0, #202	; 0xca
   1525c:	e5823004 	str	r3, [r2, #4]
   15260:	e582100c 	str	r1, [r2, #12]
   15264:	e5821004 	str	r1, [r2, #4]
   15268:	e582c004 	str	ip, [r2, #4]
   1526c:	ebfffdde 	bl	149ec <LCDCommand>
   15270:	e3a0000c 	mov	r0, #12	; 0xc
   15274:	ebfffdff 	bl	14a78 <LCDData>
   15278:	e3a00020 	mov	r0, #32	; 0x20
   1527c:	ebfffdfd 	bl	14a78 <LCDData>
   15280:	e3a00002 	mov	r0, #2	; 0x2
   15284:	ebfffdfb 	bl	14a78 <LCDData>
   15288:	e3a000bb 	mov	r0, #187	; 0xbb
   1528c:	ebfffdd6 	bl	149ec <LCDCommand>
   15290:	e3a00001 	mov	r0, #1	; 0x1
   15294:	ebfffdf7 	bl	14a78 <LCDData>
   15298:	e3a000d1 	mov	r0, #209	; 0xd1
   1529c:	ebfffdd2 	bl	149ec <LCDCommand>
   152a0:	e3a00094 	mov	r0, #148	; 0x94
   152a4:	ebfffdd0 	bl	149ec <LCDCommand>
   152a8:	e3a00011 	mov	r0, #17	; 0x11
   152ac:	ebfffdce 	bl	149ec <LCDCommand>
   152b0:	e3a00081 	mov	r0, #129	; 0x81
   152b4:	ebfffdcc 	bl	149ec <LCDCommand>
   152b8:	e3a00018 	mov	r0, #24	; 0x18
   152bc:	ebfffded 	bl	14a78 <LCDData>
   152c0:	e3a00003 	mov	r0, #3	; 0x3
   152c4:	ebfffdeb 	bl	14a78 <LCDData>
   152c8:	e3a00025 	mov	r0, #37	; 0x25
   152cc:	ebfffdc6 	bl	149ec <LCDCommand>
   152d0:	e3a00030 	mov	r0, #48	; 0x30
   152d4:	ebfffde7 	bl	14a78 <LCDData>
   152d8:	e3a00020 	mov	r0, #32	; 0x20
   152dc:	ebfffdc2 	bl	149ec <LCDCommand>
   152e0:	e3a0000f 	mov	r0, #15	; 0xf
   152e4:	ebfffde3 	bl	14a78 <LCDData>
   152e8:	e3a00003 	mov	r0, #3	; 0x3
   152ec:	ebfffdbe 	bl	149ec <LCDCommand>
   152f0:	e3a000a7 	mov	r0, #167	; 0xa7
   152f4:	ebfffdbc 	bl	149ec <LCDCommand>
   152f8:	e3a00021 	mov	r0, #33	; 0x21
   152fc:	ebfffdba 	bl	149ec <LCDCommand>
   15300:	e3a000bc 	mov	r0, #188	; 0xbc
   15304:	ebfffdb8 	bl	149ec <LCDCommand>
   15308:	e3a00003 	mov	r0, #3	; 0x3
   1530c:	ebfffdd9 	bl	14a78 <LCDData>
   15310:	e3a00000 	mov	r0, #0	; 0x0
   15314:	ebfffdd7 	bl	14a78 <LCDData>
   15318:	e3a00001 	mov	r0, #1	; 0x1
   1531c:	ebfffdd5 	bl	14a78 <LCDData>
   15320:	e3a00036 	mov	r0, #54	; 0x36
   15324:	ebfffdb0 	bl	149ec <LCDCommand>
   15328:	e3a000c8 	mov	r0, #200	; 0xc8
   1532c:	ebfffdd1 	bl	14a78 <LCDData>
   15330:	e3a0003a 	mov	r0, #58	; 0x3a
   15334:	ebfffdac 	bl	149ec <LCDCommand>
   15338:	e3a00002 	mov	r0, #2	; 0x2
   1533c:	ebfffdcd 	bl	14a78 <LCDData>
   15340:	e3a000ce 	mov	r0, #206	; 0xce
   15344:	ebfffda8 	bl	149ec <LCDCommand>
   15348:	e3a00000 	mov	r0, #0	; 0x0
   1534c:	ebfffdc9 	bl	14a78 <LCDData>
   15350:	e3a00002 	mov	r0, #2	; 0x2
   15354:	ebfffdc7 	bl	14a78 <LCDData>
   15358:	e3a00004 	mov	r0, #4	; 0x4
   1535c:	ebfffdc5 	bl	14a78 <LCDData>
   15360:	e3a00006 	mov	r0, #6	; 0x6
   15364:	ebfffdc3 	bl	14a78 <LCDData>
   15368:	e3a00008 	mov	r0, #8	; 0x8
   1536c:	ebfffdc1 	bl	14a78 <LCDData>
   15370:	e3a0000a 	mov	r0, #10	; 0xa
   15374:	ebfffdbf 	bl	14a78 <LCDData>
   15378:	e3a0000c 	mov	r0, #12	; 0xc
   1537c:	ebfffdbd 	bl	14a78 <LCDData>
   15380:	e3a0000f 	mov	r0, #15	; 0xf
   15384:	ebfffdbb 	bl	14a78 <LCDData>
   15388:	e3a00000 	mov	r0, #0	; 0x0
   1538c:	ebfffdb9 	bl	14a78 <LCDData>
   15390:	e3a00002 	mov	r0, #2	; 0x2
   15394:	ebfffdb7 	bl	14a78 <LCDData>
   15398:	e3a00004 	mov	r0, #4	; 0x4
   1539c:	ebfffdb5 	bl	14a78 <LCDData>
   153a0:	e3a00006 	mov	r0, #6	; 0x6
   153a4:	ebfffdb3 	bl	14a78 <LCDData>
   153a8:	e3a00008 	mov	r0, #8	; 0x8
   153ac:	ebfffdb1 	bl	14a78 <LCDData>
   153b0:	e3a0000a 	mov	r0, #10	; 0xa
   153b4:	ebfffdaf 	bl	14a78 <LCDData>
   153b8:	e3a0000c 	mov	r0, #12	; 0xc
   153bc:	ebfffdad 	bl	14a78 <LCDData>
   153c0:	e3a0000f 	mov	r0, #15	; 0xf
   153c4:	ebfffdab 	bl	14a78 <LCDData>
   153c8:	e3a00000 	mov	r0, #0	; 0x0
   153cc:	ebfffda9 	bl	14a78 <LCDData>
   153d0:	e3a00004 	mov	r0, #4	; 0x4
   153d4:	ebfffda7 	bl	14a78 <LCDData>
   153d8:	e3a00009 	mov	r0, #9	; 0x9
   153dc:	ebfffda5 	bl	14a78 <LCDData>
   153e0:	e3a0000f 	mov	r0, #15	; 0xf
   153e4:	ebfffda3 	bl	14a78 <LCDData>
   153e8:	e3a00025 	mov	r0, #37	; 0x25
   153ec:	ebfffd7e 	bl	149ec <LCDCommand>
   153f0:	e3a00000 	mov	r0, #0	; 0x0
   153f4:	ebfffd7c 	bl	149ec <LCDCommand>
   153f8:	e3a000af 	mov	r0, #175	; 0xaf
   153fc:	ebfffd7a 	bl	149ec <LCDCommand>
   15400:	e3a00029 	mov	r0, #41	; 0x29
   15404:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15408:	eafffd77 	b	149ec <LCDCommand>
   1540c:	e0028000 	.word	0xe0028000

00015410 <vs1002Config>:
   15410:	e59f301c 	ldr	r3, [pc, #28]	; 15434 <vs1002Config+0x24>
   15414:	e5932000 	ldr	r2, [r3]
   15418:	e3822c15 	orr	r2, r2, #5376	; 0x1500
   1541c:	e5832000 	str	r2, [r3]
   15420:	e5932000 	ldr	r2, [r3]
   15424:	e3c2220f 	bic	r2, r2, #-268435456	; 0xf0000000
   15428:	e3c220f0 	bic	r2, r2, #240	; 0xf0
   1542c:	e5832000 	str	r2, [r3]
   15430:	e12fff1e 	bx	lr
   15434:	e002c000 	.word	0xe002c000

00015438 <vs1002Finish>:
   15438:	e59f2010 	ldr	r2, [pc, #16]	; 15450 <vs1002Finish+0x18>
   1543c:	e5923000 	ldr	r3, [r2]
   15440:	e3c33dff 	bic	r3, r3, #16320	; 0x3fc0
   15444:	e3c33030 	bic	r3, r3, #48	; 0x30
   15448:	e5823000 	str	r3, [r2]
   1544c:	e12fff1e 	bx	lr
   15450:	e002c000 	.word	0xe002c000

00015454 <vs1002Reset>:
   15454:	e92d4030 	push	{r4, r5, lr}
   15458:	e59f4020 	ldr	r4, [pc, #32]	; 15480 <vs1002Reset+0x2c>
   1545c:	e3a05401 	mov	r5, #16777216	; 0x1000000
   15460:	e3a03802 	mov	r3, #131072	; 0x20000
   15464:	e584300c 	str	r3, [r4, #12]
   15468:	e3a0000a 	mov	r0, #10	; 0xa
   1546c:	e584501c 	str	r5, [r4, #28]
   15470:	ebffeb47 	bl	10194 <delay_ms>
   15474:	e5845014 	str	r5, [r4, #20]
   15478:	e8bd4030 	pop	{r4, r5, lr}
   1547c:	e12fff1e 	bx	lr
   15480:	e0028000 	.word	0xe0028000

00015484 <vs1002SendMusic>:
   15484:	e92d4070 	push	{r4, r5, r6, lr}
   15488:	e59f303c 	ldr	r3, [pc, #60]	; 154cc <vs1002SendMusic+0x48>
   1548c:	e3a02801 	mov	r2, #65536	; 0x10000
   15490:	e1a06000 	mov	r6, r0
   15494:	e1a05001 	mov	r5, r1
   15498:	e3a04000 	mov	r4, #0	; 0x0
   1549c:	e583201c 	str	r2, [r3, #28]
   154a0:	ea000002 	b	154b0 <vs1002SendMusic+0x2c>
   154a4:	e7d40006 	ldrb	r0, [r4, r6]
   154a8:	ebfff278 	bl	11e90 <SPI0_send>
   154ac:	e2844001 	add	r4, r4, #1	; 0x1
   154b0:	e1540005 	cmp	r4, r5
   154b4:	bafffffa 	blt	154a4 <vs1002SendMusic+0x20>
   154b8:	e59f300c 	ldr	r3, [pc, #12]	; 154cc <vs1002SendMusic+0x48>
   154bc:	e3a02801 	mov	r2, #65536	; 0x10000
   154c0:	e5832014 	str	r2, [r3, #20]
   154c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   154c8:	e12fff1e 	bx	lr
   154cc:	e0028000 	.word	0xe0028000

000154d0 <vs1002SineTest>:
   154d0:	e92d4070 	push	{r4, r5, r6, lr}
   154d4:	e59f4058 	ldr	r4, [pc, #88]	; 15534 <vs1002SineTest+0x64>
   154d8:	e3a06801 	mov	r6, #65536	; 0x10000
   154dc:	e1a05000 	mov	r5, r0
   154e0:	e584601c 	str	r6, [r4, #28]
   154e4:	e3a00053 	mov	r0, #83	; 0x53
   154e8:	ebfff268 	bl	11e90 <SPI0_send>
   154ec:	e3a000ef 	mov	r0, #239	; 0xef
   154f0:	ebfff266 	bl	11e90 <SPI0_send>
   154f4:	e20550ff 	and	r5, r5, #255	; 0xff
   154f8:	e3a0006e 	mov	r0, #110	; 0x6e
   154fc:	ebfff263 	bl	11e90 <SPI0_send>
   15500:	e1a00005 	mov	r0, r5
   15504:	ebfff261 	bl	11e90 <SPI0_send>
   15508:	e3a00000 	mov	r0, #0	; 0x0
   1550c:	ebfff25f 	bl	11e90 <SPI0_send>
   15510:	e3a00000 	mov	r0, #0	; 0x0
   15514:	ebfff25d 	bl	11e90 <SPI0_send>
   15518:	e3a00000 	mov	r0, #0	; 0x0
   1551c:	ebfff25b 	bl	11e90 <SPI0_send>
   15520:	e3a00000 	mov	r0, #0	; 0x0
   15524:	ebfff259 	bl	11e90 <SPI0_send>
   15528:	e5846014 	str	r6, [r4, #20]
   1552c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15530:	e12fff1e 	bx	lr
   15534:	e0028000 	.word	0xe0028000

00015538 <vs1002SCIWrite>:
   15538:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1553c:	e59f7048 	ldr	r7, [pc, #72]	; 1558c <vs1002SCIWrite+0x54>
   15540:	e3a06601 	mov	r6, #1048576	; 0x100000
   15544:	e20050ff 	and	r5, r0, #255	; 0xff
   15548:	e587600c 	str	r6, [r7, #12]
   1554c:	e3a00002 	mov	r0, #2	; 0x2
   15550:	e1a04801 	lsl	r4, r1, #16
   15554:	ebfff24d 	bl	11e90 <SPI0_send>
   15558:	e1a00005 	mov	r0, r5
   1555c:	ebfff24b 	bl	11e90 <SPI0_send>
   15560:	e1a00c24 	lsr	r0, r4, #24
   15564:	e1a04824 	lsr	r4, r4, #16
   15568:	e20440ff 	and	r4, r4, #255	; 0xff
   1556c:	ebfff247 	bl	11e90 <SPI0_send>
   15570:	e1a00004 	mov	r0, r4
   15574:	ebfff245 	bl	11e90 <SPI0_send>
   15578:	e3a00001 	mov	r0, #1	; 0x1
   1557c:	e5876004 	str	r6, [r7, #4]
   15580:	ebffeb03 	bl	10194 <delay_ms>
   15584:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15588:	e12fff1e 	bx	lr
   1558c:	e0028000 	.word	0xe0028000

00015590 <vs1002Mute>:
   15590:	e59f1004 	ldr	r1, [pc, #4]	; 1559c <vs1002Mute+0xc>
   15594:	e3a0000b 	mov	r0, #11	; 0xb
   15598:	eaffffe6 	b	15538 <vs1002SCIWrite>
   1559c:	0000ffff 	.word	0x0000ffff

000155a0 <vs1002Init>:
   155a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   155a4:	e3a01b02 	mov	r1, #2048	; 0x800
   155a8:	e3a00000 	mov	r0, #0	; 0x0
   155ac:	ebffffe1 	bl	15538 <vs1002SCIWrite>
   155b0:	e3a00001 	mov	r0, #1	; 0x1
   155b4:	ebffeaf6 	bl	10194 <delay_ms>
   155b8:	e59f1008 	ldr	r1, [pc, #8]	; 155c8 <vs1002Init+0x28>
   155bc:	e3a00003 	mov	r0, #3	; 0x3
   155c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   155c4:	eaffffdb 	b	15538 <vs1002SCIWrite>
   155c8:	00009964 	.word	0x00009964

000155cc <vs1002SCIRead>:
   155cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   155d0:	e59f704c 	ldr	r7, [pc, #76]	; 15624 <vs1002SCIRead+0x58>
   155d4:	e3a06601 	mov	r6, #1048576	; 0x100000
   155d8:	e20040ff 	and	r4, r0, #255	; 0xff
   155dc:	e587600c 	str	r6, [r7, #12]
   155e0:	e3a00003 	mov	r0, #3	; 0x3
   155e4:	ebfff229 	bl	11e90 <SPI0_send>
   155e8:	e1a00004 	mov	r0, r4
   155ec:	ebfff227 	bl	11e90 <SPI0_send>
   155f0:	ebfff221 	bl	11e7c <SPI0_recv>
   155f4:	e1a04c00 	lsl	r4, r0, #24
   155f8:	ebfff21f 	bl	11e7c <SPI0_recv>
   155fc:	e5876004 	str	r6, [r7, #4]
   15600:	e1a05000 	mov	r5, r0
   15604:	e3a00001 	mov	r0, #1	; 0x1
   15608:	ebffeae1 	bl	10194 <delay_ms>
   1560c:	e1a04824 	lsr	r4, r4, #16
   15610:	e1844005 	orr	r4, r4, r5
   15614:	e1a04804 	lsl	r4, r4, #16
   15618:	e1a00824 	lsr	r0, r4, #16
   1561c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15620:	e12fff1e 	bx	lr
   15624:	e0028000 	.word	0xe0028000

00015628 <vs1002SetVolume>:
   15628:	e92d4010 	push	{r4, lr}
   1562c:	e20040ff 	and	r4, r0, #255	; 0xff
   15630:	e3a0000b 	mov	r0, #11	; 0xb
   15634:	ebffffe4 	bl	155cc <vs1002SCIRead>
   15638:	e3540031 	cmp	r4, #49	; 0x31
   1563c:	1a000004 	bne	15654 <vs1002SetVolume+0x2c>
   15640:	e2403b02 	sub	r3, r0, #2048	; 0x800
   15644:	e2433008 	sub	r3, r3, #8	; 0x8
   15648:	e1a03803 	lsl	r3, r3, #16
   1564c:	e3500000 	cmp	r0, #0	; 0x0
   15650:	ea000004 	b	15668 <vs1002SetVolume+0x40>
   15654:	e2803b02 	add	r3, r0, #2048	; 0x800
   15658:	e59f201c 	ldr	r2, [pc, #28]	; 1567c <vs1002SetVolume+0x54>
   1565c:	e2833008 	add	r3, r3, #8	; 0x8
   15660:	e1500002 	cmp	r0, r2
   15664:	e1a03803 	lsl	r3, r3, #16
   15668:	11a00823 	lsrne	r0, r3, #16
   1566c:	e1a01000 	mov	r1, r0
   15670:	e3a0000b 	mov	r0, #11	; 0xb
   15674:	e8bd4010 	pop	{r4, lr}
   15678:	eaffffae 	b	15538 <vs1002SCIWrite>
   1567c:	0000ffff 	.word	0x0000ffff

00015680 <ns73SerialReset>:
   15680:	e92d4030 	push	{r4, r5, lr}
   15684:	e59f40ec 	ldr	r4, [pc, #236]	; 15778 <ns73SerialReset+0xf8>
   15688:	e3a0000a 	mov	r0, #10	; 0xa
   1568c:	ebffeac0 	bl	10194 <delay_ms>
   15690:	e594301c 	ldr	r3, [r4, #28]
   15694:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
   15698:	e3a0000a 	mov	r0, #10	; 0xa
   1569c:	e584301c 	str	r3, [r4, #28]
   156a0:	ebffeabb 	bl	10194 <delay_ms>
   156a4:	e594301c 	ldr	r3, [r4, #28]
   156a8:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   156ac:	e584301c 	str	r3, [r4, #28]
   156b0:	e3a0000a 	mov	r0, #10	; 0xa
   156b4:	ebffeab6 	bl	10194 <delay_ms>
   156b8:	e5943014 	ldr	r3, [r4, #20]
   156bc:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
   156c0:	e5843014 	str	r3, [r4, #20]
   156c4:	e3a05000 	mov	r5, #0	; 0x0
   156c8:	e59f40a8 	ldr	r4, [pc, #168]	; 15778 <ns73SerialReset+0xf8>
   156cc:	e5943014 	ldr	r3, [r4, #20]
   156d0:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   156d4:	e3a0000a 	mov	r0, #10	; 0xa
   156d8:	e5843014 	str	r3, [r4, #20]
   156dc:	ebffeaac 	bl	10194 <delay_ms>
   156e0:	e594301c 	ldr	r3, [r4, #28]
   156e4:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   156e8:	e2855001 	add	r5, r5, #1	; 0x1
   156ec:	e3a0000a 	mov	r0, #10	; 0xa
   156f0:	e584301c 	str	r3, [r4, #28]
   156f4:	ebffeaa6 	bl	10194 <delay_ms>
   156f8:	e355001a 	cmp	r5, #26	; 0x1a
   156fc:	1afffff1 	bne	156c8 <ns73SerialReset+0x48>
   15700:	e5943014 	ldr	r3, [r4, #20]
   15704:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   15708:	e3a0000a 	mov	r0, #10	; 0xa
   1570c:	e5843014 	str	r3, [r4, #20]
   15710:	ebffea9f 	bl	10194 <delay_ms>
   15714:	e594301c 	ldr	r3, [r4, #28]
   15718:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
   1571c:	e3a0000a 	mov	r0, #10	; 0xa
   15720:	e584301c 	str	r3, [r4, #28]
   15724:	ebffea9a 	bl	10194 <delay_ms>
   15728:	e594301c 	ldr	r3, [r4, #28]
   1572c:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   15730:	e3a0000a 	mov	r0, #10	; 0xa
   15734:	e584301c 	str	r3, [r4, #28]
   15738:	ebffea95 	bl	10194 <delay_ms>
   1573c:	e5943014 	ldr	r3, [r4, #20]
   15740:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   15744:	e3a0000a 	mov	r0, #10	; 0xa
   15748:	e5843014 	str	r3, [r4, #20]
   1574c:	ebffea90 	bl	10194 <delay_ms>
   15750:	e5943014 	ldr	r3, [r4, #20]
   15754:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
   15758:	e5843014 	str	r3, [r4, #20]
   1575c:	e3a0000a 	mov	r0, #10	; 0xa
   15760:	ebffea8b 	bl	10194 <delay_ms>
   15764:	e594301c 	ldr	r3, [r4, #28]
   15768:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
   1576c:	e584301c 	str	r3, [r4, #28]
   15770:	e8bd4030 	pop	{r4, r5, lr}
   15774:	e12fff1e 	bx	lr
   15778:	e0028000 	.word	0xe0028000

0001577c <ns73Send>:
   1577c:	e59f3100 	ldr	r3, [pc, #256]	; 15884 <ns73Send+0x108>
   15780:	e3a02402 	mov	r2, #33554432	; 0x2000000
   15784:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15788:	e1a0c000 	mov	ip, r0
   1578c:	e583201c 	str	r2, [r3, #28]
   15790:	e3a0000a 	mov	r0, #10	; 0xa
   15794:	e20c40ff 	and	r4, ip, #255	; 0xff
   15798:	e20160ff 	and	r6, r1, #255	; 0xff
   1579c:	ebffea7c 	bl	10194 <delay_ms>
   157a0:	e3a05000 	mov	r5, #0	; 0x0
   157a4:	e59f20d8 	ldr	r2, [pc, #216]	; 15884 <ns73Send+0x108>
   157a8:	e3a03302 	mov	r3, #134217728	; 0x8000000
   157ac:	e582301c 	str	r3, [r2, #28]
   157b0:	e3140001 	tst	r4, #1	; 0x1
   157b4:	15923014 	ldrne	r3, [r2, #20]
   157b8:	0592301c 	ldreq	r3, [r2, #28]
   157bc:	13833301 	orrne	r3, r3, #67108864	; 0x4000000
   157c0:	03833301 	orreq	r3, r3, #67108864	; 0x4000000
   157c4:	15823014 	strne	r3, [r2, #20]
   157c8:	0582301c 	streq	r3, [r2, #28]
   157cc:	e3a00001 	mov	r0, #1	; 0x1
   157d0:	e1a04034 	lsr	r4, r4, r0
   157d4:	ebffea6e 	bl	10194 <delay_ms>
   157d8:	e59f20a4 	ldr	r2, [pc, #164]	; 15884 <ns73Send+0x108>
   157dc:	e3a03302 	mov	r3, #134217728	; 0x8000000
   157e0:	e5823014 	str	r3, [r2, #20]
   157e4:	e3a00001 	mov	r0, #1	; 0x1
   157e8:	ebffea69 	bl	10194 <delay_ms>
   157ec:	e2853001 	add	r3, r5, #1	; 0x1
   157f0:	e20350ff 	and	r5, r3, #255	; 0xff
   157f4:	e3550004 	cmp	r5, #4	; 0x4
   157f8:	1affffe9 	bne	157a4 <ns73Send+0x28>
   157fc:	e3a04000 	mov	r4, #0	; 0x0
   15800:	e59f207c 	ldr	r2, [pc, #124]	; 15884 <ns73Send+0x108>
   15804:	e3a03302 	mov	r3, #134217728	; 0x8000000
   15808:	e582301c 	str	r3, [r2, #28]
   1580c:	e283330e 	add	r3, r3, #939524096	; 0x38000000
   15810:	e582300c 	str	r3, [r2, #12]
   15814:	e3160001 	tst	r6, #1	; 0x1
   15818:	15923014 	ldrne	r3, [r2, #20]
   1581c:	0592301c 	ldreq	r3, [r2, #28]
   15820:	13833301 	orrne	r3, r3, #67108864	; 0x4000000
   15824:	03833301 	orreq	r3, r3, #67108864	; 0x4000000
   15828:	e59f5054 	ldr	r5, [pc, #84]	; 15884 <ns73Send+0x108>
   1582c:	15823014 	strne	r3, [r2, #20]
   15830:	0582301c 	streq	r3, [r2, #28]
   15834:	e3a00001 	mov	r0, #1	; 0x1
   15838:	e3a07302 	mov	r7, #134217728	; 0x8000000
   1583c:	e1a06036 	lsr	r6, r6, r0
   15840:	ebffea53 	bl	10194 <delay_ms>
   15844:	e3a00001 	mov	r0, #1	; 0x1
   15848:	e5857014 	str	r7, [r5, #20]
   1584c:	ebffea50 	bl	10194 <delay_ms>
   15850:	e2843001 	add	r3, r4, #1	; 0x1
   15854:	e20340ff 	and	r4, r3, #255	; 0xff
   15858:	e3540008 	cmp	r4, #8	; 0x8
   1585c:	1affffe7 	bne	15800 <ns73Send+0x84>
   15860:	e3a04402 	mov	r4, #33554432	; 0x2000000
   15864:	e3a0000a 	mov	r0, #10	; 0xa
   15868:	e5854014 	str	r4, [r5, #20]
   1586c:	ebffea48 	bl	10194 <delay_ms>
   15870:	e3a00000 	mov	r0, #0	; 0x0
   15874:	e585401c 	str	r4, [r5, #28]
   15878:	e585701c 	str	r7, [r5, #28]
   1587c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15880:	e12fff1e 	bx	lr
   15884:	e0028000 	.word	0xe0028000

00015888 <ns73SetChannel>:
   15888:	e59f203c 	ldr	r2, [pc, #60]	; 158cc <ns73SetChannel+0x44>
   1588c:	e59f303c 	ldr	r3, [pc, #60]	; 158d0 <ns73SetChannel+0x48>
   15890:	e92d4010 	push	{r4, lr}
   15894:	e0243290 	mla	r4, r0, r2, r3
   15898:	e2843d7f 	add	r3, r4, #8128	; 0x1fc0
   1589c:	e3540000 	cmp	r4, #0	; 0x0
   158a0:	e283303f 	add	r3, r3, #63	; 0x3f
   158a4:	b1a04003 	movlt	r4, r3
   158a8:	e1a016a4 	lsr	r1, r4, #13
   158ac:	e20110ff 	and	r1, r1, #255	; 0xff
   158b0:	e3a00003 	mov	r0, #3	; 0x3
   158b4:	ebffffb0 	bl	1577c <ns73Send>
   158b8:	e1a04aa4 	lsr	r4, r4, #21
   158bc:	e20410ff 	and	r1, r4, #255	; 0xff
   158c0:	e3a00004 	mov	r0, #4	; 0x4
   158c4:	e8bd4010 	pop	{r4, lr}
   158c8:	eaffffab 	b	1577c <ns73Send>
   158cc:	000186a0 	.word	0x000186a0
   158d0:	0004a380 	.word	0x0004a380

000158d4 <ns73Init>:
   158d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   158d8:	e3a01005 	mov	r1, #5	; 0x5
   158dc:	e3a0000e 	mov	r0, #14	; 0xe
   158e0:	ebffffa5 	bl	1577c <ns73Send>
   158e4:	e3a00001 	mov	r0, #1	; 0x1
   158e8:	ebffea29 	bl	10194 <delay_ms>
   158ec:	e3a010b4 	mov	r1, #180	; 0xb4
   158f0:	e3a00001 	mov	r0, #1	; 0x1
   158f4:	ebffffa0 	bl	1577c <ns73Send>
   158f8:	e3a01006 	mov	r1, #6	; 0x6
   158fc:	e3a00002 	mov	r0, #2	; 0x2
   15900:	ebffff9d 	bl	1577c <ns73Send>
   15904:	e3a0108a 	mov	r1, #138	; 0x8a
   15908:	e3a00003 	mov	r0, #3	; 0x3
   1590c:	ebffff9a 	bl	1577c <ns73Send>
   15910:	e3a0102e 	mov	r1, #46	; 0x2e
   15914:	e3a00004 	mov	r0, #4	; 0x4
   15918:	ebffff97 	bl	1577c <ns73Send>
   1591c:	e3a0101a 	mov	r1, #26	; 0x1a
   15920:	e3a00008 	mov	r0, #8	; 0x8
   15924:	ebffff94 	bl	1577c <ns73Send>
   15928:	e3a01004 	mov	r1, #4	; 0x4
   1592c:	e3a00000 	mov	r0, #0	; 0x0
   15930:	ebffff91 	bl	1577c <ns73Send>
   15934:	e3a01005 	mov	r1, #5	; 0x5
   15938:	e3a0000e 	mov	r0, #14	; 0xe
   1593c:	ebffff8e 	bl	1577c <ns73Send>
   15940:	e3a00006 	mov	r0, #6	; 0x6
   15944:	e3a0101e 	mov	r1, #30	; 0x1e
   15948:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1594c:	eaffff8a 	b	1577c <ns73Send>

00015950 <ns73Config>:
   15950:	e59f2040 	ldr	r2, [pc, #64]	; 15998 <ns73Config+0x48>
   15954:	e5923018 	ldr	r3, [r2, #24]
   15958:	e3833303 	orr	r3, r3, #201326592	; 0xc000000
   1595c:	e5823018 	str	r3, [r2, #24]
   15960:	e5923018 	ldr	r3, [r2, #24]
   15964:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
   15968:	e5823018 	str	r3, [r2, #24]
   1596c:	e5923008 	ldr	r3, [r2, #8]
   15970:	e3c33801 	bic	r3, r3, #65536	; 0x10000
   15974:	e5823008 	str	r3, [r2, #8]
   15978:	e5923014 	ldr	r3, [r2, #20]
   1597c:	e3833303 	orr	r3, r3, #201326592	; 0xc000000
   15980:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15984:	e3a00001 	mov	r0, #1	; 0x1
   15988:	e5823014 	str	r3, [r2, #20]
   1598c:	ebffea00 	bl	10194 <delay_ms>
   15990:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15994:	e12fff1e 	bx	lr
   15998:	e0028000 	.word	0xe0028000

0001599c <main_msc>:
   1599c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   159a0:	eb0002e9 	bl	1654c <BlockDevInit>
   159a4:	e59f006c 	ldr	r0, [pc, #108]	; 15a18 <main_msc+0x7c>
   159a8:	ebfff044 	bl	11ac0 <rprintf>
   159ac:	eb0003d9 	bl	16918 <USBInit>
   159b0:	e3a00020 	mov	r0, #32	; 0x20
   159b4:	eb00046b 	bl	16b68 <USBHwNakIntEnable>
   159b8:	e59f005c 	ldr	r0, [pc, #92]	; 15a1c <main_msc+0x80>
   159bc:	eb0005cb 	bl	170f0 <USBRegisterDescriptors>
   159c0:	e59f2058 	ldr	r2, [pc, #88]	; 15a20 <main_msc+0x84>
   159c4:	e3a00001 	mov	r0, #1	; 0x1
   159c8:	e59f1054 	ldr	r1, [pc, #84]	; 15a24 <main_msc+0x88>
   159cc:	eb000553 	bl	16f20 <USBRegisterRequestHandler>
   159d0:	e3a00085 	mov	r0, #133	; 0x85
   159d4:	e59f104c 	ldr	r1, [pc, #76]	; 15a28 <main_msc+0x8c>
   159d8:	eb000435 	bl	16ab4 <USBHwRegisterEPIntHandler>
   159dc:	e59f1048 	ldr	r1, [pc, #72]	; 15a2c <main_msc+0x90>
   159e0:	e3a00002 	mov	r0, #2	; 0x2
   159e4:	eb000432 	bl	16ab4 <USBHwRegisterEPIntHandler>
   159e8:	e59f0040 	ldr	r0, [pc, #64]	; 15a30 <main_msc+0x94>
   159ec:	ebfff033 	bl	11ac0 <rprintf>
   159f0:	e3a00001 	mov	r0, #1	; 0x1
   159f4:	eb000457 	bl	16b58 <USBHwConnect>
   159f8:	ea000000 	b	15a00 <main_msc+0x64>
   159fc:	eb0004bc 	bl	16cf4 <USBHwISR>
   15a00:	e59f302c 	ldr	r3, [pc, #44]	; 15a34 <main_msc+0x98>
   15a04:	e5933000 	ldr	r3, [r3]
   15a08:	e2130502 	ands	r0, r3, #8388608	; 0x800000
   15a0c:	1afffffa 	bne	159fc <main_msc+0x60>
   15a10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15a14:	e12fff1e 	bx	lr
   15a18:	000192d0 	.word	0x000192d0
   15a1c:	4000000a 	.word	0x4000000a
   15a20:	40000f2b 	.word	0x40000f2b
   15a24:	00015a38 	.word	0x00015a38
   15a28:	00015bf8 	.word	0x00015bf8
   15a2c:	00015c5c 	.word	0x00015c5c
   15a30:	000192e8 	.word	0x000192e8
   15a34:	e0028000 	.word	0xe0028000

00015a38 <HandleClassRequest>:
   15a38:	e1d030b4 	ldrh	r3, [r0, #4]
   15a3c:	e3530000 	cmp	r3, #0	; 0x0
   15a40:	e92d4010 	push	{r4, lr}
   15a44:	e1a03002 	mov	r3, r2
   15a48:	e1a04001 	mov	r4, r1
   15a4c:	1a000012 	bne	15a9c <HandleClassRequest+0x64>
   15a50:	e1d0e0b2 	ldrh	lr, [r0, #2]
   15a54:	e35e0000 	cmp	lr, #0	; 0x0
   15a58:	1a00000f 	bne	15a9c <HandleClassRequest+0x64>
   15a5c:	e5d0c001 	ldrb	ip, [r0, #1]
   15a60:	e35c00fe 	cmp	ip, #254	; 0xfe
   15a64:	05933000 	ldreq	r3, [r3]
   15a68:	e3a02001 	mov	r2, #1	; 0x1
   15a6c:	05c3e000 	strbeq	lr, [r3]
   15a70:	e1a01002 	mov	r1, r2
   15a74:	05842000 	streq	r2, [r4]
   15a78:	0a000008 	beq	15aa0 <HandleClassRequest+0x68>
   15a7c:	e35c00ff 	cmp	ip, #255	; 0xff
   15a80:	1a000005 	bne	15a9c <HandleClassRequest+0x64>
   15a84:	e1d030b6 	ldrh	r3, [r0, #6]
   15a88:	e3530000 	cmp	r3, #0	; 0x0
   15a8c:	1a000002 	bne	15a9c <HandleClassRequest+0x64>
   15a90:	eb000103 	bl	15ea4 <MSCBotReset>
   15a94:	e3a01001 	mov	r1, #1	; 0x1
   15a98:	ea000000 	b	15aa0 <HandleClassRequest+0x68>
   15a9c:	e3a01000 	mov	r1, #0	; 0x0
   15aa0:	e1a00001 	mov	r0, r1
   15aa4:	e8bd4010 	pop	{r4, lr}
   15aa8:	e12fff1e 	bx	lr

00015aac <SendCSW>:
   15aac:	e59f203c 	ldr	r2, [pc, #60]	; 15af0 <SendCSW+0x44>
   15ab0:	e59f303c 	ldr	r3, [pc, #60]	; 15af4 <SendCSW+0x48>
   15ab4:	e5921008 	ldr	r1, [r2, #8]
   15ab8:	e5933000 	ldr	r3, [r3]
   15abc:	e592c004 	ldr	ip, [r2, #4]
   15ac0:	e59f2030 	ldr	r2, [pc, #48]	; 15af8 <SendCSW+0x4c>
   15ac4:	e0631001 	rsb	r1, r3, r1
   15ac8:	e59f302c 	ldr	r3, [pc, #44]	; 15afc <SendCSW+0x50>
   15acc:	e5c2000c 	strb	r0, [r2, #12]
   15ad0:	e3a00003 	mov	r0, #3	; 0x3
   15ad4:	e5830000 	str	r0, [r3]
   15ad8:	e59f3020 	ldr	r3, [pc, #32]	; 15b00 <SendCSW+0x54>
   15adc:	e3510000 	cmp	r1, #0	; 0x0
   15ae0:	b3a01000 	movlt	r1, #0	; 0x0
   15ae4:	e8821008 	stm	r2, {r3, ip}
   15ae8:	e5821008 	str	r1, [r2, #8]
   15aec:	e12fff1e 	bx	lr
   15af0:	40000f38 	.word	0x40000f38
   15af4:	40000f30 	.word	0x40000f30
   15af8:	40000f58 	.word	0x40000f58
   15afc:	40000f68 	.word	0x40000f68
   15b00:	53425355 	.word	0x53425355

00015b04 <BOTStall>:
   15b04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15b08:	e59f202c 	ldr	r2, [pc, #44]	; 15b3c <BOTStall+0x38>
   15b0c:	e1d230dc 	ldrsb	r3, [r2, #12]
   15b10:	e3530000 	cmp	r3, #0	; 0x0
   15b14:	e3a00085 	mov	r0, #133	; 0x85
   15b18:	e3a01001 	mov	r1, #1	; 0x1
   15b1c:	ba000003 	blt	15b30 <BOTStall+0x2c>
   15b20:	e5923008 	ldr	r3, [r2, #8]
   15b24:	e3530000 	cmp	r3, #0	; 0x0
   15b28:	13a00002 	movne	r0, #2	; 0x2
   15b2c:	13a01001 	movne	r1, #1	; 0x1
   15b30:	eb000418 	bl	16b98 <USBHwEPStall>
   15b34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15b38:	e12fff1e 	bx	lr
   15b3c:	40000f38 	.word	0x40000f38

00015b40 <HandleDataIn>:
   15b40:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15b44:	e59f609c 	ldr	r6, [pc, #156]	; 15be8 <HandleDataIn+0xa8>
   15b48:	e59f409c 	ldr	r4, [pc, #156]	; 15bec <HandleDataIn+0xac>
   15b4c:	e59f509c 	ldr	r5, [pc, #156]	; 15bf0 <HandleDataIn+0xb0>
   15b50:	e5d6100e 	ldrb	r1, [r6, #14]
   15b54:	e5942000 	ldr	r2, [r4]
   15b58:	e5953000 	ldr	r3, [r5]
   15b5c:	e286000f 	add	r0, r6, #15	; 0xf
   15b60:	eb000129 	bl	1600c <SCSIHandleData>
   15b64:	e3500000 	cmp	r0, #0	; 0x0
   15b68:	e59f7084 	ldr	r7, [pc, #132]	; 15bf4 <HandleDataIn+0xb4>
   15b6c:	e5840000 	str	r0, [r4]
   15b70:	1a000002 	bne	15b80 <HandleDataIn+0x40>
   15b74:	ebffffe2 	bl	15b04 <BOTStall>
   15b78:	e3a00001 	mov	r0, #1	; 0x1
   15b7c:	ea000015 	b	15bd8 <HandleDataIn+0x98>
   15b80:	e5952000 	ldr	r2, [r5]
   15b84:	e5973000 	ldr	r3, [r7]
   15b88:	e1520003 	cmp	r2, r3
   15b8c:	e1a01000 	mov	r1, r0
   15b90:	e0624003 	rsb	r4, r2, r3
   15b94:	e3a00085 	mov	r0, #133	; 0x85
   15b98:	2a000006 	bcs	15bb8 <HandleDataIn+0x78>
   15b9c:	e3540040 	cmp	r4, #64	; 0x40
   15ba0:	23a04040 	movcs	r4, #64	; 0x40
   15ba4:	e1a02004 	mov	r2, r4
   15ba8:	eb000402 	bl	16bb8 <USBHwEPWrite>
   15bac:	e5953000 	ldr	r3, [r5]
   15bb0:	e0833004 	add	r3, r3, r4
   15bb4:	e5853000 	str	r3, [r5]
   15bb8:	e5952000 	ldr	r2, [r5]
   15bbc:	e5973000 	ldr	r3, [r7]
   15bc0:	e1520003 	cmp	r2, r3
   15bc4:	1a000005 	bne	15be0 <HandleDataIn+0xa0>
   15bc8:	e5963008 	ldr	r3, [r6, #8]
   15bcc:	e1520003 	cmp	r2, r3
   15bd0:	1bffffcb 	blne	15b04 <BOTStall>
   15bd4:	e3a00000 	mov	r0, #0	; 0x0
   15bd8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15bdc:	eaffffb2 	b	15aac <SendCSW>
   15be0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15be4:	e12fff1e 	bx	lr
   15be8:	40000f38 	.word	0x40000f38
   15bec:	40000f6c 	.word	0x40000f6c
   15bf0:	40000f34 	.word	0x40000f34
   15bf4:	40000f30 	.word	0x40000f30

00015bf8 <MSCBotBulkIn>:
   15bf8:	e92d4030 	push	{r4, r5, lr}
   15bfc:	e2114002 	ands	r4, r1, #2	; 0x2
   15c00:	e59f504c 	ldr	r5, [pc, #76]	; 15c54 <MSCBotBulkIn+0x5c>
   15c04:	1a000010 	bne	15c4c <MSCBotBulkIn+0x54>
   15c08:	e5953000 	ldr	r3, [r5]
   15c0c:	e3530003 	cmp	r3, #3	; 0x3
   15c10:	e3a00085 	mov	r0, #133	; 0x85
   15c14:	e59f103c 	ldr	r1, [pc, #60]	; 15c58 <MSCBotBulkIn+0x60>
   15c18:	e3a0200d 	mov	r2, #13	; 0xd
   15c1c:	0a000006 	beq	15c3c <MSCBotBulkIn+0x44>
   15c20:	e3530004 	cmp	r3, #4	; 0x4
   15c24:	e3a01001 	mov	r1, #1	; 0x1
   15c28:	0a000006 	beq	15c48 <MSCBotBulkIn+0x50>
   15c2c:	e3530002 	cmp	r3, #2	; 0x2
   15c30:	1a000005 	bne	15c4c <MSCBotBulkIn+0x54>
   15c34:	e8bd4030 	pop	{r4, r5, lr}
   15c38:	eaffffc0 	b	15b40 <HandleDataIn>
   15c3c:	eb0003dd 	bl	16bb8 <USBHwEPWrite>
   15c40:	e5854000 	str	r4, [r5]
   15c44:	ea000000 	b	15c4c <MSCBotBulkIn+0x54>
   15c48:	eb0003d2 	bl	16b98 <USBHwEPStall>
   15c4c:	e8bd4030 	pop	{r4, r5, lr}
   15c50:	e12fff1e 	bx	lr
   15c54:	40000f68 	.word	0x40000f68
   15c58:	40000f58 	.word	0x40000f58

00015c5c <MSCBotBulkOut>:
   15c5c:	e92d4070 	push	{r4, r5, r6, lr}
   15c60:	e3110002 	tst	r1, #2	; 0x2
   15c64:	e24dd008 	sub	sp, sp, #8	; 0x8
   15c68:	e20000ff 	and	r0, r0, #255	; 0xff
   15c6c:	1a000083 	bne	15e80 <MSCBotBulkOut+0x224>
   15c70:	e59f3214 	ldr	r3, [pc, #532]	; 15e8c <MSCBotBulkOut+0x230>
   15c74:	e5933000 	ldr	r3, [r3]
   15c78:	e3530004 	cmp	r3, #4	; 0x4
   15c7c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   15c80:	ea00007e 	b	15e80 <MSCBotBulkOut+0x224>
   15c84:	00015c98 	.word	0x00015c98
   15c88:	00015d80 	.word	0x00015d80
   15c8c:	00015e1c 	.word	0x00015e1c
   15c90:	00015e1c 	.word	0x00015e1c
   15c94:	00015e38 	.word	0x00015e38
   15c98:	e59f41f0 	ldr	r4, [pc, #496]	; 15e90 <MSCBotBulkOut+0x234>
   15c9c:	e3a02020 	mov	r2, #32	; 0x20
   15ca0:	e1a01004 	mov	r1, r4
   15ca4:	eb0003e5 	bl	16c40 <USBHwEPRead>
   15ca8:	e350001f 	cmp	r0, #31	; 0x1f
   15cac:	e58d0000 	str	r0, [sp]
   15cb0:	1a00000a 	bne	15ce0 <MSCBotBulkOut+0x84>
   15cb4:	e5942000 	ldr	r2, [r4]
   15cb8:	e59f31d4 	ldr	r3, [pc, #468]	; 15e94 <MSCBotBulkOut+0x238>
   15cbc:	e1520003 	cmp	r2, r3
   15cc0:	1a000006 	bne	15ce0 <MSCBotBulkOut+0x84>
   15cc4:	e5d4e00d 	ldrb	lr, [r4, #13]
   15cc8:	e35e0000 	cmp	lr, #0	; 0x0
   15ccc:	1a000003 	bne	15ce0 <MSCBotBulkOut+0x84>
   15cd0:	e5d4100e 	ldrb	r1, [r4, #14]
   15cd4:	e2413001 	sub	r3, r1, #1	; 0x1
   15cd8:	e353000f 	cmp	r3, #15	; 0xf
   15cdc:	9a000059 	bls	15e48 <MSCBotBulkOut+0x1ec>
   15ce0:	e3a00085 	mov	r0, #133	; 0x85
   15ce4:	e3a01001 	mov	r1, #1	; 0x1
   15ce8:	eb0003aa 	bl	16b98 <USBHwEPStall>
   15cec:	e3a00002 	mov	r0, #2	; 0x2
   15cf0:	e3a01001 	mov	r1, #1	; 0x1
   15cf4:	eb0003a7 	bl	16b98 <USBHwEPStall>
   15cf8:	e3a02004 	mov	r2, #4	; 0x4
   15cfc:	ea00004a 	b	15e2c <MSCBotBulkOut+0x1d0>
   15d00:	e59d2000 	ldr	r2, [sp]
   15d04:	e3520000 	cmp	r2, #0	; 0x0
   15d08:	da00000b 	ble	15d3c <MSCBotBulkOut+0xe0>
   15d0c:	e3140080 	tst	r4, #128	; 0x80
   15d10:	e59d3004 	ldr	r3, [sp, #4]
   15d14:	0a000002 	beq	15d24 <MSCBotBulkOut+0xc8>
   15d18:	e3530000 	cmp	r3, #0	; 0x0
   15d1c:	0a000002 	beq	15d2c <MSCBotBulkOut+0xd0>
   15d20:	ea000005 	b	15d3c <MSCBotBulkOut+0xe0>
   15d24:	e3530000 	cmp	r3, #0	; 0x0
   15d28:	0a000003 	beq	15d3c <MSCBotBulkOut+0xe0>
   15d2c:	ebffff74 	bl	15b04 <BOTStall>
   15d30:	e3a00002 	mov	r0, #2	; 0x2
   15d34:	ebffff5c 	bl	15aac <SendCSW>
   15d38:	ea000050 	b	15e80 <MSCBotBulkOut+0x224>
   15d3c:	e59f314c 	ldr	r3, [pc, #332]	; 15e90 <MSCBotBulkOut+0x234>
   15d40:	e5933008 	ldr	r3, [r3, #8]
   15d44:	e1520003 	cmp	r2, r3
   15d48:	8afffff7 	bhi	15d2c <MSCBotBulkOut+0xd0>
   15d4c:	e59f3144 	ldr	r3, [pc, #324]	; 15e98 <MSCBotBulkOut+0x23c>
   15d50:	e3520000 	cmp	r2, #0	; 0x0
   15d54:	e5832000 	str	r2, [r3]
   15d58:	0a000003 	beq	15d6c <MSCBotBulkOut+0x110>
   15d5c:	e59d3004 	ldr	r3, [sp, #4]
   15d60:	e3530000 	cmp	r3, #0	; 0x0
   15d64:	03a02001 	moveq	r2, #1	; 0x1
   15d68:	0a00002f 	beq	15e2c <MSCBotBulkOut+0x1d0>
   15d6c:	e59f3118 	ldr	r3, [pc, #280]	; 15e8c <MSCBotBulkOut+0x230>
   15d70:	e3a02002 	mov	r2, #2	; 0x2
   15d74:	e5832000 	str	r2, [r3]
   15d78:	ebffff70 	bl	15b40 <HandleDataIn>
   15d7c:	ea00003f 	b	15e80 <MSCBotBulkOut+0x224>
   15d80:	e59f5114 	ldr	r5, [pc, #276]	; 15e9c <MSCBotBulkOut+0x240>
   15d84:	e59f310c 	ldr	r3, [pc, #268]	; 15e98 <MSCBotBulkOut+0x23c>
   15d88:	e5951000 	ldr	r1, [r5]
   15d8c:	e5932000 	ldr	r2, [r3]
   15d90:	e1510002 	cmp	r1, r2
   15d94:	2a000014 	bcs	15dec <MSCBotBulkOut+0x190>
   15d98:	e59f4100 	ldr	r4, [pc, #256]	; 15ea0 <MSCBotBulkOut+0x244>
   15d9c:	e0612002 	rsb	r2, r1, r2
   15da0:	e3a00002 	mov	r0, #2	; 0x2
   15da4:	e5941000 	ldr	r1, [r4]
   15da8:	eb0003a4 	bl	16c40 <USBHwEPRead>
   15dac:	e1a06000 	mov	r6, r0
   15db0:	e59f00d8 	ldr	r0, [pc, #216]	; 15e90 <MSCBotBulkOut+0x234>
   15db4:	e5953000 	ldr	r3, [r5]
   15db8:	e5d0100e 	ldrb	r1, [r0, #14]
   15dbc:	e5942000 	ldr	r2, [r4]
   15dc0:	e280000f 	add	r0, r0, #15	; 0xf
   15dc4:	eb000090 	bl	1600c <SCSIHandleData>
   15dc8:	e3500000 	cmp	r0, #0	; 0x0
   15dcc:	15953000 	ldrne	r3, [r5]
   15dd0:	10833006 	addne	r3, r3, r6
   15dd4:	e5840000 	str	r0, [r4]
   15dd8:	15853000 	strne	r3, [r5]
   15ddc:	1a000002 	bne	15dec <MSCBotBulkOut+0x190>
   15de0:	ebffff47 	bl	15b04 <BOTStall>
   15de4:	e3a00001 	mov	r0, #1	; 0x1
   15de8:	eaffffd1 	b	15d34 <MSCBotBulkOut+0xd8>
   15dec:	e59f30a8 	ldr	r3, [pc, #168]	; 15e9c <MSCBotBulkOut+0x240>
   15df0:	e5932000 	ldr	r2, [r3]
   15df4:	e59f309c 	ldr	r3, [pc, #156]	; 15e98 <MSCBotBulkOut+0x23c>
   15df8:	e5933000 	ldr	r3, [r3]
   15dfc:	e1520003 	cmp	r2, r3
   15e00:	1a00001e 	bne	15e80 <MSCBotBulkOut+0x224>
   15e04:	e59f3084 	ldr	r3, [pc, #132]	; 15e90 <MSCBotBulkOut+0x234>
   15e08:	e5933008 	ldr	r3, [r3, #8]
   15e0c:	e1520003 	cmp	r2, r3
   15e10:	1bffff3b 	blne	15b04 <BOTStall>
   15e14:	e3a00000 	mov	r0, #0	; 0x0
   15e18:	eaffffc5 	b	15d34 <MSCBotBulkOut+0xd8>
   15e1c:	e3a01000 	mov	r1, #0	; 0x0
   15e20:	e1a02001 	mov	r2, r1
   15e24:	eb000385 	bl	16c40 <USBHwEPRead>
   15e28:	e3a02000 	mov	r2, #0	; 0x0
   15e2c:	e59f3058 	ldr	r3, [pc, #88]	; 15e8c <MSCBotBulkOut+0x230>
   15e30:	e5832000 	str	r2, [r3]
   15e34:	ea000011 	b	15e80 <MSCBotBulkOut+0x224>
   15e38:	e3a00002 	mov	r0, #2	; 0x2
   15e3c:	e3a01001 	mov	r1, #1	; 0x1
   15e40:	eb000354 	bl	16b98 <USBHwEPStall>
   15e44:	ea00000d 	b	15e80 <MSCBotBulkOut+0x224>
   15e48:	e59fc048 	ldr	ip, [pc, #72]	; 15e98 <MSCBotBulkOut+0x23c>
   15e4c:	e58ce000 	str	lr, [ip]
   15e50:	e59fc044 	ldr	ip, [pc, #68]	; 15e9c <MSCBotBulkOut+0x240>
   15e54:	e284000f 	add	r0, r4, #15	; 0xf
   15e58:	e28d3004 	add	r3, sp, #4	; 0x4
   15e5c:	e1a0200d 	mov	r2, sp
   15e60:	e58ce000 	str	lr, [ip]
   15e64:	e5d4400c 	ldrb	r4, [r4, #12]
   15e68:	eb00001a 	bl	15ed8 <SCSIHandleCmd>
   15e6c:	e59f302c 	ldr	r3, [pc, #44]	; 15ea0 <MSCBotBulkOut+0x244>
   15e70:	e3500000 	cmp	r0, #0	; 0x0
   15e74:	e5830000 	str	r0, [r3]
   15e78:	1affffa0 	bne	15d00 <MSCBotBulkOut+0xa4>
   15e7c:	eaffffd7 	b	15de0 <MSCBotBulkOut+0x184>
   15e80:	e28dd008 	add	sp, sp, #8	; 0x8
   15e84:	e8bd4070 	pop	{r4, r5, r6, lr}
   15e88:	e12fff1e 	bx	lr
   15e8c:	40000f68 	.word	0x40000f68
   15e90:	40000f38 	.word	0x40000f38
   15e94:	43425355 	.word	0x43425355
   15e98:	40000f30 	.word	0x40000f30
   15e9c:	40000f34 	.word	0x40000f34
   15ea0:	40000f6c 	.word	0x40000f6c

00015ea4 <MSCBotReset>:
   15ea4:	e59f3014 	ldr	r3, [pc, #20]	; 15ec0 <MSCBotReset+0x1c>
   15ea8:	e3a02000 	mov	r2, #0	; 0x0
   15eac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15eb0:	e5832000 	str	r2, [r3]
   15eb4:	eb000002 	bl	15ec4 <SCSIReset>
   15eb8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15ebc:	e12fff1e 	bx	lr
   15ec0:	40000f68 	.word	0x40000f68

00015ec4 <SCSIReset>:
   15ec4:	e59f3008 	ldr	r3, [pc, #8]	; 15ed4 <SCSIReset+0x10>
   15ec8:	e3a02000 	mov	r2, #0	; 0x0
   15ecc:	e5832000 	str	r2, [r3]
   15ed0:	e12fff1e 	bx	lr
   15ed4:	40000f70 	.word	0x40000f70

00015ed8 <SCSIHandleCmd>:
   15ed8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15edc:	e1a04000 	mov	r4, r0
   15ee0:	e24dd008 	sub	sp, sp, #8	; 0x8
   15ee4:	e3a08008 	mov	r8, #8	; 0x8
   15ee8:	e1a06001 	mov	r6, r1
   15eec:	e1a05002 	mov	r5, r2
   15ef0:	e1a0000d 	mov	r0, sp
   15ef4:	e1a02008 	mov	r2, r8
   15ef8:	e1a01004 	mov	r1, r4
   15efc:	e1a07003 	mov	r7, r3
   15f00:	eb000718 	bl	17b68 <memcpy>
   15f04:	e5dd2000 	ldrb	r2, [sp]
   15f08:	e3a03001 	mov	r3, #1	; 0x1
   15f0c:	e3520012 	cmp	r2, #18	; 0x12
   15f10:	e5873000 	str	r3, [r7]
   15f14:	0a000013 	beq	15f68 <SCSIHandleCmd+0x90>
   15f18:	8a000006 	bhi	15f38 <SCSIHandleCmd+0x60>
   15f1c:	e3520000 	cmp	r2, #0	; 0x0
   15f20:	059f00dc 	ldreq	r0, [pc, #220]	; 16004 <SCSIHandleCmd+0x12c>
   15f24:	05852000 	streq	r2, [r5]
   15f28:	0a000032 	beq	15ff8 <SCSIHandleCmd+0x120>
   15f2c:	e3520003 	cmp	r2, #3	; 0x3
   15f30:	1a000028 	bne	15fd8 <SCSIHandleCmd+0x100>
   15f34:	ea000006 	b	15f54 <SCSIHandleCmd+0x7c>
   15f38:	e3520028 	cmp	r2, #40	; 0x28
   15f3c:	0a000012 	beq	15f8c <SCSIHandleCmd+0xb4>
   15f40:	e352002a 	cmp	r2, #42	; 0x2a
   15f44:	0a000018 	beq	15fac <SCSIHandleCmd+0xd4>
   15f48:	e3520025 	cmp	r2, #37	; 0x25
   15f4c:	1a000021 	bne	15fd8 <SCSIHandleCmd+0x100>
   15f50:	ea00000a 	b	15f80 <SCSIHandleCmd+0xa8>
   15f54:	e5dd3004 	ldrb	r3, [sp, #4]
   15f58:	e59f00a4 	ldr	r0, [pc, #164]	; 16004 <SCSIHandleCmd+0x12c>
   15f5c:	e3530012 	cmp	r3, #18	; 0x12
   15f60:	23a03012 	movcs	r3, #18	; 0x12
   15f64:	ea000003 	b	15f78 <SCSIHandleCmd+0xa0>
   15f68:	e5dd3004 	ldrb	r3, [sp, #4]
   15f6c:	e59f0090 	ldr	r0, [pc, #144]	; 16004 <SCSIHandleCmd+0x12c>
   15f70:	e3530024 	cmp	r3, #36	; 0x24
   15f74:	23a03024 	movcs	r3, #36	; 0x24
   15f78:	e5853000 	str	r3, [r5]
   15f7c:	ea00001d 	b	15ff8 <SCSIHandleCmd+0x120>
   15f80:	e59f007c 	ldr	r0, [pc, #124]	; 16004 <SCSIHandleCmd+0x12c>
   15f84:	e5858000 	str	r8, [r5]
   15f88:	ea00001a 	b	15ff8 <SCSIHandleCmd+0x120>
   15f8c:	e356000a 	cmp	r6, #10	; 0xa
   15f90:	1a000017 	bne	15ff4 <SCSIHandleCmd+0x11c>
   15f94:	e5d43008 	ldrb	r3, [r4, #8]
   15f98:	e5d42007 	ldrb	r2, [r4, #7]
   15f9c:	e59f0060 	ldr	r0, [pc, #96]	; 16004 <SCSIHandleCmd+0x12c>
   15fa0:	e1833402 	orr	r3, r3, r2, lsl #8
   15fa4:	e1a03483 	lsl	r3, r3, #9
   15fa8:	eafffff2 	b	15f78 <SCSIHandleCmd+0xa0>
   15fac:	e356000a 	cmp	r6, #10	; 0xa
   15fb0:	1a00000f 	bne	15ff4 <SCSIHandleCmd+0x11c>
   15fb4:	e5d43008 	ldrb	r3, [r4, #8]
   15fb8:	e5d42007 	ldrb	r2, [r4, #7]
   15fbc:	e1833402 	orr	r3, r3, r2, lsl #8
   15fc0:	e1a03483 	lsl	r3, r3, #9
   15fc4:	e59f0038 	ldr	r0, [pc, #56]	; 16004 <SCSIHandleCmd+0x12c>
   15fc8:	e5853000 	str	r3, [r5]
   15fcc:	e3a03000 	mov	r3, #0	; 0x0
   15fd0:	e5873000 	str	r3, [r7]
   15fd4:	ea000007 	b	15ff8 <SCSIHandleCmd+0x120>
   15fd8:	e3a01000 	mov	r1, #0	; 0x0
   15fdc:	e59f3024 	ldr	r3, [pc, #36]	; 16008 <SCSIHandleCmd+0x130>
   15fe0:	e3a02a52 	mov	r2, #335872	; 0x52000
   15fe4:	e1a00001 	mov	r0, r1
   15fe8:	e5832000 	str	r2, [r3]
   15fec:	e5851000 	str	r1, [r5]
   15ff0:	ea000000 	b	15ff8 <SCSIHandleCmd+0x120>
   15ff4:	e3a00000 	mov	r0, #0	; 0x0
   15ff8:	e28dd008 	add	sp, sp, #8	; 0x8
   15ffc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   16000:	e12fff1e 	bx	lr
   16004:	40000f74 	.word	0x40000f74
   16008:	40000f70 	.word	0x40000f70

0001600c <SCSIHandleData>:
   1600c:	e92d4070 	push	{r4, r5, r6, lr}
   16010:	e1a04000 	mov	r4, r0
   16014:	e24dd00c 	sub	sp, sp, #12	; 0xc
   16018:	e1a05002 	mov	r5, r2
   1601c:	e1a0000d 	mov	r0, sp
   16020:	e1a01004 	mov	r1, r4
   16024:	e3a02008 	mov	r2, #8	; 0x8
   16028:	e1a06003 	mov	r6, r3
   1602c:	eb0006cd 	bl	17b68 <memcpy>
   16030:	e5dd3000 	ldrb	r3, [sp]
   16034:	e3530012 	cmp	r3, #18	; 0x12
   16038:	0a000022 	beq	160c8 <SCSIHandleData+0xbc>
   1603c:	8a000004 	bhi	16054 <SCSIHandleData+0x48>
   16040:	e3530000 	cmp	r3, #0	; 0x0
   16044:	0a000009 	beq	16070 <SCSIHandleData+0x64>
   16048:	e3530003 	cmp	r3, #3	; 0x3
   1604c:	1a000065 	bne	161e8 <SCSIHandleData+0x1dc>
   16050:	ea00000d 	b	1608c <SCSIHandleData+0x80>
   16054:	e3530028 	cmp	r3, #40	; 0x28
   16058:	0a000034 	beq	16130 <SCSIHandleData+0x124>
   1605c:	e353002a 	cmp	r3, #42	; 0x2a
   16060:	0a000046 	beq	16180 <SCSIHandleData+0x174>
   16064:	e3530025 	cmp	r3, #37	; 0x25
   16068:	1a00005e 	bne	161e8 <SCSIHandleData+0x1dc>
   1606c:	ea00001b 	b	160e0 <SCSIHandleData+0xd4>
   16070:	e59f3190 	ldr	r3, [pc, #400]	; 16208 <SCSIHandleData+0x1fc>
   16074:	e5932000 	ldr	r2, [r3]
   16078:	e59f318c 	ldr	r3, [pc, #396]	; 1620c <SCSIHandleData+0x200>
   1607c:	e3520000 	cmp	r2, #0	; 0x0
   16080:	01a0e003 	moveq	lr, r3
   16084:	13a0e000 	movne	lr, #0	; 0x0
   16088:	ea00005a 	b	161f8 <SCSIHandleData+0x1ec>
   1608c:	e59f117c 	ldr	r1, [pc, #380]	; 16210 <SCSIHandleData+0x204>
   16090:	e3a02012 	mov	r2, #18	; 0x12
   16094:	e1a00005 	mov	r0, r5
   16098:	eb0006b2 	bl	17b68 <memcpy>
   1609c:	e59f0164 	ldr	r0, [pc, #356]	; 16208 <SCSIHandleData+0x1fc>
   160a0:	e5903000 	ldr	r3, [r0]
   160a4:	e59fe160 	ldr	lr, [pc, #352]	; 1620c <SCSIHandleData+0x200>
   160a8:	e1a02823 	lsr	r2, r3, #16
   160ac:	e1a01423 	lsr	r1, r3, #8
   160b0:	e5c5300d 	strb	r3, [r5, #13]
   160b4:	e3a03000 	mov	r3, #0	; 0x0
   160b8:	e5c52002 	strb	r2, [r5, #2]
   160bc:	e5c5100c 	strb	r1, [r5, #12]
   160c0:	e5803000 	str	r3, [r0]
   160c4:	ea00004b 	b	161f8 <SCSIHandleData+0x1ec>
   160c8:	e1a00005 	mov	r0, r5
   160cc:	e59f1140 	ldr	r1, [pc, #320]	; 16214 <SCSIHandleData+0x208>
   160d0:	e3a02024 	mov	r2, #36	; 0x24
   160d4:	eb0006a3 	bl	17b68 <memcpy>
   160d8:	e59fe12c 	ldr	lr, [pc, #300]	; 1620c <SCSIHandleData+0x200>
   160dc:	ea000045 	b	161f8 <SCSIHandleData+0x1ec>
   160e0:	e28d0008 	add	r0, sp, #8	; 0x8
   160e4:	eb000088 	bl	1630c <BlockDevGetSize>
   160e8:	e59d3008 	ldr	r3, [sp, #8]
   160ec:	e2433001 	sub	r3, r3, #1	; 0x1
   160f0:	e1a004a3 	lsr	r0, r3, #9
   160f4:	e1a0c8a3 	lsr	ip, r3, #17
   160f8:	e59fe10c 	ldr	lr, [pc, #268]	; 1620c <SCSIHandleData+0x200>
   160fc:	e1a03ca3 	lsr	r3, r3, #25
   16100:	e3a02000 	mov	r2, #0	; 0x0
   16104:	e1a01c20 	lsr	r1, r0, #24
   16108:	e5c53001 	strb	r3, [r5, #1]
   1610c:	e3a03002 	mov	r3, #2	; 0x2
   16110:	e5c52007 	strb	r2, [r5, #7]
   16114:	e5c51000 	strb	r1, [r5]
   16118:	e5c5c002 	strb	ip, [r5, #2]
   1611c:	e5c50003 	strb	r0, [r5, #3]
   16120:	e5c53006 	strb	r3, [r5, #6]
   16124:	e5c52004 	strb	r2, [r5, #4]
   16128:	e5c52005 	strb	r2, [r5, #5]
   1612c:	ea000031 	b	161f8 <SCSIHandleData+0x1ec>
   16130:	e1a05b86 	lsl	r5, r6, #23
   16134:	e1a05ba5 	lsr	r5, r5, #23
   16138:	e3550000 	cmp	r5, #0	; 0x0
   1613c:	e5d42005 	ldrb	r2, [r4, #5]
   16140:	e5d43002 	ldrb	r3, [r4, #2]
   16144:	e5d40003 	ldrb	r0, [r4, #3]
   16148:	e5d41004 	ldrb	r1, [r4, #4]
   1614c:	1a000022 	bne	161dc <SCSIHandleData+0x1d0>
   16150:	e1a00800 	lsl	r0, r0, #16
   16154:	e1800c03 	orr	r0, r0, r3, lsl #24
   16158:	e1800002 	orr	r0, r0, r2
   1615c:	e1800401 	orr	r0, r0, r1, lsl #8
   16160:	e08004a6 	add	r0, r0, r6, lsr #9
   16164:	e59f10a0 	ldr	r1, [pc, #160]	; 1620c <SCSIHandleData+0x200>
   16168:	eb0000d2 	bl	164b8 <BlockDevRead>
   1616c:	e3500000 	cmp	r0, #0	; 0x0
   16170:	b1a0e005 	movlt	lr, r5
   16174:	b59f209c 	ldrlt	r2, [pc, #156]	; 16218 <SCSIHandleData+0x20c>
   16178:	ba000014 	blt	161d0 <SCSIHandleData+0x1c4>
   1617c:	ea000016 	b	161dc <SCSIHandleData+0x1d0>
   16180:	e2863040 	add	r3, r6, #64	; 0x40
   16184:	e1a05b83 	lsl	r5, r3, #23
   16188:	e1a05ba5 	lsr	r5, r5, #23
   1618c:	e3550000 	cmp	r5, #0	; 0x0
   16190:	e5d42005 	ldrb	r2, [r4, #5]
   16194:	e5d43002 	ldrb	r3, [r4, #2]
   16198:	e5d40003 	ldrb	r0, [r4, #3]
   1619c:	e5d41004 	ldrb	r1, [r4, #4]
   161a0:	1a00000d 	bne	161dc <SCSIHandleData+0x1d0>
   161a4:	e1a00800 	lsl	r0, r0, #16
   161a8:	e1800c03 	orr	r0, r0, r3, lsl #24
   161ac:	e1800002 	orr	r0, r0, r2
   161b0:	e1800401 	orr	r0, r0, r1, lsl #8
   161b4:	e08004a6 	add	r0, r0, r6, lsr #9
   161b8:	e59f104c 	ldr	r1, [pc, #76]	; 1620c <SCSIHandleData+0x200>
   161bc:	eb000039 	bl	162a8 <BlockDevWrite>
   161c0:	e3500000 	cmp	r0, #0	; 0x0
   161c4:	aa000004 	bge	161dc <SCSIHandleData+0x1d0>
   161c8:	e1a0e005 	mov	lr, r5
   161cc:	e3a02bc3 	mov	r2, #199680	; 0x30c00
   161d0:	e59f3030 	ldr	r3, [pc, #48]	; 16208 <SCSIHandleData+0x1fc>
   161d4:	e5832000 	str	r2, [r3]
   161d8:	ea000006 	b	161f8 <SCSIHandleData+0x1ec>
   161dc:	e59f3028 	ldr	r3, [pc, #40]	; 1620c <SCSIHandleData+0x200>
   161e0:	e085e003 	add	lr, r5, r3
   161e4:	ea000003 	b	161f8 <SCSIHandleData+0x1ec>
   161e8:	e59f3018 	ldr	r3, [pc, #24]	; 16208 <SCSIHandleData+0x1fc>
   161ec:	e3a02a52 	mov	r2, #335872	; 0x52000
   161f0:	e5832000 	str	r2, [r3]
   161f4:	e3a0e000 	mov	lr, #0	; 0x0
   161f8:	e1a0000e 	mov	r0, lr
   161fc:	e28dd00c 	add	sp, sp, #12	; 0xc
   16200:	e8bd4070 	pop	{r4, r5, r6, lr}
   16204:	e12fff1e 	bx	lr
   16208:	40000f70 	.word	0x40000f70
   1620c:	40000f74 	.word	0x40000f74
   16210:	0001909e 	.word	0x0001909e
   16214:	000190b0 	.word	0x000190b0
   16218:	00031100 	.word	0x00031100

0001621c <Resp8b>:
   1621c:	e92d4010 	push	{r4, lr}
   16220:	e3a04000 	mov	r4, #0	; 0x0
   16224:	e3a000ff 	mov	r0, #255	; 0xff
   16228:	eb000146 	bl	16748 <SPISend>
   1622c:	e2843001 	add	r3, r4, #1	; 0x1
   16230:	e35000ff 	cmp	r0, #255	; 0xff
   16234:	e20340ff 	and	r4, r3, #255	; 0xff
   16238:	1a000001 	bne	16244 <Resp8b+0x28>
   1623c:	e3540008 	cmp	r4, #8	; 0x8
   16240:	1afffff7 	bne	16224 <Resp8b+0x8>
   16244:	e8bd4010 	pop	{r4, lr}
   16248:	e12fff1e 	bx	lr

0001624c <Command>:
   1624c:	e92d4030 	push	{r4, r5, lr}
   16250:	e1a03001 	mov	r3, r1
   16254:	e24dd008 	sub	sp, sp, #8	; 0x8
   16258:	e3804040 	orr	r4, r0, #64	; 0x40
   1625c:	e3e05000 	mvn	r5, #0	; 0x0
   16260:	e1a02c21 	lsr	r2, r1, #24
   16264:	e1a0c821 	lsr	ip, r1, #16
   16268:	e1a0e421 	lsr	lr, r1, #8
   1626c:	e5cd3005 	strb	r3, [sp, #5]
   16270:	e1a0000d 	mov	r0, sp
   16274:	e3e0306a 	mvn	r3, #106	; 0x6a
   16278:	e3a01008 	mov	r1, #8	; 0x8
   1627c:	e5cd4001 	strb	r4, [sp, #1]
   16280:	e5cd2002 	strb	r2, [sp, #2]
   16284:	e5cdc003 	strb	ip, [sp, #3]
   16288:	e5cde004 	strb	lr, [sp, #4]
   1628c:	e5cd3006 	strb	r3, [sp, #6]
   16290:	e5cd5007 	strb	r5, [sp, #7]
   16294:	e5cd5000 	strb	r5, [sp]
   16298:	eb00013d 	bl	16794 <SPISendN>
   1629c:	e28dd008 	add	sp, sp, #8	; 0x8
   162a0:	e8bd4030 	pop	{r4, r5, lr}
   162a4:	e12fff1e 	bx	lr

000162a8 <BlockDevWrite>:
   162a8:	e1a00480 	lsl	r0, r0, #9
   162ac:	e92d4010 	push	{r4, lr}
   162b0:	e1a04001 	mov	r4, r1
   162b4:	e1a01000 	mov	r1, r0
   162b8:	e3a00018 	mov	r0, #24	; 0x18
   162bc:	ebffffe2 	bl	1624c <Command>
   162c0:	ebffffd5 	bl	1621c <Resp8b>
   162c4:	e3a000fe 	mov	r0, #254	; 0xfe
   162c8:	eb00011e 	bl	16748 <SPISend>
   162cc:	e3a01c02 	mov	r1, #512	; 0x200
   162d0:	e1a00004 	mov	r0, r4
   162d4:	eb00012e 	bl	16794 <SPISendN>
   162d8:	e3a000ff 	mov	r0, #255	; 0xff
   162dc:	eb000119 	bl	16748 <SPISend>
   162e0:	e3a000ff 	mov	r0, #255	; 0xff
   162e4:	eb000117 	bl	16748 <SPISend>
   162e8:	e3a000ff 	mov	r0, #255	; 0xff
   162ec:	eb000115 	bl	16748 <SPISend>
   162f0:	e3a000ff 	mov	r0, #255	; 0xff
   162f4:	eb000113 	bl	16748 <SPISend>
   162f8:	e35000ff 	cmp	r0, #255	; 0xff
   162fc:	1afffffb 	bne	162f0 <BlockDevWrite+0x48>
   16300:	e3a00000 	mov	r0, #0	; 0x0
   16304:	e8bd4010 	pop	{r4, lr}
   16308:	e12fff1e 	bx	lr

0001630c <BlockDevGetSize>:
   1630c:	e92d4030 	push	{r4, r5, lr}
   16310:	e3a01000 	mov	r1, #0	; 0x0
   16314:	e1a05000 	mov	r5, r0
   16318:	e24dd010 	sub	sp, sp, #16	; 0x10
   1631c:	e3a00009 	mov	r0, #9	; 0x9
   16320:	ebffffc9 	bl	1624c <Command>
   16324:	ebffffbc 	bl	1621c <Resp8b>
   16328:	e35000fe 	cmp	r0, #254	; 0xfe
   1632c:	1afffffc 	bne	16324 <BlockDevGetSize+0x18>
   16330:	e59f00bc 	ldr	r0, [pc, #188]	; 163f4 <BlockDevGetSize+0xe8>
   16334:	ebffede1 	bl	11ac0 <rprintf>
   16338:	e3a04000 	mov	r4, #0	; 0x0
   1633c:	e3a000ff 	mov	r0, #255	; 0xff
   16340:	eb000100 	bl	16748 <SPISend>
   16344:	e1a0300d 	mov	r3, sp
   16348:	e7c40003 	strb	r0, [r4, r3]
   1634c:	e1a01000 	mov	r1, r0
   16350:	e2844001 	add	r4, r4, #1	; 0x1
   16354:	e59f009c 	ldr	r0, [pc, #156]	; 163f8 <BlockDevGetSize+0xec>
   16358:	ebffedd8 	bl	11ac0 <rprintf>
   1635c:	e3540010 	cmp	r4, #16	; 0x10
   16360:	1afffff5 	bne	1633c <BlockDevGetSize+0x30>
   16364:	e59f0090 	ldr	r0, [pc, #144]	; 163fc <BlockDevGetSize+0xf0>
   16368:	ebffedd4 	bl	11ac0 <rprintf>
   1636c:	e3a000ff 	mov	r0, #255	; 0xff
   16370:	eb0000f4 	bl	16748 <SPISend>
   16374:	e3a000ff 	mov	r0, #255	; 0xff
   16378:	eb0000f2 	bl	16748 <SPISend>
   1637c:	e5dd1005 	ldrb	r1, [sp, #5]
   16380:	e3a00001 	mov	r0, #1	; 0x1
   16384:	e201100f 	and	r1, r1, #15	; 0xf
   16388:	e1a01110 	lsl	r1, r0, r1
   1638c:	e5dd2009 	ldrb	r2, [sp, #9]
   16390:	e5dd300a 	ldrb	r3, [sp, #10]
   16394:	e2022003 	and	r2, r2, #3	; 0x3
   16398:	e1a033a3 	lsr	r3, r3, #7
   1639c:	e0833082 	add	r3, r3, r2, lsl #1
   163a0:	e2833002 	add	r3, r3, #2	; 0x2
   163a4:	e1a00310 	lsl	r0, r0, r3
   163a8:	e5dd3007 	ldrb	r3, [sp, #7]
   163ac:	e5dd2006 	ldrb	r2, [sp, #6]
   163b0:	e5ddc008 	ldrb	ip, [sp, #8]
   163b4:	e1a03103 	lsl	r3, r3, #2
   163b8:	e083332c 	add	r3, r3, ip, lsr #6
   163bc:	e2022003 	and	r2, r2, #3	; 0x3
   163c0:	e0833502 	add	r3, r3, r2, lsl #10
   163c4:	e1a01801 	lsl	r1, r1, #16
   163c8:	e1a01821 	lsr	r1, r1, #16
   163cc:	e2833001 	add	r3, r3, #1	; 0x1
   163d0:	e0030391 	mul	r3, r1, r3
   163d4:	e1a00800 	lsl	r0, r0, #16
   163d8:	e1a00820 	lsr	r0, r0, #16
   163dc:	e0030390 	mul	r3, r0, r3
   163e0:	e3a00000 	mov	r0, #0	; 0x0
   163e4:	e5853000 	str	r3, [r5]
   163e8:	e28dd010 	add	sp, sp, #16	; 0x10
   163ec:	e8bd4030 	pop	{r4, r5, lr}
   163f0:	e12fff1e 	bx	lr
   163f4:	00019304 	.word	0x00019304
   163f8:	0001930c 	.word	0x0001930c
   163fc:	000193e4 	.word	0x000193e4

00016400 <Resp8bError>:
   16400:	e20010ff 	and	r1, r0, #255	; 0xff
   16404:	e3510008 	cmp	r1, #8	; 0x8
   16408:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1640c:	0a000015 	beq	16468 <Resp8bError+0x68>
   16410:	8a000006 	bhi	16430 <Resp8bError+0x30>
   16414:	e3510002 	cmp	r1, #2	; 0x2
   16418:	0a000016 	beq	16478 <Resp8bError+0x78>
   1641c:	e3510004 	cmp	r1, #4	; 0x4
   16420:	0a000012 	beq	16470 <Resp8bError+0x70>
   16424:	e3510001 	cmp	r1, #1	; 0x1
   16428:	1a000016 	bne	16488 <Resp8bError+0x88>
   1642c:	ea000013 	b	16480 <Resp8bError+0x80>
   16430:	e3510020 	cmp	r1, #32	; 0x20
   16434:	0a000006 	beq	16454 <Resp8bError+0x54>
   16438:	e3510040 	cmp	r1, #64	; 0x40
   1643c:	0a000002 	beq	1644c <Resp8bError+0x4c>
   16440:	e3510010 	cmp	r1, #16	; 0x10
   16444:	1a00000f 	bne	16488 <Resp8bError+0x88>
   16448:	ea000004 	b	16460 <Resp8bError+0x60>
   1644c:	e59f0044 	ldr	r0, [pc, #68]	; 16498 <Resp8bError+0x98>
   16450:	ea000000 	b	16458 <Resp8bError+0x58>
   16454:	e59f0040 	ldr	r0, [pc, #64]	; 1649c <Resp8bError+0x9c>
   16458:	ebffed98 	bl	11ac0 <rprintf>
   1645c:	ea00000b 	b	16490 <Resp8bError+0x90>
   16460:	e59f0038 	ldr	r0, [pc, #56]	; 164a0 <Resp8bError+0xa0>
   16464:	eafffffb 	b	16458 <Resp8bError+0x58>
   16468:	e59f0034 	ldr	r0, [pc, #52]	; 164a4 <Resp8bError+0xa4>
   1646c:	eafffff9 	b	16458 <Resp8bError+0x58>
   16470:	e59f0030 	ldr	r0, [pc, #48]	; 164a8 <Resp8bError+0xa8>
   16474:	eafffff7 	b	16458 <Resp8bError+0x58>
   16478:	e59f002c 	ldr	r0, [pc, #44]	; 164ac <Resp8bError+0xac>
   1647c:	eafffff5 	b	16458 <Resp8bError+0x58>
   16480:	e59f0028 	ldr	r0, [pc, #40]	; 164b0 <Resp8bError+0xb0>
   16484:	eafffff3 	b	16458 <Resp8bError+0x58>
   16488:	e59f0024 	ldr	r0, [pc, #36]	; 164b4 <Resp8bError+0xb4>
   1648c:	ebffed8b 	bl	11ac0 <rprintf>
   16490:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16494:	e12fff1e 	bx	lr
   16498:	00019314 	.word	0x00019314
   1649c:	00019330 	.word	0x00019330
   164a0:	00019348 	.word	0x00019348
   164a4:	00019368 	.word	0x00019368
   164a8:	00019378 	.word	0x00019378
   164ac:	0001938c 	.word	0x0001938c
   164b0:	000193b4 	.word	0x000193b4
   164b4:	000193b8 	.word	0x000193b8

000164b8 <BlockDevRead>:
   164b8:	e1a00480 	lsl	r0, r0, #9
   164bc:	e92d4070 	push	{r4, r5, r6, lr}
   164c0:	e1a06001 	mov	r6, r1
   164c4:	e1a01000 	mov	r1, r0
   164c8:	e3a00011 	mov	r0, #17	; 0x11
   164cc:	ebffff5e 	bl	1624c <Command>
   164d0:	ebffff51 	bl	1621c <Resp8b>
   164d4:	e59f506c 	ldr	r5, [pc, #108]	; 16548 <BlockDevRead+0x90>
   164d8:	e1a04000 	mov	r4, r0
   164dc:	ebffff4e 	bl	1621c <Resp8b>
   164e0:	e2453001 	sub	r3, r5, #1	; 0x1
   164e4:	e35000ff 	cmp	r0, #255	; 0xff
   164e8:	e1a03803 	lsl	r3, r3, #16
   164ec:	1a000003 	bne	16500 <BlockDevRead+0x48>
   164f0:	e3730801 	cmn	r3, #65536	; 0x10000
   164f4:	e1a05823 	lsr	r5, r3, #16
   164f8:	0a000005 	beq	16514 <BlockDevRead+0x5c>
   164fc:	eafffff6 	b	164dc <BlockDevRead+0x24>
   16500:	e35000fe 	cmp	r0, #254	; 0xfe
   16504:	03540000 	cmpeq	r4, #0	; 0x0
   16508:	03a04000 	moveq	r4, #0	; 0x0
   1650c:	13a04001 	movne	r4, #1	; 0x1
   16510:	0a000002 	beq	16520 <BlockDevRead+0x68>
   16514:	ebffffb9 	bl	16400 <Resp8bError>
   16518:	e3e00000 	mvn	r0, #0	; 0x0
   1651c:	ea000007 	b	16540 <BlockDevRead+0x88>
   16520:	e3a01c02 	mov	r1, #512	; 0x200
   16524:	e1a00006 	mov	r0, r6
   16528:	eb0000b0 	bl	167f0 <SPIRecvN>
   1652c:	e3a000ff 	mov	r0, #255	; 0xff
   16530:	eb000084 	bl	16748 <SPISend>
   16534:	e3a000ff 	mov	r0, #255	; 0xff
   16538:	eb000082 	bl	16748 <SPISend>
   1653c:	e1a00004 	mov	r0, r4
   16540:	e8bd4070 	pop	{r4, r5, r6, lr}
   16544:	e12fff1e 	bx	lr
   16548:	0000ffff 	.word	0x0000ffff

0001654c <BlockDevInit>:
   1654c:	e92d4030 	push	{r4, r5, lr}
   16550:	eb0000bf 	bl	16854 <SPIInit>
   16554:	e3a04064 	mov	r4, #100	; 0x64
   16558:	e3a00000 	mov	r0, #0	; 0x0
   1655c:	e1a01000 	mov	r1, r0
   16560:	ebffff39 	bl	1624c <Command>
   16564:	ebffff2c 	bl	1621c <Resp8b>
   16568:	e3500001 	cmp	r0, #1	; 0x1
   1656c:	e2444001 	sub	r4, r4, #1	; 0x1
   16570:	0a00000a 	beq	165a0 <BlockDevInit+0x54>
   16574:	e3740001 	cmn	r4, #1	; 0x1
   16578:	1afffff6 	bne	16558 <BlockDevInit+0xc>
   1657c:	e35000ff 	cmp	r0, #255	; 0xff
   16580:	1a000003 	bne	16594 <BlockDevInit+0x48>
   16584:	e59f016c 	ldr	r0, [pc, #364]	; 166f8 <BlockDevInit+0x1ac>
   16588:	ebffed4c 	bl	11ac0 <rprintf>
   1658c:	e1a00004 	mov	r0, r4
   16590:	ea000056 	b	166f0 <BlockDevInit+0x1a4>
   16594:	ebffff99 	bl	16400 <Resp8bError>
   16598:	e59f015c 	ldr	r0, [pc, #348]	; 166fc <BlockDevInit+0x1b0>
   1659c:	ea000051 	b	166e8 <BlockDevInit+0x19c>
   165a0:	e3a04c7d 	mov	r4, #32000	; 0x7d00
   165a4:	e3a01000 	mov	r1, #0	; 0x0
   165a8:	e3a00001 	mov	r0, #1	; 0x1
   165ac:	ebffff26 	bl	1624c <Command>
   165b0:	ebffff19 	bl	1621c <Resp8b>
   165b4:	e2505000 	subs	r5, r0, #0	; 0x0
   165b8:	e2444001 	sub	r4, r4, #1	; 0x1
   165bc:	0a000008 	beq	165e4 <BlockDevInit+0x98>
   165c0:	ebffff8e 	bl	16400 <Resp8bError>
   165c4:	e3550001 	cmp	r5, #1	; 0x1
   165c8:	1a000001 	bne	165d4 <BlockDevInit+0x88>
   165cc:	e3740001 	cmn	r4, #1	; 0x1
   165d0:	1afffff3 	bne	165a4 <BlockDevInit+0x58>
   165d4:	e1a00005 	mov	r0, r5
   165d8:	ebffff88 	bl	16400 <Resp8bError>
   165dc:	e3e00002 	mvn	r0, #2	; 0x2
   165e0:	ea000042 	b	166f0 <BlockDevInit+0x1a4>
   165e4:	e3a00008 	mov	r0, #8	; 0x8
   165e8:	eb00004f 	bl	1672c <SPISetSpeed>
   165ec:	e1a01005 	mov	r1, r5
   165f0:	e3a0000d 	mov	r0, #13	; 0xd
   165f4:	ebffff14 	bl	1624c <Command>
   165f8:	ebffff07 	bl	1621c <Resp8b>
   165fc:	e1a04c00 	lsl	r4, r0, #24
   16600:	e3a000ff 	mov	r0, #255	; 0xff
   16604:	eb00004f 	bl	16748 <SPISend>
   16608:	e1a04824 	lsr	r4, r4, #16
   1660c:	e1844000 	orr	r4, r4, r0
   16610:	e1a04804 	lsl	r4, r4, #16
   16614:	e1a01824 	lsr	r1, r4, #16
   16618:	e3510008 	cmp	r1, #8	; 0x8
   1661c:	0a00001a 	beq	1668c <BlockDevInit+0x140>
   16620:	8a000007 	bhi	16644 <BlockDevInit+0xf8>
   16624:	e3510001 	cmp	r1, #1	; 0x1
   16628:	0a000010 	beq	16670 <BlockDevInit+0x124>
   1662c:	3a000028 	bcc	166d4 <BlockDevInit+0x188>
   16630:	e3510002 	cmp	r1, #2	; 0x2
   16634:	0a00000f 	beq	16678 <BlockDevInit+0x12c>
   16638:	e3510004 	cmp	r1, #4	; 0x4
   1663c:	1a00001c 	bne	166b4 <BlockDevInit+0x168>
   16640:	ea00000f 	b	16684 <BlockDevInit+0x138>
   16644:	e3510020 	cmp	r1, #32	; 0x20
   16648:	0a000013 	beq	1669c <BlockDevInit+0x150>
   1664c:	8a000002 	bhi	1665c <BlockDevInit+0x110>
   16650:	e3510010 	cmp	r1, #16	; 0x10
   16654:	1a000016 	bne	166b4 <BlockDevInit+0x168>
   16658:	ea00000d 	b	16694 <BlockDevInit+0x148>
   1665c:	e3510040 	cmp	r1, #64	; 0x40
   16660:	0a00000f 	beq	166a4 <BlockDevInit+0x158>
   16664:	e3510080 	cmp	r1, #128	; 0x80
   16668:	1a000011 	bne	166b4 <BlockDevInit+0x168>
   1666c:	ea00000e 	b	166ac <BlockDevInit+0x160>
   16670:	e59f0088 	ldr	r0, [pc, #136]	; 16700 <BlockDevInit+0x1b4>
   16674:	ea000000 	b	1667c <BlockDevInit+0x130>
   16678:	e59f0084 	ldr	r0, [pc, #132]	; 16704 <BlockDevInit+0x1b8>
   1667c:	ebffed0f 	bl	11ac0 <rprintf>
   16680:	ea000017 	b	166e4 <BlockDevInit+0x198>
   16684:	e59f007c 	ldr	r0, [pc, #124]	; 16708 <BlockDevInit+0x1bc>
   16688:	eafffffb 	b	1667c <BlockDevInit+0x130>
   1668c:	e59f0078 	ldr	r0, [pc, #120]	; 1670c <BlockDevInit+0x1c0>
   16690:	eafffff9 	b	1667c <BlockDevInit+0x130>
   16694:	e59f0074 	ldr	r0, [pc, #116]	; 16710 <BlockDevInit+0x1c4>
   16698:	eafffff7 	b	1667c <BlockDevInit+0x130>
   1669c:	e59f0070 	ldr	r0, [pc, #112]	; 16714 <BlockDevInit+0x1c8>
   166a0:	eafffff5 	b	1667c <BlockDevInit+0x130>
   166a4:	e59f006c 	ldr	r0, [pc, #108]	; 16718 <BlockDevInit+0x1cc>
   166a8:	eafffff3 	b	1667c <BlockDevInit+0x130>
   166ac:	e59f0068 	ldr	r0, [pc, #104]	; 1671c <BlockDevInit+0x1d0>
   166b0:	eafffff1 	b	1667c <BlockDevInit+0x130>
   166b4:	e35100ff 	cmp	r1, #255	; 0xff
   166b8:	9a000002 	bls	166c8 <BlockDevInit+0x17c>
   166bc:	e1a00421 	lsr	r0, r1, #8
   166c0:	ebffff4e 	bl	16400 <Resp8bError>
   166c4:	ea000006 	b	166e4 <BlockDevInit+0x198>
   166c8:	e59f0050 	ldr	r0, [pc, #80]	; 16720 <BlockDevInit+0x1d4>
   166cc:	ebffecfb 	bl	11ac0 <rprintf>
   166d0:	ea000003 	b	166e4 <BlockDevInit+0x198>
   166d4:	e59f0048 	ldr	r0, [pc, #72]	; 16724 <BlockDevInit+0x1d8>
   166d8:	ebffecf8 	bl	11ac0 <rprintf>
   166dc:	e1a00005 	mov	r0, r5
   166e0:	ea000002 	b	166f0 <BlockDevInit+0x1a4>
   166e4:	e59f003c 	ldr	r0, [pc, #60]	; 16728 <BlockDevInit+0x1dc>
   166e8:	ebffecf4 	bl	11ac0 <rprintf>
   166ec:	e3e00001 	mvn	r0, #1	; 0x1
   166f0:	e8bd4030 	pop	{r4, r5, lr}
   166f4:	e12fff1e 	bx	lr
   166f8:	000193e8 	.word	0x000193e8
   166fc:	000193f4 	.word	0x000193f4
   16700:	00019400 	.word	0x00019400
   16704:	00019414 	.word	0x00019414
   16708:	0001943c 	.word	0x0001943c
   1670c:	00019468 	.word	0x00019468
   16710:	0001948c 	.word	0x0001948c
   16714:	000194cc 	.word	0x000194cc
   16718:	000194e8 	.word	0x000194e8
   1671c:	00019514 	.word	0x00019514
   16720:	00019534 	.word	0x00019534
   16724:	00019564 	.word	0x00019564
   16728:	00019578 	.word	0x00019578

0001672c <SPISetSpeed>:
   1672c:	e20000fe 	and	r0, r0, #254	; 0xfe
   16730:	e3500007 	cmp	r0, #7	; 0x7
   16734:	e59f3008 	ldr	r3, [pc, #8]	; 16744 <SPISetSpeed+0x18>
   16738:	93a00008 	movls	r0, #8	; 0x8
   1673c:	e5c3000c 	strb	r0, [r3, #12]
   16740:	e12fff1e 	bx	lr
   16744:	e0020000 	.word	0xe0020000

00016748 <SPISend>:
   16748:	e59f203c 	ldr	r2, [pc, #60]	; 1678c <SPISend+0x44>
   1674c:	e592300c 	ldr	r3, [r2, #12]
   16750:	e3833080 	orr	r3, r3, #128	; 0x80
   16754:	e582300c 	str	r3, [r2, #12]
   16758:	e59f3030 	ldr	r3, [pc, #48]	; 16790 <SPISend+0x48>
   1675c:	e20000ff 	and	r0, r0, #255	; 0xff
   16760:	e5c30008 	strb	r0, [r3, #8]
   16764:	e59f2024 	ldr	r2, [pc, #36]	; 16790 <SPISend+0x48>
   16768:	e5d23004 	ldrb	r3, [r2, #4]
   1676c:	e3130080 	tst	r3, #128	; 0x80
   16770:	0afffffb 	beq	16764 <SPISend+0x1c>
   16774:	e59f3010 	ldr	r3, [pc, #16]	; 1678c <SPISend+0x44>
   16778:	e5d20008 	ldrb	r0, [r2, #8]
   1677c:	e5932004 	ldr	r2, [r3, #4]
   16780:	e3822080 	orr	r2, r2, #128	; 0x80
   16784:	e5832004 	str	r2, [r3, #4]
   16788:	e12fff1e 	bx	lr
   1678c:	e0028000 	.word	0xe0028000
   16790:	e0020000 	.word	0xe0020000

00016794 <SPISendN>:
   16794:	e59f204c 	ldr	r2, [pc, #76]	; 167e8 <SPISendN+0x54>
   16798:	e592300c 	ldr	r3, [r2, #12]
   1679c:	e3a0c000 	mov	ip, #0	; 0x0
   167a0:	e3833080 	orr	r3, r3, #128	; 0x80
   167a4:	e582300c 	str	r3, [r2, #12]
   167a8:	ea000007 	b	167cc <SPISendN+0x38>
   167ac:	e7d0200c 	ldrb	r2, [r0, ip]
   167b0:	e59f3034 	ldr	r3, [pc, #52]	; 167ec <SPISendN+0x58>
   167b4:	e5c32008 	strb	r2, [r3, #8]
   167b8:	e59f302c 	ldr	r3, [pc, #44]	; 167ec <SPISendN+0x58>
   167bc:	e5d33004 	ldrb	r3, [r3, #4]
   167c0:	e3130080 	tst	r3, #128	; 0x80
   167c4:	0afffffb 	beq	167b8 <SPISendN+0x24>
   167c8:	e28cc001 	add	ip, ip, #1	; 0x1
   167cc:	e15c0001 	cmp	ip, r1
   167d0:	bafffff5 	blt	167ac <SPISendN+0x18>
   167d4:	e59f200c 	ldr	r2, [pc, #12]	; 167e8 <SPISendN+0x54>
   167d8:	e5923004 	ldr	r3, [r2, #4]
   167dc:	e3833080 	orr	r3, r3, #128	; 0x80
   167e0:	e5823004 	str	r3, [r2, #4]
   167e4:	e12fff1e 	bx	lr
   167e8:	e0028000 	.word	0xe0028000
   167ec:	e0020000 	.word	0xe0020000

000167f0 <SPIRecvN>:
   167f0:	e59f2054 	ldr	r2, [pc, #84]	; 1684c <SPIRecvN+0x5c>
   167f4:	e592300c 	ldr	r3, [r2, #12]
   167f8:	e3a0c000 	mov	ip, #0	; 0x0
   167fc:	e3833080 	orr	r3, r3, #128	; 0x80
   16800:	e582300c 	str	r3, [r2, #12]
   16804:	ea000009 	b	16830 <SPIRecvN+0x40>
   16808:	e59f3040 	ldr	r3, [pc, #64]	; 16850 <SPIRecvN+0x60>
   1680c:	e3e02000 	mvn	r2, #0	; 0x0
   16810:	e5c32008 	strb	r2, [r3, #8]
   16814:	e59f2034 	ldr	r2, [pc, #52]	; 16850 <SPIRecvN+0x60>
   16818:	e5d23004 	ldrb	r3, [r2, #4]
   1681c:	e3130080 	tst	r3, #128	; 0x80
   16820:	0afffffb 	beq	16814 <SPIRecvN+0x24>
   16824:	e5d23008 	ldrb	r3, [r2, #8]
   16828:	e7c0300c 	strb	r3, [r0, ip]
   1682c:	e28cc001 	add	ip, ip, #1	; 0x1
   16830:	e15c0001 	cmp	ip, r1
   16834:	bafffff3 	blt	16808 <SPIRecvN+0x18>
   16838:	e59f200c 	ldr	r2, [pc, #12]	; 1684c <SPIRecvN+0x5c>
   1683c:	e5923004 	ldr	r3, [r2, #4]
   16840:	e3833080 	orr	r3, r3, #128	; 0x80
   16844:	e5823004 	str	r3, [r2, #4]
   16848:	e12fff1e 	bx	lr
   1684c:	e0028000 	.word	0xe0028000
   16850:	e0020000 	.word	0xe0020000

00016854 <SPIInit>:
   16854:	e59f00a8 	ldr	r0, [pc, #168]	; 16904 <SPIInit+0xb0>
   16858:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1685c:	ebffec97 	bl	11ac0 <rprintf>
   16860:	e59f10a0 	ldr	r1, [pc, #160]	; 16908 <SPIInit+0xb4>
   16864:	e3a00000 	mov	r0, #0	; 0x0
   16868:	e5810014 	str	r0, [r1, #20]
   1686c:	e59f2098 	ldr	r2, [pc, #152]	; 1690c <SPIInit+0xb8>
   16870:	e5923008 	ldr	r3, [r2, #8]
   16874:	e3833050 	orr	r3, r3, #80	; 0x50
   16878:	e5823008 	str	r3, [r2, #8]
   1687c:	e5923008 	ldr	r3, [r2, #8]
   16880:	e3833080 	orr	r3, r3, #128	; 0x80
   16884:	e5823008 	str	r3, [r2, #8]
   16888:	e5923008 	ldr	r3, [r2, #8]
   1688c:	e3c33020 	bic	r3, r3, #32	; 0x20
   16890:	e5823008 	str	r3, [r2, #8]
   16894:	e5913000 	ldr	r3, [r1]
   16898:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
   1689c:	e5813000 	str	r3, [r1]
   168a0:	e5913000 	ldr	r3, [r1]
   168a4:	e3833c15 	orr	r3, r3, #5376	; 0x1500
   168a8:	e5813000 	str	r3, [r1]
   168ac:	e5923004 	ldr	r3, [r2, #4]
   168b0:	e3833080 	orr	r3, r3, #128	; 0x80
   168b4:	e5823004 	str	r3, [r2, #4]
   168b8:	e2411903 	sub	r1, r1, #49152	; 0xc000
   168bc:	e3a03020 	mov	r3, #32	; 0x20
   168c0:	e5c13000 	strb	r3, [r1]
   168c4:	e3e03001 	mvn	r3, #1	; 0x1
   168c8:	e5c1300c 	strb	r3, [r1, #12]
   168cc:	e59f303c 	ldr	r3, [pc, #60]	; 16910 <SPIInit+0xbc>
   168d0:	e3e02000 	mvn	r2, #0	; 0x0
   168d4:	e5c32008 	strb	r2, [r3, #8]
   168d8:	e59f2030 	ldr	r2, [pc, #48]	; 16910 <SPIInit+0xbc>
   168dc:	e5d23004 	ldrb	r3, [r2, #4]
   168e0:	e3130080 	tst	r3, #128	; 0x80
   168e4:	0afffffb 	beq	168d8 <SPIInit+0x84>
   168e8:	e2803001 	add	r3, r0, #1	; 0x1
   168ec:	e20300ff 	and	r0, r3, #255	; 0xff
   168f0:	e3500015 	cmp	r0, #21	; 0x15
   168f4:	e5d23008 	ldrb	r3, [r2, #8]
   168f8:	1afffff3 	bne	168cc <SPIInit+0x78>
   168fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16900:	e12fff1e 	bx	lr
   16904:	000195ac 	.word	0x000195ac
   16908:	e002c000 	.word	0xe002c000
   1690c:	e0028000 	.word	0xe0028000
   16910:	e0020000 	.word	0xe0020000

00016914 <HandleUsbReset>:
   16914:	e12fff1e 	bx	lr

00016918 <USBInit>:
   16918:	e92d4010 	push	{r4, lr}
   1691c:	e59f4054 	ldr	r4, [pc, #84]	; 16978 <USBInit+0x60>
   16920:	eb00013d 	bl	16e1c <USBHwInit>
   16924:	e59f0050 	ldr	r0, [pc, #80]	; 1697c <USBInit+0x64>
   16928:	eb000074 	bl	16b00 <USBHwRegisterDevIntHandler>
   1692c:	e1a01004 	mov	r1, r4
   16930:	e3a00000 	mov	r0, #0	; 0x0
   16934:	eb00005e 	bl	16ab4 <USBHwRegisterEPIntHandler>
   16938:	e1a01004 	mov	r1, r4
   1693c:	e3a00080 	mov	r0, #128	; 0x80
   16940:	eb00005b 	bl	16ab4 <USBHwRegisterEPIntHandler>
   16944:	e3a00000 	mov	r0, #0	; 0x0
   16948:	e3a01040 	mov	r1, #64	; 0x40
   1694c:	eb000041 	bl	16a58 <USBHwEPConfig>
   16950:	e3a00080 	mov	r0, #128	; 0x80
   16954:	e3a01040 	mov	r1, #64	; 0x40
   16958:	eb00003e 	bl	16a58 <USBHwEPConfig>
   1695c:	e3a00000 	mov	r0, #0	; 0x0
   16960:	e59f1018 	ldr	r1, [pc, #24]	; 16980 <USBInit+0x68>
   16964:	e59f2018 	ldr	r2, [pc, #24]	; 16984 <USBInit+0x6c>
   16968:	eb00016c 	bl	16f20 <USBRegisterRequestHandler>
   1696c:	e3a00001 	mov	r0, #1	; 0x1
   16970:	e8bd4010 	pop	{r4, lr}
   16974:	e12fff1e 	bx	lr
   16978:	00016fa4 	.word	0x00016fa4
   1697c:	00016914 	.word	0x00016914
   16980:	00017194 	.word	0x00017194
   16984:	40001174 	.word	0x40001174

00016988 <USBHwCmd>:
   16988:	e1a00800 	lsl	r0, r0, #16
   1698c:	e59f202c 	ldr	r2, [pc, #44]	; 169c0 <USBHwCmd+0x38>
   16990:	e20008ff 	and	r0, r0, #16711680	; 0xff0000
   16994:	e3800c05 	orr	r0, r0, #1280	; 0x500
   16998:	e3a03030 	mov	r3, #48	; 0x30
   1699c:	e5823008 	str	r3, [r2, #8]
   169a0:	e5820010 	str	r0, [r2, #16]
   169a4:	e59f2014 	ldr	r2, [pc, #20]	; 169c0 <USBHwCmd+0x38>
   169a8:	e5923000 	ldr	r3, [r2]
   169ac:	e2033010 	and	r3, r3, #16	; 0x10
   169b0:	e3530010 	cmp	r3, #16	; 0x10
   169b4:	1afffffa 	bne	169a4 <USBHwCmd+0x1c>
   169b8:	e5823008 	str	r3, [r2, #8]
   169bc:	e12fff1e 	bx	lr
   169c0:	e0090000 	.word	0xe0090000

000169c4 <USBHwCmdWrite>:
   169c4:	e92d4010 	push	{r4, lr}
   169c8:	e1a04801 	lsl	r4, r1, #16
   169cc:	e20000ff 	and	r0, r0, #255	; 0xff
   169d0:	e1a04824 	lsr	r4, r4, #16
   169d4:	ebffffeb 	bl	16988 <USBHwCmd>
   169d8:	e1a04804 	lsl	r4, r4, #16
   169dc:	e59f3024 	ldr	r3, [pc, #36]	; 16a08 <USBHwCmdWrite+0x44>
   169e0:	e3844c01 	orr	r4, r4, #256	; 0x100
   169e4:	e5834010 	str	r4, [r3, #16]
   169e8:	e59f2018 	ldr	r2, [pc, #24]	; 16a08 <USBHwCmdWrite+0x44>
   169ec:	e5923000 	ldr	r3, [r2]
   169f0:	e2033010 	and	r3, r3, #16	; 0x10
   169f4:	e3530010 	cmp	r3, #16	; 0x10
   169f8:	1afffffa 	bne	169e8 <USBHwCmdWrite+0x24>
   169fc:	e5823008 	str	r3, [r2, #8]
   16a00:	e8bd4010 	pop	{r4, lr}
   16a04:	e12fff1e 	bx	lr
   16a08:	e0090000 	.word	0xe0090000

00016a0c <USBHwCmdRead>:
   16a0c:	e92d4010 	push	{r4, lr}
   16a10:	e20040ff 	and	r4, r0, #255	; 0xff
   16a14:	e1a00004 	mov	r0, r4
   16a18:	ebffffda 	bl	16988 <USBHwCmd>
   16a1c:	e1a04804 	lsl	r4, r4, #16
   16a20:	e59f302c 	ldr	r3, [pc, #44]	; 16a54 <USBHwCmdRead+0x48>
   16a24:	e3844c02 	orr	r4, r4, #512	; 0x200
   16a28:	e5834010 	str	r4, [r3, #16]
   16a2c:	e59f2020 	ldr	r2, [pc, #32]	; 16a54 <USBHwCmdRead+0x48>
   16a30:	e5923000 	ldr	r3, [r2]
   16a34:	e2033020 	and	r3, r3, #32	; 0x20
   16a38:	e3530020 	cmp	r3, #32	; 0x20
   16a3c:	1afffffa 	bne	16a2c <USBHwCmdRead+0x20>
   16a40:	e5823008 	str	r3, [r2, #8]
   16a44:	e5920014 	ldr	r0, [r2, #20]
   16a48:	e20000ff 	and	r0, r0, #255	; 0xff
   16a4c:	e8bd4010 	pop	{r4, lr}
   16a50:	e12fff1e 	bx	lr
   16a54:	e0090000 	.word	0xe0090000

00016a58 <USBHwEPConfig>:
   16a58:	e59fc050 	ldr	ip, [pc, #80]	; 16ab0 <USBHwEPConfig+0x58>
   16a5c:	e2003080 	and	r3, r0, #128	; 0x80
   16a60:	e59c2044 	ldr	r2, [ip, #68]
   16a64:	e1a033c3 	asr	r3, r3, #7
   16a68:	e200000f 	and	r0, r0, #15	; 0xf
   16a6c:	e1830080 	orr	r0, r3, r0, lsl #1
   16a70:	e3a03001 	mov	r3, #1	; 0x1
   16a74:	e1822013 	orr	r2, r2, r3, lsl r0
   16a78:	e1a01801 	lsl	r1, r1, #16
   16a7c:	e1a01821 	lsr	r1, r1, #16
   16a80:	e58c2044 	str	r2, [ip, #68]
   16a84:	e58c0048 	str	r0, [ip, #72]
   16a88:	e58c104c 	str	r1, [ip, #76]
   16a8c:	e59f201c 	ldr	r2, [pc, #28]	; 16ab0 <USBHwEPConfig+0x58>
   16a90:	e5923000 	ldr	r3, [r2]
   16a94:	e2033c01 	and	r3, r3, #256	; 0x100
   16a98:	e3530c01 	cmp	r3, #256	; 0x100
   16a9c:	1afffffa 	bne	16a8c <USBHwEPConfig+0x34>
   16aa0:	e3800040 	orr	r0, r0, #64	; 0x40
   16aa4:	e3a01000 	mov	r1, #0	; 0x0
   16aa8:	e5823008 	str	r3, [r2, #8]
   16aac:	eaffffc4 	b	169c4 <USBHwCmdWrite>
   16ab0:	e0090000 	.word	0xe0090000

00016ab4 <USBHwRegisterEPIntHandler>:
   16ab4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16ab8:	e59fe038 	ldr	lr, [pc, #56]	; 16af8 <USBHwRegisterEPIntHandler+0x44>
   16abc:	e2003080 	and	r3, r0, #128	; 0x80
   16ac0:	e59ec034 	ldr	ip, [lr, #52]
   16ac4:	e200000f 	and	r0, r0, #15	; 0xf
   16ac8:	e1a033c3 	asr	r3, r3, #7
   16acc:	e1833080 	orr	r3, r3, r0, lsl #1
   16ad0:	e3a02001 	mov	r2, #1	; 0x1
   16ad4:	e18cc312 	orr	ip, ip, r2, lsl r3
   16ad8:	e58ec034 	str	ip, [lr, #52]
   16adc:	e59e3004 	ldr	r3, [lr, #4]
   16ae0:	e59f2014 	ldr	r2, [pc, #20]	; 16afc <USBHwRegisterEPIntHandler+0x48>
   16ae4:	e3833004 	orr	r3, r3, #4	; 0x4
   16ae8:	e7821100 	str	r1, [r2, r0, lsl #2]
   16aec:	e58e3004 	str	r3, [lr, #4]
   16af0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16af4:	e12fff1e 	bx	lr
   16af8:	e0090000 	.word	0xe0090000
   16afc:	40001184 	.word	0x40001184

00016b00 <USBHwRegisterDevIntHandler>:
   16b00:	e59f3014 	ldr	r3, [pc, #20]	; 16b1c <USBHwRegisterDevIntHandler+0x1c>
   16b04:	e5932004 	ldr	r2, [r3, #4]
   16b08:	e59f1010 	ldr	r1, [pc, #16]	; 16b20 <USBHwRegisterDevIntHandler+0x20>
   16b0c:	e3822008 	orr	r2, r2, #8	; 0x8
   16b10:	e5810000 	str	r0, [r1]
   16b14:	e5832004 	str	r2, [r3, #4]
   16b18:	e12fff1e 	bx	lr
   16b1c:	e0090000 	.word	0xe0090000
   16b20:	40001180 	.word	0x40001180

00016b24 <USBHwRegisterFrameHandler>:
   16b24:	e59f3014 	ldr	r3, [pc, #20]	; 16b40 <USBHwRegisterFrameHandler+0x1c>
   16b28:	e5932004 	ldr	r2, [r3, #4]
   16b2c:	e59f1010 	ldr	r1, [pc, #16]	; 16b44 <USBHwRegisterFrameHandler+0x20>
   16b30:	e3822001 	orr	r2, r2, #1	; 0x1
   16b34:	e5810000 	str	r0, [r1]
   16b38:	e5832004 	str	r2, [r3, #4]
   16b3c:	e12fff1e 	bx	lr
   16b40:	e0090000 	.word	0xe0090000
   16b44:	4000117c 	.word	0x4000117c

00016b48 <USBHwSetAddress>:
   16b48:	e20010ff 	and	r1, r0, #255	; 0xff
   16b4c:	e3811080 	orr	r1, r1, #128	; 0x80
   16b50:	e3a000d0 	mov	r0, #208	; 0xd0
   16b54:	eaffff9a 	b	169c4 <USBHwCmdWrite>

00016b58 <USBHwConnect>:
   16b58:	e2501000 	subs	r1, r0, #0	; 0x0
   16b5c:	13a01001 	movne	r1, #1	; 0x1
   16b60:	e3a000fe 	mov	r0, #254	; 0xfe
   16b64:	eaffff96 	b	169c4 <USBHwCmdWrite>

00016b68 <USBHwNakIntEnable>:
   16b68:	e20010ff 	and	r1, r0, #255	; 0xff
   16b6c:	e3a000f3 	mov	r0, #243	; 0xf3
   16b70:	eaffff93 	b	169c4 <USBHwCmdWrite>

00016b74 <USBHwEPGetStatus>:
   16b74:	e1a03000 	mov	r3, r0
   16b78:	e2000080 	and	r0, r0, #128	; 0x80
   16b7c:	e203300f 	and	r3, r3, #15	; 0xf
   16b80:	e1a003c0 	asr	r0, r0, #7
   16b84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16b88:	e1800083 	orr	r0, r0, r3, lsl #1
   16b8c:	ebffff9e 	bl	16a0c <USBHwCmdRead>
   16b90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16b94:	e12fff1e 	bx	lr

00016b98 <USBHwEPStall>:
   16b98:	e2003080 	and	r3, r0, #128	; 0x80
   16b9c:	e1a033c3 	asr	r3, r3, #7
   16ba0:	e200000f 	and	r0, r0, #15	; 0xf
   16ba4:	e1833080 	orr	r3, r3, r0, lsl #1
   16ba8:	e2511000 	subs	r1, r1, #0	; 0x0
   16bac:	13a01001 	movne	r1, #1	; 0x1
   16bb0:	e3830040 	orr	r0, r3, #64	; 0x40
   16bb4:	eaffff82 	b	169c4 <USBHwCmdWrite>

00016bb8 <USBHwEPWrite>:
   16bb8:	e92d4030 	push	{r4, r5, lr}
   16bbc:	e200400f 	and	r4, r0, #15	; 0xf
   16bc0:	e59fc074 	ldr	ip, [pc, #116]	; 16c3c <USBHwEPWrite+0x84>
   16bc4:	e1a03104 	lsl	r3, r4, #2
   16bc8:	e3833002 	orr	r3, r3, #2	; 0x2
   16bcc:	e1a05002 	mov	r5, r2
   16bd0:	e1a0e001 	mov	lr, r1
   16bd4:	e20000ff 	and	r0, r0, #255	; 0xff
   16bd8:	e58c3028 	str	r3, [ip, #40]
   16bdc:	e58c2024 	str	r2, [ip, #36]
   16be0:	ea000008 	b	16c08 <USBHwEPWrite+0x50>
   16be4:	e55e3002 	ldrb	r3, [lr, #-2]
   16be8:	e55e2001 	ldrb	r2, [lr, #-1]
   16bec:	e55e1004 	ldrb	r1, [lr, #-4]
   16bf0:	e1a03803 	lsl	r3, r3, #16
   16bf4:	e1833c02 	orr	r3, r3, r2, lsl #24
   16bf8:	e55e2003 	ldrb	r2, [lr, #-3]
   16bfc:	e1833001 	orr	r3, r3, r1
   16c00:	e1833402 	orr	r3, r3, r2, lsl #8
   16c04:	e58c301c 	str	r3, [ip, #28]
   16c08:	e59fc02c 	ldr	ip, [pc, #44]	; 16c3c <USBHwEPWrite+0x84>
   16c0c:	e59c3028 	ldr	r3, [ip, #40]
   16c10:	e3130002 	tst	r3, #2	; 0x2
   16c14:	e28ee004 	add	lr, lr, #4	; 0x4
   16c18:	1afffff1 	bne	16be4 <USBHwEPWrite+0x2c>
   16c1c:	e1a003a0 	lsr	r0, r0, #7
   16c20:	e1800084 	orr	r0, r0, r4, lsl #1
   16c24:	ebffff57 	bl	16988 <USBHwCmd>
   16c28:	e3a000fa 	mov	r0, #250	; 0xfa
   16c2c:	ebffff55 	bl	16988 <USBHwCmd>
   16c30:	e1a00005 	mov	r0, r5
   16c34:	e8bd4030 	pop	{r4, r5, lr}
   16c38:	e12fff1e 	bx	lr
   16c3c:	e0090000 	.word	0xe0090000

00016c40 <USBHwEPRead>:
   16c40:	e92d4010 	push	{r4, lr}
   16c44:	e200e00f 	and	lr, r0, #15	; 0xf
   16c48:	e1a0310e 	lsl	r3, lr, #2
   16c4c:	e59fc08c 	ldr	ip, [pc, #140]	; 16ce0 <USBHwEPRead+0xa0>
   16c50:	e3833001 	orr	r3, r3, #1	; 0x1
   16c54:	e58c3028 	str	r3, [ip, #40]
   16c58:	e20000ff 	and	r0, r0, #255	; 0xff
   16c5c:	e59f307c 	ldr	r3, [pc, #124]	; 16ce0 <USBHwEPRead+0xa0>
   16c60:	e5933020 	ldr	r3, [r3, #32]
   16c64:	e3130b02 	tst	r3, #2048	; 0x800
   16c68:	0afffffb 	beq	16c5c <USBHwEPRead+0x1c>
   16c6c:	e3130b01 	tst	r3, #1024	; 0x400
   16c70:	03e04000 	mvneq	r4, #0	; 0x0
   16c74:	0a000016 	beq	16cd4 <USBHwEPRead+0x94>
   16c78:	e1a0cb03 	lsl	ip, r3, #22
   16c7c:	e3a04000 	mov	r4, #0	; 0x0
   16c80:	e1a0cb2c 	lsr	ip, ip, #22
   16c84:	e1a03004 	mov	r3, r4
   16c88:	ea000007 	b	16cac <USBHwEPRead+0x6c>
   16c8c:	e3140003 	tst	r4, #3	; 0x3
   16c90:	059f3048 	ldreq	r3, [pc, #72]	; 16ce0 <USBHwEPRead+0xa0>
   16c94:	05933018 	ldreq	r3, [r3, #24]
   16c98:	e3510000 	cmp	r1, #0	; 0x0
   16c9c:	11540002 	cmpne	r4, r2
   16ca0:	b7c43001 	strblt	r3, [r4, r1]
   16ca4:	e1a03423 	lsr	r3, r3, #8
   16ca8:	e2844001 	add	r4, r4, #1	; 0x1
   16cac:	e154000c 	cmp	r4, ip
   16cb0:	1afffff5 	bne	16c8c <USBHwEPRead+0x4c>
   16cb4:	e59f3024 	ldr	r3, [pc, #36]	; 16ce0 <USBHwEPRead+0xa0>
   16cb8:	e3a02000 	mov	r2, #0	; 0x0
   16cbc:	e1a003a0 	lsr	r0, r0, #7
   16cc0:	e180008e 	orr	r0, r0, lr, lsl #1
   16cc4:	e5832028 	str	r2, [r3, #40]
   16cc8:	ebffff2e 	bl	16988 <USBHwCmd>
   16ccc:	e3a000f2 	mov	r0, #242	; 0xf2
   16cd0:	ebffff2c 	bl	16988 <USBHwCmd>
   16cd4:	e1a00004 	mov	r0, r4
   16cd8:	e8bd4010 	pop	{r4, lr}
   16cdc:	e12fff1e 	bx	lr
   16ce0:	e0090000 	.word	0xe0090000

00016ce4 <USBHwConfigDevice>:
   16ce4:	e2501000 	subs	r1, r0, #0	; 0x0
   16ce8:	13a01001 	movne	r1, #1	; 0x1
   16cec:	e3a000d8 	mov	r0, #216	; 0xd8
   16cf0:	eaffff33 	b	169c4 <USBHwCmdWrite>

00016cf4 <USBHwISR>:
   16cf4:	e59f2110 	ldr	r2, [pc, #272]	; 16e0c <USBHwISR+0x118>
   16cf8:	e92d4030 	push	{r4, r5, lr}
   16cfc:	e5925000 	ldr	r5, [r2]
   16d00:	e3150001 	tst	r5, #1	; 0x1
   16d04:	0a00000b 	beq	16d38 <USBHwISR+0x44>
   16d08:	e59f3100 	ldr	r3, [pc, #256]	; 16e10 <USBHwISR+0x11c>
   16d0c:	e5934000 	ldr	r4, [r3]
   16d10:	e3a03001 	mov	r3, #1	; 0x1
   16d14:	e3540000 	cmp	r4, #0	; 0x0
   16d18:	e5823008 	str	r3, [r2, #8]
   16d1c:	0a000005 	beq	16d38 <USBHwISR+0x44>
   16d20:	e3a000f5 	mov	r0, #245	; 0xf5
   16d24:	ebffff38 	bl	16a0c <USBHwCmdRead>
   16d28:	e1a00800 	lsl	r0, r0, #16
   16d2c:	e1a00820 	lsr	r0, r0, #16
   16d30:	e1a0e00f 	mov	lr, pc
   16d34:	e12fff14 	bx	r4
   16d38:	e3150008 	tst	r5, #8	; 0x8
   16d3c:	0a00000c 	beq	16d74 <USBHwISR+0x80>
   16d40:	e59f30c4 	ldr	r3, [pc, #196]	; 16e0c <USBHwISR+0x118>
   16d44:	e3a02008 	mov	r2, #8	; 0x8
   16d48:	e3a000fe 	mov	r0, #254	; 0xfe
   16d4c:	e5832008 	str	r2, [r3, #8]
   16d50:	ebffff2d 	bl	16a0c <USBHwCmdRead>
   16d54:	e310001a 	tst	r0, #26	; 0x1a
   16d58:	0a000005 	beq	16d74 <USBHwISR+0x80>
   16d5c:	e59f30b0 	ldr	r3, [pc, #176]	; 16e14 <USBHwISR+0x120>
   16d60:	e5933000 	ldr	r3, [r3]
   16d64:	e3530000 	cmp	r3, #0	; 0x0
   16d68:	12000015 	andne	r0, r0, #21	; 0x15
   16d6c:	11a0e00f 	movne	lr, pc
   16d70:	112fff13 	bxne	r3
   16d74:	e3150004 	tst	r5, #4	; 0x4
   16d78:	0a000021 	beq	16e04 <USBHwISR+0x110>
   16d7c:	e59f3088 	ldr	r3, [pc, #136]	; 16e0c <USBHwISR+0x118>
   16d80:	e3a02004 	mov	r2, #4	; 0x4
   16d84:	e5832008 	str	r2, [r3, #8]
   16d88:	e3a04000 	mov	r4, #0	; 0x0
   16d8c:	e3a03001 	mov	r3, #1	; 0x1
   16d90:	e1a02413 	lsl	r2, r3, r4
   16d94:	e59f1070 	ldr	r1, [pc, #112]	; 16e0c <USBHwISR+0x118>
   16d98:	e5913030 	ldr	r3, [r1, #48]
   16d9c:	e1130002 	tst	r3, r2
   16da0:	0a000014 	beq	16df8 <USBHwISR+0x104>
   16da4:	e5812038 	str	r2, [r1, #56]
   16da8:	e59f105c 	ldr	r1, [pc, #92]	; 16e0c <USBHwISR+0x118>
   16dac:	e5913000 	ldr	r3, [r1]
   16db0:	e2030020 	and	r0, r3, #32	; 0x20
   16db4:	e3500020 	cmp	r0, #32	; 0x20
   16db8:	1afffffa 	bne	16da8 <USBHwISR+0xb4>
   16dbc:	e0843fa4 	add	r3, r4, r4, lsr #31
   16dc0:	e59f2050 	ldr	r2, [pc, #80]	; 16e18 <USBHwISR+0x124>
   16dc4:	e1a030c3 	asr	r3, r3, #1
   16dc8:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   16dcc:	e5810008 	str	r0, [r1, #8]
   16dd0:	e3530000 	cmp	r3, #0	; 0x0
   16dd4:	e5911014 	ldr	r1, [r1, #20]
   16dd8:	0a000006 	beq	16df8 <USBHwISR+0x104>
   16ddc:	e1a000c4 	asr	r0, r4, #1
   16de0:	e200000f 	and	r0, r0, #15	; 0xf
   16de4:	e1800384 	orr	r0, r0, r4, lsl #7
   16de8:	e200008f 	and	r0, r0, #143	; 0x8f
   16dec:	e201101f 	and	r1, r1, #31	; 0x1f
   16df0:	e1a0e00f 	mov	lr, pc
   16df4:	e12fff13 	bx	r3
   16df8:	e2844001 	add	r4, r4, #1	; 0x1
   16dfc:	e3540020 	cmp	r4, #32	; 0x20
   16e00:	1affffe1 	bne	16d8c <USBHwISR+0x98>
   16e04:	e8bd4030 	pop	{r4, r5, lr}
   16e08:	e12fff1e 	bx	lr
   16e0c:	e0090000 	.word	0xe0090000
   16e10:	4000117c 	.word	0x4000117c
   16e14:	40001180 	.word	0x40001180
   16e18:	40001184 	.word	0x40001184

00016e1c <USBHwInit>:
   16e1c:	e59f20b0 	ldr	r2, [pc, #176]	; 16ed4 <USBHwInit+0xb8>
   16e20:	e5923004 	ldr	r3, [r2, #4]
   16e24:	e3c33903 	bic	r3, r3, #49152	; 0xc000
   16e28:	e3833901 	orr	r3, r3, #16384	; 0x4000
   16e2c:	e5823004 	str	r3, [r2, #4]
   16e30:	e5923004 	ldr	r3, [r2, #4]
   16e34:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   16e38:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   16e3c:	e5823004 	str	r3, [r2, #4]
   16e40:	e282281d 	add	r2, r2, #1900544	; 0x1d0000
   16e44:	e59230c4 	ldr	r3, [r2, #196]
   16e48:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   16e4c:	e58230c4 	str	r3, [r2, #196]
   16e50:	e3a03001 	mov	r3, #1	; 0x1
   16e54:	e58230a0 	str	r3, [r2, #160]
   16e58:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16e5c:	e2833022 	add	r3, r3, #34	; 0x22
   16e60:	e58230a4 	str	r3, [r2, #164]
   16e64:	e2833087 	add	r3, r3, #135	; 0x87
   16e68:	e58230ac 	str	r3, [r2, #172]
   16e6c:	e3a03055 	mov	r3, #85	; 0x55
   16e70:	e58230ac 	str	r3, [r2, #172]
   16e74:	e59fe05c 	ldr	lr, [pc, #92]	; 16ed8 <USBHwInit+0xbc>
   16e78:	e59e30a8 	ldr	r3, [lr, #168]
   16e7c:	e3130b01 	tst	r3, #1024	; 0x400
   16e80:	0afffffb 	beq	16e74 <USBHwInit+0x58>
   16e84:	e3a03003 	mov	r3, #3	; 0x3
   16e88:	e58e30a0 	str	r3, [lr, #160]
   16e8c:	e59f2048 	ldr	r2, [pc, #72]	; 16edc <USBHwInit+0xc0>
   16e90:	e28330a7 	add	r3, r3, #167	; 0xa7
   16e94:	e58e30ac 	str	r3, [lr, #172]
   16e98:	e3a01000 	mov	r1, #0	; 0x0
   16e9c:	e3e0c000 	mvn	ip, #0	; 0x0
   16ea0:	e3a03055 	mov	r3, #85	; 0x55
   16ea4:	e58e30ac 	str	r3, [lr, #172]
   16ea8:	e1a00001 	mov	r0, r1
   16eac:	e5821004 	str	r1, [r2, #4]
   16eb0:	e582c008 	str	ip, [r2, #8]
   16eb4:	e582102c 	str	r1, [r2, #44]
   16eb8:	e5821034 	str	r1, [r2, #52]
   16ebc:	e582c038 	str	ip, [r2, #56]
   16ec0:	e5821040 	str	r1, [r2, #64]
   16ec4:	ebffff27 	bl	16b68 <USBHwNakIntEnable>
   16ec8:	e3a00001 	mov	r0, #1	; 0x1
   16ecc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16ed0:	e12fff1e 	bx	lr
   16ed4:	e002c000 	.word	0xe002c000
   16ed8:	e01fc000 	.word	0xe01fc000
   16edc:	e0090000 	.word	0xe0090000

00016ee0 <_HandleRequest>:
   16ee0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16ee4:	e5d03000 	ldrb	r3, [r0]
   16ee8:	e59fc02c 	ldr	ip, [pc, #44]	; 16f1c <_HandleRequest+0x3c>
   16eec:	e1a032a3 	lsr	r3, r3, #5
   16ef0:	e2033003 	and	r3, r3, #3	; 0x3
   16ef4:	e79c3103 	ldr	r3, [ip, r3, lsl #2]
   16ef8:	e3530000 	cmp	r3, #0	; 0x0
   16efc:	e1a0c003 	mov	ip, r3
   16f00:	0a000002 	beq	16f10 <_HandleRequest+0x30>
   16f04:	e1a0e00f 	mov	lr, pc
   16f08:	e12fff13 	bx	r3
   16f0c:	e1a0c000 	mov	ip, r0
   16f10:	e1a0000c 	mov	r0, ip
   16f14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16f18:	e12fff1e 	bx	lr
   16f1c:	400011c4 	.word	0x400011c4

00016f20 <USBRegisterRequestHandler>:
   16f20:	e59f300c 	ldr	r3, [pc, #12]	; 16f34 <USBRegisterRequestHandler+0x14>
   16f24:	e7832100 	str	r2, [r3, r0, lsl #2]
   16f28:	e59f3008 	ldr	r3, [pc, #8]	; 16f38 <USBRegisterRequestHandler+0x18>
   16f2c:	e7831100 	str	r1, [r3, r0, lsl #2]
   16f30:	e12fff1e 	bx	lr
   16f34:	400011d4 	.word	0x400011d4
   16f38:	400011c4 	.word	0x400011c4

00016f3c <StallControlPipe>:
   16f3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16f40:	e3a00080 	mov	r0, #128	; 0x80
   16f44:	e3a01001 	mov	r1, #1	; 0x1
   16f48:	ebffff12 	bl	16b98 <USBHwEPStall>
   16f4c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16f50:	e12fff1e 	bx	lr

00016f54 <DataIn>:
   16f54:	e92d4070 	push	{r4, r5, r6, lr}
   16f58:	e59f603c 	ldr	r6, [pc, #60]	; 16f9c <DataIn+0x48>
   16f5c:	e5964000 	ldr	r4, [r6]
   16f60:	e59f5038 	ldr	r5, [pc, #56]	; 16fa0 <DataIn+0x4c>
   16f64:	e3540040 	cmp	r4, #64	; 0x40
   16f68:	a3a04040 	movge	r4, #64	; 0x40
   16f6c:	e1a02004 	mov	r2, r4
   16f70:	e3a00080 	mov	r0, #128	; 0x80
   16f74:	e5951000 	ldr	r1, [r5]
   16f78:	ebffff0e 	bl	16bb8 <USBHwEPWrite>
   16f7c:	e5953000 	ldr	r3, [r5]
   16f80:	e5962000 	ldr	r2, [r6]
   16f84:	e0833004 	add	r3, r3, r4
   16f88:	e0642002 	rsb	r2, r4, r2
   16f8c:	e5853000 	str	r3, [r5]
   16f90:	e5862000 	str	r2, [r6]
   16f94:	e8bd4070 	pop	{r4, r5, r6, lr}
   16f98:	e12fff1e 	bx	lr
   16f9c:	400011f0 	.word	0x400011f0
   16fa0:	400011ec 	.word	0x400011ec

00016fa4 <USBHandleControlTransfer>:
   16fa4:	e21000ff 	ands	r0, r0, #255	; 0xff
   16fa8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16fac:	e20170ff 	and	r7, r1, #255	; 0xff
   16fb0:	1a000043 	bne	170c4 <USBHandleControlTransfer+0x120>
   16fb4:	e3110004 	tst	r1, #4	; 0x4
   16fb8:	e59f611c 	ldr	r6, [pc, #284]	; 170dc <USBHandleControlTransfer+0x138>
   16fbc:	0a00001d 	beq	17038 <USBHandleControlTransfer+0x94>
   16fc0:	e59f5118 	ldr	r5, [pc, #280]	; 170e0 <USBHandleControlTransfer+0x13c>
   16fc4:	e3a02008 	mov	r2, #8	; 0x8
   16fc8:	e1a01005 	mov	r1, r5
   16fcc:	ebffff1b 	bl	16c40 <USBHwEPRead>
   16fd0:	e5d50000 	ldrb	r0, [r5]
   16fd4:	e59f2108 	ldr	r2, [pc, #264]	; 170e4 <USBHandleControlTransfer+0x140>
   16fd8:	e1a032a0 	lsr	r3, r0, #5
   16fdc:	e1d510b6 	ldrh	r1, [r5, #6]
   16fe0:	e2033003 	and	r3, r3, #3	; 0x3
   16fe4:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   16fe8:	e59f40f8 	ldr	r4, [pc, #248]	; 170e8 <USBHandleControlTransfer+0x144>
   16fec:	e59f20f8 	ldr	r2, [pc, #248]	; 170ec <USBHandleControlTransfer+0x148>
   16ff0:	e3510000 	cmp	r1, #0	; 0x0
   16ff4:	e5823000 	str	r3, [r2]
   16ff8:	e5861000 	str	r1, [r6]
   16ffc:	e5841000 	str	r1, [r4]
   17000:	0a000001 	beq	1700c <USBHandleControlTransfer+0x68>
   17004:	e1b003a0 	lsrs	r0, r0, #7
   17008:	0a000031 	beq	170d4 <USBHandleControlTransfer+0x130>
   1700c:	e1a00005 	mov	r0, r5
   17010:	e1a01004 	mov	r1, r4
   17014:	ebffffb1 	bl	16ee0 <_HandleRequest>
   17018:	e3500000 	cmp	r0, #0	; 0x0
   1701c:	0a000021 	beq	170a8 <USBHandleControlTransfer+0x104>
   17020:	e1d520b6 	ldrh	r2, [r5, #6]
   17024:	e5943000 	ldr	r3, [r4]
   17028:	e1520003 	cmp	r2, r3
   1702c:	d5862000 	strle	r2, [r6]
   17030:	c5863000 	strgt	r3, [r6]
   17034:	ea000024 	b	170cc <USBHandleControlTransfer+0x128>
   17038:	e5962000 	ldr	r2, [r6]
   1703c:	e3520000 	cmp	r2, #0	; 0x0
   17040:	da00001b 	ble	170b4 <USBHandleControlTransfer+0x110>
   17044:	e59f40a0 	ldr	r4, [pc, #160]	; 170ec <USBHandleControlTransfer+0x148>
   17048:	e5941000 	ldr	r1, [r4]
   1704c:	ebfffefb 	bl	16c40 <USBHwEPRead>
   17050:	e3500000 	cmp	r0, #0	; 0x0
   17054:	ba000013 	blt	170a8 <USBHandleControlTransfer+0x104>
   17058:	e5962000 	ldr	r2, [r6]
   1705c:	e5943000 	ldr	r3, [r4]
   17060:	e0602002 	rsb	r2, r0, r2
   17064:	e0833000 	add	r3, r3, r0
   17068:	e3520000 	cmp	r2, #0	; 0x0
   1706c:	e5843000 	str	r3, [r4]
   17070:	e5862000 	str	r2, [r6]
   17074:	1a000016 	bne	170d4 <USBHandleControlTransfer+0x130>
   17078:	e59f0060 	ldr	r0, [pc, #96]	; 170e0 <USBHandleControlTransfer+0x13c>
   1707c:	e5d03000 	ldrb	r3, [r0]
   17080:	e59f205c 	ldr	r2, [pc, #92]	; 170e4 <USBHandleControlTransfer+0x140>
   17084:	e1a032a3 	lsr	r3, r3, #5
   17088:	e2033003 	and	r3, r3, #3	; 0x3
   1708c:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   17090:	e59f1050 	ldr	r1, [pc, #80]	; 170e8 <USBHandleControlTransfer+0x144>
   17094:	e1a02004 	mov	r2, r4
   17098:	e5843000 	str	r3, [r4]
   1709c:	ebffff8f 	bl	16ee0 <_HandleRequest>
   170a0:	e3500000 	cmp	r0, #0	; 0x0
   170a4:	1a000008 	bne	170cc <USBHandleControlTransfer+0x128>
   170a8:	e1a00007 	mov	r0, r7
   170ac:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   170b0:	eaffffa1 	b	16f3c <StallControlPipe>
   170b4:	e1a01000 	mov	r1, r0
   170b8:	e1a02000 	mov	r2, r0
   170bc:	ebfffedf 	bl	16c40 <USBHwEPRead>
   170c0:	ea000003 	b	170d4 <USBHandleControlTransfer+0x130>
   170c4:	e3500080 	cmp	r0, #128	; 0x80
   170c8:	1a000001 	bne	170d4 <USBHandleControlTransfer+0x130>
   170cc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   170d0:	eaffff9f 	b	16f54 <DataIn>
   170d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   170d8:	e12fff1e 	bx	lr
   170dc:	400011f0 	.word	0x400011f0
   170e0:	400011e4 	.word	0x400011e4
   170e4:	400011d4 	.word	0x400011d4
   170e8:	400011f4 	.word	0x400011f4
   170ec:	400011ec 	.word	0x400011ec

000170f0 <USBRegisterDescriptors>:
   170f0:	e59f3004 	ldr	r3, [pc, #4]	; 170fc <USBRegisterDescriptors+0xc>
   170f4:	e5830000 	str	r0, [r3]
   170f8:	e12fff1e 	bx	lr
   170fc:	40001200 	.word	0x40001200

00017100 <USBGetDescriptor>:
   17100:	e92d4030 	push	{r4, r5, lr}
   17104:	e59f1074 	ldr	r1, [pc, #116]	; 17180 <USBGetDescriptor+0x80>
   17108:	e1a00800 	lsl	r0, r0, #16
   1710c:	e591c000 	ldr	ip, [r1]
   17110:	e1a01820 	lsr	r1, r0, #16
   17114:	e1a05002 	mov	r5, r2
   17118:	e1a04003 	mov	r4, r3
   1711c:	e1a0ec20 	lsr	lr, r0, #24
   17120:	e20110ff 	and	r1, r1, #255	; 0xff
   17124:	e3a02000 	mov	r2, #0	; 0x0
   17128:	ea00000f 	b	1716c <USBGetDescriptor+0x6c>
   1712c:	e5dc3001 	ldrb	r3, [ip, #1]
   17130:	e153000e 	cmp	r3, lr
   17134:	1a00000b 	bne	17168 <USBGetDescriptor+0x68>
   17138:	e1520001 	cmp	r2, r1
   1713c:	e2822001 	add	r2, r2, #1	; 0x1
   17140:	1a000008 	bne	17168 <USBGetDescriptor+0x68>
   17144:	e584c000 	str	ip, [r4]
   17148:	e35e0002 	cmp	lr, #2	; 0x2
   1714c:	05dc2003 	ldrbeq	r2, [ip, #3]
   17150:	05dc3002 	ldrbeq	r3, [ip, #2]
   17154:	15dc3000 	ldrbne	r3, [ip]
   17158:	01833402 	orreq	r3, r3, r2, lsl #8
   1715c:	e3a00001 	mov	r0, #1	; 0x1
   17160:	e5853000 	str	r3, [r5]
   17164:	ea000003 	b	17178 <USBGetDescriptor+0x78>
   17168:	e08cc000 	add	ip, ip, r0
   1716c:	e5dc0000 	ldrb	r0, [ip]
   17170:	e3500000 	cmp	r0, #0	; 0x0
   17174:	1affffec 	bne	1712c <USBGetDescriptor+0x2c>
   17178:	e8bd4030 	pop	{r4, r5, lr}
   1717c:	e12fff1e 	bx	lr
   17180:	40001200 	.word	0x40001200

00017184 <USBRegisterCustomReqHandler>:
   17184:	e59f3004 	ldr	r3, [pc, #4]	; 17190 <USBRegisterCustomReqHandler+0xc>
   17188:	e5830000 	str	r0, [r3]
   1718c:	e12fff1e 	bx	lr
   17190:	400011f8 	.word	0x400011f8

00017194 <USBHandleStandardRequest>:
   17194:	e59f3264 	ldr	r3, [pc, #612]	; 17400 <USBHandleStandardRequest+0x26c>
   17198:	e5933000 	ldr	r3, [r3]
   1719c:	e3530000 	cmp	r3, #0	; 0x0
   171a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   171a4:	e1a05000 	mov	r5, r0
   171a8:	e1a08001 	mov	r8, r1
   171ac:	e1a07002 	mov	r7, r2
   171b0:	0a000003 	beq	171c4 <USBHandleStandardRequest+0x30>
   171b4:	e1a0e00f 	mov	lr, pc
   171b8:	e12fff13 	bx	r3
   171bc:	e3500000 	cmp	r0, #0	; 0x0
   171c0:	1a00001e 	bne	17240 <USBHandleStandardRequest+0xac>
   171c4:	e5d53000 	ldrb	r3, [r5]
   171c8:	e203401f 	and	r4, r3, #31	; 0x1f
   171cc:	e3540001 	cmp	r4, #1	; 0x1
   171d0:	0a00004e 	beq	17310 <USBHandleStandardRequest+0x17c>
   171d4:	e3540002 	cmp	r4, #2	; 0x2
   171d8:	0a000064 	beq	17370 <USBHandleStandardRequest+0x1dc>
   171dc:	e3540000 	cmp	r4, #0	; 0x0
   171e0:	1a000082 	bne	173f0 <USBHandleStandardRequest+0x25c>
   171e4:	e5d53001 	ldrb	r3, [r5, #1]
   171e8:	e5971000 	ldr	r1, [r7]
   171ec:	e3530009 	cmp	r3, #9	; 0x9
   171f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   171f4:	ea00007d 	b	173f0 <USBHandleStandardRequest+0x25c>
   171f8:	00017220 	.word	0x00017220
   171fc:	000173f0 	.word	0x000173f0
   17200:	000173f0 	.word	0x000173f0
   17204:	000173f0 	.word	0x000173f0
   17208:	000173f0 	.word	0x000173f0
   1720c:	00017238 	.word	0x00017238
   17210:	00017248 	.word	0x00017248
   17214:	000173f0 	.word	0x000173f0
   17218:	00017260 	.word	0x00017260
   1721c:	0001727c 	.word	0x0001727c
   17220:	e3a03000 	mov	r3, #0	; 0x0
   17224:	e5c13001 	strb	r3, [r1, #1]
   17228:	e5c13000 	strb	r3, [r1]
   1722c:	e3a0c001 	mov	ip, #1	; 0x1
   17230:	e2833002 	add	r3, r3, #2	; 0x2
   17234:	ea00000e 	b	17274 <USBHandleStandardRequest+0xe0>
   17238:	e5d50002 	ldrb	r0, [r5, #2]
   1723c:	ebfffe41 	bl	16b48 <USBHwSetAddress>
   17240:	e3a0c001 	mov	ip, #1	; 0x1
   17244:	ea00006a 	b	173f4 <USBHandleStandardRequest+0x260>
   17248:	e1d510b4 	ldrh	r1, [r5, #4]
   1724c:	e1d500b2 	ldrh	r0, [r5, #2]
   17250:	e1a02008 	mov	r2, r8
   17254:	e1a03007 	mov	r3, r7
   17258:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1725c:	eaffffa7 	b	17100 <USBGetDescriptor>
   17260:	e59f319c 	ldr	r3, [pc, #412]	; 17404 <USBHandleStandardRequest+0x270>
   17264:	e5d32000 	ldrb	r2, [r3]
   17268:	e3a03001 	mov	r3, #1	; 0x1
   1726c:	e5c12000 	strb	r2, [r1]
   17270:	e1a0c003 	mov	ip, r3
   17274:	e5883000 	str	r3, [r8]
   17278:	ea00005d 	b	173f4 <USBHandleStandardRequest+0x260>
   1727c:	e5d56002 	ldrb	r6, [r5, #2]
   17280:	e3560000 	cmp	r6, #0	; 0x0
   17284:	01a00006 	moveq	r0, r6
   17288:	0a00001a 	beq	172f8 <USBHandleStandardRequest+0x164>
   1728c:	e59f3174 	ldr	r3, [pc, #372]	; 17408 <USBHandleStandardRequest+0x274>
   17290:	e3a070ff 	mov	r7, #255	; 0xff
   17294:	e5934000 	ldr	r4, [r3]
   17298:	e1a08007 	mov	r8, r7
   1729c:	ea000011 	b	172e8 <USBHandleStandardRequest+0x154>
   172a0:	e5d43001 	ldrb	r3, [r4, #1]
   172a4:	e3530004 	cmp	r3, #4	; 0x4
   172a8:	05d47003 	ldrbeq	r7, [r4, #3]
   172ac:	0a00000b 	beq	172e0 <USBHandleStandardRequest+0x14c>
   172b0:	e3530005 	cmp	r3, #5	; 0x5
   172b4:	0a000002 	beq	172c4 <USBHandleStandardRequest+0x130>
   172b8:	e3530002 	cmp	r3, #2	; 0x2
   172bc:	05d48005 	ldrbeq	r8, [r4, #5]
   172c0:	ea000006 	b	172e0 <USBHandleStandardRequest+0x14c>
   172c4:	e1580006 	cmp	r8, r6
   172c8:	03570000 	cmpeq	r7, #0	; 0x0
   172cc:	05d43004 	ldrbeq	r3, [r4, #4]
   172d0:	05d41005 	ldrbeq	r1, [r4, #5]
   172d4:	05d40002 	ldrbeq	r0, [r4, #2]
   172d8:	01831401 	orreq	r1, r3, r1, lsl #8
   172dc:	0bfffddd 	bleq	16a58 <USBHwEPConfig>
   172e0:	e5d43000 	ldrb	r3, [r4]
   172e4:	e0844003 	add	r4, r4, r3
   172e8:	e5d43000 	ldrb	r3, [r4]
   172ec:	e3530000 	cmp	r3, #0	; 0x0
   172f0:	1affffea 	bne	172a0 <USBHandleStandardRequest+0x10c>
   172f4:	e3a00001 	mov	r0, #1	; 0x1
   172f8:	ebfffe79 	bl	16ce4 <USBHwConfigDevice>
   172fc:	e1d520b2 	ldrh	r2, [r5, #2]
   17300:	e59f30fc 	ldr	r3, [pc, #252]	; 17404 <USBHandleStandardRequest+0x270>
   17304:	e3a0c001 	mov	ip, #1	; 0x1
   17308:	e5c32000 	strb	r2, [r3]
   1730c:	ea000038 	b	173f4 <USBHandleStandardRequest+0x260>
   17310:	e5d53001 	ldrb	r3, [r5, #1]
   17314:	e3530000 	cmp	r3, #0	; 0x0
   17318:	e5972000 	ldr	r2, [r7]
   1731c:	0a000004 	beq	17334 <USBHandleStandardRequest+0x1a0>
   17320:	e353000a 	cmp	r3, #10	; 0xa
   17324:	0a000007 	beq	17348 <USBHandleStandardRequest+0x1b4>
   17328:	e353000b 	cmp	r3, #11	; 0xb
   1732c:	1a00002f 	bne	173f0 <USBHandleStandardRequest+0x25c>
   17330:	ea000008 	b	17358 <USBHandleStandardRequest+0x1c4>
   17334:	e5c23001 	strb	r3, [r2, #1]
   17338:	e5c23000 	strb	r3, [r2]
   1733c:	e1a0c004 	mov	ip, r4
   17340:	e3a03002 	mov	r3, #2	; 0x2
   17344:	eaffffca 	b	17274 <USBHandleStandardRequest+0xe0>
   17348:	e3a03000 	mov	r3, #0	; 0x0
   1734c:	e1a0c004 	mov	ip, r4
   17350:	e5c23000 	strb	r3, [r2]
   17354:	ea000015 	b	173b0 <USBHandleStandardRequest+0x21c>
   17358:	e1d500b2 	ldrh	r0, [r5, #2]
   1735c:	e3500000 	cmp	r0, #0	; 0x0
   17360:	03a0c001 	moveq	ip, #1	; 0x1
   17364:	05880000 	streq	r0, [r8]
   17368:	0a000021 	beq	173f4 <USBHandleStandardRequest+0x260>
   1736c:	ea00001f 	b	173f0 <USBHandleStandardRequest+0x25c>
   17370:	e5d56001 	ldrb	r6, [r5, #1]
   17374:	e3560001 	cmp	r6, #1	; 0x1
   17378:	e5977000 	ldr	r7, [r7]
   1737c:	0a00000d 	beq	173b8 <USBHandleStandardRequest+0x224>
   17380:	3a000002 	bcc	17390 <USBHandleStandardRequest+0x1fc>
   17384:	e3560003 	cmp	r6, #3	; 0x3
   17388:	1a000018 	bne	173f0 <USBHandleStandardRequest+0x25c>
   1738c:	ea000010 	b	173d4 <USBHandleStandardRequest+0x240>
   17390:	e5d50004 	ldrb	r0, [r5, #4]
   17394:	ebfffdf6 	bl	16b74 <USBHwEPGetStatus>
   17398:	e1a000a0 	lsr	r0, r0, #1
   1739c:	e2000001 	and	r0, r0, #1	; 0x1
   173a0:	e3a03000 	mov	r3, #0	; 0x0
   173a4:	e5c73001 	strb	r3, [r7, #1]
   173a8:	e5c70000 	strb	r0, [r7]
   173ac:	e3a0c001 	mov	ip, #1	; 0x1
   173b0:	e5884000 	str	r4, [r8]
   173b4:	ea00000e 	b	173f4 <USBHandleStandardRequest+0x260>
   173b8:	e1d510b2 	ldrh	r1, [r5, #2]
   173bc:	e3510000 	cmp	r1, #0	; 0x0
   173c0:	1a00000a 	bne	173f0 <USBHandleStandardRequest+0x25c>
   173c4:	e5d50004 	ldrb	r0, [r5, #4]
   173c8:	ebfffdf2 	bl	16b98 <USBHwEPStall>
   173cc:	e1a0c006 	mov	ip, r6
   173d0:	ea000007 	b	173f4 <USBHandleStandardRequest+0x260>
   173d4:	e1d530b2 	ldrh	r3, [r5, #2]
   173d8:	e3530000 	cmp	r3, #0	; 0x0
   173dc:	1a000003 	bne	173f0 <USBHandleStandardRequest+0x25c>
   173e0:	e5d50004 	ldrb	r0, [r5, #4]
   173e4:	e3a01001 	mov	r1, #1	; 0x1
   173e8:	ebfffdea 	bl	16b98 <USBHwEPStall>
   173ec:	eaffff93 	b	17240 <USBHandleStandardRequest+0xac>
   173f0:	e3a0c000 	mov	ip, #0	; 0x0
   173f4:	e1a0000c 	mov	r0, ip
   173f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   173fc:	e12fff1e 	bx	lr
   17400:	400011f8 	.word	0x400011f8
   17404:	400011fc 	.word	0x400011fc
   17408:	40001200 	.word	0x40001200

0001740c <free>:
   1740c:	e59f3008 	ldr	r3, [pc, #8]	; 1741c <free+0x10>
   17410:	e1a01000 	mov	r1, r0
   17414:	e5930000 	ldr	r0, [r3]
   17418:	ea0003d8 	b	18380 <_free_r>
   1741c:	40000490 	.word	0x40000490

00017420 <malloc>:
   17420:	e59f3008 	ldr	r3, [pc, #8]	; 17430 <malloc+0x10>
   17424:	e1a01000 	mov	r1, r0
   17428:	e5930000 	ldr	r0, [r3]
   1742c:	ea000000 	b	17434 <_malloc_r>
   17430:	40000490 	.word	0x40000490

00017434 <_malloc_r>:
   17434:	e1a03001 	mov	r3, r1
   17438:	e281100b 	add	r1, r1, #11	; 0xb
   1743c:	e3510016 	cmp	r1, #22	; 0x16
   17440:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17444:	83c16007 	bichi	r6, r1, #7	; 0x7
   17448:	93a06010 	movls	r6, #16	; 0x10
   1744c:	93a01000 	movls	r1, #0	; 0x0
   17450:	81a01fa6 	lsrhi	r1, r6, #31
   17454:	e1560003 	cmp	r6, r3
   17458:	21a03001 	movcs	r3, r1
   1745c:	33813001 	orrcc	r3, r1, #1	; 0x1
   17460:	e3530000 	cmp	r3, #0	; 0x0
   17464:	13a0300c 	movne	r3, #12	; 0xc
   17468:	e1a08000 	mov	r8, r0
   1746c:	15803000 	strne	r3, [r0]
   17470:	13a05000 	movne	r5, #0	; 0x0
   17474:	1a000015 	bne	174d0 <_malloc_r+0x9c>
   17478:	eb00022d 	bl	17d34 <__malloc_lock>
   1747c:	e3560f7e 	cmp	r6, #504	; 0x1f8
   17480:	2a000014 	bcs	174d8 <_malloc_r+0xa4>
   17484:	e59fe6c0 	ldr	lr, [pc, #1728]	; 17b4c <_malloc_r+0x718>
   17488:	e08e3006 	add	r3, lr, r6
   1748c:	e593400c 	ldr	r4, [r3, #12]
   17490:	e1540003 	cmp	r4, r3
   17494:	e1a021a6 	lsr	r2, r6, #3
   17498:	0a00015a 	beq	17a08 <_malloc_r+0x5d4>
   1749c:	e5943004 	ldr	r3, [r4, #4]
   174a0:	e3c33003 	bic	r3, r3, #3	; 0x3
   174a4:	e0843003 	add	r3, r4, r3
   174a8:	e5932004 	ldr	r2, [r3, #4]
   174ac:	e594000c 	ldr	r0, [r4, #12]
   174b0:	e5941008 	ldr	r1, [r4, #8]
   174b4:	e3822001 	orr	r2, r2, #1	; 0x1
   174b8:	e5801008 	str	r1, [r0, #8]
   174bc:	e581000c 	str	r0, [r1, #12]
   174c0:	e5832004 	str	r2, [r3, #4]
   174c4:	e1a00008 	mov	r0, r8
   174c8:	eb00021a 	bl	17d38 <__malloc_unlock>
   174cc:	e2845008 	add	r5, r4, #8	; 0x8
   174d0:	e1a00005 	mov	r0, r5
   174d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d8:	e1b024a6 	lsrs	r2, r6, #9
   174dc:	01a021a6 	lsreq	r2, r6, #3
   174e0:	01a03182 	lsleq	r3, r2, #3
   174e4:	0a000004 	beq	174fc <_malloc_r+0xc8>
   174e8:	e3520004 	cmp	r2, #4	; 0x4
   174ec:	91a03326 	lsrls	r3, r6, #6
   174f0:	92832038 	addls	r2, r3, #56	; 0x38
   174f4:	91a03182 	lslls	r3, r2, #3
   174f8:	8a00006b 	bhi	176ac <_malloc_r+0x278>
   174fc:	e59fe648 	ldr	lr, [pc, #1608]	; 17b4c <_malloc_r+0x718>
   17500:	e08e0003 	add	r0, lr, r3
   17504:	e590400c 	ldr	r4, [r0, #12]
   17508:	e1500004 	cmp	r0, r4
   1750c:	1a000005 	bne	17528 <_malloc_r+0xf4>
   17510:	ea00000a 	b	17540 <_malloc_r+0x10c>
   17514:	e3510000 	cmp	r1, #0	; 0x0
   17518:	aa00007a 	bge	17708 <_malloc_r+0x2d4>
   1751c:	e594400c 	ldr	r4, [r4, #12]
   17520:	e1500004 	cmp	r0, r4
   17524:	0a000005 	beq	17540 <_malloc_r+0x10c>
   17528:	e5943004 	ldr	r3, [r4, #4]
   1752c:	e3c33003 	bic	r3, r3, #3	; 0x3
   17530:	e0661003 	rsb	r1, r6, r3
   17534:	e351000f 	cmp	r1, #15	; 0xf
   17538:	dafffff5 	ble	17514 <_malloc_r+0xe0>
   1753c:	e2422001 	sub	r2, r2, #1	; 0x1
   17540:	e2825001 	add	r5, r2, #1	; 0x1
   17544:	e59f7604 	ldr	r7, [pc, #1540]	; 17b50 <_malloc_r+0x71c>
   17548:	e5974008 	ldr	r4, [r7, #8]
   1754c:	e1570004 	cmp	r7, r4
   17550:	0a000017 	beq	175b4 <_malloc_r+0x180>
   17554:	e5943004 	ldr	r3, [r4, #4]
   17558:	e3c3c003 	bic	ip, r3, #3	; 0x3
   1755c:	e066000c 	rsb	r0, r6, ip
   17560:	e350000f 	cmp	r0, #15	; 0xf
   17564:	ca0000e9 	bgt	17910 <_malloc_r+0x4dc>
   17568:	e3500000 	cmp	r0, #0	; 0x0
   1756c:	e587700c 	str	r7, [r7, #12]
   17570:	e5877008 	str	r7, [r7, #8]
   17574:	aa000043 	bge	17688 <_malloc_r+0x254>
   17578:	e35c0c02 	cmp	ip, #512	; 0x200
   1757c:	2a0000f1 	bcs	17948 <_malloc_r+0x514>
   17580:	e1a031ac 	lsr	r3, ip, #3
   17584:	e59e1004 	ldr	r1, [lr, #4]
   17588:	e1a00143 	asr	r0, r3, #2
   1758c:	e3a02001 	mov	r2, #1	; 0x1
   17590:	e1811012 	orr	r1, r1, r2, lsl r0
   17594:	e1a03183 	lsl	r3, r3, #3
   17598:	e08e3003 	add	r3, lr, r3
   1759c:	e5932008 	ldr	r2, [r3, #8]
   175a0:	e584300c 	str	r3, [r4, #12]
   175a4:	e5842008 	str	r2, [r4, #8]
   175a8:	e58e1004 	str	r1, [lr, #4]
   175ac:	e582400c 	str	r4, [r2, #12]
   175b0:	e5834008 	str	r4, [r3, #8]
   175b4:	e247a008 	sub	sl, r7, #8	; 0x8
   175b8:	e1a02145 	asr	r2, r5, #2
   175bc:	e3a03001 	mov	r3, #1	; 0x1
   175c0:	e1a00213 	lsl	r0, r3, r2
   175c4:	e59a1004 	ldr	r1, [sl, #4]
   175c8:	e1500001 	cmp	r0, r1
   175cc:	8a00005a 	bhi	1773c <_malloc_r+0x308>
   175d0:	e1100001 	tst	r0, r1
   175d4:	1a000008 	bne	175fc <_malloc_r+0x1c8>
   175d8:	e1a00310 	lsl	r0, r0, r3
   175dc:	e3c53003 	bic	r3, r5, #3	; 0x3
   175e0:	e1100001 	tst	r0, r1
   175e4:	e2835004 	add	r5, r3, #4	; 0x4
   175e8:	1a000003 	bne	175fc <_malloc_r+0x1c8>
   175ec:	e1a00080 	lsl	r0, r0, #1
   175f0:	e1100001 	tst	r0, r1
   175f4:	e2855004 	add	r5, r5, #4	; 0x4
   175f8:	0afffffb 	beq	175ec <_malloc_r+0x1b8>
   175fc:	e1a03185 	lsl	r3, r5, #3
   17600:	e08a1003 	add	r1, sl, r3
   17604:	e1a09005 	mov	r9, r5
   17608:	e1a02001 	mov	r2, r1
   1760c:	e592400c 	ldr	r4, [r2, #12]
   17610:	e1520004 	cmp	r2, r4
   17614:	1a000005 	bne	17630 <_malloc_r+0x1fc>
   17618:	ea000100 	b	17a20 <_malloc_r+0x5ec>
   1761c:	e35e0000 	cmp	lr, #0	; 0x0
   17620:	aa000103 	bge	17a34 <_malloc_r+0x600>
   17624:	e594400c 	ldr	r4, [r4, #12]
   17628:	e1520004 	cmp	r2, r4
   1762c:	0a0000fb 	beq	17a20 <_malloc_r+0x5ec>
   17630:	e5943004 	ldr	r3, [r4, #4]
   17634:	e3c33003 	bic	r3, r3, #3	; 0x3
   17638:	e066e003 	rsb	lr, r6, r3
   1763c:	e35e000f 	cmp	lr, #15	; 0xf
   17640:	dafffff5 	ble	1761c <_malloc_r+0x1e8>
   17644:	e1a05004 	mov	r5, r4
   17648:	e5b50008 	ldr	r0, [r5, #8]!
   1764c:	e594c00c 	ldr	ip, [r4, #12]
   17650:	e0843006 	add	r3, r4, r6
   17654:	e3861001 	orr	r1, r6, #1	; 0x1
   17658:	e38e2001 	orr	r2, lr, #1	; 0x1
   1765c:	e58c0008 	str	r0, [ip, #8]
   17660:	e580c00c 	str	ip, [r0, #12]
   17664:	e5841004 	str	r1, [r4, #4]
   17668:	e5873008 	str	r3, [r7, #8]
   1766c:	e587300c 	str	r3, [r7, #12]
   17670:	e783e00e 	str	lr, [r3, lr]
   17674:	e9830084 	stmib	r3, {r2, r7}
   17678:	e1a00008 	mov	r0, r8
   1767c:	e583700c 	str	r7, [r3, #12]
   17680:	eb0001ac 	bl	17d38 <__malloc_unlock>
   17684:	eaffff91 	b	174d0 <_malloc_r+0x9c>
   17688:	e084200c 	add	r2, r4, ip
   1768c:	e5923004 	ldr	r3, [r2, #4]
   17690:	e3833001 	orr	r3, r3, #1	; 0x1
   17694:	e1a00008 	mov	r0, r8
   17698:	e5823004 	str	r3, [r2, #4]
   1769c:	e2845008 	add	r5, r4, #8	; 0x8
   176a0:	eb0001a4 	bl	17d38 <__malloc_unlock>
   176a4:	e1a00005 	mov	r0, r5
   176a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176ac:	e3520014 	cmp	r2, #20	; 0x14
   176b0:	9282205b 	addls	r2, r2, #91	; 0x5b
   176b4:	91a03182 	lslls	r3, r2, #3
   176b8:	9affff8f 	bls	174fc <_malloc_r+0xc8>
   176bc:	e3520054 	cmp	r2, #84	; 0x54
   176c0:	91a03626 	lsrls	r3, r6, #12
   176c4:	9283206e 	addls	r2, r3, #110	; 0x6e
   176c8:	91a03182 	lslls	r3, r2, #3
   176cc:	9affff8a 	bls	174fc <_malloc_r+0xc8>
   176d0:	e3520f55 	cmp	r2, #340	; 0x154
   176d4:	91a037a6 	lsrls	r3, r6, #15
   176d8:	92832077 	addls	r2, r3, #119	; 0x77
   176dc:	91a03182 	lslls	r3, r2, #3
   176e0:	9affff85 	bls	174fc <_malloc_r+0xc8>
   176e4:	e3a03e55 	mov	r3, #1360	; 0x550
   176e8:	e2833004 	add	r3, r3, #4	; 0x4
   176ec:	e1520003 	cmp	r2, r3
   176f0:	91a03926 	lsrls	r3, r6, #18
   176f4:	9283207c 	addls	r2, r3, #124	; 0x7c
   176f8:	83a0207e 	movhi	r2, #126	; 0x7e
   176fc:	82433f59 	subhi	r3, r3, #356	; 0x164
   17700:	91a03182 	lslls	r3, r2, #3
   17704:	eaffff7c 	b	174fc <_malloc_r+0xc8>
   17708:	e0840003 	add	r0, r4, r3
   1770c:	e5903004 	ldr	r3, [r0, #4]
   17710:	e594100c 	ldr	r1, [r4, #12]
   17714:	e5942008 	ldr	r2, [r4, #8]
   17718:	e3833001 	orr	r3, r3, #1	; 0x1
   1771c:	e5803004 	str	r3, [r0, #4]
   17720:	e5812008 	str	r2, [r1, #8]
   17724:	e1a00008 	mov	r0, r8
   17728:	e582100c 	str	r1, [r2, #12]
   1772c:	e2845008 	add	r5, r4, #8	; 0x8
   17730:	eb000180 	bl	17d38 <__malloc_unlock>
   17734:	e1a00005 	mov	r0, r5
   17738:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1773c:	e59a5008 	ldr	r5, [sl, #8]
   17740:	e5953004 	ldr	r3, [r5, #4]
   17744:	e3c39003 	bic	r9, r3, #3	; 0x3
   17748:	e0660009 	rsb	r0, r6, r9
   1774c:	e350000f 	cmp	r0, #15	; 0xf
   17750:	c3a03000 	movgt	r3, #0	; 0x0
   17754:	d3a03001 	movle	r3, #1	; 0x1
   17758:	e1560009 	cmp	r6, r9
   1775c:	83833001 	orrhi	r3, r3, #1	; 0x1
   17760:	e3530000 	cmp	r3, #0	; 0x0
   17764:	0a00005e 	beq	178e4 <_malloc_r+0x4b0>
   17768:	e59f33e4 	ldr	r3, [pc, #996]	; 17b54 <_malloc_r+0x720>
   1776c:	e59f03e4 	ldr	r0, [pc, #996]	; 17b58 <_malloc_r+0x724>
   17770:	e5932000 	ldr	r2, [r3]
   17774:	e5901000 	ldr	r1, [r0]
   17778:	e2822010 	add	r2, r2, #16	; 0x10
   1777c:	e3710001 	cmn	r1, #1	; 0x1
   17780:	e0824006 	add	r4, r2, r6
   17784:	12843eff 	addne	r3, r4, #4080	; 0xff0
   17788:	1283300f 	addne	r3, r3, #15	; 0xf
   1778c:	13c34eff 	bicne	r4, r3, #4080	; 0xff0
   17790:	13c4400f 	bicne	r4, r4, #15	; 0xf
   17794:	e1a00008 	mov	r0, r8
   17798:	e1a01004 	mov	r1, r4
   1779c:	ebffe8a8 	bl	11a44 <_sbrk_r>
   177a0:	e3700001 	cmn	r0, #1	; 0x1
   177a4:	e1a07000 	mov	r7, r0
   177a8:	0a000042 	beq	178b8 <_malloc_r+0x484>
   177ac:	e0852009 	add	r2, r5, r9
   177b0:	e1520000 	cmp	r2, r0
   177b4:	9a0000c2 	bls	17ac4 <_malloc_r+0x690>
   177b8:	e155000a 	cmp	r5, sl
   177bc:	1a00003d 	bne	178b8 <_malloc_r+0x484>
   177c0:	e59fb394 	ldr	fp, [pc, #916]	; 17b5c <_malloc_r+0x728>
   177c4:	e59b3000 	ldr	r3, [fp]
   177c8:	e0841003 	add	r1, r4, r3
   177cc:	e58b1000 	str	r1, [fp]
   177d0:	e59f0380 	ldr	r0, [pc, #896]	; 17b58 <_malloc_r+0x724>
   177d4:	e5903000 	ldr	r3, [r0]
   177d8:	e3730001 	cmn	r3, #1	; 0x1
   177dc:	10623007 	rsbne	r3, r2, r7
   177e0:	10833001 	addne	r3, r3, r1
   177e4:	01a03000 	moveq	r3, r0
   177e8:	05837000 	streq	r7, [r3]
   177ec:	158b3000 	strne	r3, [fp]
   177f0:	e2173007 	ands	r3, r7, #7	; 0x7
   177f4:	12633008 	rsbne	r3, r3, #8	; 0x8
   177f8:	10877003 	addne	r7, r7, r3
   177fc:	12831a01 	addne	r1, r3, #4096	; 0x1000
   17800:	e0873004 	add	r3, r7, r4
   17804:	e1a03a03 	lsl	r3, r3, #20
   17808:	e1a03a23 	lsr	r3, r3, #20
   1780c:	03a01a01 	moveq	r1, #4096	; 0x1000
   17810:	e0634001 	rsb	r4, r3, r1
   17814:	e1a01004 	mov	r1, r4
   17818:	e1a00008 	mov	r0, r8
   1781c:	ebffe888 	bl	11a44 <_sbrk_r>
   17820:	e3700001 	cmn	r0, #1	; 0x1
   17824:	10673000 	rsbne	r3, r7, r0
   17828:	10833004 	addne	r3, r3, r4
   1782c:	13830001 	orrne	r0, r3, #1	; 0x1
   17830:	e59b3000 	ldr	r3, [fp]
   17834:	03a04000 	moveq	r4, #0	; 0x0
   17838:	02800002 	addeq	r0, r0, #2	; 0x2
   1783c:	e0843003 	add	r3, r4, r3
   17840:	e155000a 	cmp	r5, sl
   17844:	e58b3000 	str	r3, [fp]
   17848:	e5870004 	str	r0, [r7, #4]
   1784c:	e58a7008 	str	r7, [sl, #8]
   17850:	0a00000f 	beq	17894 <_malloc_r+0x460>
   17854:	e359000f 	cmp	r9, #15	; 0xf
   17858:	93a03001 	movls	r3, #1	; 0x1
   1785c:	95873004 	strls	r3, [r7, #4]
   17860:	9a000014 	bls	178b8 <_malloc_r+0x484>
   17864:	e249200c 	sub	r2, r9, #12	; 0xc
   17868:	e3c22007 	bic	r2, r2, #7	; 0x7
   1786c:	e0850002 	add	r0, r5, r2
   17870:	e3a01005 	mov	r1, #5	; 0x5
   17874:	e5801008 	str	r1, [r0, #8]
   17878:	e5801004 	str	r1, [r0, #4]
   1787c:	e5953004 	ldr	r3, [r5, #4]
   17880:	e2033001 	and	r3, r3, #1	; 0x1
   17884:	e352000f 	cmp	r2, #15	; 0xf
   17888:	e1822003 	orr	r2, r2, r3
   1788c:	e5852004 	str	r2, [r5, #4]
   17890:	8a0000a0 	bhi	17b18 <_malloc_r+0x6e4>
   17894:	e59f12c4 	ldr	r1, [pc, #708]	; 17b60 <_malloc_r+0x72c>
   17898:	e59b2000 	ldr	r2, [fp]
   1789c:	e5913000 	ldr	r3, [r1]
   178a0:	e1520003 	cmp	r2, r3
   178a4:	85812000 	strhi	r2, [r1]
   178a8:	e59f12b4 	ldr	r1, [pc, #692]	; 17b64 <_malloc_r+0x730>
   178ac:	e5913000 	ldr	r3, [r1]
   178b0:	e1520003 	cmp	r2, r3
   178b4:	85812000 	strhi	r2, [r1]
   178b8:	e59a5008 	ldr	r5, [sl, #8]
   178bc:	e5952004 	ldr	r2, [r5, #4]
   178c0:	e3c22003 	bic	r2, r2, #3	; 0x3
   178c4:	e0660002 	rsb	r0, r6, r2
   178c8:	e350000f 	cmp	r0, #15	; 0xf
   178cc:	c3a03000 	movgt	r3, #0	; 0x0
   178d0:	d3a03001 	movle	r3, #1	; 0x1
   178d4:	e1560002 	cmp	r6, r2
   178d8:	83833001 	orrhi	r3, r3, #1	; 0x1
   178dc:	e3530000 	cmp	r3, #0	; 0x0
   178e0:	1a000095 	bne	17b3c <_malloc_r+0x708>
   178e4:	e0851006 	add	r1, r5, r6
   178e8:	e3802001 	orr	r2, r0, #1	; 0x1
   178ec:	e3863001 	orr	r3, r6, #1	; 0x1
   178f0:	e5853004 	str	r3, [r5, #4]
   178f4:	e1a00008 	mov	r0, r8
   178f8:	e5812004 	str	r2, [r1, #4]
   178fc:	e58a1008 	str	r1, [sl, #8]
   17900:	e2855008 	add	r5, r5, #8	; 0x8
   17904:	eb00010b 	bl	17d38 <__malloc_unlock>
   17908:	e1a00005 	mov	r0, r5
   1790c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17910:	e0842006 	add	r2, r4, r6
   17914:	e3801001 	orr	r1, r0, #1	; 0x1
   17918:	e3863001 	orr	r3, r6, #1	; 0x1
   1791c:	e7820000 	str	r0, [r2, r0]
   17920:	e5843004 	str	r3, [r4, #4]
   17924:	e587200c 	str	r2, [r7, #12]
   17928:	e5872008 	str	r2, [r7, #8]
   1792c:	e1a00008 	mov	r0, r8
   17930:	e9820082 	stmib	r2, {r1, r7}
   17934:	e582700c 	str	r7, [r2, #12]
   17938:	e2845008 	add	r5, r4, #8	; 0x8
   1793c:	eb0000fd 	bl	17d38 <__malloc_unlock>
   17940:	e1a00005 	mov	r0, r5
   17944:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17948:	e1a014ac 	lsr	r1, ip, #9
   1794c:	e3510004 	cmp	r1, #4	; 0x4
   17950:	91a0332c 	lsrls	r3, ip, #6
   17954:	92831038 	addls	r1, r3, #56	; 0x38
   17958:	91a03181 	lslls	r3, r1, #3
   1795c:	9a000015 	bls	179b8 <_malloc_r+0x584>
   17960:	e3510014 	cmp	r1, #20	; 0x14
   17964:	9281105b 	addls	r1, r1, #91	; 0x5b
   17968:	91a03181 	lslls	r3, r1, #3
   1796c:	9a000011 	bls	179b8 <_malloc_r+0x584>
   17970:	e3510054 	cmp	r1, #84	; 0x54
   17974:	91a0362c 	lsrls	r3, ip, #12
   17978:	9283106e 	addls	r1, r3, #110	; 0x6e
   1797c:	91a03181 	lslls	r3, r1, #3
   17980:	9a00000c 	bls	179b8 <_malloc_r+0x584>
   17984:	e3510f55 	cmp	r1, #340	; 0x154
   17988:	91a037ac 	lsrls	r3, ip, #15
   1798c:	92831077 	addls	r1, r3, #119	; 0x77
   17990:	91a03181 	lslls	r3, r1, #3
   17994:	9a000007 	bls	179b8 <_malloc_r+0x584>
   17998:	e3a03e55 	mov	r3, #1360	; 0x550
   1799c:	e2833004 	add	r3, r3, #4	; 0x4
   179a0:	e1510003 	cmp	r1, r3
   179a4:	91a0392c 	lsrls	r3, ip, #18
   179a8:	9283107c 	addls	r1, r3, #124	; 0x7c
   179ac:	83a0107e 	movhi	r1, #126	; 0x7e
   179b0:	82433f59 	subhi	r3, r3, #356	; 0x164
   179b4:	91a03181 	lslls	r3, r1, #3
   179b8:	e08e0003 	add	r0, lr, r3
   179bc:	e590e008 	ldr	lr, [r0, #8]
   179c0:	e15e0000 	cmp	lr, r0
   179c4:	e59fa180 	ldr	sl, [pc, #384]	; 17b4c <_malloc_r+0x718>
   179c8:	11a0200e 	movne	r2, lr
   179cc:	0a00004a 	beq	17afc <_malloc_r+0x6c8>
   179d0:	e5923004 	ldr	r3, [r2, #4]
   179d4:	e3c33003 	bic	r3, r3, #3	; 0x3
   179d8:	e15c0003 	cmp	ip, r3
   179dc:	2a000002 	bcs	179ec <_malloc_r+0x5b8>
   179e0:	e5922008 	ldr	r2, [r2, #8]
   179e4:	e1500002 	cmp	r0, r2
   179e8:	1afffff8 	bne	179d0 <_malloc_r+0x59c>
   179ec:	e592300c 	ldr	r3, [r2, #12]
   179f0:	e1a0e002 	mov	lr, r2
   179f4:	e584300c 	str	r3, [r4, #12]
   179f8:	e584e008 	str	lr, [r4, #8]
   179fc:	e58e400c 	str	r4, [lr, #12]
   17a00:	e5834008 	str	r4, [r3, #8]
   17a04:	eafffeeb 	b	175b8 <_malloc_r+0x184>
   17a08:	e2843008 	add	r3, r4, #8	; 0x8
   17a0c:	e593400c 	ldr	r4, [r3, #12]
   17a10:	e1530004 	cmp	r3, r4
   17a14:	02825002 	addeq	r5, r2, #2	; 0x2
   17a18:	0afffec9 	beq	17544 <_malloc_r+0x110>
   17a1c:	eafffe9e 	b	1749c <_malloc_r+0x68>
   17a20:	e2899001 	add	r9, r9, #1	; 0x1
   17a24:	e3190003 	tst	r9, #3	; 0x3
   17a28:	0a00000d 	beq	17a64 <_malloc_r+0x630>
   17a2c:	e2822008 	add	r2, r2, #8	; 0x8
   17a30:	eafffef5 	b	1760c <_malloc_r+0x1d8>
   17a34:	e0840003 	add	r0, r4, r3
   17a38:	e5903004 	ldr	r3, [r0, #4]
   17a3c:	e1a05004 	mov	r5, r4
   17a40:	e594100c 	ldr	r1, [r4, #12]
   17a44:	e5b52008 	ldr	r2, [r5, #8]!
   17a48:	e3833001 	orr	r3, r3, #1	; 0x1
   17a4c:	e5803004 	str	r3, [r0, #4]
   17a50:	e5812008 	str	r2, [r1, #8]
   17a54:	e582100c 	str	r1, [r2, #12]
   17a58:	e1a00008 	mov	r0, r8
   17a5c:	eb0000b5 	bl	17d38 <__malloc_unlock>
   17a60:	eafffe9a 	b	174d0 <_malloc_r+0x9c>
   17a64:	e1a02005 	mov	r2, r5
   17a68:	e1a0c001 	mov	ip, r1
   17a6c:	e3120003 	tst	r2, #3	; 0x3
   17a70:	e1a0100c 	mov	r1, ip
   17a74:	e2422001 	sub	r2, r2, #1	; 0x1
   17a78:	0a00002a 	beq	17b28 <_malloc_r+0x6f4>
   17a7c:	e411c008 	ldr	ip, [r1], #-8
   17a80:	e15c0001 	cmp	ip, r1
   17a84:	0afffff8 	beq	17a6c <_malloc_r+0x638>
   17a88:	e59a3004 	ldr	r3, [sl, #4]
   17a8c:	e1a00080 	lsl	r0, r0, #1
   17a90:	e1500003 	cmp	r0, r3
   17a94:	8affff28 	bhi	1773c <_malloc_r+0x308>
   17a98:	e3500000 	cmp	r0, #0	; 0x0
   17a9c:	0affff26 	beq	1773c <_malloc_r+0x308>
   17aa0:	e1100003 	tst	r0, r3
   17aa4:	11a05009 	movne	r5, r9
   17aa8:	1afffed3 	bne	175fc <_malloc_r+0x1c8>
   17aac:	e1a00080 	lsl	r0, r0, #1
   17ab0:	e1100003 	tst	r0, r3
   17ab4:	e2899004 	add	r9, r9, #4	; 0x4
   17ab8:	0afffffb 	beq	17aac <_malloc_r+0x678>
   17abc:	e1a05009 	mov	r5, r9
   17ac0:	eafffecd 	b	175fc <_malloc_r+0x1c8>
   17ac4:	e59fb090 	ldr	fp, [pc, #144]	; 17b5c <_malloc_r+0x728>
   17ac8:	e59b3000 	ldr	r3, [fp]
   17acc:	e0841003 	add	r1, r4, r3
   17ad0:	e58b1000 	str	r1, [fp]
   17ad4:	1affff3d 	bne	177d0 <_malloc_r+0x39c>
   17ad8:	e1a03a02 	lsl	r3, r2, #20
   17adc:	e1a03a23 	lsr	r3, r3, #20
   17ae0:	e3530000 	cmp	r3, #0	; 0x0
   17ae4:	1affff39 	bne	177d0 <_malloc_r+0x39c>
   17ae8:	e0843009 	add	r3, r4, r9
   17aec:	e59a2008 	ldr	r2, [sl, #8]
   17af0:	e3833001 	orr	r3, r3, #1	; 0x1
   17af4:	e5823004 	str	r3, [r2, #4]
   17af8:	eaffff65 	b	17894 <_malloc_r+0x460>
   17afc:	e59a3004 	ldr	r3, [sl, #4]
   17b00:	e1a01141 	asr	r1, r1, #2
   17b04:	e3a02001 	mov	r2, #1	; 0x1
   17b08:	e1833112 	orr	r3, r3, r2, lsl r1
   17b0c:	e58a3004 	str	r3, [sl, #4]
   17b10:	e1a0300e 	mov	r3, lr
   17b14:	eaffffb6 	b	179f4 <_malloc_r+0x5c0>
   17b18:	e2851008 	add	r1, r5, #8	; 0x8
   17b1c:	e1a00008 	mov	r0, r8
   17b20:	eb000216 	bl	18380 <_free_r>
   17b24:	eaffff5a 	b	17894 <_malloc_r+0x460>
   17b28:	e59a3004 	ldr	r3, [sl, #4]
   17b2c:	e1e02000 	mvn	r2, r0
   17b30:	e0033002 	and	r3, r3, r2
   17b34:	e58a3004 	str	r3, [sl, #4]
   17b38:	eaffffd2 	b	17a88 <_malloc_r+0x654>
   17b3c:	e1a00008 	mov	r0, r8
   17b40:	eb00007c 	bl	17d38 <__malloc_unlock>
   17b44:	e3a05000 	mov	r5, #0	; 0x0
   17b48:	eafffe60 	b	174d0 <_malloc_r+0x9c>
   17b4c:	40000080 	.word	0x40000080
   17b50:	40000088 	.word	0x40000088
   17b54:	40001204 	.word	0x40001204
   17b58:	4000048c 	.word	0x4000048c
   17b5c:	40001210 	.word	0x40001210
   17b60:	40001208 	.word	0x40001208
   17b64:	4000120c 	.word	0x4000120c

00017b68 <memcpy>:
   17b68:	e92d0070 	push	{r4, r5, r6}
   17b6c:	e352000f 	cmp	r2, #15	; 0xf
   17b70:	e1a04002 	mov	r4, r2
   17b74:	e1a05001 	mov	r5, r1
   17b78:	e1a02001 	mov	r2, r1
   17b7c:	e1a06000 	mov	r6, r0
   17b80:	e1a01004 	mov	r1, r4
   17b84:	9a000002 	bls	17b94 <memcpy+0x2c>
   17b88:	e1853006 	orr	r3, r5, r6
   17b8c:	e3130003 	tst	r3, #3	; 0x3
   17b90:	0a00000a 	beq	17bc0 <memcpy+0x58>
   17b94:	e3510000 	cmp	r1, #0	; 0x0
   17b98:	0a000005 	beq	17bb4 <memcpy+0x4c>
   17b9c:	e3a0c000 	mov	ip, #0	; 0x0
   17ba0:	e7d2300c 	ldrb	r3, [r2, ip]
   17ba4:	e7c0300c 	strb	r3, [r0, ip]
   17ba8:	e28cc001 	add	ip, ip, #1	; 0x1
   17bac:	e15c0001 	cmp	ip, r1
   17bb0:	1afffffa 	bne	17ba0 <memcpy+0x38>
   17bb4:	e1a00006 	mov	r0, r6
   17bb8:	e8bd0070 	pop	{r4, r5, r6}
   17bbc:	e12fff1e 	bx	lr
   17bc0:	e1a01006 	mov	r1, r6
   17bc4:	e1a0c005 	mov	ip, r5
   17bc8:	e1a00004 	mov	r0, r4
   17bcc:	e59c3000 	ldr	r3, [ip]
   17bd0:	e5813000 	str	r3, [r1]
   17bd4:	e59c2004 	ldr	r2, [ip, #4]
   17bd8:	e5812004 	str	r2, [r1, #4]
   17bdc:	e59c3008 	ldr	r3, [ip, #8]
   17be0:	e5813008 	str	r3, [r1, #8]
   17be4:	e2400010 	sub	r0, r0, #16	; 0x10
   17be8:	e59c300c 	ldr	r3, [ip, #12]
   17bec:	e350000f 	cmp	r0, #15	; 0xf
   17bf0:	e581300c 	str	r3, [r1, #12]
   17bf4:	e28cc010 	add	ip, ip, #16	; 0x10
   17bf8:	e2811010 	add	r1, r1, #16	; 0x10
   17bfc:	8afffff2 	bhi	17bcc <memcpy+0x64>
   17c00:	e2442010 	sub	r2, r4, #16	; 0x10
   17c04:	e1a03222 	lsr	r3, r2, #4
   17c08:	e0421203 	sub	r1, r2, r3, lsl #4
   17c0c:	e2833001 	add	r3, r3, #1	; 0x1
   17c10:	e1a03203 	lsl	r3, r3, #4
   17c14:	e3510003 	cmp	r1, #3	; 0x3
   17c18:	e0854003 	add	r4, r5, r3
   17c1c:	e0860003 	add	r0, r6, r3
   17c20:	9a00000d 	bls	17c5c <memcpy+0xf4>
   17c24:	e3a0c000 	mov	ip, #0	; 0x0
   17c28:	e794300c 	ldr	r3, [r4, ip]
   17c2c:	e780300c 	str	r3, [r0, ip]
   17c30:	e28cc004 	add	ip, ip, #4	; 0x4
   17c34:	e06c3001 	rsb	r3, ip, r1
   17c38:	e3530003 	cmp	r3, #3	; 0x3
   17c3c:	8afffff9 	bhi	17c28 <memcpy+0xc0>
   17c40:	e2411004 	sub	r1, r1, #4	; 0x4
   17c44:	e1a02121 	lsr	r2, r1, #2
   17c48:	e2823001 	add	r3, r2, #1	; 0x1
   17c4c:	e1a03103 	lsl	r3, r3, #2
   17c50:	e0800003 	add	r0, r0, r3
   17c54:	e0411102 	sub	r1, r1, r2, lsl #2
   17c58:	e0844003 	add	r4, r4, r3
   17c5c:	e1a02004 	mov	r2, r4
   17c60:	eaffffcb 	b	17b94 <memcpy+0x2c>

00017c64 <memset>:
   17c64:	e3520003 	cmp	r2, #3	; 0x3
   17c68:	e92d0030 	push	{r4, r5}
   17c6c:	e1a0c000 	mov	ip, r0
   17c70:	e1a04000 	mov	r4, r0
   17c74:	e20150ff 	and	r5, r1, #255	; 0xff
   17c78:	9a000022 	bls	17d08 <memset+0xa4>
   17c7c:	e3100003 	tst	r0, #3	; 0x3
   17c80:	1a000022 	bne	17d10 <memset+0xac>
   17c84:	e352000f 	cmp	r2, #15	; 0xf
   17c88:	e1853405 	orr	r3, r5, r5, lsl #8
   17c8c:	e1831803 	orr	r1, r3, r3, lsl #16
   17c90:	81a0c002 	movhi	ip, r2
   17c94:	81a03004 	movhi	r3, r4
   17c98:	9a00000e 	bls	17cd8 <memset+0x74>
   17c9c:	e24cc010 	sub	ip, ip, #16	; 0x10
   17ca0:	e35c000f 	cmp	ip, #15	; 0xf
   17ca4:	e5831000 	str	r1, [r3]
   17ca8:	e5831004 	str	r1, [r3, #4]
   17cac:	e5831008 	str	r1, [r3, #8]
   17cb0:	e583100c 	str	r1, [r3, #12]
   17cb4:	e2833010 	add	r3, r3, #16	; 0x10
   17cb8:	8afffff7 	bhi	17c9c <memset+0x38>
   17cbc:	e2422010 	sub	r2, r2, #16	; 0x10
   17cc0:	e3c2300f 	bic	r3, r2, #15	; 0xf
   17cc4:	e202200f 	and	r2, r2, #15	; 0xf
   17cc8:	e2833010 	add	r3, r3, #16	; 0x10
   17ccc:	e3520003 	cmp	r2, #3	; 0x3
   17cd0:	e0840003 	add	r0, r4, r3
   17cd4:	9a00000a 	bls	17d04 <memset+0xa0>
   17cd8:	e3a0c000 	mov	ip, #0	; 0x0
   17cdc:	e780100c 	str	r1, [r0, ip]
   17ce0:	e28cc004 	add	ip, ip, #4	; 0x4
   17ce4:	e06c3002 	rsb	r3, ip, r2
   17ce8:	e3530003 	cmp	r3, #3	; 0x3
   17cec:	8afffffa 	bhi	17cdc <memset+0x78>
   17cf0:	e2422004 	sub	r2, r2, #4	; 0x4
   17cf4:	e3c23003 	bic	r3, r2, #3	; 0x3
   17cf8:	e2833004 	add	r3, r3, #4	; 0x4
   17cfc:	e0800003 	add	r0, r0, r3
   17d00:	e2022003 	and	r2, r2, #3	; 0x3
   17d04:	e1a0c000 	mov	ip, r0
   17d08:	e3520000 	cmp	r2, #0	; 0x0
   17d0c:	0a000005 	beq	17d28 <memset+0xc4>
   17d10:	e20510ff 	and	r1, r5, #255	; 0xff
   17d14:	e3a03000 	mov	r3, #0	; 0x0
   17d18:	e7cc1003 	strb	r1, [ip, r3]
   17d1c:	e2833001 	add	r3, r3, #1	; 0x1
   17d20:	e1530002 	cmp	r3, r2
   17d24:	1afffffb 	bne	17d18 <memset+0xb4>
   17d28:	e1a00004 	mov	r0, r4
   17d2c:	e8bd0030 	pop	{r4, r5}
   17d30:	e12fff1e 	bx	lr

00017d34 <__malloc_lock>:
   17d34:	e12fff1e 	bx	lr

00017d38 <__malloc_unlock>:
   17d38:	e12fff1e 	bx	lr

00017d3c <strchr>:
   17d3c:	e2102003 	ands	r2, r0, #3	; 0x3
   17d40:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   17d44:	e201c0ff 	and	ip, r1, #255	; 0xff
   17d48:	1a00003a 	bne	17e38 <strchr+0xfc>
   17d4c:	e1a04002 	mov	r4, r2
   17d50:	e1a03002 	mov	r3, r2
   17d54:	e2833001 	add	r3, r3, #1	; 0x1
   17d58:	e3530004 	cmp	r3, #4	; 0x4
   17d5c:	e18c4404 	orr	r4, ip, r4, lsl #8
   17d60:	1afffffb 	bne	17d54 <strchr+0x18>
   17d64:	e5901000 	ldr	r1, [r0]
   17d68:	e28124ff 	add	r2, r1, #-16777216	; 0xff000000
   17d6c:	e2422801 	sub	r2, r2, #65536	; 0x10000
   17d70:	e2422c01 	sub	r2, r2, #256	; 0x100
   17d74:	e2422001 	sub	r2, r2, #1	; 0x1
   17d78:	e1e03001 	mvn	r3, r1
   17d7c:	e0033002 	and	r3, r3, r2
   17d80:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   17d84:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   17d88:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   17d8c:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   17d90:	e3530000 	cmp	r3, #0	; 0x0
   17d94:	1a000027 	bne	17e38 <strchr+0xfc>
   17d98:	e0242001 	eor	r2, r4, r1
   17d9c:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   17da0:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17da4:	e2433c01 	sub	r3, r3, #256	; 0x100
   17da8:	e2433001 	sub	r3, r3, #1	; 0x1
   17dac:	e1e02002 	mvn	r2, r2
   17db0:	e0033002 	and	r3, r3, r2
   17db4:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   17db8:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   17dbc:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   17dc0:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   17dc4:	e3530000 	cmp	r3, #0	; 0x0
   17dc8:	0a000002 	beq	17dd8 <strchr+0x9c>
   17dcc:	ea000019 	b	17e38 <strchr+0xfc>
   17dd0:	e3520000 	cmp	r2, #0	; 0x0
   17dd4:	1a000017 	bne	17e38 <strchr+0xfc>
   17dd8:	e5b01004 	ldr	r1, [r0, #4]!
   17ddc:	e0242001 	eor	r2, r4, r1
   17de0:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   17de4:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17de8:	e2433c01 	sub	r3, r3, #256	; 0x100
   17dec:	e1e02002 	mvn	r2, r2
   17df0:	e2433001 	sub	r3, r3, #1	; 0x1
   17df4:	e0033002 	and	r3, r3, r2
   17df8:	e3c3247f 	bic	r2, r3, #2130706432	; 0x7f000000
   17dfc:	e28134ff 	add	r3, r1, #-16777216	; 0xff000000
   17e00:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17e04:	e2433c01 	sub	r3, r3, #256	; 0x100
   17e08:	e2433001 	sub	r3, r3, #1	; 0x1
   17e0c:	e1e01001 	mvn	r1, r1
   17e10:	e0033001 	and	r3, r3, r1
   17e14:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   17e18:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   17e1c:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   17e20:	e3c2287f 	bic	r2, r2, #8323072	; 0x7f0000
   17e24:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   17e28:	e3c22c7f 	bic	r2, r2, #32512	; 0x7f00
   17e2c:	e3530000 	cmp	r3, #0	; 0x0
   17e30:	e3c2207f 	bic	r2, r2, #127	; 0x7f
   17e34:	0affffe5 	beq	17dd0 <strchr+0x94>
   17e38:	e5d03000 	ldrb	r3, [r0]
   17e3c:	e3530000 	cmp	r3, #0	; 0x0
   17e40:	1a000003 	bne	17e54 <strchr+0x118>
   17e44:	ea000006 	b	17e64 <strchr+0x128>
   17e48:	e5f03001 	ldrb	r3, [r0, #1]!
   17e4c:	e3530000 	cmp	r3, #0	; 0x0
   17e50:	0a000003 	beq	17e64 <strchr+0x128>
   17e54:	e15c0003 	cmp	ip, r3
   17e58:	1afffffa 	bne	17e48 <strchr+0x10c>
   17e5c:	e8bd0010 	pop	{r4}
   17e60:	e12fff1e 	bx	lr
   17e64:	e35c0000 	cmp	ip, #0	; 0x0
   17e68:	13a00000 	movne	r0, #0	; 0x0
   17e6c:	eafffffa 	b	17e5c <strchr+0x120>

00017e70 <strcmp>:
   17e70:	e1813000 	orr	r3, r1, r0
   17e74:	e3130003 	tst	r3, #3	; 0x3
   17e78:	e1a02000 	mov	r2, r0
   17e7c:	1a000023 	bne	17f10 <strcmp+0xa0>
   17e80:	e5902000 	ldr	r2, [r0]
   17e84:	e5913000 	ldr	r3, [r1]
   17e88:	e1520003 	cmp	r2, r3
   17e8c:	e1a0c001 	mov	ip, r1
   17e90:	1a00001c 	bne	17f08 <strcmp+0x98>
   17e94:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   17e98:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17e9c:	e2433c01 	sub	r3, r3, #256	; 0x100
   17ea0:	e2433001 	sub	r3, r3, #1	; 0x1
   17ea4:	e1e02002 	mvn	r2, r2
   17ea8:	e0033002 	and	r3, r3, r2
   17eac:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   17eb0:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   17eb4:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   17eb8:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   17ebc:	e3530000 	cmp	r3, #0	; 0x0
   17ec0:	0a000002 	beq	17ed0 <strcmp+0x60>
   17ec4:	ea000021 	b	17f50 <strcmp+0xe0>
   17ec8:	e3520000 	cmp	r2, #0	; 0x0
   17ecc:	1a00001f 	bne	17f50 <strcmp+0xe0>
   17ed0:	e5b01004 	ldr	r1, [r0, #4]!
   17ed4:	e28134ff 	add	r3, r1, #-16777216	; 0xff000000
   17ed8:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17edc:	e2433c01 	sub	r3, r3, #256	; 0x100
   17ee0:	e1e02001 	mvn	r2, r1
   17ee4:	e2433001 	sub	r3, r3, #1	; 0x1
   17ee8:	e0033002 	and	r3, r3, r2
   17eec:	e3c3247f 	bic	r2, r3, #2130706432	; 0x7f000000
   17ef0:	e5bc3004 	ldr	r3, [ip, #4]!
   17ef4:	e3c2287f 	bic	r2, r2, #8323072	; 0x7f0000
   17ef8:	e3c22c7f 	bic	r2, r2, #32512	; 0x7f00
   17efc:	e1510003 	cmp	r1, r3
   17f00:	e3c2207f 	bic	r2, r2, #127	; 0x7f
   17f04:	0affffef 	beq	17ec8 <strcmp+0x58>
   17f08:	e1a02000 	mov	r2, r0
   17f0c:	e1a0100c 	mov	r1, ip
   17f10:	e5d23000 	ldrb	r3, [r2]
   17f14:	e3530000 	cmp	r3, #0	; 0x0
   17f18:	1a000004 	bne	17f30 <strcmp+0xc0>
   17f1c:	ea000008 	b	17f44 <strcmp+0xd4>
   17f20:	e5f23001 	ldrb	r3, [r2, #1]!
   17f24:	e3530000 	cmp	r3, #0	; 0x0
   17f28:	e2811001 	add	r1, r1, #1	; 0x1
   17f2c:	0a000004 	beq	17f44 <strcmp+0xd4>
   17f30:	e5d10000 	ldrb	r0, [r1]
   17f34:	e1500003 	cmp	r0, r3
   17f38:	0afffff8 	beq	17f20 <strcmp+0xb0>
   17f3c:	e0600003 	rsb	r0, r0, r3
   17f40:	e12fff1e 	bx	lr
   17f44:	e5d10000 	ldrb	r0, [r1]
   17f48:	e0600003 	rsb	r0, r0, r3
   17f4c:	e12fff1e 	bx	lr
   17f50:	e3a00000 	mov	r0, #0	; 0x0
   17f54:	e12fff1e 	bx	lr

00017f58 <strlen>:
   17f58:	e3100003 	tst	r0, #3	; 0x3
   17f5c:	e1a01000 	mov	r1, r0
   17f60:	11a00000 	movne	r0, r0
   17f64:	1a00001a 	bne	17fd4 <strlen+0x7c>
   17f68:	e5912000 	ldr	r2, [r1]
   17f6c:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   17f70:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17f74:	e2433c01 	sub	r3, r3, #256	; 0x100
   17f78:	e2433001 	sub	r3, r3, #1	; 0x1
   17f7c:	e1e02002 	mvn	r2, r2
   17f80:	e0033002 	and	r3, r3, r2
   17f84:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   17f88:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   17f8c:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   17f90:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   17f94:	e3530000 	cmp	r3, #0	; 0x0
   17f98:	e1a00001 	mov	r0, r1
   17f9c:	1a00000c 	bne	17fd4 <strlen+0x7c>
   17fa0:	e5b02004 	ldr	r2, [r0, #4]!
   17fa4:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   17fa8:	e2433801 	sub	r3, r3, #65536	; 0x10000
   17fac:	e2433c01 	sub	r3, r3, #256	; 0x100
   17fb0:	e2433001 	sub	r3, r3, #1	; 0x1
   17fb4:	e1e02002 	mvn	r2, r2
   17fb8:	e0033002 	and	r3, r3, r2
   17fbc:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   17fc0:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   17fc4:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   17fc8:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   17fcc:	e3530000 	cmp	r3, #0	; 0x0
   17fd0:	0afffff2 	beq	17fa0 <strlen+0x48>
   17fd4:	e5d03000 	ldrb	r3, [r0]
   17fd8:	e3530000 	cmp	r3, #0	; 0x0
   17fdc:	0a000002 	beq	17fec <strlen+0x94>
   17fe0:	e5f03001 	ldrb	r3, [r0, #1]!
   17fe4:	e3530000 	cmp	r3, #0	; 0x0
   17fe8:	1afffffc 	bne	17fe0 <strlen+0x88>
   17fec:	e0610000 	rsb	r0, r1, r0
   17ff0:	e12fff1e 	bx	lr

00017ff4 <strncmp>:
   17ff4:	e92d0070 	push	{r4, r5, r6}
   17ff8:	e2525000 	subs	r5, r2, #0	; 0x0
   17ffc:	e1a04000 	mov	r4, r0
   18000:	e1a0c001 	mov	ip, r1
   18004:	0a000048 	beq	1812c <strncmp+0x138>
   18008:	e1813000 	orr	r3, r1, r0
   1800c:	e3130003 	tst	r3, #3	; 0x3
   18010:	1a000035 	bne	180ec <strncmp+0xf8>
   18014:	e3550003 	cmp	r5, #3	; 0x3
   18018:	e1a06001 	mov	r6, r1
   1801c:	9a000030 	bls	180e4 <strncmp+0xf0>
   18020:	e5942000 	ldr	r2, [r4]
   18024:	e5913000 	ldr	r3, [r1]
   18028:	e1520003 	cmp	r2, r3
   1802c:	1a00002c 	bne	180e4 <strncmp+0xf0>
   18030:	e2555004 	subs	r5, r5, #4	; 0x4
   18034:	0a00003c 	beq	1812c <strncmp+0x138>
   18038:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   1803c:	e2433801 	sub	r3, r3, #65536	; 0x10000
   18040:	e2433c01 	sub	r3, r3, #256	; 0x100
   18044:	e2433001 	sub	r3, r3, #1	; 0x1
   18048:	e1e02002 	mvn	r2, r2
   1804c:	e0033002 	and	r3, r3, r2
   18050:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   18054:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   18058:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   1805c:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   18060:	e3530000 	cmp	r3, #0	; 0x0
   18064:	0a000012 	beq	180b4 <strncmp+0xc0>
   18068:	ea00002f 	b	1812c <strncmp+0x138>
   1806c:	e5901000 	ldr	r1, [r0]
   18070:	e28134ff 	add	r3, r1, #-16777216	; 0xff000000
   18074:	e2433801 	sub	r3, r3, #65536	; 0x10000
   18078:	e2433c01 	sub	r3, r3, #256	; 0x100
   1807c:	e1e02001 	mvn	r2, r1
   18080:	e2433001 	sub	r3, r3, #1	; 0x1
   18084:	e0033002 	and	r3, r3, r2
   18088:	e3c3247f 	bic	r2, r3, #2130706432	; 0x7f000000
   1808c:	e5963000 	ldr	r3, [r6]
   18090:	e3c2287f 	bic	r2, r2, #8323072	; 0x7f0000
   18094:	e3c22c7f 	bic	r2, r2, #32512	; 0x7f00
   18098:	e1510003 	cmp	r1, r3
   1809c:	e3c2207f 	bic	r2, r2, #127	; 0x7f
   180a0:	1a00000f 	bne	180e4 <strncmp+0xf0>
   180a4:	e2555004 	subs	r5, r5, #4	; 0x4
   180a8:	0a00001f 	beq	1812c <strncmp+0x138>
   180ac:	e3520000 	cmp	r2, #0	; 0x0
   180b0:	1a00001d 	bne	1812c <strncmp+0x138>
   180b4:	e3550003 	cmp	r5, #3	; 0x3
   180b8:	e2800004 	add	r0, r0, #4	; 0x4
   180bc:	e2866004 	add	r6, r6, #4	; 0x4
   180c0:	8affffe9 	bhi	1806c <strncmp+0x78>
   180c4:	e3550000 	cmp	r5, #0	; 0x0
   180c8:	e1a04000 	mov	r4, r0
   180cc:	e1a0c006 	mov	ip, r6
   180d0:	1a000005 	bne	180ec <strncmp+0xf8>
   180d4:	e5d01000 	ldrb	r1, [r0]
   180d8:	e5d60000 	ldrb	r0, [r6]
   180dc:	e0600001 	rsb	r0, r0, r1
   180e0:	ea000012 	b	18130 <strncmp+0x13c>
   180e4:	e1a04000 	mov	r4, r0
   180e8:	e1a0c006 	mov	ip, r6
   180ec:	e5d41000 	ldrb	r1, [r4]
   180f0:	e5dc0000 	ldrb	r0, [ip]
   180f4:	e1500001 	cmp	r0, r1
   180f8:	e2452001 	sub	r2, r5, #1	; 0x1
   180fc:	1afffff6 	bne	180dc <strncmp+0xe8>
   18100:	e3520000 	cmp	r2, #0	; 0x0
   18104:	1a000006 	bne	18124 <strncmp+0x130>
   18108:	ea000007 	b	1812c <strncmp+0x138>
   1810c:	e5fc0001 	ldrb	r0, [ip, #1]!
   18110:	e5f41001 	ldrb	r1, [r4, #1]!
   18114:	e1500001 	cmp	r0, r1
   18118:	1affffef 	bne	180dc <strncmp+0xe8>
   1811c:	e2522001 	subs	r2, r2, #1	; 0x1
   18120:	0a000001 	beq	1812c <strncmp+0x138>
   18124:	e3500000 	cmp	r0, #0	; 0x0
   18128:	1afffff7 	bne	1810c <strncmp+0x118>
   1812c:	e3a00000 	mov	r0, #0	; 0x0
   18130:	e8bd0070 	pop	{r4, r5, r6}
   18134:	e12fff1e 	bx	lr

00018138 <strncpy>:
   18138:	e1a0c001 	mov	ip, r1
   1813c:	e1811000 	orr	r1, r1, r0
   18140:	e3110003 	tst	r1, #3	; 0x3
   18144:	13a03000 	movne	r3, #0	; 0x0
   18148:	03a03001 	moveq	r3, #1	; 0x1
   1814c:	e3520003 	cmp	r2, #3	; 0x3
   18150:	93a03000 	movls	r3, #0	; 0x0
   18154:	82033001 	andhi	r3, r3, #1	; 0x1
   18158:	e92d0030 	push	{r4, r5}
   1815c:	e3530000 	cmp	r3, #0	; 0x0
   18160:	e1a05000 	mov	r5, r0
   18164:	11a0100c 	movne	r1, ip
   18168:	e1a00002 	mov	r0, r2
   1816c:	11a04005 	movne	r4, r5
   18170:	1a00001e 	bne	181f0 <strncpy+0xb8>
   18174:	e1a0400c 	mov	r4, ip
   18178:	e1a0c005 	mov	ip, r5
   1817c:	e3500000 	cmp	r0, #0	; 0x0
   18180:	0a000017 	beq	181e4 <strncpy+0xac>
   18184:	e5d43000 	ldrb	r3, [r4]
   18188:	e1a0100c 	mov	r1, ip
   1818c:	e3530000 	cmp	r3, #0	; 0x0
   18190:	e2402001 	sub	r2, r0, #1	; 0x1
   18194:	e4c13001 	strb	r3, [r1], #1
   18198:	128cc002 	addne	ip, ip, #2	; 0x2
   1819c:	0a000008 	beq	181c4 <strncpy+0x8c>
   181a0:	e3520000 	cmp	r2, #0	; 0x0
   181a4:	e1a0100c 	mov	r1, ip
   181a8:	e2422001 	sub	r2, r2, #1	; 0x1
   181ac:	0a00000c 	beq	181e4 <strncpy+0xac>
   181b0:	e5f43001 	ldrb	r3, [r4, #1]!
   181b4:	e3530000 	cmp	r3, #0	; 0x0
   181b8:	e54c3001 	strb	r3, [ip, #-1]
   181bc:	e28cc001 	add	ip, ip, #1	; 0x1
   181c0:	1afffff6 	bne	181a0 <strncpy+0x68>
   181c4:	e3520000 	cmp	r2, #0	; 0x0
   181c8:	13a03000 	movne	r3, #0	; 0x0
   181cc:	11a0c003 	movne	ip, r3
   181d0:	0a000003 	beq	181e4 <strncpy+0xac>
   181d4:	e7c1c003 	strb	ip, [r1, r3]
   181d8:	e2833001 	add	r3, r3, #1	; 0x1
   181dc:	e1520003 	cmp	r2, r3
   181e0:	1afffffb 	bne	181d4 <strncpy+0x9c>
   181e4:	e1a00005 	mov	r0, r5
   181e8:	e8bd0030 	pop	{r4, r5}
   181ec:	e12fff1e 	bx	lr
   181f0:	e591c000 	ldr	ip, [r1]
   181f4:	e28c24ff 	add	r2, ip, #-16777216	; 0xff000000
   181f8:	e2422801 	sub	r2, r2, #65536	; 0x10000
   181fc:	e2422c01 	sub	r2, r2, #256	; 0x100
   18200:	e2422001 	sub	r2, r2, #1	; 0x1
   18204:	e1e0300c 	mvn	r3, ip
   18208:	e0033002 	and	r3, r3, r2
   1820c:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   18210:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   18214:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   18218:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   1821c:	e3530000 	cmp	r3, #0	; 0x0
   18220:	1a000004 	bne	18238 <strncpy+0x100>
   18224:	e2400004 	sub	r0, r0, #4	; 0x4
   18228:	e3500003 	cmp	r0, #3	; 0x3
   1822c:	e484c004 	str	ip, [r4], #4
   18230:	e2811004 	add	r1, r1, #4	; 0x4
   18234:	8affffed 	bhi	181f0 <strncpy+0xb8>
   18238:	e1a0c004 	mov	ip, r4
   1823c:	e1a04001 	mov	r4, r1
   18240:	eaffffcd 	b	1817c <strncpy+0x44>

00018244 <strrchr>:
   18244:	e92d4030 	push	{r4, r5, lr}
   18248:	e2515000 	subs	r5, r1, #0	; 0x0
   1824c:	e1a03000 	mov	r3, r0
   18250:	13a04000 	movne	r4, #0	; 0x0
   18254:	1a000002 	bne	18264 <strrchr+0x20>
   18258:	ea000008 	b	18280 <strrchr+0x3c>
   1825c:	e1a04000 	mov	r4, r0
   18260:	e2803001 	add	r3, r0, #1	; 0x1
   18264:	e1a00003 	mov	r0, r3
   18268:	e1a01005 	mov	r1, r5
   1826c:	ebfffeb2 	bl	17d3c <strchr>
   18270:	e3500000 	cmp	r0, #0	; 0x0
   18274:	1afffff8 	bne	1825c <strrchr+0x18>
   18278:	e1a00004 	mov	r0, r4
   1827c:	e8bd8030 	pop	{r4, r5, pc}
   18280:	e8bd4030 	pop	{r4, r5, lr}
   18284:	eafffeac 	b	17d3c <strchr>

00018288 <_malloc_trim_r>:
   18288:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1828c:	e59f70e0 	ldr	r7, [pc, #224]	; 18374 <_malloc_trim_r+0xec>
   18290:	e1a04001 	mov	r4, r1
   18294:	e1a06000 	mov	r6, r0
   18298:	ebfffea5 	bl	17d34 <__malloc_lock>
   1829c:	e5973008 	ldr	r3, [r7, #8]
   182a0:	e5932004 	ldr	r2, [r3, #4]
   182a4:	e3c25003 	bic	r5, r2, #3	; 0x3
   182a8:	e2853efe 	add	r3, r5, #4064	; 0xfe0
   182ac:	e283300f 	add	r3, r3, #15	; 0xf
   182b0:	e0643003 	rsb	r3, r4, r3
   182b4:	e1a03623 	lsr	r3, r3, #12
   182b8:	e2433001 	sub	r3, r3, #1	; 0x1
   182bc:	e1a04603 	lsl	r4, r3, #12
   182c0:	e3540a01 	cmp	r4, #4096	; 0x1000
   182c4:	ba000006 	blt	182e4 <_malloc_trim_r+0x5c>
   182c8:	e1a00006 	mov	r0, r6
   182cc:	e3a01000 	mov	r1, #0	; 0x0
   182d0:	ebffe5db 	bl	11a44 <_sbrk_r>
   182d4:	e5973008 	ldr	r3, [r7, #8]
   182d8:	e0833005 	add	r3, r3, r5
   182dc:	e1500003 	cmp	r0, r3
   182e0:	0a000003 	beq	182f4 <_malloc_trim_r+0x6c>
   182e4:	e1a00006 	mov	r0, r6
   182e8:	ebfffe92 	bl	17d38 <__malloc_unlock>
   182ec:	e3a00000 	mov	r0, #0	; 0x0
   182f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   182f4:	e1a00006 	mov	r0, r6
   182f8:	e2641000 	rsb	r1, r4, #0	; 0x0
   182fc:	ebffe5d0 	bl	11a44 <_sbrk_r>
   18300:	e3700001 	cmn	r0, #1	; 0x1
   18304:	0a00000b 	beq	18338 <_malloc_trim_r+0xb0>
   18308:	e59fc068 	ldr	ip, [pc, #104]	; 18378 <_malloc_trim_r+0xf0>
   1830c:	e59c2000 	ldr	r2, [ip]
   18310:	e5971008 	ldr	r1, [r7, #8]
   18314:	e0643005 	rsb	r3, r4, r5
   18318:	e3833001 	orr	r3, r3, #1	; 0x1
   1831c:	e0642002 	rsb	r2, r4, r2
   18320:	e1a00006 	mov	r0, r6
   18324:	e5813004 	str	r3, [r1, #4]
   18328:	e58c2000 	str	r2, [ip]
   1832c:	ebfffe81 	bl	17d38 <__malloc_unlock>
   18330:	e3a00001 	mov	r0, #1	; 0x1
   18334:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18338:	e3a01000 	mov	r1, #0	; 0x0
   1833c:	e1a00006 	mov	r0, r6
   18340:	ebffe5bf 	bl	11a44 <_sbrk_r>
   18344:	e597c008 	ldr	ip, [r7, #8]
   18348:	e06c1000 	rsb	r1, ip, r0
   1834c:	e351000f 	cmp	r1, #15	; 0xf
   18350:	daffffe3 	ble	182e4 <_malloc_trim_r+0x5c>
   18354:	e59f3020 	ldr	r3, [pc, #32]	; 1837c <_malloc_trim_r+0xf4>
   18358:	e5932000 	ldr	r2, [r3]
   1835c:	e59f3014 	ldr	r3, [pc, #20]	; 18378 <_malloc_trim_r+0xf0>
   18360:	e0622000 	rsb	r2, r2, r0
   18364:	e3811001 	orr	r1, r1, #1	; 0x1
   18368:	e5832000 	str	r2, [r3]
   1836c:	e58c1004 	str	r1, [ip, #4]
   18370:	eaffffdb 	b	182e4 <_malloc_trim_r+0x5c>
   18374:	40000080 	.word	0x40000080
   18378:	40001210 	.word	0x40001210
   1837c:	4000048c 	.word	0x4000048c

00018380 <_free_r>:
   18380:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18384:	e2514000 	subs	r4, r1, #0	; 0x0
   18388:	e1a08000 	mov	r8, r0
   1838c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18390:	e2445008 	sub	r5, r4, #8	; 0x8
   18394:	ebfffe66 	bl	17d34 <__malloc_lock>
   18398:	e5951004 	ldr	r1, [r5, #4]
   1839c:	e59f7244 	ldr	r7, [pc, #580]	; 185e8 <_free_r+0x268>
   183a0:	e3c1e001 	bic	lr, r1, #1	; 0x1
   183a4:	e085000e 	add	r0, r5, lr
   183a8:	e5973008 	ldr	r3, [r7, #8]
   183ac:	e5902004 	ldr	r2, [r0, #4]
   183b0:	e1530000 	cmp	r3, r0
   183b4:	e3c26003 	bic	r6, r2, #3	; 0x3
   183b8:	0a00006d 	beq	18574 <_free_r+0x1f4>
   183bc:	e2111001 	ands	r1, r1, #1	; 0x1
   183c0:	e5806004 	str	r6, [r0, #4]
   183c4:	13a01000 	movne	r1, #0	; 0x0
   183c8:	0a000040 	beq	184d0 <_free_r+0x150>
   183cc:	e0803006 	add	r3, r0, r6
   183d0:	e5932004 	ldr	r2, [r3, #4]
   183d4:	e3120001 	tst	r2, #1	; 0x1
   183d8:	1a000006 	bne	183f8 <_free_r+0x78>
   183dc:	e3510000 	cmp	r1, #0	; 0x0
   183e0:	e08ee006 	add	lr, lr, r6
   183e4:	15902008 	ldrne	r2, [r0, #8]
   183e8:	0a000047 	beq	1850c <_free_r+0x18c>
   183ec:	e590300c 	ldr	r3, [r0, #12]
   183f0:	e5832008 	str	r2, [r3, #8]
   183f4:	e582300c 	str	r3, [r2, #12]
   183f8:	e38e3001 	orr	r3, lr, #1	; 0x1
   183fc:	e3510000 	cmp	r1, #0	; 0x0
   18400:	e5853004 	str	r3, [r5, #4]
   18404:	e785e00e 	str	lr, [r5, lr]
   18408:	1a00002d 	bne	184c4 <_free_r+0x144>
   1840c:	e35e0c02 	cmp	lr, #512	; 0x200
   18410:	3a000049 	bcc	1853c <_free_r+0x1bc>
   18414:	e1a014ae 	lsr	r1, lr, #9
   18418:	e3510004 	cmp	r1, #4	; 0x4
   1841c:	91a0332e 	lsrls	r3, lr, #6
   18420:	92831038 	addls	r1, r3, #56	; 0x38
   18424:	91a03181 	lslls	r3, r1, #3
   18428:	9a000015 	bls	18484 <_free_r+0x104>
   1842c:	e3510014 	cmp	r1, #20	; 0x14
   18430:	9281105b 	addls	r1, r1, #91	; 0x5b
   18434:	91a03181 	lslls	r3, r1, #3
   18438:	9a000011 	bls	18484 <_free_r+0x104>
   1843c:	e3510054 	cmp	r1, #84	; 0x54
   18440:	91a0362e 	lsrls	r3, lr, #12
   18444:	9283106e 	addls	r1, r3, #110	; 0x6e
   18448:	91a03181 	lslls	r3, r1, #3
   1844c:	9a00000c 	bls	18484 <_free_r+0x104>
   18450:	e3510f55 	cmp	r1, #340	; 0x154
   18454:	91a037ae 	lsrls	r3, lr, #15
   18458:	92831077 	addls	r1, r3, #119	; 0x77
   1845c:	91a03181 	lslls	r3, r1, #3
   18460:	9a000007 	bls	18484 <_free_r+0x104>
   18464:	e3a03e55 	mov	r3, #1360	; 0x550
   18468:	e2833004 	add	r3, r3, #4	; 0x4
   1846c:	e1510003 	cmp	r1, r3
   18470:	91a0392e 	lsrls	r3, lr, #18
   18474:	9283107c 	addls	r1, r3, #124	; 0x7c
   18478:	83a0107e 	movhi	r1, #126	; 0x7e
   1847c:	82433f59 	subhi	r3, r3, #356	; 0x164
   18480:	91a03181 	lslls	r3, r1, #3
   18484:	e0872003 	add	r2, r7, r3
   18488:	e5920008 	ldr	r0, [r2, #8]
   1848c:	e1500002 	cmp	r0, r2
   18490:	0a00004d 	beq	185cc <_free_r+0x24c>
   18494:	e5903004 	ldr	r3, [r0, #4]
   18498:	e3c33003 	bic	r3, r3, #3	; 0x3
   1849c:	e15e0003 	cmp	lr, r3
   184a0:	2a000002 	bcs	184b0 <_free_r+0x130>
   184a4:	e5900008 	ldr	r0, [r0, #8]
   184a8:	e1520000 	cmp	r2, r0
   184ac:	1afffff8 	bne	18494 <_free_r+0x114>
   184b0:	e590300c 	ldr	r3, [r0, #12]
   184b4:	e585300c 	str	r3, [r5, #12]
   184b8:	e5850008 	str	r0, [r5, #8]
   184bc:	e580500c 	str	r5, [r0, #12]
   184c0:	e5835008 	str	r5, [r3, #8]
   184c4:	e1a00008 	mov	r0, r8
   184c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   184cc:	eafffe19 	b	17d38 <__malloc_unlock>
   184d0:	e5142008 	ldr	r2, [r4, #-8]
   184d4:	e0625005 	rsb	r5, r2, r5
   184d8:	e595c008 	ldr	ip, [r5, #8]
   184dc:	e2873008 	add	r3, r7, #8	; 0x8
   184e0:	e15c0003 	cmp	ip, r3
   184e4:	1595300c 	ldrne	r3, [r5, #12]
   184e8:	1583c008 	strne	ip, [r3, #8]
   184ec:	158c300c 	strne	r3, [ip, #12]
   184f0:	e0803006 	add	r3, r0, r6
   184f4:	e08ee002 	add	lr, lr, r2
   184f8:	e5932004 	ldr	r2, [r3, #4]
   184fc:	03a01001 	moveq	r1, #1	; 0x1
   18500:	e3120001 	tst	r2, #1	; 0x1
   18504:	1affffbb 	bne	183f8 <_free_r+0x78>
   18508:	eaffffb3 	b	183dc <_free_r+0x5c>
   1850c:	e5902008 	ldr	r2, [r0, #8]
   18510:	e59f30d4 	ldr	r3, [pc, #212]	; 185ec <_free_r+0x26c>
   18514:	e1520003 	cmp	r2, r3
   18518:	1affffb3 	bne	183ec <_free_r+0x6c>
   1851c:	e38e3001 	orr	r3, lr, #1	; 0x1
   18520:	e582500c 	str	r5, [r2, #12]
   18524:	e5825008 	str	r5, [r2, #8]
   18528:	e785e00e 	str	lr, [r5, lr]
   1852c:	e5853004 	str	r3, [r5, #4]
   18530:	e5852008 	str	r2, [r5, #8]
   18534:	e585200c 	str	r2, [r5, #12]
   18538:	eaffffe1 	b	184c4 <_free_r+0x144>
   1853c:	e1a031ae 	lsr	r3, lr, #3
   18540:	e5971004 	ldr	r1, [r7, #4]
   18544:	e1a00143 	asr	r0, r3, #2
   18548:	e3a02001 	mov	r2, #1	; 0x1
   1854c:	e1811012 	orr	r1, r1, r2, lsl r0
   18550:	e1a03183 	lsl	r3, r3, #3
   18554:	e0873003 	add	r3, r7, r3
   18558:	e5932008 	ldr	r2, [r3, #8]
   1855c:	e585300c 	str	r3, [r5, #12]
   18560:	e5852008 	str	r2, [r5, #8]
   18564:	e5871004 	str	r1, [r7, #4]
   18568:	e582500c 	str	r5, [r2, #12]
   1856c:	e5835008 	str	r5, [r3, #8]
   18570:	eaffffd3 	b	184c4 <_free_r+0x144>
   18574:	e3110001 	tst	r1, #1	; 0x1
   18578:	e086000e 	add	r0, r6, lr
   1857c:	1a000006 	bne	1859c <_free_r+0x21c>
   18580:	e5141008 	ldr	r1, [r4, #-8]
   18584:	e0615005 	rsb	r5, r1, r5
   18588:	e595200c 	ldr	r2, [r5, #12]
   1858c:	e5953008 	ldr	r3, [r5, #8]
   18590:	e5823008 	str	r3, [r2, #8]
   18594:	e583200c 	str	r2, [r3, #12]
   18598:	e0800001 	add	r0, r0, r1
   1859c:	e59f304c 	ldr	r3, [pc, #76]	; 185f0 <_free_r+0x270>
   185a0:	e5932000 	ldr	r2, [r3]
   185a4:	e3803001 	orr	r3, r0, #1	; 0x1
   185a8:	e1500002 	cmp	r0, r2
   185ac:	e5875008 	str	r5, [r7, #8]
   185b0:	e5853004 	str	r3, [r5, #4]
   185b4:	3affffc2 	bcc	184c4 <_free_r+0x144>
   185b8:	e59f3034 	ldr	r3, [pc, #52]	; 185f4 <_free_r+0x274>
   185bc:	e1a00008 	mov	r0, r8
   185c0:	e5931000 	ldr	r1, [r3]
   185c4:	ebffff2f 	bl	18288 <_malloc_trim_r>
   185c8:	eaffffbd 	b	184c4 <_free_r+0x144>
   185cc:	e5973004 	ldr	r3, [r7, #4]
   185d0:	e1a01141 	asr	r1, r1, #2
   185d4:	e3a02001 	mov	r2, #1	; 0x1
   185d8:	e1833112 	orr	r3, r3, r2, lsl r1
   185dc:	e5873004 	str	r3, [r7, #4]
   185e0:	e1a03000 	mov	r3, r0
   185e4:	eaffffb2 	b	184b4 <_free_r+0x134>
   185e8:	40000080 	.word	0x40000080
   185ec:	40000088 	.word	0x40000088
   185f0:	40000488 	.word	0x40000488
   185f4:	40001204 	.word	0x40001204

000185f8 <__aeabi_uidiv>:
   185f8:	e2512001 	subs	r2, r1, #1	; 0x1
   185fc:	012fff1e 	bxeq	lr
   18600:	3a000036 	bcc	186e0 <__aeabi_uidiv+0xe8>
   18604:	e1500001 	cmp	r0, r1
   18608:	9a000022 	bls	18698 <__aeabi_uidiv+0xa0>
   1860c:	e1110002 	tst	r1, r2
   18610:	0a000023 	beq	186a4 <__aeabi_uidiv+0xac>
   18614:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   18618:	01a01181 	lsleq	r1, r1, #3
   1861c:	03a03008 	moveq	r3, #8	; 0x8
   18620:	13a03001 	movne	r3, #1	; 0x1
   18624:	e3510201 	cmp	r1, #268435456	; 0x10000000
   18628:	31510000 	cmpcc	r1, r0
   1862c:	31a01201 	lslcc	r1, r1, #4
   18630:	31a03203 	lslcc	r3, r3, #4
   18634:	3afffffa 	bcc	18624 <__aeabi_uidiv+0x2c>
   18638:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1863c:	31510000 	cmpcc	r1, r0
   18640:	31a01081 	lslcc	r1, r1, #1
   18644:	31a03083 	lslcc	r3, r3, #1
   18648:	3afffffa 	bcc	18638 <__aeabi_uidiv+0x40>
   1864c:	e3a02000 	mov	r2, #0	; 0x0
   18650:	e1500001 	cmp	r0, r1
   18654:	20400001 	subcs	r0, r0, r1
   18658:	21822003 	orrcs	r2, r2, r3
   1865c:	e15000a1 	cmp	r0, r1, lsr #1
   18660:	204000a1 	subcs	r0, r0, r1, lsr #1
   18664:	218220a3 	orrcs	r2, r2, r3, lsr #1
   18668:	e1500121 	cmp	r0, r1, lsr #2
   1866c:	20400121 	subcs	r0, r0, r1, lsr #2
   18670:	21822123 	orrcs	r2, r2, r3, lsr #2
   18674:	e15001a1 	cmp	r0, r1, lsr #3
   18678:	204001a1 	subcs	r0, r0, r1, lsr #3
   1867c:	218221a3 	orrcs	r2, r2, r3, lsr #3
   18680:	e3500000 	cmp	r0, #0	; 0x0
   18684:	11b03223 	lsrsne	r3, r3, #4
   18688:	11a01221 	lsrne	r1, r1, #4
   1868c:	1affffef 	bne	18650 <__aeabi_uidiv+0x58>
   18690:	e1a00002 	mov	r0, r2
   18694:	e12fff1e 	bx	lr
   18698:	03a00001 	moveq	r0, #1	; 0x1
   1869c:	13a00000 	movne	r0, #0	; 0x0
   186a0:	e12fff1e 	bx	lr
   186a4:	e3510801 	cmp	r1, #65536	; 0x10000
   186a8:	21a01821 	lsrcs	r1, r1, #16
   186ac:	23a02010 	movcs	r2, #16	; 0x10
   186b0:	33a02000 	movcc	r2, #0	; 0x0
   186b4:	e3510c01 	cmp	r1, #256	; 0x100
   186b8:	21a01421 	lsrcs	r1, r1, #8
   186bc:	22822008 	addcs	r2, r2, #8	; 0x8
   186c0:	e3510010 	cmp	r1, #16	; 0x10
   186c4:	21a01221 	lsrcs	r1, r1, #4
   186c8:	22822004 	addcs	r2, r2, #4	; 0x4
   186cc:	e3510004 	cmp	r1, #4	; 0x4
   186d0:	82822003 	addhi	r2, r2, #3	; 0x3
   186d4:	908220a1 	addls	r2, r2, r1, lsr #1
   186d8:	e1a00230 	lsr	r0, r0, r2
   186dc:	e12fff1e 	bx	lr
   186e0:	e52de008 	str	lr, [sp, #-8]!
   186e4:	eb0000c3 	bl	189f8 <__aeabi_idiv0>
   186e8:	e3a00000 	mov	r0, #0	; 0x0
   186ec:	e49df008 	ldr	pc, [sp], #8

000186f0 <__aeabi_uidivmod>:
   186f0:	e92d4003 	push	{r0, r1, lr}
   186f4:	ebffffbf 	bl	185f8 <__aeabi_uidiv>
   186f8:	e8bd4006 	pop	{r1, r2, lr}
   186fc:	e0030092 	mul	r3, r2, r0
   18700:	e0411003 	sub	r1, r1, r3
   18704:	e12fff1e 	bx	lr

00018708 <__aeabi_idiv>:
   18708:	e3510000 	cmp	r1, #0	; 0x0
   1870c:	e020c001 	eor	ip, r0, r1
   18710:	0a000042 	beq	18820 <__aeabi_idiv+0x118>
   18714:	42611000 	rsbmi	r1, r1, #0	; 0x0
   18718:	e2512001 	subs	r2, r1, #1	; 0x1
   1871c:	0a000027 	beq	187c0 <__aeabi_idiv+0xb8>
   18720:	e1b03000 	movs	r3, r0
   18724:	42603000 	rsbmi	r3, r0, #0	; 0x0
   18728:	e1530001 	cmp	r3, r1
   1872c:	9a000026 	bls	187cc <__aeabi_idiv+0xc4>
   18730:	e1110002 	tst	r1, r2
   18734:	0a000028 	beq	187dc <__aeabi_idiv+0xd4>
   18738:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1873c:	01a01181 	lsleq	r1, r1, #3
   18740:	03a02008 	moveq	r2, #8	; 0x8
   18744:	13a02001 	movne	r2, #1	; 0x1
   18748:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1874c:	31510003 	cmpcc	r1, r3
   18750:	31a01201 	lslcc	r1, r1, #4
   18754:	31a02202 	lslcc	r2, r2, #4
   18758:	3afffffa 	bcc	18748 <__aeabi_idiv+0x40>
   1875c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   18760:	31510003 	cmpcc	r1, r3
   18764:	31a01081 	lslcc	r1, r1, #1
   18768:	31a02082 	lslcc	r2, r2, #1
   1876c:	3afffffa 	bcc	1875c <__aeabi_idiv+0x54>
   18770:	e3a00000 	mov	r0, #0	; 0x0
   18774:	e1530001 	cmp	r3, r1
   18778:	20433001 	subcs	r3, r3, r1
   1877c:	21800002 	orrcs	r0, r0, r2
   18780:	e15300a1 	cmp	r3, r1, lsr #1
   18784:	204330a1 	subcs	r3, r3, r1, lsr #1
   18788:	218000a2 	orrcs	r0, r0, r2, lsr #1
   1878c:	e1530121 	cmp	r3, r1, lsr #2
   18790:	20433121 	subcs	r3, r3, r1, lsr #2
   18794:	21800122 	orrcs	r0, r0, r2, lsr #2
   18798:	e15301a1 	cmp	r3, r1, lsr #3
   1879c:	204331a1 	subcs	r3, r3, r1, lsr #3
   187a0:	218001a2 	orrcs	r0, r0, r2, lsr #3
   187a4:	e3530000 	cmp	r3, #0	; 0x0
   187a8:	11b02222 	lsrsne	r2, r2, #4
   187ac:	11a01221 	lsrne	r1, r1, #4
   187b0:	1affffef 	bne	18774 <__aeabi_idiv+0x6c>
   187b4:	e35c0000 	cmp	ip, #0	; 0x0
   187b8:	42600000 	rsbmi	r0, r0, #0	; 0x0
   187bc:	e12fff1e 	bx	lr
   187c0:	e13c0000 	teq	ip, r0
   187c4:	42600000 	rsbmi	r0, r0, #0	; 0x0
   187c8:	e12fff1e 	bx	lr
   187cc:	33a00000 	movcc	r0, #0	; 0x0
   187d0:	01a00fcc 	asreq	r0, ip, #31
   187d4:	03800001 	orreq	r0, r0, #1	; 0x1
   187d8:	e12fff1e 	bx	lr
   187dc:	e3510801 	cmp	r1, #65536	; 0x10000
   187e0:	21a01821 	lsrcs	r1, r1, #16
   187e4:	23a02010 	movcs	r2, #16	; 0x10
   187e8:	33a02000 	movcc	r2, #0	; 0x0
   187ec:	e3510c01 	cmp	r1, #256	; 0x100
   187f0:	21a01421 	lsrcs	r1, r1, #8
   187f4:	22822008 	addcs	r2, r2, #8	; 0x8
   187f8:	e3510010 	cmp	r1, #16	; 0x10
   187fc:	21a01221 	lsrcs	r1, r1, #4
   18800:	22822004 	addcs	r2, r2, #4	; 0x4
   18804:	e3510004 	cmp	r1, #4	; 0x4
   18808:	82822003 	addhi	r2, r2, #3	; 0x3
   1880c:	908220a1 	addls	r2, r2, r1, lsr #1
   18810:	e35c0000 	cmp	ip, #0	; 0x0
   18814:	e1a00233 	lsr	r0, r3, r2
   18818:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1881c:	e12fff1e 	bx	lr
   18820:	e52de008 	str	lr, [sp, #-8]!
   18824:	eb000073 	bl	189f8 <__aeabi_idiv0>
   18828:	e3a00000 	mov	r0, #0	; 0x0
   1882c:	e49df008 	ldr	pc, [sp], #8

00018830 <__aeabi_idivmod>:
   18830:	e92d4003 	push	{r0, r1, lr}
   18834:	ebffffb3 	bl	18708 <__aeabi_idiv>
   18838:	e8bd4006 	pop	{r1, r2, lr}
   1883c:	e0030092 	mul	r3, r2, r0
   18840:	e0411003 	sub	r1, r1, r3
   18844:	e12fff1e 	bx	lr

00018848 <__umodsi3>:
   18848:	e2512001 	subs	r2, r1, #1	; 0x1
   1884c:	3a00002c 	bcc	18904 <__umodsi3+0xbc>
   18850:	11500001 	cmpne	r0, r1
   18854:	03a00000 	moveq	r0, #0	; 0x0
   18858:	81110002 	tsthi	r1, r2
   1885c:	00000002 	andeq	r0, r0, r2
   18860:	912fff1e 	bxls	lr
   18864:	e3a02000 	mov	r2, #0	; 0x0
   18868:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1886c:	31510000 	cmpcc	r1, r0
   18870:	31a01201 	lslcc	r1, r1, #4
   18874:	32822004 	addcc	r2, r2, #4	; 0x4
   18878:	3afffffa 	bcc	18868 <__umodsi3+0x20>
   1887c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   18880:	31510000 	cmpcc	r1, r0
   18884:	31a01081 	lslcc	r1, r1, #1
   18888:	32822001 	addcc	r2, r2, #1	; 0x1
   1888c:	3afffffa 	bcc	1887c <__umodsi3+0x34>
   18890:	e2522003 	subs	r2, r2, #3	; 0x3
   18894:	ba00000e 	blt	188d4 <__umodsi3+0x8c>
   18898:	e1500001 	cmp	r0, r1
   1889c:	20400001 	subcs	r0, r0, r1
   188a0:	e15000a1 	cmp	r0, r1, lsr #1
   188a4:	204000a1 	subcs	r0, r0, r1, lsr #1
   188a8:	e1500121 	cmp	r0, r1, lsr #2
   188ac:	20400121 	subcs	r0, r0, r1, lsr #2
   188b0:	e15001a1 	cmp	r0, r1, lsr #3
   188b4:	204001a1 	subcs	r0, r0, r1, lsr #3
   188b8:	e3500001 	cmp	r0, #1	; 0x1
   188bc:	e1a01221 	lsr	r1, r1, #4
   188c0:	a2522004 	subsge	r2, r2, #4	; 0x4
   188c4:	aafffff3 	bge	18898 <__umodsi3+0x50>
   188c8:	e3120003 	tst	r2, #3	; 0x3
   188cc:	13300000 	teqne	r0, #0	; 0x0
   188d0:	0a00000a 	beq	18900 <__umodsi3+0xb8>
   188d4:	e3720002 	cmn	r2, #2	; 0x2
   188d8:	ba000006 	blt	188f8 <__umodsi3+0xb0>
   188dc:	0a000002 	beq	188ec <__umodsi3+0xa4>
   188e0:	e1500001 	cmp	r0, r1
   188e4:	20400001 	subcs	r0, r0, r1
   188e8:	e1a010a1 	lsr	r1, r1, #1
   188ec:	e1500001 	cmp	r0, r1
   188f0:	20400001 	subcs	r0, r0, r1
   188f4:	e1a010a1 	lsr	r1, r1, #1
   188f8:	e1500001 	cmp	r0, r1
   188fc:	20400001 	subcs	r0, r0, r1
   18900:	e12fff1e 	bx	lr
   18904:	e52de008 	str	lr, [sp, #-8]!
   18908:	eb00003a 	bl	189f8 <__aeabi_idiv0>
   1890c:	e3a00000 	mov	r0, #0	; 0x0
   18910:	e49df008 	ldr	pc, [sp], #8

00018914 <__modsi3>:
   18914:	e3510000 	cmp	r1, #0	; 0x0
   18918:	0a000032 	beq	189e8 <__modsi3+0xd4>
   1891c:	42611000 	rsbmi	r1, r1, #0	; 0x0
   18920:	e1b0c000 	movs	ip, r0
   18924:	42600000 	rsbmi	r0, r0, #0	; 0x0
   18928:	e2512001 	subs	r2, r1, #1	; 0x1
   1892c:	11500001 	cmpne	r0, r1
   18930:	03a00000 	moveq	r0, #0	; 0x0
   18934:	81110002 	tsthi	r1, r2
   18938:	00000002 	andeq	r0, r0, r2
   1893c:	9a000026 	bls	189dc <__modsi3+0xc8>
   18940:	e3a02000 	mov	r2, #0	; 0x0
   18944:	e3510201 	cmp	r1, #268435456	; 0x10000000
   18948:	31510000 	cmpcc	r1, r0
   1894c:	31a01201 	lslcc	r1, r1, #4
   18950:	32822004 	addcc	r2, r2, #4	; 0x4
   18954:	3afffffa 	bcc	18944 <__modsi3+0x30>
   18958:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1895c:	31510000 	cmpcc	r1, r0
   18960:	31a01081 	lslcc	r1, r1, #1
   18964:	32822001 	addcc	r2, r2, #1	; 0x1
   18968:	3afffffa 	bcc	18958 <__modsi3+0x44>
   1896c:	e2522003 	subs	r2, r2, #3	; 0x3
   18970:	ba00000e 	blt	189b0 <__modsi3+0x9c>
   18974:	e1500001 	cmp	r0, r1
   18978:	20400001 	subcs	r0, r0, r1
   1897c:	e15000a1 	cmp	r0, r1, lsr #1
   18980:	204000a1 	subcs	r0, r0, r1, lsr #1
   18984:	e1500121 	cmp	r0, r1, lsr #2
   18988:	20400121 	subcs	r0, r0, r1, lsr #2
   1898c:	e15001a1 	cmp	r0, r1, lsr #3
   18990:	204001a1 	subcs	r0, r0, r1, lsr #3
   18994:	e3500001 	cmp	r0, #1	; 0x1
   18998:	e1a01221 	lsr	r1, r1, #4
   1899c:	a2522004 	subsge	r2, r2, #4	; 0x4
   189a0:	aafffff3 	bge	18974 <__modsi3+0x60>
   189a4:	e3120003 	tst	r2, #3	; 0x3
   189a8:	13300000 	teqne	r0, #0	; 0x0
   189ac:	0a00000a 	beq	189dc <__modsi3+0xc8>
   189b0:	e3720002 	cmn	r2, #2	; 0x2
   189b4:	ba000006 	blt	189d4 <__modsi3+0xc0>
   189b8:	0a000002 	beq	189c8 <__modsi3+0xb4>
   189bc:	e1500001 	cmp	r0, r1
   189c0:	20400001 	subcs	r0, r0, r1
   189c4:	e1a010a1 	lsr	r1, r1, #1
   189c8:	e1500001 	cmp	r0, r1
   189cc:	20400001 	subcs	r0, r0, r1
   189d0:	e1a010a1 	lsr	r1, r1, #1
   189d4:	e1500001 	cmp	r0, r1
   189d8:	20400001 	subcs	r0, r0, r1
   189dc:	e35c0000 	cmp	ip, #0	; 0x0
   189e0:	42600000 	rsbmi	r0, r0, #0	; 0x0
   189e4:	e12fff1e 	bx	lr
   189e8:	e52de008 	str	lr, [sp, #-8]!
   189ec:	eb000001 	bl	189f8 <__aeabi_idiv0>
   189f0:	e3a00000 	mov	r0, #0	; 0x0
   189f4:	e49df008 	ldr	pc, [sp], #8

000189f8 <__aeabi_idiv0>:
   189f8:	e12fff1e 	bx	lr

000189fc <welcome>:
   189fc:	676e6f53 73694c20 0d0a3a74 00000000     Song List:......
   18a0c:	00000000 69460000                                ......

00018a12 <NotFound>:
   18a12:	656c6946 746f4e20 756f4620 5521646e              File Not Found!

00018a21 <USB>:
   18a21:	20425355 6e6e6f43 65746365 000a2164              USB Connected!

00018a2f <newline>:
   18a2f:	6f56000a                                         ..

00018a31 <volume>:
   18a31:	756c6f56 4300656d                                Volume.

00018a38 <contrast>:
   18a38:	746e6f43 74736172 64615200                       Contrast.

00018a41 <radio_power>:
   18a41:	69646152 6f50206f 52726577                       Radio Power

00018a4c <radio_channel_menu>:
   18a4c:	69646152 6843206f 656e6e61 7465536c              Radio Channel

00018a59 <settings>:
   18a59:	74746553 73676e69 0000003a                       Settings:.

00018a63 <text_array>:
   18a63:	00000000 f6f60000 e0000000 2800e000     ...............(
   18a73:	28fe28fe 54d66400 10ccc208 b24cc626     .(.(.d.T....&.L.
   18a83:	000a6c92 0000e000 82443800 44820000     .l.......8D....D
   18a93:	50880038 088850f8 08083e08 06050000     8..P.P...>......
   18aa3:	08080800 00000808 02000606 8060100c     ..............`.
   18ab3:	a2928a7c fe42007c 86420002 4462928a     |...|.B...B...bD
   18ac3:	6c929282 fe503010 a2a2e410 523c9ca2     ...l.0P.......<R
   18ad3:	800c9292 80e09886 9292926c 9292606c     ........l...l`..
   18ae3:	00007894 00003636 00363500 82442810     .x..66...56..(D.
   18af3:	28282800 82002828 40102844 60908a80     .(((((..D(.@...`
   18b03:	baba827c 88483e62 92fe3e48 7c6c9292     |...b>H.H>....l|
   18b13:	44828282 828282fe 9292fe7c 90fe8292     ...D....|.......
   18b23:	7c809090 4e8a8282 101010fe fe8282fe     ...|...N........
   18b33:	82848282 fe8080fc 82442810 020202fe     .........(D.....
   18b43:	2040fe02 60fefe40 7cfe0c10 7c828282     ..@ @..`...|...|
   18b53:	909090fe 82827c60 90fe7e86 64629498     ....`|...~....bd
   18b63:	4c929292 80fe8080 0202fc80 04f8fc02     ...L............
   18b73:	fcf80402 fc020c02 281028c6 1e20c0c6     .........(.(.. .
   18b83:	8a86c020 00c2a292 0082fe00 00000000      ...............
   18b93:	10608000 4020020c 01204080 01010101     ..`... @.@ .....
   18ba3:	00204080 2a2a0400 12fe1e2a 1c1c2222     .@ ...***...""..
   18bb3:	14222222 1222221c 2a2a1cfe 7e10182a     """..""...***..~
   18bc3:	18408090 1e252525 101010fe 5e12000e     ..@.%%%........^
   18bd3:	01020002 fe5e1101 22140808 02fe8200     ......^...."....
   18be3:	1c203e00 203e1e20 1c1e2020 1c222222     .> . .>   ..""".
   18bf3:	2424243f 24241818 103e013f 12102020     ?$$$..$$?.>.  ..
   18c03:	042a2a2a 123c1000 02023c04 0c303e02     ***...<..<...>0.
   18c13:	38300c02 38061806 14081422 05053822     ..08...8"..."8..
   18c23:	26223e05 0022322a 82826c10 02ff0204     .>"&*2"..l......
   18c33:	6c828204 10080010 00100818                       ...l.......

00018c3e <logo_spark>:
	...
   18c46:	00000078 00000000 00000000 00000000     x...............
   18c56:	000000f0 00000000 00000000 01000000     ................
   18c66:	000000e0 00000000 00000000 01000000     ................
   18c76:	000000e0 00000000 00000000 01000000     ................
   18c86:	000000f0 00000000 00000000 00000000     ................
   18c96:	000080fb 00000000 00000000 00000000     ................
   18ca6:	000080ff 00000000 00000000 00000000     ................
   18cb6:	0000807f 00000000 00000000 0c000000     ................
   18cc6:	0000c03f 00000000 00000000 1c000000     ?...............
   18cd6:	0000c03f 00000000 00000000 3c000000     ?..............<
   18ce6:	0000c07f 00000000 00000000 3f000000     ...............?
   18cf6:	000080ff 00000000 00000000 3f000000     ...............?
   18d06:	000080ff 00000000 00000000 3f000000     ...............?
   18d16:	000080ff 00000000 00000000 3f000000     ...............?
   18d26:	000000ff 00000000 00000000 3f000000     ...............?
   18d36:	000000fe 00000000 00000000 3f000000     ...............?
   18d46:	000000fc 00000000 00000000 3f000000     ...............?
   18d56:	000000e0 00000000 00000000 3e000000     ...............>
	...
   18d72:	3c000000 00000000 00000000 00000000     ...<............
   18d82:	38000000 00000000 00000000 00000000     ...8............
   18d92:	30000000 0000000f 00000000 00000000     ...0............
   18da2:	200e0000 0000001f 00000000 00000000     ... ............
   18db2:	001e0000 0000003f 00000000 00000000     ....?...........
   18dc2:	001e0000 0000003c 00000000 00000000     ....<...........
   18dd2:	001e0000 0000003c 00000000 019fe00f     ....<...........
   18de2:	1e9e09fc 9f73707f 00000000 87fff13f     .....ps.....?...
   18df2:	3dde3ffe fff378ff 00000080 c7fff93c     .?.=.x......<...
   18e02:	79de3fdf fff378ff 000000c0 cfc37978     .?.y.x......xy..
   18e12:	f01c3f0f e3f3783c 000000c0 e0c1017c     .?..<x......|...
   18e22:	e01f3e0f c3f3783c 000000c0 e081c13f     .>..<x......?...
   18e32:	e01f3c3f c1f3783c 000000c0 e381f11f     ?<..<x..........
   18e42:	e01f3cff c1f3783c 000000c0 e781f907     .<..<x..........
   18e52:	f01f3cef c1f3783c 000000c0 ef81f900     .<..<x..........
   18e62:	f81e3c07 c1f3783c 000000c0 efc17978     .<..<x......xy..
   18e72:	781e3c0f c1f3783c 000000c0 cfe37978     .<.x<x......xy..
   18e82:	3c1e3c0f c1f37c3c 000000c0 cffff93f     .<.<<|......?...
   18e92:	3e1e3cff c1f37f3c 000000cf 87fff11f     .<.><...........
   18ea2:	1e1e3cff c1f33f3c 000000c7 039ec107     .<..<?..........
   18eb2:	020000e0 00200e00 00000000 00800100     ...... .........
	...
   18ece:	00800100 00000000 00000000 00000000     ................
   18ede:	00800300 00c00000 00001800 00000808     ................
   18eee:	c3870100 f0e1e003 08333ef8 00001e3e     .........>3.>...
   18efe:	03860100 e0b00103 083b66dc 00003266     .........f;.f2..
   18f0e:	c3870000 4080e103 083b63d8 00003c60     .......@.c;.`<..
   18f1e:	83870000 4080c103 083f63f8 00000e60     .......@.c?.`...
   18f2e:	03060000 40b00103 083766d8 00003266     .......@.f7.f2..
   18f3e:	c3070000 40e0e0e3 08333ec8 00003e3e     .......@.>3.>>..
   18f4e:	c3070000 40e0e0e3 08333c88 00001e3c     .......@.<3.<...
	...

0001909e <abSense>:
   1909e:	00ff0070 0a000000 00000000 0000ffff     p...............
	...

000190b0 <abInquiry>:
   190b0:	02048000 0000001f 5543504c 20204253     ........LPCUSB  
   190c0:	7373614d 6f747320 65676172 20202020     Mass storage    
   190d0:	20312e30                                0.1 

000190d4 <_global_impure_ptr>:
   190d4:	40000494 0066664f 25006e4f 44530064     ...@Off.On.%d.SD
   190e4:	696e4920 72452074 0a726f72 20445300      Init Error..SD 
   190f4:	6e65704f 746f6f52 72724520 000a726f     OpenRoot Error..
   19104:	47204f47 504d204f 00002133 756e616d     GO GO MP3!..manu
   19114:	20203a66 30257830 0d0a7832 00000000     f:  0x%02x......
   19124:	3a6d656f 20202020 0d0a7325 00000000     oem:    %s......
   19134:	646f7270 2020203a 0d0a7325 00000000     prod:   %s......
   19144:	3a766572 20202020 78323025 00000d0a     rev:    %02x....
   19154:	69726573 203a6c61 30257830 0a786c38     serial: 0x%08lx.
   19164:	0000000d 65746164 2020203a 64323025     ....date:   %02d
   19174:	3230252f 000d0a64 657a6973 2020203a     /%02d...size:   
   19184:	0a646c25 0000000d 79706f63 2020203a     %ld.....copy:   
   19194:	0d0a6425 00000000 702e7277 203a2e72     %d......wr.pr.: 
   191a4:	252f6425 000d0a64 6d726f66 203a7461     %d/%d...format: 
   191b4:	0d0a6425 00000000 65657266 2020203a     %d......free:   
   191c4:	2f646c25 0a646c25 0000000d 6e65706f     %ld/%ld.....open
   191d4:	20676e69 74726170 6f697469 6166206e     ing partition fa
   191e4:	64656c69 00000d0a 6e65706f 20676e69     iled....opening 
   191f4:	656c6966 74737973 66206d65 656c6961     filesystem faile
   19204:	000d0a64 0000002f 6e65706f 20676e69     d.../...opening 
   19214:	746f6f72 72696420 6f746365 66207972     root directory f
   19224:	656c6961 000d0a64 52204453 4e205741     ailed...SD RAW N
   19234:	4120544f 4c494156 454c4241 00000d0a     OT AVAILABLE....
   19244:	64253d69 6572202c 6e6f7073 253d6573     i=%d, response=%
   19254:	000d0a64 65720d0a 6e6f7073 203a6573     d.....response: 
   19264:	0d0a6425 00000000 203d2069 66377830     %d......i = 0x7f
   19274:	0d0a6666 00000000 434f4c42 4953204b     ff......BLOCK SI
   19284:	5320455a 45205445 0a205252 0000000d     ZE SET ERR .....
   19294:	725f6473 725f7761 20646165 6b726f62     sd_raw_read bork
   192a4:	000d0a73 4c4c414d 4620434f 534c4941     s...MALLOC FAILS
   192b4:	00000d0a 6c696146 52206465 69646165     ....Failed Readi
   192c4:	4820676e 65646165 000d0a72 74696e49     ng Header...Init
   192d4:	696c6169 676e6973 42535520 61747320     ialising USB sta
   192e4:	000a6b63 72617453 676e6974 42535520     ck..Starting USB
   192f4:	6d6f6320 696e756d 69746163 000a6e6f      communication..
   19304:	3a445343 00000000 32302520 00000078     CSD:.... %02x...
   19314:	75677241 746e656d 74756f20 20666f20     Argument out of 
   19324:	6e756f62 0a2e7364 00000000 72646441     bounds......Addr
   19334:	20737365 2074756f 6220666f 646e756f     ess out of bound
   19344:	000a2e73 6f727245 75642072 676e6972     s...Error during
   19354:	61726520 73206573 65757165 2e65636e      erase sequence.
   19364:	0000000a 20435243 6c696166 0a2e6465     ....CRC failed..
   19374:	00000000 656c6c49 206c6167 6d6d6f63     ....Illegal comm
   19384:	2e646e61 0000000a 73617245 65722065     and.....Erase re
   19394:	20746573 65657328 6e615320 6b736944     set (see SanDisk
   193a4:	636f6420 35702073 2933312d 00000a2e      docs p5-13)....
   193b4:	0000002e 6e6b6e55 206e776f 6f727265     ....Unknown erro
   193c4:	78302072 28207825 20656573 446e6153     r 0x%x (see SanD
   193d4:	206b7369 73636f64 2d357020 2e293331     isk docs p5-13).
   193e4:	0000000a 70736572 6678303d 00000a66     ....resp=0xff...
   193f4:	70736572 78303d21 000a6666 64726143     resp!=0xff..Card
   19404:	20736920 6b636f4c 0a2e6465 00000000      is Locked......
   19414:	45205057 65736172 696b5320 4c202c70     WP Erase Skip, L
   19424:	2f6b636f 6f6c6e55 43206b63 4620646d     ock/Unlock Cmd F
   19434:	656c6961 000a2e64 656e6547 206c6172     ailed...General 
   19444:	6e55202f 776f6e6b 7265206e 20726f72     / Unknown error 
   19454:	63202d2d 20647261 6b6f7262 2e3f6e65     -- card broken?.
   19464:	0000000a 65746e49 6c616e72 72616320     ....Internal car
   19474:	6f632064 6f72746e 72656c6c 72726520     d controller err
   19484:	0a2e726f 00000000 64726143 746e6920     or......Card int
   19494:	616e7265 4345206c 61772043 70612073     ernal ECC was ap
   194a4:	65696c70 62202c64 66207475 656c6961     plied, but faile
   194b4:	6f742064 726f6320 74636572 65687420     d to correct the
   194c4:	74616420 000a2e61 74697257 72702065      data...Write pr
   194d4:	6365746f 69762074 74616c6f 2e6e6f69     otect violation.
   194e4:	0000000a 69206e41 6c61766e 73206469     ....An invalid s
   194f4:	63656c65 6e6f6974 6573202c 726f7463     election, sector
   19504:	6f662073 72652072 2e657361 0000000a     s for erase.....
   19514:	2074754f 5220666f 65676e61 5343202c     Out of Range, CS
   19524:	764f5f44 72777265 2e657469 0000000a     D_Overwrite.....
   19534:	6e6b6e55 206e776f 6f727265 30203a72     Unknown error: 0
   19544:	20782578 65657328 6e615320 6b736944     x%x (see SanDisk
   19554:	636f6420 35702073 2934312d 00000a2e      docs p5-14)....
   19564:	49204453 2074696e 656e6f64 0a2e2e2e     SD Init done....
   19574:	00000000 64726143 64696420 2074276e     ....Card didn't 
   19584:	75746572 74206e72 72206568 79646165     return the ready
   19594:	61747320 202c6574 61657262 676e696b      state, breaking
   195a4:	2e707520 000a2e2e 49697073 2074696e      up.....spiInit 
   195b4:	20726f66 28495053 000a2930 00000043     for SPI(0)..C...
