   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting = 16, radio_channel = 1000;
  78:main.c        **** char radio_enable = OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars = 0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        ****   //Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   initializeMP3Player();
 106:main.c        ****   splashScreen();
 107:main.c        ****   initializeRadio(radio_channel);
 108:main.c        ****   
 109:main.c        ****   // Find Out how many files are on the SD card
 110:main.c        ****   selectSD();	//Make sure SPI is selected for reading the card
 111:main.c        ****   
 112:main.c        ****   do{
 113:main.c        ****   	numberOfChars++;
 114:main.c        ****   }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filena
 115:main.c        ****   char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD c
 116:main.c        ****   NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 117:main.c        ****   FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 118:main.c        ****   
 119:main.c        ****   //Get all of the filenames into a Global Array
 120:main.c        ****   int chartracker=0;	
 121:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 122:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 123:main.c        ****   		if(chartracker <= numberOfChars){
 124:main.c        ****   			if(tempNames[chartracker]==','){
 125:main.c        ****   				Files[j].file_name[i] = '\0';
 126:main.c        ****   				i=MAXFILENAMELEN+1;
 127:main.c        ****   			}
 128:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 129:main.c        ****   			chartracker++;
 130:main.c        ****   		}
 131:main.c        ****   		else Files[j].file_name[i] ='\0';
 132:main.c        ****   	}	
 133:main.c        ****   }
 134:main.c        **** 	
 135:main.c        **** 	
 136:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 137:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 138:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 139:main.c        **** 	
 140:main.c        **** 	file_manager.orientation =ORIENTUP;
 141:main.c        **** 	file_manager.text_color=white;
 142:main.c        **** 	file_manager.back_color=black;
 143:main.c        **** 	
 144:main.c        **** 	file_manager.current_page=0;
 145:main.c        **** 	file_manager.current_row=1;
 146:main.c        **** 	file_manager.current_index=0;	
 147:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 148:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++) {
 149:main.c        **** 	  file_manager.title[i] = welcome[i];
 150:main.c        ****   }
 151:main.c        **** 	
 152:main.c        **** 	//Generate the settings menu and fill in default settings values
 153:main.c        **** 	fillSettings(&settings_menu);
 154:main.c        **** 	
 155:main.c        **** 	//Setup the menu
 156:main.c        **** 	current_display = &file_manager;
 157:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 158:main.c        **** 	LCDClear(current_display->back_color);
 159:main.c        **** 	printMenu(current_display);
 160:main.c        **** 	
 161:main.c        **** 	// TODO Floere remove
 162:main.c        **** 	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 163:main.c        **** 	
 164:main.c        **** 	while(1){
 165:main.c        **** 	  // USB connected!
 166:main.c        **** 		if(IOPIN0 & (1<<23))
 167:main.c        **** 		{
 168:main.c        **** 			LCDClear(white);
 169:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 170:main.c        ****       delay_ms(1000);
 171:main.c        **** 			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
 172:main.c        **** 			main_msc();
 173:main.c        **** 			reset();
 174:main.c        **** 		}
 175:main.c        **** 	
 176:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 177:main.c        **** 		//while(!button_pressed && !update_screen){
 178:main.c        **** 		if(!button_pressed && !update_screen){
 179:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 180:main.c        **** 			if(song_is_over){
 181:main.c        **** 				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
 182:main.c        **** 				closeSong(&current_song);	//Close the current song
 183:main.c        **** 				file_is_open=0;				//change master flag
 184:main.c        **** 				ledBlueOff();
 185:main.c        **** 				//Get the next song on the page by changing rows
 186:main.c        **** 				if(file_manager.current_row < NUMROWS){
 187:main.c        **** 					file_manager.current_row++;
 188:main.c        **** 					file_manager.current_index++;
 189:main.c        **** 				}
 190:main.c        **** 				//Go to the next page of songs if necessary
 191:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 192:main.c        **** 					file_manager.current_row=1;
 193:main.c        **** 					file_manager.current_index=0;
 194:main.c        **** 					file_manager.current_page++;
 195:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 196:main.c        **** 				}
 197:main.c        **** 				//If there is another song in the list, get it and play it!
 198:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 199:main.c        **** 					LCDClear(file_manager.back_color);
 200:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 201:main.c        **** 					file_is_open = loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 202:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 203:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 204:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 205:main.c        **** 					ledBlueOn();
 206:main.c        **** 					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
 207:main.c        **** 				}	
 208:main.c        **** 			}
 209:main.c        **** 		}
 210:main.c        **** 
 211:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 212:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 213:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 214:main.c        **** 		
 215:main.c        **** 		else if(update_screen){
 216:main.c        **** 			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
 217:main.c        **** 			delay_ms(300);
 218:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 219:main.c        **** 				if(file_is_open)quickClear(current_display);
 220:main.c        **** 				else LCDClear(current_display->back_color);
 221:main.c        **** 				current_display = &settings_menu;
 222:main.c        **** 				current_display->orientation=ORIENTLEFT;
 223:main.c        **** 				ledBlueOff();
 224:main.c        **** 				if(file_is_open)ledGrnOn();
 225:main.c        **** 				else ledRedOn();
 226:main.c        **** 			}
 227:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 228:main.c        **** 				if(file_is_open)quickClear(current_display);
 229:main.c        **** 				else LCDClear(current_display->back_color);
 230:main.c        **** 				current_display = &file_manager;
 231:main.c        **** 				current_display->orientation=ORIENTUP;
 232:main.c        **** 				ledGrnOff();
 233:main.c        **** 				ledRedOff();
 234:main.c        **** 				if(file_is_open)ledBlueOn();
 235:main.c        **** 			}
 236:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 237:main.c        **** 			VICIntEnable |= 0x10;						//Re-enable interrupts
 238:main.c        **** 		}
 239:main.c        **** 		button_pressed=NO_BUT;
 240:main.c        **** 		VICIntEnable |= 0x10;
 241:main.c        **** 	}
 242:main.c        ****     return 0;
 243:main.c        **** }
 244:main.c        **** 
 245:main.c        **** 
 246:main.c        **** // Usage: delay_ms(1000);
 247:main.c        **** // Inputs: int count: Number of milliseconds to delay
 248:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 249:main.c        **** void delay_ms(int count)
 250:main.c        **** {
  16              		.loc 1 250 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 251:main.c        ****   int i;
 252:main.c        ****   count *= 10000;
  22              		.loc 1 252 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 253:main.c        ****   for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 253 0
  31              	@ 253 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 254:main.c        **** }
  38              		.loc 1 254 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 255:main.c        **** 
 256:main.c        **** // Usage: bootUp();
 257:main.c        **** // Inputs: None
 258:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 259:main.c        **** void bootUp(void)
 260:main.c        **** {
 261:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 262:main.c        ****     delay_ms(10); //Delay for power to stablize
 263:main.c        **** 
 264:main.c        ****     //Bring up SD and FAT
 265:main.c        ****     if(!sd_raw_init())
 266:main.c        ****     {
 267:main.c        ****         rprintf("SD Init Error\n");
 268:main.c        ****     }
 269:main.c        ****     if(openroot())
 270:main.c        ****     {
 271:main.c        ****         rprintf("SD OpenRoot Error\n");
 272:main.c        ****     }
 273:main.c        ****      
 274:main.c        ****   //Initialize I/O Ports and Peripherals
 275:main.c        ****   //Setup the MP3 I/O Lines
 276:main.c        ****   IODIR0 |= MP3_XCS;
 277:main.c        ****   IODIR0 &= ~MP3_DREQ;
 278:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 279:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 280:main.c        ****   
 281:main.c        ****   //Setupt the FM Trans. Lines
 282:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 283:main.c        ****   IODIR1 |= FM_CS;
 284:main.c        ****   
 285:main.c        ****   //Setup the SD Card I/O Lines
 286:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 287:main.c        ****   
 288:main.c        ****   //Setup the Accelerometer I/O Lines
 289:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 290:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 291:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 292:main.c        ****   
 293:main.c        ****   //Setup the LCD I/O Lines
 294:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 295:main.c        ****   
 296:main.c        ****   //Setup the LED Lines										
 297:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
 298:main.c        ****   ledBlueOff();
 299:main.c        ****   ledRedOff();
 300:main.c        ****   ledGrnOff();
 301:main.c        ****   
 302:main.c        ****   //Setup the Buttons
 303:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 304:main.c        ****   
 305:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 306:main.c        ****   
 307:main.c        ****     //Setupt the Interrupts
 308:main.c        ****   VPBDIV=1;										// Set PCLK equal to the System Clock	
 309:main.c        ****   VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 310:main.c        ****     VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Ti
 311:main.c        ****     VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
 312:main.c        ****     VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
 313:main.c        ****     VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
 314:main.c        ****     VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
 315:main.c        ****   
 316:main.c        ****   //Configure Timer0
 317:main.c        ****   T0PR = 300;										//Divide Clock by 300 for 40kHz PS
 318:main.c        ****   T0TCR |=0X01;									//Enable the clock
 319:main.c        ****   T0CTCR=0;										  //Timer Mode
 320:main.c        ****   T0MCR=0x0003;									//Interrupt and Reset Timer on Match
 321:main.c        ****   T0MR0=1000;										//Interrupt on 40Hz
 322:main.c        ****   
 323:main.c        ****   //Configure Timer1
 324:main.c        ****   T1PR = 200;										//Divide Clock by 200 for ??kHz PS
 325:main.c        ****   T1TCR |=0X01;									//Enable the clock
 326:main.c        ****   T1CTCR=0;									  	//Timer Mode
 327:main.c        ****   T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
 328:main.c        ****   
 329:main.c        ****   //Setup the SPI Port
 330:main.c        ****   S0SPCCR = 64;                 // SCK = 1 MHz, counter > 8 and even
 331:main.c        ****   S0SPCR  = 0x20;               // Master, no interrupt enable, 8 bits	
 332:main.c        **** }
 333:main.c        **** 
 334:main.c        **** //  Usage: None (Automatically Called by FW)
 335:main.c        **** //  Inputs: None
 336:main.c        **** //  This function is a global interrupt called by a match on the Timer 0 match.
 337:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 338:main.c        **** //  WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 play
 339:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 340:main.c        **** //
 341:main.c        **** static void timer1ISR(void) {
 342:main.c        ****   sendMP3Data();
 343:main.c        ****   T1IR = 0xFF;      // Clear the timer 0 interrupt
 344:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 345:main.c        **** }
 346:main.c        **** 
 347:main.c        **** //Usage: None (Automatically Called by FW)
 348:main.c        **** //Inputs: None
 349:main.c        **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 350:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 351:main.c        **** // and setting the appropriate global flag if either has occured.
 352:main.c        **** static void timer0ISR(void)
 353:main.c        **** {
 354:main.c        ****   button_pressed = getButton(); // Find out if a button has been pressed, and which one
 355:main.c        ****   cur_position = MMA_get_y();   // Get the current position of the screen
 356:main.c        ****   if((prev_position<700 && cur_position>700) || (prev_position>700 && cur_position<700)) {
 357:main.c        ****     update_screen = 1;
 358:main.c        ****   } else {
 359:main.c        ****     update_screen = 0; // Determine if the accelerometer has been rotated
 360:main.c        ****   }
 361:main.c        ****   prev_position = cur_position; // Save the position value for later reference
 362:main.c        ****   
 363:main.c        ****   T0IR = 0xFF;                  // Clear the timer interrupt
 364:main.c        ****   VICVectAddr =0;               // Update the VIC priorities
 365:main.c        **** }
 366:main.c        **** 
 367:main.c        **** // Usage: button_value=getButton();
 368:main.c        **** // Inputs:  None
 369:main.c        **** // Outputs: None
 370:main.c        **** // Function returns the value of the button that is currently being pressed.
 371:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 372:main.c        **** char getButton(void){
  51              		.loc 1 372 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 373:main.c        ****   if(!(IOPIN1 & SW_UP)) return UP_BUT;
  56              		.loc 1 373 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 374:main.c        ****   else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
  62              		.loc 1 374 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 375:main.c        ****   else if(!(IOPIN1 & SW_MID)) return MID_BUT;
  67              		.loc 1 375 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 376:main.c        ****   return NO_BUT;
 377:main.c        **** }
  72              		.loc 1 377 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 378:main.c        **** 
 379:main.c        **** 
 380:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 380 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 381:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 381 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 380 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 381 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB75:
 103              	.LBB76:
 382:main.c        ****     for(int i =0; i<NUMROWS; i++){
 383:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 384:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 384 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE76:
 107              	.LBE75:
 108              		.loc 1 381 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB78:
 385:main.c        ****       }
 386:main.c        ****     }
 387:main.c        ****   }
 388:main.c        ****   else{
 389:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 389 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB80:
 390:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 391:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 391 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE80:
 125              	.LBE78:
 126              	.LBB81:
 127              	.LBB77:
 128              		.loc 1 384 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 383 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 384 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 383 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE77:
 141              		.loc 1 382 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE81:
 154              	.LBB82:
 155              	.LBB79:
 156              		.loc 1 391 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 390 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 391 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 390 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE79:
 169              		.loc 1 389 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE82:
 181              	.LBB83:
 392:main.c        ****       }
 393:main.c        ****     }
 394:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 394 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE83:
 188              	.LBB84:
 189              		.loc 1 389 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE84:
 198              	.LBB85:
 199              		.loc 1 394 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE85:
 395:main.c        ****   }
 396:main.c        **** }
 209              		.loc 1 396 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 397:main.c        **** 
 398:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 399:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 400:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 401:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 402:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 403:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 404:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 405:main.c        **** 	//Get the selected songs file name
 406:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 407:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 408:main.c        **** 	}
 409:main.c        **** 	//Get the selected songs display name
 410:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 411:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 412:main.c        **** 			song->name[i]='\0';
 413:main.c        **** 			i=MAXDISPLEN;
 414:main.c        **** 		}	
 415:main.c        **** 		else song->name[i]=song->file_name[i];
 416:main.c        **** 	}
 417:main.c        **** 	
 418:main.c        **** 	selectSD();	//Make sure SPI is selected for reading the card
 419:main.c        **** 	
 420:main.c        **** 	//Check to see if the selected song is valid
 421:main.c        **** 	if(!root_file_exists(song->file_name)){
 422:main.c        **** 		selectLCD();
 423:main.c        **** 		return 0;
 424:main.c        **** 	}	
 425:main.c        **** 	//Open the selected song
 426:main.c        **** 	else{
 427:main.c        **** 		song->handle=root_open(song->file_name);
 428:main.c        **** 		song->size=fat16_file_size(song->handle);
 429:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 430:main.c        **** 	}
 431:main.c        **** 	
 432:main.c        **** 	selectLCD();
 433:main.c        **** 	return 1;
 434:main.c        **** }
 435:main.c        **** 
 436:main.c        **** // Usage: CloseSong(&current_song);
 437:main.c        **** // Inputs: SongStruct *song: Pointer to a song structure to be closed
 438:main.c        **** // Function closes a song that is currently open.
 439:main.c        **** void closeSong(SongStruct *song){
 440:main.c        ****   selectSD(); // Open SPI line for the SD Card.
 441:main.c        ****   fat16_close_file(song->handle);
 442:main.c        ****   selectLCD(); // Return SPI line to LCD.
 443:main.c        **** }
 444:main.c        **** 
 445:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 446:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 447:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 448:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 449:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 450:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 451:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 452:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 453:main.c        **** 	if(direction == PREVIOUS){
 454:main.c        **** 		display->current_row--;
 455:main.c        **** 		display->current_index--;
 456:main.c        **** 	}
 457:main.c        **** 	else{
 458:main.c        **** 		display->current_row++;
 459:main.c        **** 		display->current_index++;		
 460:main.c        **** 	}
 461:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 462:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 463:main.c        **** }
 464:main.c        **** 
 465:main.c        **** //Usage: printMenu(&settings_menu);
 466:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 467:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 468:main.c        **** void printMenu(DisplayStruct *display){
 469:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 470:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 471:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 472:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 473:main.c        **** 	}
 474:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 475:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 476:main.c        **** }
 477:main.c        **** 
 478:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 479:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 480:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 481:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 482:main.c        **** //also loads the default display values along with the default settings values. 
 483:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 483 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB86:
 484:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 485:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 485 0
 233 014c A4909FE5 		ldr	r9, .L36
 486:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 486 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 487:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 487 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 488:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 488 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE86:
 241              		.loc 1 483 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB87:
 249              		.loc 1 485 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 486 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 487 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 488 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 484 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 485 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 486 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 487 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 488 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 484 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE87:
 275              	.LBB88:
 489:main.c        **** 	}
 490:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 491:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 491 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 490 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 491 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 490 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE88:
 492:main.c        **** 	}
 493:main.c        **** 	menu->text_color=white;
 289              		.loc 1 493 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 494:main.c        **** 	menu->back_color=black;
 294              		.loc 1 494 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 495:main.c        **** 	menu->current_row=1;
 297              		.loc 1 495 0
 298 01d0 0130A0E3 		mov	r3, #1
 496:main.c        **** 	menu->current_column=0;
 497:main.c        **** 	menu->current_index=0;
 498:main.c        **** 	menu->orientation = ORIENTLEFT;
 499:main.c        **** 	menu->current_page=0;
 500:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 500 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 494 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 498 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 495 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 496 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 497 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 499 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 501:main.c        **** }
 313              		.loc 1 501 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 502:main.c        **** 
 503:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 504:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 505:main.c        **** //			FileStruct *Files: List of files on the SD card
 506:main.c        **** //Outputs: None
 507:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 508:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 509:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 510:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 511:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 512:main.c        **** 	}
 513:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 514:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 515:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 516:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 517:main.c        **** 		//if(file_is_open)quickClear(display);
 518:main.c        **** 		//else LCDClear(display->back_color);
 519:main.c        **** 		quickClear(display);
 520:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 521:main.c        **** 		display->current_index=14;					//
 522:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 523:main.c        **** 		printMenu(display);							//	display previous page
 524:main.c        **** 	}
 525:main.c        **** }
 526:main.c        **** 
 527:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 528:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 529:main.c        **** //			FileStruct *Files: List of files on the SD card
 530:main.c        **** //Outputs: None
 531:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 532:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 533:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 534:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 535:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 536:main.c        **** 	}
 537:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 538:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 539:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 540:main.c        **** 		display->current_page+=1;		
 541:main.c        **** 		//if(file_is_open)quickClear(display);
 542:main.c        **** 		//else LCDClear(display->back_color);
 543:main.c        **** 		quickClear(display);
 544:main.c        **** 		display->current_row=1;
 545:main.c        **** 		display->current_index=0;
 546:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 547:main.c        **** 		printMenu(display);				
 548:main.c        **** 	}
 549:main.c        **** }
 550:main.c        **** 
 551:main.c        **** //Usage: handleMiddleButton();
 552:main.c        **** //Inputs: None
 553:main.c        **** //Outputs: None
 554:main.c        **** //Description: This function is called when the middle button is pressed.
 555:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 556:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 557:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 558:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 559:main.c        **** void handleMiddleButton(void){
 560:main.c        **** 	VICIntEnClr = 0x10;
 561:main.c        **** 	delay_ms(250);
 562:main.c        **** 	
 563:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 564:main.c        ****   if (current_display == &file_manager) {
 565:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 566:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 567:main.c        ****       if (!file_is_open) { //Make sure this is a valid file
 568:main.c        ****         LCDClear(white);
 569:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 570:main.c        ****         delay_ms(1000);
 571:main.c        ****         LCDClear(black);
 572:main.c        ****         printMenu(&file_manager);
 573:main.c        ****       } else {
 574:main.c        ****         startMP3Player();
 575:main.c        ****       }
 576:main.c        ****     } else { // If a file is already open then this acts like a stop button
 577:main.c        ****       stopMP3Player();
 578:main.c        ****     }
 579:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 580:main.c        ****     if (file_is_open) {
 581:main.c        ****       quickClear(current_display);
 582:main.c        ****     } else {
 583:main.c        ****       LCDClear(settings_menu.back_color);
 584:main.c        ****     }
 585:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 586:main.c        **** 		VICIntEnable|=0x10;
 587:main.c        **** 		if (current_display->current_row == VOLUMEMENU) {
 588:main.c        **** 			VICIntEnable |= 0x10;
 589:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 590:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 591:main.c        **** 			while(button_pressed < MID_BUT){
 592:main.c        ****         VICIntEnClr = 0x10;                     // Stop Interrupts to
 593:main.c        ****         delay_ms(150);                          // debounce the switch
 594:main.c        ****         if (button_pressed==UP_BUT) {
 595:main.c        ****           raiseVolume(1);
 596:main.c        ****         } else if (button_pressed==DWN_BUT) {
 597:main.c        ****           lowerVolume(1);
 598:main.c        ****         }
 599:main.c        ****         VICIntEnable |= 0x10;
 600:main.c        **** 			}
 601:main.c        **** 		}	
 602:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 603:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 604:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 605:main.c        **** 			button_pressed=NO_BUT;
 606:main.c        **** 			VICIntEnable |= 0x10;
 607:main.c        **** 			while(button_pressed < MID_BUT){
 608:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 609:main.c        **** 				delay_ms(100);		//	debounce the switch					
 610:main.c        **** 				if(button_pressed==UP_BUT){
 611:main.c        **** 					//Increase Radio Channel
 612:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 613:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 614:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 615:main.c        **** 				}
 616:main.c        **** 				else if(button_pressed==DWN_BUT){
 617:main.c        **** 					//Decrease Radio Channel
 618:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 619:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 620:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 621:main.c        **** 				}
 622:main.c        **** 				ns73SetChannel(radio_channel);
 623:main.c        **** 				VICIntEnable |= 0x10;
 624:main.c        **** 			}
 625:main.c        **** 			selectRadio();				//Select the FM transmitter
 626:main.c        **** 			delay_ms(100);
 627:main.c        **** 			ns73Config();					//Configure the FM Trans. I/O
 628:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 629:main.c        **** 			deselectRadio();				//Unselect the FM transmitter
 630:main.c        **** 		}
 631:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 632:main.c        ****       LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 633:main.c        ****       if (radio_enable) {
 634:main.c        ****         LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 635:main.c        ****       } else {
 636:main.c        ****         LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 637:main.c        ****       }
 638:main.c        **** 			button_pressed=NO_BUT;
 639:main.c        **** 			VICIntEnable |= 0x10;
 640:main.c        **** 			while(button_pressed < MID_BUT){
 641:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 642:main.c        **** 				delay_ms(100);		//	debounce the switch					
 643:main.c        **** 				if(button_pressed==UP_BUT){
 644:main.c        ****           enableRadio();
 645:main.c        **** 				}
 646:main.c        **** 				else if(button_pressed==DWN_BUT){
 647:main.c        ****           disableRadio();
 648:main.c        **** 				}
 649:main.c        **** 				VICIntEnable |= 0x10;
 650:main.c        **** 			}
 651:main.c        **** 		}
 652:main.c        **** 		if(file_is_open)quickClear(current_display);
 653:main.c        **** 		else LCDClear(current_display->back_color);
 654:main.c        **** 		printMenu(current_display);
 655:main.c        **** 	}
 656:main.c        **** 	VICIntEnable |= 0x10;
 657:main.c        **** }
 658:main.c        **** 
 659:main.c        **** //  Usage: quickClear(currentDisplay);
 660:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 661:main.c        **** //  Outputs: None
 662:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 663:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 664:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 665:main.c        **** //               good to use while an MP3 is playing.
 666:main.c        **** //
 667:main.c        **** void quickClear(DisplayStruct *display){
 668:main.c        ****   selectLCD();		//Hand over SPI lines to LCD talk
 669:main.c        ****   //If we're on the first page of the menu, we also need to clear the title.
 670:main.c        ****   if (display->current_page==0) {
 671:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 672:main.c        ****   }
 673:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 674:main.c        ****   for (int j=0; j<NUMROWS; j++) {
 675:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 676:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 677:main.c        ****   }
 678:main.c        **** }
 679:main.c        **** 
 680:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 681:main.c        **** //
 682:main.c        **** void reset(void) {
 332              		.loc 1 682 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 683:main.c        ****   WDMOD |= 3;
 337              		.loc 1 683 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 684:main.c        ****   WDFEED = 0xAA;
 342              		.loc 1 684 0
 343 0220 AA10A0E3 		mov	r1, #170
 685:main.c        ****   WDFEED = 0x55;
 344              		.loc 1 685 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 684 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 685 0
 349 022c 083082E5 		str	r3, [r2, #8]
 686:main.c        ****   WDFEED = 0xAA;
 687:main.c        ****   WDFEED = 0x00;
 350              		.loc 1 687 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 686 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 687 0
 355 0238 083082E5 		str	r3, [r2, #8]
 688:main.c        **** }
 356              		.loc 1 688 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	selectSD
 363              	selectSD:
 364              	.LFB28:
 689:main.c        **** 
 690:main.c        **** // Flöre refactors here!
 691:main.c        **** 
 692:main.c        **** //
 693:main.c        **** // RADIO
 694:main.c        **** //
 695:main.c        **** 
 696:main.c        **** // initializes the FM transmitter to a given frequency.
 697:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 698:main.c        **** //
 699:main.c        **** void initializeRadio(int frequency) {
 700:main.c        ****   selectRadio();      //Select SPI for FM Transmitter
 701:main.c        ****   delay_ms(900);
 702:main.c        ****   
 703:main.c        ****   ns73Config();         //Configigure the FM Trans. I/O
 704:main.c        ****   ns73Init();           //Setup the Default Register Values
 705:main.c        ****   ns73SetChannel(frequency);  //Transmit to 97.3 FM
 706:main.c        ****   
 707:main.c        ****   deselectRadio();      //Remove FM Transmitter from SPI bus
 708:main.c        ****   delay_ms(100);
 709:main.c        **** }
 710:main.c        **** 
 711:main.c        **** // Enables the radio.
 712:main.c        **** //
 713:main.c        **** void enableRadio(void) {
 714:main.c        ****   radio_enable = ON;
 715:main.c        ****   
 716:main.c        ****   // graphics
 717:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 718:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 719:main.c        ****   
 720:main.c        ****   // send data
 721:main.c        ****   selectRadio();        //Select the FM transmitter
 722:main.c        ****   delay_ms(100);
 723:main.c        ****   ns73Config();           //Configure the FM Trans. I/O
 724:main.c        ****   ns73Send(R0, PE | AG);  //Power up the radio
 725:main.c        ****   deselectRadio();        //Unselect the FM transmitter
 726:main.c        **** }
 727:main.c        **** 
 728:main.c        **** // Disables the radio.
 729:main.c        **** //
 730:main.c        **** void disableRadio(void) {
 731:main.c        ****   radio_enable = OFF;
 732:main.c        ****   
 733:main.c        ****   // graphics
 734:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 735:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 736:main.c        ****   
 737:main.c        ****   // send data
 738:main.c        ****   selectRadio();      //Select the FM transmitter
 739:main.c        ****   delay_ms(100);
 740:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 741:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 742:main.c        ****   deselectRadio();      //Unselect the FM transmitter
 743:main.c        **** }
 744:main.c        **** 
 745:main.c        **** //
 746:main.c        **** // MP3
 747:main.c        **** //
 748:main.c        **** 
 749:main.c        **** // Initialize the MP3 player with double clock speed and lower volume.
 750:main.c        **** //
 751:main.c        **** void initializeMP3Player(void) {
 752:main.c        ****   vs1002Config(); // Configure MP3 I/O
 753:main.c        ****   vs1002Reset();  // Reset MP3 Player
 754:main.c        ****   vs1002Init();   // Double the clock speed and set to "New" mode
 755:main.c        ****   lowerVolume(5); // Lower the Volume a bit
 756:main.c        ****   vs1002Finish(); // Restore the SPI I/O lines
 757:main.c        **** }
 758:main.c        **** 
 759:main.c        **** // Start playing.
 760:main.c        **** //
 761:main.c        **** void startMP3Player(void) {
 762:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 763:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 764:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 765:main.c        ****   ledBlueOn();
 766:main.c        ****   sendMP3Data();                        // Send first song data
 767:main.c        ****   PINSEL1 |= 0x00000C00;
 768:main.c        ****   VICIntEnable |= 0x20;                 // Enable Timer 1 Interrupts (This is the "Song Sending" in
 769:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 770:main.c        **** }
 771:main.c        **** 
 772:main.c        **** // Sends a piece of mp3 data from the current song.
 773:main.c        **** //
 774:main.c        **** void sendMP3Data(void) {
 775:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 776:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 777:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 778:main.c        ****     // Buffer more data if available
 779:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) {
 780:main.c        ****       song_is_over = 1;
 781:main.c        ****     } else {
 782:main.c        ****       song_is_over = 0; // If there's no more data available, set the flag, else leave it alone
 783:main.c        ****     }
 784:main.c        ****   }
 785:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 786:main.c        **** }
 787:main.c        **** 
 788:main.c        **** // Stop playing.
 789:main.c        **** //
 790:main.c        **** void stopMP3Player(void) {
 791:main.c        ****   VICIntEnClr = 0x20;                                     // Disable Time 0 Interrupts(Stop the "So
 792:main.c        ****   ledBlueOff();
 793:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 794:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 795:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 796:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 797:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 798:main.c        ****   closeSong(&current_song);                               // Close the current song
 799:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 800:main.c        ****   VICIntEnable = 0x10;
 801:main.c        **** }
 802:main.c        **** 
 803:main.c        **** //
 804:main.c        **** // VOLUME
 805:main.c        **** //
 806:main.c        **** 
 807:main.c        **** // Raises the Volume by 1.
 808:main.c        **** //
 809:main.c        **** void raiseVolume(int n) {
 810:main.c        ****   for(char i = 0; i < n; i++) {
 811:main.c        ****     if(volume_setting < 32){
 812:main.c        ****       volume_setting += 1;
 813:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 814:main.c        ****       vs1002SetVolume(INCREASE);  // Raise the volume
 815:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 816:main.c        ****     }
 817:main.c        ****   }
 818:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 819:main.c        ****   LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientat
 820:main.c        **** }
 821:main.c        **** 
 822:main.c        **** // Lowers the volume by n.
 823:main.c        **** //
 824:main.c        **** void lowerVolume(int n) {
 825:main.c        ****   for(char i = 0; i < n; i++) {
 826:main.c        ****     if(volume_setting >= 0){
 827:main.c        ****       volume_setting--;
 828:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 829:main.c        ****       vs1002SetVolume(DECREASE);  // Lower the volume
 830:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 831:main.c        ****     }
 832:main.c        ****   }
 833:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 834:main.c        ****   LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 835:main.c        **** }
 836:main.c        **** 
 837:main.c        **** // Hand over SPI lines to SD talk.
 838:main.c        **** //
 839:main.c        **** void selectSD(void) {
 365              		.loc 1 839 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 840:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 370              		.loc 1 840 0
 371 0240 0C209FE5 		ldr	r2, .L42
 372 0244 003092E5 		ldr	r3, [r2, #0]
 373 0248 153C83E3 		orr	r3, r3, #5376
 374 024c 003082E5 		str	r3, [r2, #0]
 841:main.c        **** }
 375              		.loc 1 841 0
 376 0250 1EFF2FE1 		bx	lr
 377              	.L43:
 378              		.align	2
 379              	.L42:
 380 0254 00C002E0 		.word	-536690688
 381              	.LFE28:
 383              		.align	2
 384              		.global	selectLCD
 386              	selectLCD:
 387              	.LFB29:
 842:main.c        **** 
 843:main.c        **** // Hand over SPI lines to LCD talk.
 844:main.c        **** //
 845:main.c        **** void selectLCD(void) {
 388              		.loc 1 845 0
 389              		@ Function supports interworking.
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 846:main.c        ****   PINSEL0 &= 0xFFFFC00F;
 393              		.loc 1 846 0
 394 0258 10209FE5 		ldr	r2, .L46
 395 025c 003092E5 		ldr	r3, [r2, #0]
 396 0260 FF3DC3E3 		bic	r3, r3, #16320
 397 0264 3030C3E3 		bic	r3, r3, #48
 398 0268 003082E5 		str	r3, [r2, #0]
 847:main.c        **** }
 399              		.loc 1 847 0
 400 026c 1EFF2FE1 		bx	lr
 401              	.L47:
 402              		.align	2
 403              	.L46:
 404 0270 00C002E0 		.word	-536690688
 405              	.LFE29:
 407              		.align	2
 408              		.global	selectRadio
 410              	selectRadio:
 411              	.LFB30:
 848:main.c        **** 
 849:main.c        **** // Hand over SPI lines to radio talk.
 850:main.c        **** void selectRadio(void) {
 412              		.loc 1 850 0
 413              		@ Function supports interworking.
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 851:main.c        ****   IOCLR1 |= FM_CS;
 417              		.loc 1 851 0
 418 0274 0C209FE5 		ldr	r2, .L50
 419 0278 1C3092E5 		ldr	r3, [r2, #28]
 420 027c 013283E3 		orr	r3, r3, #268435456
 421 0280 1C3082E5 		str	r3, [r2, #28]
 852:main.c        **** }
 422              		.loc 1 852 0
 423 0284 1EFF2FE1 		bx	lr
 424              	.L51:
 425              		.align	2
 426              	.L50:
 427 0288 008002E0 		.word	-536707072
 428              	.LFE30:
 430              		.align	2
 431              		.global	deselectRadio
 433              	deselectRadio:
 434              	.LFB31:
 853:main.c        **** 
 854:main.c        **** // Hand off SPI lines from radio talk.
 855:main.c        **** void deselectRadio(void) {
 435              		.loc 1 855 0
 436              		@ Function supports interworking.
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 856:main.c        ****   IOSET1 |= FM_CS;
 440              		.loc 1 856 0
 441 028c 0C209FE5 		ldr	r2, .L54
 442 0290 143092E5 		ldr	r3, [r2, #20]
 443 0294 013283E3 		orr	r3, r3, #268435456
 444 0298 143082E5 		str	r3, [r2, #20]
 857:main.c        **** }
 445              		.loc 1 857 0
 446 029c 1EFF2FE1 		bx	lr
 447              	.L55:
 448              		.align	2
 449              	.L54:
 450 02a0 008002E0 		.word	-536707072
 451              	.LFE31:
 453              		.align	2
 454              		.global	splashScreen
 456              	splashScreen:
 457              	.LFB32:
 858:main.c        **** 
 859:main.c        **** // Show the splash-screen (Sparkfun Logo)
 860:main.c        **** //
 861:main.c        **** void splashScreen(void) {
 458              		.loc 1 861 0
 459              		@ Function supports interworking.
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462 02a4 04E02DE5 		str	lr, [sp, #-4]!
 463              	.LCFI2:
 862:main.c        ****   LCDInit();       // Initialize the LCD
 464              		.loc 1 862 0
 465 02a8 FEFFFFEB 		bl	LCDInit
 863:main.c        ****   LCDClear(white); // Clear the screen with white
 466              		.loc 1 863 0
 467 02ac 10309FE5 		ldr	r3, .L58
 468 02b0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 469 02b4 FEFFFFEB 		bl	LCDClear
 864:main.c        ****   LCDPrintLogo();  // Print the Sparkfun Logo
 470              		.loc 1 864 0
 471 02b8 FEFFFFEB 		bl	LCDPrintLogo
 865:main.c        **** }...
 472              		.loc 1 865 0
 473 02bc 04E09DE4 		ldr	lr, [sp], #4
 474 02c0 1EFF2FE1 		bx	lr
 475              	.L59:
 476              		.align	2
 477              	.L58:
 478 02c4 00000000 		.word	white
 479              	.LFE32:
 481              		.section	.rodata.str1.1,"aMS",%progbits,1
 482              	.LC0:
 483 0000 256400   		.ascii	"%d\000"
 484              		.text
 485              		.align	2
 486              		.global	lowerVolume
 488              	lowerVolume:
 489              	.LFB27:
 490              		.loc 1 824 0
 491              		@ Function supports interworking.
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL22:
 495 02c8 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 496              	.LCFI3:
 497 02cc 0050A0E1 		mov	r5, r0
 498 02d0 08D04DE2 		sub	sp, sp, #8
 499              	.LCFI4:
 500              		.loc 1 824 0
 501 02d4 0040A0E3 		mov	r4, #0
 502              	.LVL23:
 503 02d8 8C609FE5 		ldr	r6, .L65
 504 02dc 0A0000EA 		b	.L61
 505              	.LVL24:
 506              	.L63:
 507              	.LBB89:
 508              		.loc 1 826 0
 509 02e0 003096E5 		ldr	r3, [r6, #0]
 510 02e4 000053E3 		cmp	r3, #0
 511              		.loc 1 827 0
 512 02e8 012043E2 		sub	r2, r3, #1
 513              		.loc 1 826 0
 514 02ec 040000BA 		blt	.L62
 515              		.loc 1 827 0
 516 02f0 002086E5 		str	r2, [r6, #0]
 517              		.loc 1 828 0
 518 02f4 FEFFFFEB 		bl	vs1002Config
 519              		.loc 1 829 0
 520 02f8 3000A0E3 		mov	r0, #48
 521 02fc FEFFFFEB 		bl	vs1002SetVolume
 522              		.loc 1 830 0
 523 0300 FEFFFFEB 		bl	vs1002Finish
 524              	.LVL25:
 525              	.L62:
 526              		.loc 1 825 0
 527 0304 013084E2 		add	r3, r4, #1
 528 0308 FF4003E2 		and	r4, r3, #255
 529              	.LVL26:
 530              	.L61:
 531 030c 050054E1 		cmp	r4, r5
 532 0310 F2FFFFBA 		blt	.L63
 533              	.LBE89:
 534              		.loc 1 833 0
 535 0314 54409FE5 		ldr	r4, .L65+4
 536              	.LVL27:
 537 0318 002094E5 		ldr	r2, [r4, #0]
 538 031c 0200A0E3 		mov	r0, #2
 539 0320 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 540 0324 0010A0E3 		mov	r1, #0
 541 0328 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 542 032c FEFFFFEB 		bl	LCDSetRowColor
 543              		.loc 1 834 0
 544 0330 0030A0E3 		mov	r3, #0
 545 0334 00308DE5 		str	r3, [sp, #0]
 546 0338 34309FE5 		ldr	r3, .L65+8
 547 033c 001094E5 		ldr	r1, [r4, #0]
 548 0340 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 549 0344 20309FE5 		ldr	r3, .L65
 550 0348 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 551 034c 24009FE5 		ldr	r0, .L65+12
 552 0350 001093E5 		ldr	r1, [r3, #0]
 553 0354 0230A0E3 		mov	r3, #2
 554 0358 04C08DE5 		str	ip, [sp, #4]
 555 035c FEFFFFEB 		bl	LCDPrintString
 556              		.loc 1 835 0
 557 0360 08D08DE2 		add	sp, sp, #8
 558 0364 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 559 0368 1EFF2FE1 		bx	lr
 560              	.L66:
 561              		.align	2
 562              	.L65:
 563 036c 00000000 		.word	volume_setting
 564 0370 7C040000 		.word	current_display
 565 0374 00000000 		.word	white
 566 0378 00000000 		.word	.LC0
 567              	.LFE27:
 569              		.align	2
 570              		.global	raiseVolume
 572              	raiseVolume:
 573              	.LFB26:
 574              		.loc 1 809 0
 575              		@ Function supports interworking.
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              	.LVL28:
 579 037c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 580              	.LCFI5:
 581 0380 0050A0E1 		mov	r5, r0
 582 0384 08D04DE2 		sub	sp, sp, #8
 583              	.LCFI6:
 584              		.loc 1 809 0
 585 0388 0040A0E3 		mov	r4, #0
 586              	.LVL29:
 587 038c 88609FE5 		ldr	r6, .L72
 588 0390 0A0000EA 		b	.L68
 589              	.LVL30:
 590              	.L70:
 591              	.LBB90:
 592              		.loc 1 811 0
 593 0394 003096E5 		ldr	r3, [r6, #0]
 594 0398 1F0053E3 		cmp	r3, #31
 595 039c 050000CA 		bgt	.L69
 596              		.loc 1 812 0
 597 03a0 013083E2 		add	r3, r3, #1
 598 03a4 003086E5 		str	r3, [r6, #0]
 599              		.loc 1 813 0
 600 03a8 FEFFFFEB 		bl	vs1002Config
 601              		.loc 1 814 0
 602 03ac 3100A0E3 		mov	r0, #49
 603 03b0 FEFFFFEB 		bl	vs1002SetVolume
 604              		.loc 1 815 0
 605 03b4 FEFFFFEB 		bl	vs1002Finish
 606              	.LVL31:
 607              	.L69:
 608              		.loc 1 810 0
 609 03b8 013084E2 		add	r3, r4, #1
 610 03bc FF4003E2 		and	r4, r3, #255
 611              	.LVL32:
 612              	.L68:
 613 03c0 050054E1 		cmp	r4, r5
 614 03c4 F2FFFFBA 		blt	.L70
 615              	.LBE90:
 616              		.loc 1 818 0
 617 03c8 50409FE5 		ldr	r4, .L72+4
 618              	.LVL33:
 619 03cc 002094E5 		ldr	r2, [r4, #0]
 620 03d0 0200A0E3 		mov	r0, #2
 621 03d4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 622 03d8 0010A0E3 		mov	r1, #0
 623 03dc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 624 03e0 FEFFFFEB 		bl	LCDSetRowColor
 625              		.loc 1 819 0
 626 03e4 001094E5 		ldr	r1, [r4, #0]
 627 03e8 0030A0E3 		mov	r3, #0
 628 03ec 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 629 03f0 00308DE5 		str	r3, [sp, #0]
 630 03f4 20309FE5 		ldr	r3, .L72
 631 03f8 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 632 03fc 20009FE5 		ldr	r0, .L72+8
 633 0400 001093E5 		ldr	r1, [r3, #0]
 634 0404 0230A0E3 		mov	r3, #2
 635 0408 04C08DE5 		str	ip, [sp, #4]
 636 040c FEFFFFEB 		bl	LCDPrintString
 637              		.loc 1 820 0
 638 0410 08D08DE2 		add	sp, sp, #8
 639 0414 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 640 0418 1EFF2FE1 		bx	lr
 641              	.L73:
 642              		.align	2
 643              	.L72:
 644 041c 00000000 		.word	volume_setting
 645 0420 7C040000 		.word	current_display
 646 0424 00000000 		.word	.LC0
 647              	.LFE26:
 649              		.align	2
 650              		.global	quickClear
 652              	quickClear:
 653              	.LFB17:
 654              		.loc 1 667 0
 655              		@ Function supports interworking.
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658              	.LVL34:
 659              	.LBB91:
 660              	.LBB92:
 661              		.loc 1 846 0
 662 0428 B8209FE5 		ldr	r2, .L79
 663 042c 003092E5 		ldr	r3, [r2, #0]
 664              	.LBE92:
 665              	.LBE91:
 666              		.loc 1 667 0
 667 0430 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 668              	.LCFI7:
 669              	.LBB94:
 670              	.LBB93:
 671              		.loc 1 846 0
 672 0434 FF3DC3E3 		bic	r3, r3, #16320
 673 0438 3030C3E3 		bic	r3, r3, #48
 674 043c 003082E5 		str	r3, [r2, #0]
 675              	.LBE93:
 676              	.LBE94:
 677              		.loc 1 670 0
 678 0440 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 679 0444 00005EE3 		cmp	lr, #0
 680              		.loc 1 667 0
 681 0448 08D04DE2 		sub	sp, sp, #8
 682              	.LCFI8:
 683              		.loc 1 667 0
 684 044c 0050A0E1 		mov	r5, r0
 685              		.loc 1 670 0
 686 0450 0700001A 		bne	.L75
 687              	.LVL35:
 688              		.loc 1 671 0
 689 0454 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 690 0458 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 691 045c 0E10A0E1 		mov	r1, lr
 692 0460 7B0F80E2 		add	r0, r0, #492
 693 0464 0E30A0E1 		mov	r3, lr
 694 0468 04C08DE5 		str	ip, [sp, #4]
 695 046c 00E08DE5 		str	lr, [sp, #0]
 696 0470 FEFFFFEB 		bl	LCDPrintString
 697              	.LVL36:
 698              	.L75:
 699              		.loc 1 673 0
 700 0474 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 701 0478 0010A0E3 		mov	r1, #0
 702 047c 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 703 0480 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 704 0484 FEFFFFEB 		bl	LCDSetRowColor
 705 0488 0040A0E3 		mov	r4, #0
 706              	.LVL37:
 707              	.LBB95:
 708              		.loc 1 676 0
 709 048c 58709FE5 		ldr	r7, .L79+4
 710              		.loc 1 675 0
 711 0490 0460A0E1 		mov	r6, r4
 712              	.L76:
 713 0494 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 714 0498 840285E0 		add	r0, r5, r4, asl #5
 715              	.LBE95:
 716              		.loc 1 673 0
 717 049c 014084E2 		add	r4, r4, #1
 718              	.LVL38:
 719              	.LBB96:
 720              		.loc 1 675 0
 721 04a0 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 722 04a4 0C0080E2 		add	r0, r0, #12
 723 04a8 0610A0E1 		mov	r1, r6
 724 04ac 0430A0E1 		mov	r3, r4
 725 04b0 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 726 04b4 FEFFFFEB 		bl	LCDPrintString
 727              		.loc 1 676 0
 728 04b8 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 729 04bc 2C009FE5 		ldr	r0, .L79+8
 730 04c0 0610A0E1 		mov	r1, r6
 731 04c4 0430A0E1 		mov	r3, r4
 732 04c8 00608DE5 		str	r6, [sp, #0]
 733 04cc 04608DE5 		str	r6, [sp, #4]
 734 04d0 FEFFFFEB 		bl	LCDPrintString
 735              		.loc 1 674 0
 736 04d4 0F0054E3 		cmp	r4, #15
 737              	.LVL39:
 738 04d8 EDFFFF1A 		bne	.L76
 739              	.LBE96:
 740              		.loc 1 678 0
 741 04dc 08D08DE2 		add	sp, sp, #8
 742 04e0 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 743 04e4 1EFF2FE1 		bx	lr
 744              	.L80:
 745              		.align	2
 746              	.L79:
 747 04e8 00C002E0 		.word	-536690688
 748 04ec 00000000 		.word	black
 749 04f0 00000000 		.word	newline
 750              	.LFE17:
 752              		.align	2
 753              		.global	printMenu
 755              	printMenu:
 756              	.LFB12:
 757              		.loc 1 468 0
 758              		@ Function supports interworking.
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              	.LVL40:
 762              	.LBB97:
 763              	.LBB98:
 764              		.loc 1 846 0
 765 04f4 C0209FE5 		ldr	r2, .L86
 766 04f8 003092E5 		ldr	r3, [r2, #0]
 767              	.LBE98:
 768              	.LBE97:
 769              		.loc 1 468 0
 770 04fc 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 771              	.LCFI9:
 772              	.LBB100:
 773              	.LBB99:
 774              		.loc 1 846 0
 775 0500 FF3DC3E3 		bic	r3, r3, #16320
 776 0504 3030C3E3 		bic	r3, r3, #48
 777 0508 003082E5 		str	r3, [r2, #0]
 778              	.LBE99:
 779              	.LBE100:
 780              		.loc 1 470 0
 781 050c 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 782 0510 00005EE3 		cmp	lr, #0
 783              		.loc 1 468 0
 784 0514 08D04DE2 		sub	sp, sp, #8
 785              	.LCFI10:
 786              		.loc 1 468 0
 787 0518 0050A0E1 		mov	r5, r0
 788              		.loc 1 470 0
 789 051c 0700001A 		bne	.L82
 790              	.LVL41:
 791 0520 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 792 0524 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 793 0528 0E10A0E1 		mov	r1, lr
 794 052c 7B0F80E2 		add	r0, r0, #492
 795 0530 0E30A0E1 		mov	r3, lr
 796 0534 04C08DE5 		str	ip, [sp, #4]
 797 0538 00E08DE5 		str	lr, [sp, #0]
 798 053c FEFFFFEB 		bl	LCDPrintString
 799              	.LVL42:
 800              	.L82:
 801 0540 0030A0E3 		mov	r3, #0
 802              	.LVL43:
 803              	.LBB101:
 804              		.loc 1 472 0
 805 0544 0360A0E1 		mov	r6, r3
 806              	.L83:
 807 0548 014083E2 		add	r4, r3, #1
 808 054c 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 809 0550 830285E0 		add	r0, r5, r3, asl #5
 810 0554 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 811 0558 0430A0E1 		mov	r3, r4
 812              	.LVL44:
 813 055c 0C0080E2 		add	r0, r0, #12
 814 0560 0610A0E1 		mov	r1, r6
 815 0564 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 816 0568 FEFFFFEB 		bl	LCDPrintString
 817              		.loc 1 471 0
 818 056c 0F0054E3 		cmp	r4, #15
 819              	.LVL45:
 820 0570 0430A0E1 		mov	r3, r4
 821              	.LVL46:
 822 0574 F3FFFF1A 		bne	.L83
 823              	.LBE101:
 824              		.loc 1 474 0
 825 0578 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 826 057c 0610A0E1 		mov	r1, r6
 827 0580 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 828 0584 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 829              	.LVL47:
 830 0588 FEFFFFEB 		bl	LCDSetRowColor
 831              		.loc 1 475 0
 832 058c 080095E5 		ldr	r0, [r5, #8]
 833 0590 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 834 0594 800285E0 		add	r0, r5, r0, asl #5
 835 0598 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 836 059c 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 837 05a0 0C0080E2 		add	r0, r0, #12
 838 05a4 0610A0E1 		mov	r1, r6
 839 05a8 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 840 05ac FEFFFFEB 		bl	LCDPrintString
 841              		.loc 1 476 0
 842 05b0 08D08DE2 		add	sp, sp, #8
 843 05b4 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 844 05b8 1EFF2FE1 		bx	lr
 845              	.L87:
 846              		.align	2
 847              	.L86:
 848 05bc 00C002E0 		.word	-536690688
 849              	.LFE12:
 851              		.align	2
 852              		.global	highlightRow
 854              	highlightRow:
 855              	.LFB11:
 856              		.loc 1 449 0
 857              		@ Function supports interworking.
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              	.LVL48:
 861              	.LBB102:
 862              	.LBB103:
 863              		.loc 1 846 0
 864 05c0 D0209FE5 		ldr	r2, .L93
 865 05c4 003092E5 		ldr	r3, [r2, #0]
 866              	.LBE103:
 867              	.LBE102:
 868              		.loc 1 449 0
 869 05c8 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 870              	.LCFI11:
 871              	.LBB105:
 872              	.LBB104:
 873              		.loc 1 846 0
 874 05cc FF3DC3E3 		bic	r3, r3, #16320
 875 05d0 3030C3E3 		bic	r3, r3, #48
 876 05d4 003082E5 		str	r3, [r2, #0]
 877              	.LBE104:
 878              	.LBE105:
 879              		.loc 1 449 0
 880 05d8 0060A0E1 		mov	r6, r0
 881 05dc 08D04DE2 		sub	sp, sp, #8
 882              	.LCFI12:
 883              		.loc 1 451 0
 884 05e0 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 885 05e4 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 886              		.loc 1 449 0
 887 05e8 0140A0E1 		mov	r4, r1
 888              		.loc 1 451 0
 889 05ec 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 890              	.LVL49:
 891 05f0 0010A0E3 		mov	r1, #0
 892              	.LVL50:
 893 05f4 FEFFFFEB 		bl	LCDSetRowColor
 894              		.loc 1 452 0
 895 05f8 080096E5 		ldr	r0, [r6, #8]
 896 05fc 00C0A0E3 		mov	ip, #0
 897 0600 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 898 0604 800286E0 		add	r0, r6, r0, asl #5
 899 0608 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 900 060c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 901 0610 0C10A0E1 		mov	r1, ip
 902 0614 0C0080E2 		add	r0, r0, #12
 903 0618 00C08DE5 		str	ip, [sp, #0]
 904              		.loc 1 449 0
 905 061c FF4004E2 		and	r4, r4, #255
 906              	.LVL51:
 907              		.loc 1 452 0
 908 0620 04508DE5 		str	r5, [sp, #4]
 909 0624 FEFFFFEB 		bl	LCDPrintString
 910 0628 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 911              		.loc 1 453 0
 912 062c 010054E3 		cmp	r4, #1
 913 0630 082096E5 		ldr	r2, [r6, #8]
 914              		.loc 1 454 0
 915 0634 01304302 		subeq	r3, r3, #1
 916              		.loc 1 458 0
 917 0638 01308312 		addne	r3, r3, #1
 918 063c 0030C6E5 		strb	r3, [r6, #0]
 919              		.loc 1 455 0
 920 0640 01204202 		subeq	r2, r2, #1
 921              		.loc 1 459 0
 922 0644 01208212 		addne	r2, r2, #1
 923 0648 082086E5 		str	r2, [r6, #8]
 924              		.loc 1 461 0
 925 064c 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 926 0650 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 927 0654 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 928 0658 0010A0E3 		mov	r1, #0
 929 065c FEFFFFEB 		bl	LCDSetRowColor
 930              		.loc 1 462 0
 931 0660 080096E5 		ldr	r0, [r6, #8]
 932 0664 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 933              	.LVL52:
 934 0668 00C0A0E3 		mov	ip, #0
 935 066c 800286E0 		add	r0, r6, r0, asl #5
 936 0670 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 937 0674 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 938 0678 0C0080E2 		add	r0, r0, #12
 939 067c 0C10A0E1 		mov	r1, ip
 940 0680 04408DE5 		str	r4, [sp, #4]
 941 0684 00C08DE5 		str	ip, [sp, #0]
 942 0688 FEFFFFEB 		bl	LCDPrintString
 943              		.loc 1 463 0
 944 068c 08D08DE2 		add	sp, sp, #8
 945 0690 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 946 0694 1EFF2FE1 		bx	lr
 947              	.L94:
 948              		.align	2
 949              	.L93:
 950 0698 00C002E0 		.word	-536690688
 951              	.LFE11:
 953              		.align	2
 954              		.global	handleDownButton
 956              	handleDownButton:
 957              	.LFB15:
 958              		.loc 1 533 0
 959              		@ Function supports interworking.
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              	.LVL53:
 963 069c 30402DE9 		stmfd	sp!, {r4, r5, lr}
 964              	.LCFI13:
 965              		.loc 1 534 0
 966 06a0 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 967 06a4 0E0053E3 		cmp	r3, #14
 968              		.loc 1 533 0
 969 06a8 0040A0E1 		mov	r4, r0
 970 06ac 0150A0E1 		mov	r5, r1
 971              		.loc 1 534 0
 972 06b0 0200008A 		bhi	.L96
 973              	.LVL54:
 974              		.loc 1 535 0
 975 06b4 0010A0E3 		mov	r1, #0
 976              		.loc 1 549 0
 977 06b8 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 978              		.loc 1 535 0
 979 06bc FEFFFFEA 		b	highlightRow
 980              	.LVL55:
 981              	.L96:
 982              		.loc 1 538 0
 983 06c0 0F0053E3 		cmp	r3, #15
 984 06c4 1000001A 		bne	.L98
 985 06c8 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 986 06cc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 987 06d0 020053E1 		cmp	r3, r2
 988 06d4 0C00009A 		bls	.L98
 989              	.LVL56:
 990              		.loc 1 540 0
 991 06d8 013082E2 		add	r3, r2, #1
 992 06dc 0630C0E5 		strb	r3, [r0, #6]
 993              		.loc 1 543 0
 994 06e0 FEFFFFEB 		bl	quickClear
 995              	.LVL57:
 996              		.loc 1 544 0
 997 06e4 0130A0E3 		mov	r3, #1
 998 06e8 0030C4E5 		strb	r3, [r4, #0]
 999              		.loc 1 545 0
 1000 06ec 0030A0E3 		mov	r3, #0
 1001 06f0 083084E5 		str	r3, [r4, #8]
 1002              		.loc 1 546 0
 1003 06f4 0510A0E1 		mov	r1, r5
 1004 06f8 14009FE5 		ldr	r0, .L99
 1005 06fc FEFFFFEB 		bl	getNewFiles
 1006              		.loc 1 547 0
 1007 0700 0400A0E1 		mov	r0, r4
 1008              		.loc 1 549 0
 1009 0704 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1010              		.loc 1 547 0
 1011 0708 FEFFFFEA 		b	printMenu
 1012              	.LVL58:
 1013              	.L98:
 1014              		.loc 1 549 0
 1015 070c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1016 0710 1EFF2FE1 		bx	lr
 1017              	.L100:
 1018              		.align	2
 1019              	.L99:
 1020 0714 74000000 		.word	file_manager
 1021              	.LFE15:
 1023              		.align	2
 1024              		.global	handleUpButton
 1026              	handleUpButton:
 1027              	.LFB14:
 1028              		.loc 1 509 0
 1029              		@ Function supports interworking.
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              	.LVL59:
 1033 0718 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1034              	.LCFI14:
 1035              		.loc 1 510 0
 1036 071c 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1037 0720 010053E3 		cmp	r3, #1
 1038              		.loc 1 509 0
 1039 0724 0040A0E1 		mov	r4, r0
 1040 0728 0150A0E1 		mov	r5, r1
 1041              		.loc 1 510 0
 1042 072c 0200009A 		bls	.L102
 1043              	.LVL60:
 1044              		.loc 1 511 0
 1045 0730 0110A0E3 		mov	r1, #1
 1046              		.loc 1 525 0
 1047 0734 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1048              		.loc 1 511 0
 1049 0738 FEFFFFEA 		b	highlightRow
 1050              	.LVL61:
 1051              	.L102:
 1052              		.loc 1 514 0
 1053 073c 0F00001A 		bne	.L104
 1054 0740 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1055 0744 000053E3 		cmp	r3, #0
 1056 0748 0C00000A 		beq	.L104
 1057              	.LVL62:
 1058              		.loc 1 516 0
 1059 074c 013043E2 		sub	r3, r3, #1
 1060 0750 0630C0E5 		strb	r3, [r0, #6]
 1061              		.loc 1 519 0
 1062 0754 FEFFFFEB 		bl	quickClear
 1063              	.LVL63:
 1064              		.loc 1 520 0
 1065 0758 0F30A0E3 		mov	r3, #15
 1066 075c 0030C4E5 		strb	r3, [r4, #0]
 1067              		.loc 1 521 0
 1068 0760 0E30A0E3 		mov	r3, #14
 1069 0764 083084E5 		str	r3, [r4, #8]
 1070              		.loc 1 522 0
 1071 0768 0510A0E1 		mov	r1, r5
 1072 076c 14009FE5 		ldr	r0, .L105
 1073 0770 FEFFFFEB 		bl	getNewFiles
 1074              		.loc 1 523 0
 1075 0774 0400A0E1 		mov	r0, r4
 1076              		.loc 1 525 0
 1077 0778 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1078              		.loc 1 523 0
 1079 077c FEFFFFEA 		b	printMenu
 1080              	.LVL64:
 1081              	.L104:
 1082              		.loc 1 525 0
 1083 0780 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1084 0784 1EFF2FE1 		bx	lr
 1085              	.L106:
 1086              		.align	2
 1087              	.L105:
 1088 0788 74000000 		.word	file_manager
 1089              	.LFE14:
 1091              		.align	2
 1092              		.global	sendMP3Data
 1094              	sendMP3Data:
 1095              	.LFB24:
 1096              		.loc 1 774 0
 1097              		@ Function supports interworking.
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100 078c F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1101              	.LCFI15:
 1102              		.loc 1 775 0
 1103 0790 FEFFFFEB 		bl	vs1002Config
 1104              		.loc 1 776 0
 1105 0794 54809FE5 		ldr	r8, .L113
 1106              		.loc 1 779 0
 1107 0798 54709FE5 		ldr	r7, .L113+4
 1108 079c 54409FE5 		ldr	r4, .L113+8
 1109              		.loc 1 782 0
 1110 07a0 0060A0E3 		mov	r6, #0
 1111              		.loc 1 780 0
 1112 07a4 0150A0E3 		mov	r5, #1
 1113 07a8 080000EA 		b	.L112
 1114              	.L110:
 1115              		.loc 1 777 0
 1116 07ac FEFFFFEB 		bl	vs1002SendMusic
 1117              		.loc 1 779 0
 1118 07b0 340097E5 		ldr	r0, [r7, #52]
 1119 07b4 40109FE5 		ldr	r1, .L113+12
 1120 07b8 2020A0E3 		mov	r2, #32
 1121 07bc FEFFFFEB 		bl	fat16_read_file
 1122 07c0 0008A0E1 		mov	r0, r0, asl #16
 1123 07c4 000050E3 		cmp	r0, #0
 1124              		.loc 1 780 0
 1125 07c8 0050C4D5 		strleb	r5, [r4, #0]
 1126              		.loc 1 782 0
 1127 07cc 0060C4C5 		strgtb	r6, [r4, #0]
 1128              	.L112:
 1129              		.loc 1 776 0
 1130 07d0 003098E5 		ldr	r3, [r8, #0]
 1131 07d4 020613E3 		tst	r3, #2097152
 1132              		.loc 1 777 0
 1133 07d8 1C009FE5 		ldr	r0, .L113+12
 1134 07dc 2010A0E3 		mov	r1, #32
 1135              		.loc 1 776 0
 1136 07e0 F1FFFF1A 		bne	.L110
 1137              		.loc 1 785 0
 1138 07e4 FEFFFFEB 		bl	vs1002Finish
 1139              		.loc 1 786 0
 1140 07e8 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1141 07ec 1EFF2FE1 		bx	lr
 1142              	.L114:
 1143              		.align	2
 1144              	.L113:
 1145 07f0 008002E0 		.word	-536707072
 1146 07f4 14000000 		.word	current_song
 1147 07f8 02000000 		.word	song_is_over
 1148 07fc 51000000 		.word	current_song+61
 1149              	.LFE24:
 1151              		.align	2
 1152              		.global	startMP3Player
 1154              	startMP3Player:
 1155              	.LFB23:
 1156              		.loc 1 761 0
 1157              		@ Function supports interworking.
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160 0800 10402DE9 		stmfd	sp!, {r4, lr}
 1161              	.LCFI16:
 1162              		.loc 1 762 0
 1163 0804 FEFFFFEB 		bl	vs1002Config
 1164              		.loc 1 765 0
 1165 0808 50409FE5 		ldr	r4, .L117
 1166              		.loc 1 763 0
 1167 080c 0000A0E3 		mov	r0, #0
 1168 0810 021BA0E3 		mov	r1, #2048
 1169 0814 FEFFFFEB 		bl	vs1002SCIWrite
 1170              		.loc 1 764 0
 1171 0818 FEFFFFEB 		bl	vs1002Finish
 1172              		.loc 1 765 0
 1173 081c 0232A0E3 		mov	r3, #536870912
 1174 0820 0C3084E5 		str	r3, [r4, #12]
 1175              		.loc 1 766 0
 1176 0824 FEFFFFEB 		bl	sendMP3Data
 1177              		.loc 1 767 0
 1178 0828 34209FE5 		ldr	r2, .L117+4
 1179 082c 043092E5 		ldr	r3, [r2, #4]
 1180 0830 033B83E3 		orr	r3, r3, #3072
 1181 0834 043082E5 		str	r3, [r2, #4]
 1182              		.loc 1 768 0
 1183 0838 0020E0E3 		mvn	r2, #0
 1184 083c EF3F12E5 		ldr	r3, [r2, #-4079]
 1185 0840 203083E3 		orr	r3, r3, #32
 1186 0844 EF3F02E5 		str	r3, [r2, #-4079]
 1187              		.loc 1 769 0
 1188 0848 083094E5 		ldr	r3, [r4, #8]
 1189 084c 033783E3 		orr	r3, r3, #786432
 1190 0850 503083E3 		orr	r3, r3, #80
 1191 0854 083084E5 		str	r3, [r4, #8]
 1192              		.loc 1 770 0
 1193 0858 1040BDE8 		ldmfd	sp!, {r4, lr}
 1194 085c 1EFF2FE1 		bx	lr
 1195              	.L118:
 1196              		.align	2
 1197              	.L117:
 1198 0860 008002E0 		.word	-536707072
 1199 0864 00C002E0 		.word	-536690688
 1200              	.LFE23:
 1202              		.align	2
 1204              	timer1ISR:
 1205              	.LFB5:
 1206              		.loc 1 341 0
 1207              		@ Function supports interworking.
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210 0868 04E02DE5 		str	lr, [sp, #-4]!
 1211              	.LCFI17:
 1212              		.loc 1 342 0
 1213 086c FEFFFFEB 		bl	sendMP3Data
 1214              		.loc 1 343 0
 1215 0870 18309FE5 		ldr	r3, .L121
 1216 0874 FF20A0E3 		mov	r2, #255
 1217 0878 002083E5 		str	r2, [r3, #0]
 1218              		.loc 1 344 0
 1219 087c 0020A0E3 		mov	r2, #0
 1220 0880 0030E0E3 		mvn	r3, #0
 1221 0884 CF2F03E5 		str	r2, [r3, #-4047]
 1222              		.loc 1 345 0
 1223 0888 04E09DE4 		ldr	lr, [sp], #4
 1224 088c 1EFF2FE1 		bx	lr
 1225              	.L122:
 1226              		.align	2
 1227              	.L121:
 1228 0890 008000E0 		.word	-536838144
 1229              	.LFE5:
 1231              		.align	2
 1232              		.global	initializeMP3Player
 1234              	initializeMP3Player:
 1235              	.LFB22:
 1236              		.loc 1 751 0
 1237              		@ Function supports interworking.
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240 0894 04E02DE5 		str	lr, [sp, #-4]!
 1241              	.LCFI18:
 1242              		.loc 1 752 0
 1243 0898 FEFFFFEB 		bl	vs1002Config
 1244              		.loc 1 753 0
 1245 089c FEFFFFEB 		bl	vs1002Reset
 1246              		.loc 1 754 0
 1247 08a0 FEFFFFEB 		bl	vs1002Init
 1248              		.loc 1 755 0
 1249 08a4 0500A0E3 		mov	r0, #5
 1250 08a8 FEFFFFEB 		bl	lowerVolume
 1251              		.loc 1 756 0
 1252 08ac FEFFFFEB 		bl	vs1002Finish
 1253              		.loc 1 757 0
 1254 08b0 04E09DE4 		ldr	lr, [sp], #4
 1255 08b4 1EFF2FE1 		bx	lr
 1256              	.LFE22:
 1258              		.section	.rodata.str1.1
 1259              	.LC1:
 1260 0003 4F666600 		.ascii	"Off\000"
 1261              		.text
 1262              		.align	2
 1263              		.global	disableRadio
 1265              	disableRadio:
 1266              	.LFB21:
 1267              		.loc 1 730 0
 1268              		@ Function supports interworking.
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271 08b8 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1272              	.LCFI19:
 1273              		.loc 1 731 0
 1274 08bc 98309FE5 		ldr	r3, .L129
 1275              		.loc 1 734 0
 1276 08c0 98509FE5 		ldr	r5, .L129+4
 1277              		.loc 1 731 0
 1278 08c4 0040A0E3 		mov	r4, #0
 1279 08c8 0040C3E5 		strb	r4, [r3, #0]
 1280              		.loc 1 734 0
 1281 08cc 002095E5 		ldr	r2, [r5, #0]
 1282              		.loc 1 730 0
 1283 08d0 08D04DE2 		sub	sp, sp, #8
 1284              	.LCFI20:
 1285              		.loc 1 734 0
 1286 08d4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1287 08d8 0200A0E3 		mov	r0, #2
 1288 08dc 0410A0E1 		mov	r1, r4
 1289 08e0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1290 08e4 FEFFFFEB 		bl	LCDSetRowColor
 1291              		.loc 1 735 0
 1292 08e8 003095E5 		ldr	r3, [r5, #0]
 1293 08ec 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1294 08f0 00408DE5 		str	r4, [sp, #0]
 1295 08f4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1296 08f8 64009FE5 		ldr	r0, .L129+8
 1297 08fc 0230A0E3 		mov	r3, #2
 1298 0900 0410A0E1 		mov	r1, r4
 1299 0904 04C08DE5 		str	ip, [sp, #4]
 1300 0908 FEFFFFEB 		bl	LCDPrintString
 1301              	.LBB106:
 1302              	.LBB107:
 1303              		.loc 1 851 0
 1304 090c 54209FE5 		ldr	r2, .L129+12
 1305 0910 1C3092E5 		ldr	r3, [r2, #28]
 1306 0914 013283E3 		orr	r3, r3, #268435456
 1307 0918 1C3082E5 		str	r3, [r2, #28]
 1308              	.LBE107:
 1309              	.LBE106:
 1310              	.LBB108:
 1311              	.LBB109:
 1312              		.loc 1 253 0
 1313 091c 48309FE5 		ldr	r3, .L129+16
 1314              	.L126:
 1315              	@ 253 "main.c" 1
 1316 0920 0000A0E1 		nop
 1317              	@ 0 "" 2
 1318 0924 014084E2 		add	r4, r4, #1
 1319              	.LVL65:
 1320 0928 030054E1 		cmp	r4, r3
 1321 092c FBFFFF1A 		bne	.L126
 1322              	.LBE109:
 1323              	.LBE108:
 1324              		.loc 1 740 0
 1325 0930 FEFFFFEB 		bl	ns73Config
 1326              		.loc 1 741 0
 1327 0934 0000A0E3 		mov	r0, #0
 1328 0938 0410A0E3 		mov	r1, #4
 1329 093c FEFFFFEB 		bl	ns73Send
 1330              	.LBB110:
 1331              	.LBB111:
 1332              		.loc 1 856 0
 1333 0940 20209FE5 		ldr	r2, .L129+12
 1334 0944 143092E5 		ldr	r3, [r2, #20]
 1335 0948 013283E3 		orr	r3, r3, #268435456
 1336 094c 143082E5 		str	r3, [r2, #20]
 1337              	.LBE111:
 1338              	.LBE110:
 1339              		.loc 1 743 0
 1340 0950 08D08DE2 		add	sp, sp, #8
 1341 0954 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1342 0958 1EFF2FE1 		bx	lr
 1343              	.L130:
 1344              		.align	2
 1345              	.L129:
 1346 095c 00000000 		.word	radio_enable
 1347 0960 7C040000 		.word	current_display
 1348 0964 03000000 		.word	.LC1
 1349 0968 008002E0 		.word	-536707072
 1350 096c 40420F00 		.word	1000000
 1351              	.LFE21:
 1353              		.section	.rodata.str1.1
 1354              	.LC2:
 1355 0007 4F6E00   		.ascii	"On\000"
 1356              		.text
 1357              		.align	2
 1358              		.global	enableRadio
 1360              	enableRadio:
 1361              	.LFB20:
 1362              		.loc 1 713 0
 1363              		@ Function supports interworking.
 1364              		@ args = 0, pretend = 0, frame = 0
 1365              		@ frame_needed = 0, uses_anonymous_args = 0
 1366 0970 10402DE9 		stmfd	sp!, {r4, lr}
 1367              	.LCFI21:
 1368              		.loc 1 714 0
 1369 0974 9C309FE5 		ldr	r3, .L135
 1370              		.loc 1 717 0
 1371 0978 9C409FE5 		ldr	r4, .L135+4
 1372              		.loc 1 714 0
 1373 097c 0120A0E3 		mov	r2, #1
 1374 0980 0020C3E5 		strb	r2, [r3, #0]
 1375              		.loc 1 717 0
 1376 0984 002094E5 		ldr	r2, [r4, #0]
 1377              		.loc 1 713 0
 1378 0988 08D04DE2 		sub	sp, sp, #8
 1379              	.LCFI22:
 1380              		.loc 1 717 0
 1381 098c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1382 0990 0200A0E3 		mov	r0, #2
 1383 0994 0010A0E3 		mov	r1, #0
 1384 0998 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1385 099c FEFFFFEB 		bl	LCDSetRowColor
 1386              		.loc 1 718 0
 1387 09a0 003094E5 		ldr	r3, [r4, #0]
 1388 09a4 0040A0E3 		mov	r4, #0
 1389 09a8 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1390 09ac 00408DE5 		str	r4, [sp, #0]
 1391 09b0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1392 09b4 64009FE5 		ldr	r0, .L135+8
 1393 09b8 0230A0E3 		mov	r3, #2
 1394 09bc 0410A0E1 		mov	r1, r4
 1395 09c0 04C08DE5 		str	ip, [sp, #4]
 1396 09c4 FEFFFFEB 		bl	LCDPrintString
 1397              	.LBB112:
 1398              	.LBB113:
 1399              		.loc 1 851 0
 1400 09c8 54209FE5 		ldr	r2, .L135+12
 1401 09cc 1C3092E5 		ldr	r3, [r2, #28]
 1402 09d0 013283E3 		orr	r3, r3, #268435456
 1403 09d4 1C3082E5 		str	r3, [r2, #28]
 1404              	.LBE113:
 1405              	.LBE112:
 1406              	.LBB114:
 1407              	.LBB115:
 1408              		.loc 1 253 0
 1409 09d8 48309FE5 		ldr	r3, .L135+16
 1410              	.L132:
 1411              	@ 253 "main.c" 1
 1412 09dc 0000A0E1 		nop
 1413              	@ 0 "" 2
 1414 09e0 014084E2 		add	r4, r4, #1
 1415              	.LVL66:
 1416 09e4 030054E1 		cmp	r4, r3
 1417 09e8 FBFFFF1A 		bne	.L132
 1418              	.LBE115:
 1419              	.LBE114:
 1420              		.loc 1 723 0
 1421 09ec FEFFFFEB 		bl	ns73Config
 1422              		.loc 1 724 0
 1423 09f0 0000A0E3 		mov	r0, #0
 1424 09f4 8110A0E3 		mov	r1, #129
 1425 09f8 FEFFFFEB 		bl	ns73Send
 1426              	.LBB116:
 1427              	.LBB117:
 1428              		.loc 1 856 0
 1429 09fc 20209FE5 		ldr	r2, .L135+12
 1430 0a00 143092E5 		ldr	r3, [r2, #20]
 1431 0a04 013283E3 		orr	r3, r3, #268435456
 1432 0a08 143082E5 		str	r3, [r2, #20]
 1433              	.LBE117:
 1434              	.LBE116:
 1435              		.loc 1 726 0
 1436 0a0c 08D08DE2 		add	sp, sp, #8
 1437 0a10 1040BDE8 		ldmfd	sp!, {r4, lr}
 1438 0a14 1EFF2FE1 		bx	lr
 1439              	.L136:
 1440              		.align	2
 1441              	.L135:
 1442 0a18 00000000 		.word	radio_enable
 1443 0a1c 7C040000 		.word	current_display
 1444 0a20 07000000 		.word	.LC2
 1445 0a24 008002E0 		.word	-536707072
 1446 0a28 40420F00 		.word	1000000
 1447              	.LFE20:
 1449              		.align	2
 1450              		.global	initializeRadio
 1452              	initializeRadio:
 1453              	.LFB19:
 1454              		.loc 1 699 0
 1455              		@ Function supports interworking.
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 1458              	.LVL67:
 1459              	.LBB118:
 1460              	.LBB119:
 1461              		.loc 1 851 0
 1462 0a2c 68209FE5 		ldr	r2, .L143
 1463 0a30 1C3092E5 		ldr	r3, [r2, #28]
 1464 0a34 013283E3 		orr	r3, r3, #268435456
 1465 0a38 1C3082E5 		str	r3, [r2, #28]
 1466              	.LBE119:
 1467              	.LBE118:
 1468              	.LBB121:
 1469              	.LBB122:
 1470              		.loc 1 253 0
 1471 0a3c 5C209FE5 		ldr	r2, .L143+4
 1472              	.LBE122:
 1473              	.LBE121:
 1474              		.loc 1 699 0
 1475 0a40 10402DE9 		stmfd	sp!, {r4, lr}
 1476              	.LCFI23:
 1477              	.LBB124:
 1478              	.LBB120:
 1479              		.loc 1 851 0
 1480 0a44 0030A0E3 		mov	r3, #0
 1481              	.LVL68:
 1482              	.LBE120:
 1483              	.LBE124:
 1484              		.loc 1 699 0
 1485 0a48 0040A0E1 		mov	r4, r0
 1486              	.LVL69:
 1487              	.L138:
 1488              	.LBB125:
 1489              	.LBB123:
 1490              		.loc 1 253 0
 1491              	@ 253 "main.c" 1
 1492 0a4c 0000A0E1 		nop
 1493              	@ 0 "" 2
 1494 0a50 013083E2 		add	r3, r3, #1
 1495 0a54 020053E1 		cmp	r3, r2
 1496 0a58 FBFFFF1A 		bne	.L138
 1497              	.LBE123:
 1498              	.LBE125:
 1499              		.loc 1 703 0
 1500 0a5c FEFFFFEB 		bl	ns73Config
 1501              	.LVL70:
 1502              		.loc 1 704 0
 1503 0a60 FEFFFFEB 		bl	ns73Init
 1504              		.loc 1 705 0
 1505 0a64 0400A0E1 		mov	r0, r4
 1506 0a68 FEFFFFEB 		bl	ns73SetChannel
 1507              	.LBB126:
 1508              	.LBB127:
 1509              		.loc 1 856 0
 1510 0a6c 28209FE5 		ldr	r2, .L143
 1511 0a70 143092E5 		ldr	r3, [r2, #20]
 1512 0a74 013283E3 		orr	r3, r3, #268435456
 1513 0a78 143082E5 		str	r3, [r2, #20]
 1514              	.LBE127:
 1515              	.LBE126:
 1516              	.LBB129:
 1517              	.LBB130:
 1518              		.loc 1 253 0
 1519 0a7c 20209FE5 		ldr	r2, .L143+8
 1520              	.LBE130:
 1521              	.LBE129:
 1522              	.LBB132:
 1523              	.LBB128:
 1524              		.loc 1 856 0
 1525 0a80 0030A0E3 		mov	r3, #0
 1526              	.LVL71:
 1527              	.L139:
 1528              	.LBE128:
 1529              	.LBE132:
 1530              	.LBB133:
 1531              	.LBB131:
 1532              		.loc 1 253 0
 1533              	@ 253 "main.c" 1
 1534 0a84 0000A0E1 		nop
 1535              	@ 0 "" 2
 1536 0a88 013083E2 		add	r3, r3, #1
 1537 0a8c 020053E1 		cmp	r3, r2
 1538 0a90 FBFFFF1A 		bne	.L139
 1539              	.LBE131:
 1540              	.LBE133:
 1541              		.loc 1 709 0
 1542 0a94 1040BDE8 		ldmfd	sp!, {r4, lr}
 1543 0a98 1EFF2FE1 		bx	lr
 1544              	.L144:
 1545              		.align	2
 1546              	.L143:
 1547 0a9c 008002E0 		.word	-536707072
 1548 0aa0 40548900 		.word	9000000
 1549 0aa4 40420F00 		.word	1000000
 1550              	.LFE19:
 1552              		.align	2
 1553              		.global	closeSong
 1555              	closeSong:
 1556              	.LFB10:
 1557              		.loc 1 439 0
 1558              		@ Function supports interworking.
 1559              		@ args = 0, pretend = 0, frame = 0
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561              	.LVL72:
 1562 0aa8 10402DE9 		stmfd	sp!, {r4, lr}
 1563              	.LCFI24:
 1564              	.LBB134:
 1565              	.LBB135:
 1566              		.loc 1 840 0
 1567 0aac 28409FE5 		ldr	r4, .L147
 1568 0ab0 003094E5 		ldr	r3, [r4, #0]
 1569 0ab4 153C83E3 		orr	r3, r3, #5376
 1570 0ab8 003084E5 		str	r3, [r4, #0]
 1571              	.LBE135:
 1572              	.LBE134:
 1573              		.loc 1 441 0
 1574 0abc 340090E5 		ldr	r0, [r0, #52]
 1575              	.LVL73:
 1576 0ac0 FEFFFFEB 		bl	fat16_close_file
 1577              	.LBB136:
 1578              	.LBB137:
 1579              		.loc 1 846 0
 1580 0ac4 003094E5 		ldr	r3, [r4, #0]
 1581 0ac8 FF3DC3E3 		bic	r3, r3, #16320
 1582 0acc 3030C3E3 		bic	r3, r3, #48
 1583 0ad0 003084E5 		str	r3, [r4, #0]
 1584              	.LBE137:
 1585              	.LBE136:
 1586              		.loc 1 443 0
 1587 0ad4 1040BDE8 		ldmfd	sp!, {r4, lr}
 1588 0ad8 1EFF2FE1 		bx	lr
 1589              	.L148:
 1590              		.align	2
 1591              	.L147:
 1592 0adc 00C002E0 		.word	-536690688
 1593              	.LFE10:
 1595              		.align	2
 1596              		.global	stopMP3Player
 1598              	stopMP3Player:
 1599              	.LFB25:
 1600              		.loc 1 790 0
 1601              		@ Function supports interworking.
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              		.loc 1 791 0
 1605 0ae0 2020A0E3 		mov	r2, #32
 1606 0ae4 0030E0E3 		mvn	r3, #0
 1607 0ae8 EB2F03E5 		str	r2, [r3, #-4075]
 1608              		.loc 1 792 0
 1609 0aec 74309FE5 		ldr	r3, .L153
 1610 0af0 0222A0E3 		mov	r2, #536870912
 1611              		.loc 1 790 0
 1612 0af4 10402DE9 		stmfd	sp!, {r4, lr}
 1613              	.LCFI25:
 1614              		.loc 1 792 0
 1615 0af8 042083E5 		str	r2, [r3, #4]
 1616              		.loc 1 793 0
 1617 0afc FEFFFFEB 		bl	vs1002Config
 1618              		.loc 1 794 0
 1619 0b00 0000A0E3 		mov	r0, #0
 1620 0b04 0810A0E3 		mov	r1, #8
 1621 0b08 FEFFFFEB 		bl	vs1002SCIWrite
 1622 0b0c 0040A0E3 		mov	r4, #0
 1623              	.LVL74:
 1624              	.L150:
 1625              	.LBB138:
 1626              		.loc 1 795 0
 1627 0b10 0000A0E3 		mov	r0, #0
 1628 0b14 014084E2 		add	r4, r4, #1
 1629 0b18 0010A0E1 		mov	r1, r0
 1630 0b1c FEFFFFEB 		bl	vs1002SCIWrite
 1631 0b20 960054E3 		cmp	r4, #150
 1632 0b24 F9FFFF1A 		bne	.L150
 1633              	.LBE138:
 1634              		.loc 1 796 0
 1635 0b28 FEFFFFEB 		bl	vs1002Finish
 1636              		.loc 1 797 0
 1637 0b2c 34209FE5 		ldr	r2, .L153
 1638 0b30 083092E5 		ldr	r3, [r2, #8]
 1639 0b34 033783E3 		orr	r3, r3, #786432
 1640 0b38 503083E3 		orr	r3, r3, #80
 1641 0b3c 083082E5 		str	r3, [r2, #8]
 1642              		.loc 1 798 0
 1643 0b40 24009FE5 		ldr	r0, .L153+4
 1644 0b44 FEFFFFEB 		bl	closeSong
 1645              		.loc 1 799 0
 1646 0b48 20309FE5 		ldr	r3, .L153+8
 1647 0b4c 0020A0E3 		mov	r2, #0
 1648 0b50 0020C3E5 		strb	r2, [r3, #0]
 1649              		.loc 1 800 0
 1650 0b54 102082E2 		add	r2, r2, #16
 1651 0b58 0030E0E3 		mvn	r3, #0
 1652 0b5c EF2F03E5 		str	r2, [r3, #-4079]
 1653              		.loc 1 801 0
 1654 0b60 1040BDE8 		ldmfd	sp!, {r4, lr}
 1655 0b64 1EFF2FE1 		bx	lr
 1656              	.L154:
 1657              		.align	2
 1658              	.L153:
 1659 0b68 008002E0 		.word	-536707072
 1660 0b6c 14000000 		.word	current_song
 1661 0b70 01000000 		.word	file_is_open
 1662              	.LFE25:
 1664              		.align	2
 1665              		.global	loadSongInfo
 1667              	loadSongInfo:
 1668              	.LFB9:
 1669              		.loc 1 404 0
 1670              		@ Function supports interworking.
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              	.LVL75:
 1674 0b74 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1675              	.LCFI26:
 1676              		.loc 1 404 0
 1677 0b78 0020A0E3 		mov	r2, #0
 1678              	.LVL76:
 1679 0b7c 0040A0E1 		mov	r4, r0
 1680              	.LVL77:
 1681              	.L156:
 1682              	.LBB139:
 1683              		.loc 1 407 0
 1684 0b80 083091E5 		ldr	r3, [r1, #8]
 1685 0b84 833281E0 		add	r3, r1, r3, asl #5
 1686 0b88 023083E0 		add	r3, r3, r2
 1687 0b8c 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1688              		.loc 1 406 0
 1689 0b90 012082E2 		add	r2, r2, #1
 1690 0b94 1E0052E3 		cmp	r2, #30
 1691              		.loc 1 407 0
 1692 0b98 1630C0E5 		strb	r3, [r0, #22]
 1693              		.loc 1 406 0
 1694 0b9c 010080E2 		add	r0, r0, #1
 1695 0ba0 F6FFFF1A 		bne	.L156
 1696 0ba4 0020A0E3 		mov	r2, #0
 1697              	.LVL78:
 1698              	.LBE139:
 1699              	.LBB140:
 1700              		.loc 1 412 0
 1701 0ba8 0210A0E1 		mov	r1, r2
 1702              	.LVL79:
 1703              	.L159:
 1704              		.loc 1 411 0
 1705 0bac 023084E0 		add	r3, r4, r2
 1706 0bb0 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 1707 0bb4 150052E3 		cmp	r2, #21
 1708 0bb8 2E005313 		cmpne	r3, #46
 1709              		.loc 1 412 0
 1710 0bbc 0210C407 		streqb	r1, [r4, r2]
 1711 0bc0 1620A003 		moveq	r2, #22
 1712              		.loc 1 415 0
 1713 0bc4 0230C417 		strneb	r3, [r4, r2]
 1714              		.loc 1 410 0
 1715 0bc8 012082E2 		add	r2, r2, #1
 1716 0bcc 150052E3 		cmp	r2, #21
 1717 0bd0 F5FFFFDA 		ble	.L159
 1718              	.LBE140:
 1719              	.LBB141:
 1720              	.LBB143:
 1721              		.loc 1 840 0
 1722 0bd4 6C609FE5 		ldr	r6, .L165
 1723 0bd8 003096E5 		ldr	r3, [r6, #0]
 1724              	.LBE143:
 1725              	.LBE141:
 1726              		.loc 1 421 0
 1727 0bdc 165084E2 		add	r5, r4, #22
 1728              	.LBB145:
 1729              	.LBB142:
 1730              		.loc 1 840 0
 1731 0be0 153C83E3 		orr	r3, r3, #5376
 1732              	.LBE142:
 1733              	.LBE145:
 1734              		.loc 1 421 0
 1735 0be4 0500A0E1 		mov	r0, r5
 1736              	.LBB146:
 1737              	.LBB144:
 1738              		.loc 1 840 0
 1739 0be8 003086E5 		str	r3, [r6, #0]
 1740              	.LBE144:
 1741              	.LBE146:
 1742              		.loc 1 421 0
 1743 0bec FEFFFFEB 		bl	root_file_exists
 1744              	.LVL80:
 1745 0bf0 000050E3 		cmp	r0, #0
 1746              	.LBB147:
 1747              	.LBB148:
 1748              		.loc 1 846 0
 1749 0bf4 00309605 		ldreq	r3, [r6, #0]
 1750 0bf8 FF3DC303 		biceq	r3, r3, #16320
 1751 0bfc 3030C303 		biceq	r3, r3, #48
 1752 0c00 00308605 		streq	r3, [r6, #0]
 1753 0c04 0D00000A 		beq	.L161
 1754              	.L160:
 1755              	.LBE148:
 1756              	.LBE147:
 1757              		.loc 1 427 0
 1758 0c08 0500A0E1 		mov	r0, r5
 1759 0c0c FEFFFFEB 		bl	root_open
 1760 0c10 340084E5 		str	r0, [r4, #52]
 1761              		.loc 1 428 0
 1762 0c14 FEFFFFEB 		bl	fat16_file_size
 1763              		.loc 1 429 0
 1764 0c18 3D1084E2 		add	r1, r4, #61
 1765              		.loc 1 428 0
 1766 0c1c 380084E5 		str	r0, [r4, #56]
 1767              		.loc 1 429 0
 1768 0c20 2020A0E3 		mov	r2, #32
 1769 0c24 340094E5 		ldr	r0, [r4, #52]
 1770 0c28 FEFFFFEB 		bl	fat16_read_file
 1771              	.LBB149:
 1772              	.LBB150:
 1773              		.loc 1 846 0
 1774 0c2c 003096E5 		ldr	r3, [r6, #0]
 1775 0c30 FF3DC3E3 		bic	r3, r3, #16320
 1776 0c34 3030C3E3 		bic	r3, r3, #48
 1777 0c38 003086E5 		str	r3, [r6, #0]
 1778 0c3c 0100A0E3 		mov	r0, #1
 1779              	.L161:
 1780              	.LBE150:
 1781              	.LBE149:
 1782              		.loc 1 434 0
 1783 0c40 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1784 0c44 1EFF2FE1 		bx	lr
 1785              	.L166:
 1786              		.align	2
 1787              	.L165:
 1788 0c48 00C002E0 		.word	-536690688
 1789              	.LFE9:
 1791              		.align	2
 1792              		.global	handleMiddleButton
 1794              	handleMiddleButton:
 1795              	.LFB16:
 1796              		.loc 1 559 0
 1797              		@ Function supports interworking.
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800 0c4c F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1801              	.LCFI27:
 1802              		.loc 1 560 0
 1803 0c50 1020A0E3 		mov	r2, #16
 1804 0c54 0030E0E3 		mvn	r3, #0
 1805 0c58 EB2F03E5 		str	r2, [r3, #-4075]
 1806              	.LBB151:
 1807              	.LBB152:
 1808              		.loc 1 253 0
 1809 0c5c 7C249FE5 		ldr	r2, .L208
 1810              	.LBE152:
 1811              	.LBE151:
 1812              		.loc 1 559 0
 1813 0c60 08D04DE2 		sub	sp, sp, #8
 1814              	.LCFI28:
 1815              		.loc 1 560 0
 1816 0c64 013083E2 		add	r3, r3, #1
 1817              	.LVL81:
 1818              	.L168:
 1819              	.LBB154:
 1820              	.LBB153:
 1821              		.loc 1 253 0
 1822              	@ 253 "main.c" 1
 1823 0c68 0000A0E1 		nop
 1824              	@ 0 "" 2
 1825 0c6c 013083E2 		add	r3, r3, #1
 1826 0c70 020053E1 		cmp	r3, r2
 1827 0c74 FBFFFF1A 		bne	.L168
 1828              	.LBE153:
 1829              	.LBE154:
 1830              		.loc 1 564 0
 1831 0c78 64649FE5 		ldr	r6, .L208+4
 1832 0c7c 64349FE5 		ldr	r3, .L208+8
 1833              	.LVL82:
 1834 0c80 000096E5 		ldr	r0, [r6, #0]
 1835 0c84 030050E1 		cmp	r0, r3
 1836 0c88 5C549FE5 		ldr	r5, .L208+12
 1837 0c8c 2500001A 		bne	.L169
 1838              		.loc 1 565 0
 1839 0c90 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1840 0c94 000053E3 		cmp	r3, #0
 1841 0c98 2000001A 		bne	.L170
 1842              		.loc 1 566 0
 1843 0c9c 0010A0E1 		mov	r1, r0
 1844 0ca0 48049FE5 		ldr	r0, .L208+16
 1845 0ca4 FEFFFFEB 		bl	loadSongInfo
 1846              		.loc 1 567 0
 1847 0ca8 000050E3 		cmp	r0, #0
 1848              		.loc 1 566 0
 1849 0cac 0040A0E1 		mov	r4, r0
 1850 0cb0 0000C5E5 		strb	r0, [r5, #0]
 1851              		.loc 1 567 0
 1852 0cb4 1700001A 		bne	.L171
 1853              		.loc 1 568 0
 1854 0cb8 34349FE5 		ldr	r3, .L208+20
 1855 0cbc 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1856 0cc0 FEFFFFEB 		bl	LCDClear
 1857              		.loc 1 569 0
 1858 0cc4 00408DE5 		str	r4, [sp, #0]
 1859 0cc8 001096E5 		ldr	r1, [r6, #0]
 1860 0ccc 24349FE5 		ldr	r3, .L208+24
 1861 0cd0 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1862 0cd4 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1863 0cd8 1C049FE5 		ldr	r0, .L208+28
 1864 0cdc 0130A0E3 		mov	r3, #1
 1865 0ce0 0410A0E1 		mov	r1, r4
 1866 0ce4 04C08DE5 		str	ip, [sp, #4]
 1867 0ce8 FEFFFFEB 		bl	LCDPrintString
 1868              	.LBB155:
 1869              	.LBB156:
 1870              		.loc 1 253 0
 1871 0cec 0C349FE5 		ldr	r3, .L208+32
 1872              	.LBE156:
 1873              	.LBE155:
 1874              		.loc 1 569 0
 1875 0cf0 0400A0E1 		mov	r0, r4
 1876              	.LVL83:
 1877              	.L172:
 1878              	.LBB158:
 1879              	.LBB157:
 1880              		.loc 1 253 0
 1881              	@ 253 "main.c" 1
 1882 0cf4 0000A0E1 		nop
 1883              	@ 0 "" 2
 1884 0cf8 010080E2 		add	r0, r0, #1
 1885 0cfc 030050E1 		cmp	r0, r3
 1886 0d00 FBFFFF1A 		bne	.L172
 1887              	.LBE157:
 1888              	.LBE158:
 1889              		.loc 1 571 0
 1890 0d04 EC339FE5 		ldr	r3, .L208+24
 1891 0d08 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1892              	.LVL84:
 1893 0d0c FEFFFFEB 		bl	LCDClear
 1894              		.loc 1 572 0
 1895 0d10 D0039FE5 		ldr	r0, .L208+8
 1896 0d14 E90000EA 		b	.L207
 1897              	.L171:
 1898              		.loc 1 574 0
 1899 0d18 FEFFFFEB 		bl	startMP3Player
 1900 0d1c E80000EA 		b	.L173
 1901              	.L170:
 1902              		.loc 1 577 0
 1903 0d20 FEFFFFEB 		bl	stopMP3Player
 1904 0d24 E60000EA 		b	.L173
 1905              	.L169:
 1906              		.loc 1 580 0
 1907 0d28 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1908 0d2c 000053E3 		cmp	r3, #0
 1909 0d30 0100000A 		beq	.L174
 1910              		.loc 1 581 0
 1911 0d34 FEFFFFEB 		bl	quickClear
 1912 0d38 020000EA 		b	.L175
 1913              	.L174:
 1914              		.loc 1 583 0
 1915 0d3c C0339FE5 		ldr	r3, .L208+36
 1916 0d40 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1917 0d44 FEFFFFEB 		bl	LCDClear
 1918              	.L175:
 1919              		.loc 1 585 0
 1920 0d48 94839FE5 		ldr	r8, .L208+4
 1921 0d4c 003098E5 		ldr	r3, [r8, #0]
 1922 0d50 0060A0E3 		mov	r6, #0
 1923 0d54 080093E5 		ldr	r0, [r3, #8]
 1924 0d58 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1925 0d5c 00608DE5 		str	r6, [sp, #0]
 1926 0d60 800283E0 		add	r0, r3, r0, asl #5
 1927 0d64 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1928              		.loc 1 586 0
 1929 0d68 0070E0E3 		mvn	r7, #0
 1930              		.loc 1 585 0
 1931 0d6c 0130A0E3 		mov	r3, #1
 1932 0d70 0C0080E2 		add	r0, r0, #12
 1933 0d74 0610A0E1 		mov	r1, r6
 1934 0d78 04C08DE5 		str	ip, [sp, #4]
 1935 0d7c FEFFFFEB 		bl	LCDPrintString
 1936              		.loc 1 586 0
 1937 0d80 EF3F17E5 		ldr	r3, [r7, #-4079]
 1938 0d84 103083E3 		orr	r3, r3, #16
 1939 0d88 EF3F07E5 		str	r3, [r7, #-4079]
 1940              		.loc 1 587 0
 1941 0d8c 002098E5 		ldr	r2, [r8, #0]
 1942 0d90 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 1943 0d94 010054E3 		cmp	r4, #1
 1944 0d98 2B00001A 		bne	.L176
 1945              		.loc 1 588 0
 1946 0d9c EF3F17E5 		ldr	r3, [r7, #-4079]
 1947 0da0 103083E3 		orr	r3, r3, #16
 1948 0da4 EF3F07E5 		str	r3, [r7, #-4079]
 1949              		.loc 1 589 0
 1950 0da8 0610A0E1 		mov	r1, r6
 1951 0dac 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1952 0db0 0200A0E3 		mov	r0, #2
 1953 0db4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1954 0db8 FEFFFFEB 		bl	LCDSetRowColor
 1955              		.loc 1 590 0
 1956 0dbc 00608DE5 		str	r6, [sp, #0]
 1957 0dc0 2C339FE5 		ldr	r3, .L208+20
 1958 0dc4 001098E5 		ldr	r1, [r8, #0]
 1959 0dc8 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1960 0dcc 34339FE5 		ldr	r3, .L208+40
 1961 0dd0 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1962 0dd4 30039FE5 		ldr	r0, .L208+44
 1963 0dd8 001093E5 		ldr	r1, [r3, #0]
 1964 0ddc 0230A0E3 		mov	r3, #2
 1965 0de0 04C08DE5 		str	ip, [sp, #4]
 1966              		.loc 1 592 0
 1967 0de4 0740A0E1 		mov	r4, r7
 1968              		.loc 1 590 0
 1969 0de8 FEFFFFEB 		bl	LCDPrintString
 1970              		.loc 1 591 0
 1971 0dec 1C739FE5 		ldr	r7, .L208+48
 1972              		.loc 1 592 0
 1973 0df0 106086E2 		add	r6, r6, #16
 1974              	.LBB159:
 1975              	.LBB160:
 1976              		.loc 1 253 0
 1977 0df4 18539FE5 		ldr	r5, .L208+52
 1978 0df8 0F0000EA 		b	.L177
 1979              	.L181:
 1980              	.LBE160:
 1981              	.LBE159:
 1982              		.loc 1 592 0
 1983 0dfc EB6F04E5 		str	r6, [r4, #-4075]
 1984 0e00 0030A0E3 		mov	r3, #0
 1985              	.LVL85:
 1986              	.L178:
 1987              	.LBB162:
 1988              	.LBB161:
 1989              		.loc 1 253 0
 1990              	@ 253 "main.c" 1
 1991 0e04 0000A0E1 		nop
 1992              	@ 0 "" 2
 1993 0e08 013083E2 		add	r3, r3, #1
 1994 0e0c 050053E1 		cmp	r3, r5
 1995 0e10 FBFFFF1A 		bne	.L178
 1996              	.LBE161:
 1997              	.LBE162:
 1998              		.loc 1 594 0
 1999 0e14 020050E3 		cmp	r0, #2
 2000 0e18 0200001A 		bne	.L179
 2001              		.loc 1 595 0
 2002 0e1c 0100A0E3 		mov	r0, #1
 2003 0e20 FEFFFFEB 		bl	raiseVolume
 2004              	.LVL86:
 2005 0e24 010000EA 		b	.L180
 2006              	.LVL87:
 2007              	.L179:
 2008              		.loc 1 596 0
 2009 0e28 010050E3 		cmp	r0, #1
 2010              		.loc 1 597 0
 2011 0e2c FEFFFF0B 		bleq	lowerVolume
 2012              	.LVL88:
 2013              	.L180:
 2014              		.loc 1 599 0
 2015 0e30 EF3F14E5 		ldr	r3, [r4, #-4079]
 2016              	.LVL89:
 2017 0e34 103083E3 		orr	r3, r3, #16
 2018 0e38 EF3F04E5 		str	r3, [r4, #-4079]
 2019              	.L177:
 2020              		.loc 1 591 0
 2021 0e3c 0000D7E5 		ldrb	r0, [r7, #0]	@ zero_extendqisi2
 2022 0e40 020050E3 		cmp	r0, #2
 2023 0e44 ECFFFF9A 		bls	.L181
 2024 0e48 8F0000EA 		b	.L182
 2025              	.L176:
 2026              		.loc 1 602 0
 2027 0e4c 030054E3 		cmp	r4, #3
 2028 0e50 5E00001A 		bne	.L183
 2029              		.loc 1 603 0
 2030 0e54 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2031 0e58 0610A0E1 		mov	r1, r6
 2032 0e5c 0200A0E3 		mov	r0, #2
 2033 0e60 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2034 0e64 FEFFFFEB 		bl	LCDSetRowColor
 2035              		.loc 1 604 0
 2036 0e68 00608DE5 		str	r6, [sp, #0]
 2037 0e6c 003098E5 		ldr	r3, [r8, #0]
 2038 0e70 7C529FE5 		ldr	r5, .L208+20
 2039 0e74 9C429FE5 		ldr	r4, .L208+56
 2040 0e78 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2041 0e7c 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 2042 0e80 001094E5 		ldr	r1, [r4, #0]
 2043 0e84 0230A0E3 		mov	r3, #2
 2044 0e88 7C029FE5 		ldr	r0, .L208+44
 2045 0e8c 04C08DE5 		str	ip, [sp, #4]
 2046 0e90 FEFFFFEB 		bl	LCDPrintString
 2047              		.loc 1 606 0
 2048 0e94 EF3F17E5 		ldr	r3, [r7, #-4079]
 2049              		.loc 1 605 0
 2050 0e98 70229FE5 		ldr	r2, .L208+48
 2051              		.loc 1 606 0
 2052 0e9c 103083E3 		orr	r3, r3, #16
 2053              		.loc 1 605 0
 2054 0ea0 0060C2E5 		strb	r6, [r2, #0]
 2055              		.loc 1 607 0
 2056 0ea4 02B0A0E1 		mov	fp, r2
 2057              		.loc 1 619 0
 2058 0ea8 0860A0E1 		mov	r6, r8
 2059              		.loc 1 606 0
 2060 0eac EF3F07E5 		str	r3, [r7, #-4079]
 2061              	.LBB163:
 2062              	.LBB164:
 2063              		.loc 1 253 0
 2064 0eb0 64929FE5 		ldr	r9, .L208+60
 2065              	.LBE164:
 2066              	.LBE163:
 2067              		.loc 1 618 0
 2068 0eb4 64A29FE5 		ldr	sl, .L208+64
 2069              		.loc 1 612 0
 2070 0eb8 64829FE5 		ldr	r8, .L208+68
 2071 0ebc 2D0000EA 		b	.L184
 2072              	.L190:
 2073              		.loc 1 608 0
 2074 0ec0 1030A0E3 		mov	r3, #16
 2075 0ec4 EB3F07E5 		str	r3, [r7, #-4075]
 2076 0ec8 0030A0E3 		mov	r3, #0
 2077              	.LVL90:
 2078              	.L185:
 2079              	.LBB166:
 2080              	.LBB165:
 2081              		.loc 1 253 0
 2082              	@ 253 "main.c" 1
 2083 0ecc 0000A0E1 		nop
 2084              	@ 0 "" 2
 2085 0ed0 013083E2 		add	r3, r3, #1
 2086 0ed4 090053E1 		cmp	r3, r9
 2087 0ed8 FBFFFF1A 		bne	.L185
 2088              	.LBE165:
 2089              	.LBE166:
 2090              		.loc 1 610 0
 2091 0edc 020052E3 		cmp	r2, #2
 2092 0ee0 0900001A 		bne	.L186
 2093              		.loc 1 612 0
 2094 0ee4 003094E5 		ldr	r3, [r4, #0]
 2095              	.LVL91:
 2096 0ee8 080053E1 		cmp	r3, r8
 2097 0eec 023083D2 		addle	r3, r3, #2
 2098 0ef0 003084D5 		strle	r3, [r4, #0]
 2099              		.loc 1 613 0
 2100 0ef4 002096E5 		ldr	r2, [r6, #0]
 2101 0ef8 0200A0E3 		mov	r0, #2
 2102 0efc 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2103 0f00 0010A0E3 		mov	r1, #0
 2104 0f04 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2105 0f08 0A0000EA 		b	.L205
 2106              	.LVL92:
 2107              	.L186:
 2108              		.loc 1 616 0
 2109 0f0c 010052E3 		cmp	r2, #1
 2110 0f10 1300001A 		bne	.L188
 2111              		.loc 1 618 0
 2112 0f14 003094E5 		ldr	r3, [r4, #0]
 2113              	.LVL93:
 2114 0f18 0A0053E1 		cmp	r3, sl
 2115 0f1c 023043C2 		subgt	r3, r3, #2
 2116 0f20 003084C5 		strgt	r3, [r4, #0]
 2117              		.loc 1 619 0
 2118 0f24 002096E5 		ldr	r2, [r6, #0]
 2119 0f28 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2120 0f2c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2121 0f30 0200A0E3 		mov	r0, #2
 2122 0f34 0010A0E3 		mov	r1, #0
 2123              	.L205:
 2124 0f38 FEFFFFEB 		bl	LCDSetRowColor
 2125              		.loc 1 620 0
 2126 0f3c 0030A0E3 		mov	r3, #0
 2127 0f40 00308DE5 		str	r3, [sp, #0]
 2128 0f44 003096E5 		ldr	r3, [r6, #0]
 2129 0f48 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2130 0f4c 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 2131 0f50 001094E5 		ldr	r1, [r4, #0]
 2132 0f54 B0019FE5 		ldr	r0, .L208+44
 2133 0f58 0230A0E3 		mov	r3, #2
 2134 0f5c 04C08DE5 		str	ip, [sp, #4]
 2135 0f60 FEFFFFEB 		bl	LCDPrintString
 2136              	.LVL94:
 2137              	.L188:
 2138              		.loc 1 622 0
 2139 0f64 000094E5 		ldr	r0, [r4, #0]
 2140 0f68 FEFFFFEB 		bl	ns73SetChannel
 2141              	.LVL95:
 2142              		.loc 1 623 0
 2143 0f6c EF3F17E5 		ldr	r3, [r7, #-4079]
 2144 0f70 103083E3 		orr	r3, r3, #16
 2145 0f74 EF3F07E5 		str	r3, [r7, #-4079]
 2146              	.L184:
 2147              		.loc 1 607 0
 2148 0f78 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 2149 0f7c 020052E3 		cmp	r2, #2
 2150 0f80 CEFFFF9A 		bls	.L190
 2151              	.LBB167:
 2152              	.LBB168:
 2153              		.loc 1 851 0
 2154 0f84 9C219FE5 		ldr	r2, .L208+72
 2155 0f88 1C3092E5 		ldr	r3, [r2, #28]
 2156 0f8c 013283E3 		orr	r3, r3, #268435456
 2157 0f90 1C3082E5 		str	r3, [r2, #28]
 2158              	.LBE168:
 2159              	.LBE167:
 2160              	.LBB170:
 2161              	.LBB171:
 2162              		.loc 1 253 0
 2163 0f94 80219FE5 		ldr	r2, .L208+60
 2164              	.LBE171:
 2165              	.LBE170:
 2166              	.LBB173:
 2167              	.LBB169:
 2168              		.loc 1 851 0
 2169 0f98 0030A0E3 		mov	r3, #0
 2170              	.LVL96:
 2171              	.L191:
 2172              	.LBE169:
 2173              	.LBE173:
 2174              	.LBB174:
 2175              	.LBB172:
 2176              		.loc 1 253 0
 2177              	@ 253 "main.c" 1
 2178 0f9c 0000A0E1 		nop
 2179              	@ 0 "" 2
 2180 0fa0 013083E2 		add	r3, r3, #1
 2181 0fa4 020053E1 		cmp	r3, r2
 2182 0fa8 FBFFFF1A 		bne	.L191
 2183              	.LBE172:
 2184              	.LBE174:
 2185              		.loc 1 627 0
 2186 0fac FEFFFFEB 		bl	ns73Config
 2187              	.LVL97:
 2188              		.loc 1 628 0
 2189 0fb0 60319FE5 		ldr	r3, .L208+56
 2190 0fb4 000093E5 		ldr	r0, [r3, #0]
 2191 0fb8 FEFFFFEB 		bl	ns73SetChannel
 2192              	.LBB175:
 2193              	.LBB176:
 2194              		.loc 1 856 0
 2195 0fbc 64219FE5 		ldr	r2, .L208+72
 2196 0fc0 143092E5 		ldr	r3, [r2, #20]
 2197 0fc4 013283E3 		orr	r3, r3, #268435456
 2198 0fc8 143082E5 		str	r3, [r2, #20]
 2199 0fcc 2E0000EA 		b	.L182
 2200              	.L183:
 2201              	.LBE176:
 2202              	.LBE175:
 2203              		.loc 1 631 0
 2204 0fd0 020054E3 		cmp	r4, #2
 2205 0fd4 2C00001A 		bne	.L182
 2206              		.loc 1 632 0
 2207 0fd8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2208 0fdc 0610A0E1 		mov	r1, r6
 2209 0fe0 0400A0E1 		mov	r0, r4
 2210 0fe4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2211 0fe8 FEFFFFEB 		bl	LCDSetRowColor
 2212              		.loc 1 633 0
 2213 0fec 38319FE5 		ldr	r3, .L208+76
 2214 0ff0 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2215 0ff4 000051E3 		cmp	r1, #0
 2216 0ff8 0700000A 		beq	.L192
 2217              		.loc 1 634 0
 2218 0ffc 003098E5 		ldr	r3, [r8, #0]
 2219 1000 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2220 1004 00608DE5 		str	r6, [sp, #0]
 2221 1008 0610A0E1 		mov	r1, r6
 2222 100c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2223 1010 18019FE5 		ldr	r0, .L208+80
 2224 1014 0430A0E1 		mov	r3, r4
 2225 1018 050000EA 		b	.L206
 2226              	.L192:
 2227              		.loc 1 636 0
 2228 101c 003098E5 		ldr	r3, [r8, #0]
 2229 1020 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2230 1024 00108DE5 		str	r1, [sp, #0]
 2231 1028 04019FE5 		ldr	r0, .L208+84
 2232 102c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2233 1030 0430A0E1 		mov	r3, r4
 2234              	.L206:
 2235 1034 04C08DE5 		str	ip, [sp, #4]
 2236 1038 FEFFFFEB 		bl	LCDPrintString
 2237              		.loc 1 639 0
 2238 103c 0010E0E3 		mvn	r1, #0
 2239 1040 EF2F11E5 		ldr	r2, [r1, #-4079]
 2240              		.loc 1 638 0
 2241 1044 C4309FE5 		ldr	r3, .L208+48
 2242              		.loc 1 639 0
 2243 1048 102082E3 		orr	r2, r2, #16
 2244              		.loc 1 638 0
 2245 104c 0000A0E3 		mov	r0, #0
 2246 1050 0000C3E5 		strb	r0, [r3, #0]
 2247              		.loc 1 639 0
 2248 1054 EF2F01E5 		str	r2, [r1, #-4079]
 2249              		.loc 1 641 0
 2250 1058 100080E2 		add	r0, r0, #16
 2251              	.LBB177:
 2252              	.LBB178:
 2253              		.loc 1 253 0
 2254 105c B8209FE5 		ldr	r2, .L208+60
 2255 1060 060000EA 		b	.L194
 2256              	.LVL98:
 2257              	.L195:
 2258              	@ 253 "main.c" 1
 2259 1064 0000A0E1 		nop
 2260              	@ 0 "" 2
 2261 1068 013083E2 		add	r3, r3, #1
 2262 106c 020053E1 		cmp	r3, r2
 2263 1070 FBFFFF1A 		bne	.L195
 2264              	.LBE178:
 2265              	.LBE177:
 2266              		.loc 1 649 0
 2267 1074 EF3F11E5 		ldr	r3, [r1, #-4079]
 2268              	.LVL99:
 2269 1078 103083E3 		orr	r3, r3, #16
 2270 107c EF3F01E5 		str	r3, [r1, #-4079]
 2271              	.L194:
 2272              		.loc 1 641 0
 2273 1080 EB0F01E5 		str	r0, [r1, #-4075]
 2274 1084 0030A0E3 		mov	r3, #0
 2275              	.LVL100:
 2276 1088 F5FFFFEA 		b	.L195
 2277              	.LVL101:
 2278              	.L182:
 2279              		.loc 1 652 0
 2280 108c 58309FE5 		ldr	r3, .L208+12
 2281 1090 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2282 1094 000053E3 		cmp	r3, #0
 2283 1098 44009FE5 		ldr	r0, .L208+4
 2284 109c 0200000A 		beq	.L196
 2285 10a0 000090E5 		ldr	r0, [r0, #0]
 2286 10a4 FEFFFFEB 		bl	quickClear
 2287 10a8 020000EA 		b	.L197
 2288              	.L196:
 2289              		.loc 1 653 0
 2290 10ac 003090E5 		ldr	r3, [r0, #0]
 2291 10b0 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2292 10b4 FEFFFFEB 		bl	LCDClear
 2293              	.L197:
 2294              		.loc 1 654 0
 2295 10b8 24309FE5 		ldr	r3, .L208+4
 2296 10bc 000093E5 		ldr	r0, [r3, #0]
 2297              	.L207:
 2298 10c0 FEFFFFEB 		bl	printMenu
 2299              	.L173:
 2300              		.loc 1 656 0
 2301 10c4 0020E0E3 		mvn	r2, #0
 2302 10c8 EF3F12E5 		ldr	r3, [r2, #-4079]
 2303 10cc 103083E3 		orr	r3, r3, #16
 2304 10d0 EF3F02E5 		str	r3, [r2, #-4079]
 2305              		.loc 1 657 0
 2306 10d4 08D08DE2 		add	sp, sp, #8
 2307 10d8 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2308 10dc 1EFF2FE1 		bx	lr
 2309              	.L209:
 2310              		.align	2
 2311              	.L208:
 2312 10e0 A0252600 		.word	2500000
 2313 10e4 7C040000 		.word	current_display
 2314 10e8 74000000 		.word	file_manager
 2315 10ec 01000000 		.word	file_is_open
 2316 10f0 14000000 		.word	current_song
 2317 10f4 00000000 		.word	white
 2318 10f8 00000000 		.word	black
 2319 10fc 00000000 		.word	NotFound
 2320 1100 80969800 		.word	10000000
 2321 1104 78020000 		.word	settings_menu
 2322 1108 00000000 		.word	volume_setting
 2323 110c 00000000 		.word	.LC0
 2324 1110 08000000 		.word	button_pressed
 2325 1114 60E31600 		.word	1500000
 2326 1118 00000000 		.word	radio_channel
 2327 111c 40420F00 		.word	1000000
 2328 1120 75030000 		.word	885
 2329 1124 32040000 		.word	1074
 2330 1128 008002E0 		.word	-536707072
 2331 112c 00000000 		.word	radio_enable
 2332 1130 07000000 		.word	.LC2
 2333 1134 03000000 		.word	.LC1
 2334              	.LFE16:
 2336              		.section	.rodata.str1.1
 2337              	.LC3:
 2338 000a 53442049 		.ascii	"SD Init Error\012\000"
 2338      6E697420 
 2338      4572726F 
 2338      720A00
 2339              	.LC4:
 2340 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 2340      70656E52 
 2340      6F6F7420 
 2340      4572726F 
 2340      720A00
 2341              		.text
 2342              		.align	2
 2343              		.global	bootUp
 2345              	bootUp:
 2346              	.LFB4:
 2347              		.loc 1 260 0
 2348              		@ Function supports interworking.
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351 1138 04E02DE5 		str	lr, [sp, #-4]!
 2352              	.LCFI29:
 2353              		.loc 1 261 0
 2354 113c B0019FE5 		ldr	r0, .L216
 2355 1140 FEFFFFEB 		bl	rprintf_devopen
 2356              	.LBB179:
 2357              	.LBB180:
 2358              		.loc 1 253 0
 2359 1144 AC219FE5 		ldr	r2, .L216+4
 2360              	.LBE180:
 2361              	.LBE179:
 2362              		.loc 1 261 0
 2363 1148 0030A0E3 		mov	r3, #0
 2364              	.LVL102:
 2365              	.L211:
 2366              	.LBB182:
 2367              	.LBB181:
 2368              		.loc 1 253 0
 2369              	@ 253 "main.c" 1
 2370 114c 0000A0E1 		nop
 2371              	@ 0 "" 2
 2372 1150 013083E2 		add	r3, r3, #1
 2373 1154 020053E1 		cmp	r3, r2
 2374 1158 FBFFFF1A 		bne	.L211
 2375              	.LBE181:
 2376              	.LBE182:
 2377              		.loc 1 265 0
 2378 115c FEFFFFEB 		bl	sd_raw_init
 2379              	.LVL103:
 2380 1160 000050E3 		cmp	r0, #0
 2381              		.loc 1 267 0
 2382 1164 90019F05 		ldreq	r0, .L216+8
 2383 1168 FEFFFF0B 		bleq	rprintf
 2384              	.L212:
 2385              		.loc 1 269 0
 2386 116c FEFFFFEB 		bl	openroot
 2387 1170 000050E3 		cmp	r0, #0
 2388              		.loc 1 271 0
 2389 1174 84019F15 		ldrne	r0, .L216+12
 2390 1178 FEFFFF1B 		blne	rprintf
 2391              	.L213:
 2392              		.loc 1 276 0
 2393 117c 80219FE5 		ldr	r2, .L216+16
 2394 1180 083092E5 		ldr	r3, [r2, #8]
 2395 1184 013683E3 		orr	r3, r3, #1048576
 2396 1188 083082E5 		str	r3, [r2, #8]
 2397              		.loc 1 277 0
 2398 118c 083092E5 		ldr	r3, [r2, #8]
 2399 1190 0236C3E3 		bic	r3, r3, #2097152
 2400 1194 083082E5 		str	r3, [r2, #8]
 2401              		.loc 1 278 0
 2402 1198 68119FE5 		ldr	r1, .L216+20
 2403 119c 043091E5 		ldr	r3, [r1, #4]
 2404 11a0 033B83E3 		orr	r3, r3, #3072
 2405 11a4 043081E5 		str	r3, [r1, #4]
 2406              		.loc 1 279 0
 2407 11a8 183092E5 		ldr	r3, [r2, #24]
 2408 11ac 013483E3 		orr	r3, r3, #16777216
 2409 11b0 033883E3 		orr	r3, r3, #196608
 2410 11b4 183082E5 		str	r3, [r2, #24]
 2411              		.loc 1 282 0
 2412 11b8 183092E5 		ldr	r3, [r2, #24]
 2413 11bc 023483E3 		orr	r3, r3, #33554432
 2414 11c0 183082E5 		str	r3, [r2, #24]
 2415              		.loc 1 283 0
 2416 11c4 183092E5 		ldr	r3, [r2, #24]
 2417 11c8 013283E3 		orr	r3, r3, #268435456
 2418 11cc 183082E5 		str	r3, [r2, #24]
 2419              		.loc 1 286 0
 2420 11d0 083092E5 		ldr	r3, [r2, #8]
 2421 11d4 803083E3 		orr	r3, r3, #128
 2422 11d8 083082E5 		str	r3, [r2, #8]
 2423              		.loc 1 289 0
 2424 11dc 083092E5 		ldr	r3, [r2, #8]
 2425 11e0 033B83E3 		orr	r3, r3, #3072
 2426 11e4 083082E5 		str	r3, [r2, #8]
 2427              		.loc 1 290 0
 2428 11e8 003091E5 		ldr	r3, [r1, #0]
 2429 11ec CF3483E3 		orr	r3, r3, #-822083584
 2430 11f0 003081E5 		str	r3, [r1, #0]
 2431              		.loc 1 291 0
 2432 11f4 033BA0E3 		mov	r3, #3072
 2433 11f8 0C3082E5 		str	r3, [r2, #12]
 2434              		.loc 1 294 0
 2435 11fc 083092E5 		ldr	r3, [r2, #8]
 2436 1200 033783E3 		orr	r3, r3, #786432
 2437 1204 083082E5 		str	r3, [r2, #8]
 2438              		.loc 1 297 0
 2439 1208 083092E5 		ldr	r3, [r2, #8]
 2440 120c 073283E3 		orr	r3, r3, #1879048192
 2441 1210 083082E5 		str	r3, [r2, #8]
 2442              		.loc 1 298 0
 2443 1214 0232A0E3 		mov	r3, #536870912
 2444 1218 043082E5 		str	r3, [r2, #4]
 2445              		.loc 1 299 0
 2446 121c 033083E0 		add	r3, r3, r3
 2447 1220 043082E5 		str	r3, [r2, #4]
 2448              		.loc 1 300 0
 2449 1224 0D3283E2 		add	r3, r3, #-805306368
 2450 1228 043082E5 		str	r3, [r2, #4]
 2451              		.loc 1 303 0
 2452 122c 183092E5 		ldr	r3, [r2, #24]
 2453 1230 0E36C3E3 		bic	r3, r3, #14680064
 2454 1234 183082E5 		str	r3, [r2, #24]
 2455              		.loc 1 305 0
 2456 1238 083092E5 		ldr	r3, [r2, #8]
 2457 123c 0235C3E3 		bic	r3, r3, #8388608
 2458 1240 083082E5 		str	r3, [r2, #8]
 2459              		.loc 1 308 0
 2460 1244 C0309FE5 		ldr	r3, .L216+24
 2461 1248 0120A0E3 		mov	r2, #1
 2462              		.loc 1 309 0
 2463 124c 0010E0E3 		mvn	r1, #0
 2464              		.loc 1 308 0
 2465 1250 002183E5 		str	r2, [r3, #256]
 2466              		.loc 1 309 0
 2467 1254 3030E0E3 		mvn	r3, #48
 2468 1258 F33F01E5 		str	r3, [r1, #-4083]
 2469              		.loc 1 310 0
 2470 125c 413083E2 		add	r3, r3, #65
 2471 1260 EF3F01E5 		str	r3, [r1, #-4079]
 2472              		.loc 1 311 0
 2473 1264 153083E2 		add	r3, r3, #21
 2474 1268 FF3D01E5 		str	r3, [r1, #-3583]
 2475              		.loc 1 312 0
 2476 126c 9C309FE5 		ldr	r3, .L216+28
 2477 1270 FF3E01E5 		str	r3, [r1, #-3839]
 2478              		.loc 1 313 0
 2479 1274 2430A0E3 		mov	r3, #36
 2480 1278 FB3D01E5 		str	r3, [r1, #-3579]
 2481              		.loc 1 314 0
 2482 127c 90309FE5 		ldr	r3, .L216+32
 2483              		.loc 1 317 0
 2484 1280 90009FE5 		ldr	r0, .L216+36
 2485              		.loc 1 314 0
 2486 1284 FB3E01E5 		str	r3, [r1, #-3835]
 2487              		.loc 1 317 0
 2488 1288 4B3FA0E3 		mov	r3, #300
 2489 128c 0C3080E5 		str	r3, [r0, #12]
 2490              		.loc 1 318 0
 2491 1290 043090E5 		ldr	r3, [r0, #4]
 2492 1294 013083E3 		orr	r3, r3, #1
 2493 1298 043080E5 		str	r3, [r0, #4]
 2494              		.loc 1 319 0
 2495 129c 00C0A0E3 		mov	ip, #0
 2496              		.loc 1 320 0
 2497 12a0 0330A0E3 		mov	r3, #3
 2498              		.loc 1 319 0
 2499 12a4 70C080E5 		str	ip, [r0, #112]
 2500              		.loc 1 324 0
 2501 12a8 6C209FE5 		ldr	r2, .L216+40
 2502              		.loc 1 320 0
 2503 12ac 143080E5 		str	r3, [r0, #20]
 2504              		.loc 1 321 0
 2505 12b0 FA3FA0E3 		mov	r3, #1000
 2506 12b4 183080E5 		str	r3, [r0, #24]
 2507              		.loc 1 324 0
 2508 12b8 323E43E2 		sub	r3, r3, #800
 2509 12bc 0C3082E5 		str	r3, [r2, #12]
 2510              		.loc 1 325 0
 2511 12c0 043092E5 		ldr	r3, [r2, #4]
 2512 12c4 013083E3 		orr	r3, r3, #1
 2513 12c8 043082E5 		str	r3, [r2, #4]
 2514              		.loc 1 330 0
 2515 12cc 4C109FE5 		ldr	r1, .L216+44
 2516              		.loc 1 327 0
 2517 12d0 0A3CA0E3 		mov	r3, #2560
 2518              		.loc 1 326 0
 2519 12d4 70C082E5 		str	ip, [r2, #112]
 2520              		.loc 1 327 0
 2521 12d8 283082E5 		str	r3, [r2, #40]
 2522              		.loc 1 330 0
 2523 12dc 273D43E2 		sub	r3, r3, #2496
 2524 12e0 0C3081E5 		str	r3, [r1, #12]
 2525              		.loc 1 331 0
 2526 12e4 2030A0E3 		mov	r3, #32
 2527 12e8 003081E5 		str	r3, [r1, #0]
 2528              		.loc 1 332 0
 2529 12ec 04E09DE4 		ldr	lr, [sp], #4
 2530 12f0 1EFF2FE1 		bx	lr
 2531              	.L217:
 2532              		.align	2
 2533              	.L216:
 2534 12f4 00000000 		.word	putc_serial0
 2535 12f8 A0860100 		.word	100000
 2536 12fc 0A000000 		.word	.LC3
 2537 1300 19000000 		.word	.LC4
 2538 1304 008002E0 		.word	-536707072
 2539 1308 00C002E0 		.word	-536690688
 2540 130c 00C01FE0 		.word	-534790144
 2541 1310 00000000 		.word	timer1ISR
 2542 1314 00000000 		.word	timer0ISR
 2543 1318 004000E0 		.word	-536854528
 2544 131c 008000E0 		.word	-536838144
 2545 1320 000002E0 		.word	-536739840
 2546              	.LFE4:
 2548              		.align	2
 2550              	timer0ISR:
 2551              	.LFB6:
 2552              		.loc 1 353 0
 2553              		@ Function supports interworking.
 2554              		@ args = 0, pretend = 0, frame = 0
 2555              		@ frame_needed = 0, uses_anonymous_args = 0
 2556              	.LBB183:
 2557              	.LBB184:
 2558              		.loc 1 373 0
 2559 1324 A8209FE5 		ldr	r2, .L229
 2560 1328 103092E5 		ldr	r3, [r2, #16]
 2561 132c 020513E3 		tst	r3, #8388608
 2562              	.LBE184:
 2563              	.LBE183:
 2564              		.loc 1 353 0
 2565 1330 04E02DE5 		str	lr, [sp, #-4]!
 2566              	.LCFI30:
 2567              	.LBB186:
 2568              	.LBB185:
 2569              		.loc 1 373 0
 2570 1334 0220A003 		moveq	r2, #2
 2571 1338 0700000A 		beq	.L220
 2572              		.loc 1 374 0
 2573 133c 103092E5 		ldr	r3, [r2, #16]
 2574 1340 020613E3 		tst	r3, #2097152
 2575 1344 0120A003 		moveq	r2, #1
 2576 1348 0300000A 		beq	.L220
 2577              		.loc 1 375 0
 2578 134c 103092E5 		ldr	r3, [r2, #16]
 2579 1350 010513E3 		tst	r3, #4194304
 2580 1354 0320A003 		moveq	r2, #3
 2581 1358 0020A013 		movne	r2, #0
 2582              	.L220:
 2583              	.LBE185:
 2584              	.LBE186:
 2585              		.loc 1 354 0
 2586 135c 74309FE5 		ldr	r3, .L229+4
 2587 1360 0020C3E5 		strb	r2, [r3, #0]
 2588              		.loc 1 355 0
 2589 1364 FEFFFFEB 		bl	MMA_get_y
 2590              		.loc 1 356 0
 2591 1368 6C309FE5 		ldr	r3, .L229+8
 2592 136c 002093E5 		ldr	r2, [r3, #0]
 2593              		.loc 1 355 0
 2594 1370 68309FE5 		ldr	r3, .L229+12
 2595              		.loc 1 356 0
 2596 1374 AF0F52E3 		cmp	r2, #700
 2597              		.loc 1 355 0
 2598 1378 000083E5 		str	r0, [r3, #0]
 2599              		.loc 1 356 0
 2600 137c 010000AA 		bge	.L223
 2601 1380 AF0F50E3 		cmp	r0, #700
 2602 1384 030000CA 		bgt	.L224
 2603              	.L223:
 2604 1388 AF0F52E3 		cmp	r2, #700
 2605 138c 030000DA 		ble	.L225
 2606 1390 AF0F50E3 		cmp	r0, #700
 2607 1394 010000AA 		bge	.L225
 2608              	.L224:
 2609              		.loc 1 357 0
 2610 1398 0120A0E3 		mov	r2, #1
 2611 139c 000000EA 		b	.L228
 2612              	.L225:
 2613              		.loc 1 359 0
 2614 13a0 0020A0E3 		mov	r2, #0
 2615              	.L228:
 2616 13a4 38309FE5 		ldr	r3, .L229+16
 2617 13a8 0020C3E5 		strb	r2, [r3, #0]
 2618              		.loc 1 363 0
 2619 13ac 34309FE5 		ldr	r3, .L229+20
 2620 13b0 FF20A0E3 		mov	r2, #255
 2621 13b4 002083E5 		str	r2, [r3, #0]
 2622              		.loc 1 361 0
 2623 13b8 1C309FE5 		ldr	r3, .L229+8
 2624              		.loc 1 364 0
 2625 13bc 0020A0E3 		mov	r2, #0
 2626              		.loc 1 361 0
 2627 13c0 000083E5 		str	r0, [r3, #0]
 2628              		.loc 1 364 0
 2629 13c4 0030E0E3 		mvn	r3, #0
 2630 13c8 CF2F03E5 		str	r2, [r3, #-4047]
 2631              		.loc 1 365 0
 2632 13cc 04E09DE4 		ldr	lr, [sp], #4
 2633 13d0 1EFF2FE1 		bx	lr
 2634              	.L230:
 2635              		.align	2
 2636              	.L229:
 2637 13d4 008002E0 		.word	-536707072
 2638 13d8 08000000 		.word	button_pressed
 2639 13dc 0C000000 		.word	prev_position
 2640 13e0 10000000 		.word	cur_position
 2641 13e4 09000000 		.word	update_screen
 2642 13e8 004000E0 		.word	-536854528
 2643              	.LFE6:
 2645              		.global	__divsi3
 2646              		.global	__modsi3
 2647              		.section	.rodata.str1.1
 2648              	.LC5:
 2649 002c 474F2047 		.ascii	"GO GO MP3!\000"
 2649      4F204D50 
 2649      332100
 2650              		.text
 2651              		.align	2
 2652              		.global	main
 2654              	main:
 2655              	.LFB2:
 2656              		.loc 1 94 0
 2657              		@ Function supports interworking.
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 1, uses_anonymous_args = 0
 2660 13ec 0DC0A0E1 		mov	ip, sp
 2661              	.LCFI31:
 2662 13f0 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2663              	.LCFI32:
 2664 13f4 04B04CE2 		sub	fp, ip, #4
 2665              	.LCFI33:
 2666 13f8 08D04DE2 		sub	sp, sp, #8
 2667              	.LCFI34:
 2668              		.loc 1 104 0
 2669 13fc FEFFFFEB 		bl	bootUp
 2670              		.loc 1 105 0
 2671 1400 FEFFFFEB 		bl	initializeMP3Player
 2672              		.loc 1 106 0
 2673 1404 FEFFFFEB 		bl	splashScreen
 2674              		.loc 1 107 0
 2675 1408 08359FE5 		ldr	r3, .L267
 2676 140c 000093E5 		ldr	r0, [r3, #0]
 2677 1410 FEFFFFEB 		bl	initializeRadio
 2678              	.LBB187:
 2679              	.LBB188:
 2680              		.loc 1 840 0
 2681 1414 00259FE5 		ldr	r2, .L267+4
 2682 1418 003092E5 		ldr	r3, [r2, #0]
 2683 141c 153C83E3 		orr	r3, r3, #5376
 2684 1420 003082E5 		str	r3, [r2, #0]
 2685 1424 0050A0E3 		mov	r5, #0
 2686              	.LVL104:
 2687              	.L232:
 2688              	.LBE188:
 2689              	.LBE187:
 2690              		.loc 1 114 0
 2691 1428 0000A0E3 		mov	r0, #0
 2692 142c FEFFFFEB 		bl	rootDirectory_files_stream
 2693 1430 006050E2 		subs	r6, r0, #0
 2694              		.loc 1 113 0
 2695 1434 015085E2 		add	r5, r5, #1
 2696              		.loc 1 114 0
 2697 1438 FAFFFF1A 		bne	.L232
 2698              		.loc 1 115 0
 2699 143c 063085E2 		add	r3, r5, #6
 2700 1440 0330C3E3 		bic	r3, r3, #3
 2701 1444 0DD063E0 		rsb	sp, r3, sp
 2702 1448 08708DE2 		add	r7, sp, #8
 2703              		.loc 1 116 0
 2704 144c 0700A0E1 		mov	r0, r7
 2705 1450 011085E2 		add	r1, r5, #1
 2706 1454 FEFFFFEB 		bl	rootDirectory_files
 2707              		.loc 1 117 0
 2708 1458 8032A0E1 		mov	r3, r0, asl #5
 2709 145c 043083E2 		add	r3, r3, #4
 2710 1460 0DD063E0 		rsb	sp, r3, sp
 2711              		.loc 1 116 0
 2712 1464 B4349FE5 		ldr	r3, .L267+8
 2713 1468 0040A0E1 		mov	r4, r0
 2714              	.LBB189:
 2715              		.loc 1 121 0
 2716 146c 0600A0E1 		mov	r0, r6
 2717              	.LVL105:
 2718              	.LBE189:
 2719              		.loc 1 116 0
 2720 1470 004083E5 		str	r4, [r3, #0]
 2721              		.loc 1 117 0
 2722 1474 08608DE2 		add	r6, sp, #8
 2723              	.LBB191:
 2724              		.loc 1 121 0
 2725 1478 00E0A0E1 		mov	lr, r0
 2726              	.LVL106:
 2727 147c 0080A0E1 		mov	r8, r0
 2728              	.LVL107:
 2729 1480 100000EA 		b	.L233
 2730              	.LVL108:
 2731              	.L239:
 2732 1484 0030A0E3 		mov	r3, #0
 2733              	.LBB190:
 2734              		.loc 1 131 0
 2735 1488 8EC2A0E1 		mov	ip, lr, asl #5
 2736              	.L238:
 2737              		.loc 1 123 0
 2738 148c 050050E1 		cmp	r0, r5
 2739              		.loc 1 131 0
 2740 1490 03208CE0 		add	r2, ip, r3
 2741 1494 0280C687 		strhib	r8, [r6, r2]
 2742              		.loc 1 123 0
 2743 1498 0600008A 		bhi	.L237
 2744              	.LVL109:
 2745              		.loc 1 124 0
 2746 149c 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 2747 14a0 2C0051E3 		cmp	r1, #44
 2748              		.loc 1 125 0
 2749 14a4 0230A001 		moveq	r3, r2
 2750              		.loc 1 128 0
 2751 14a8 0210C617 		strneb	r1, [r6, r2]
 2752              		.loc 1 125 0
 2753 14ac 0380C607 		streqb	r8, [r6, r3]
 2754              		.loc 1 129 0
 2755 14b0 010080E2 		add	r0, r0, #1
 2756              		.loc 1 125 0
 2757 14b4 1F30A003 		moveq	r3, #31
 2758              	.LVL110:
 2759              	.L237:
 2760              		.loc 1 122 0
 2761 14b8 013083E2 		add	r3, r3, #1
 2762 14bc 200053E3 		cmp	r3, #32
 2763 14c0 F1FFFF1A 		bne	.L238
 2764              	.LBE190:
 2765              		.loc 1 121 0
 2766 14c4 01E08EE2 		add	lr, lr, #1
 2767              	.LVL111:
 2768              	.L233:
 2769 14c8 04005EE1 		cmp	lr, r4
 2770 14cc ECFFFFBA 		blt	.L239
 2771              	.LBE191:
 2772              		.loc 1 137 0
 2773 14d0 0400A0E1 		mov	r0, r4
 2774              	.LVL112:
 2775 14d4 0F10A0E3 		mov	r1, #15
 2776 14d8 FEFFFFEB 		bl	__divsi3
 2777              	.LVL113:
 2778              		.loc 1 138 0
 2779 14dc 3C349FE5 		ldr	r3, .L267+8
 2780              		.loc 1 137 0
 2781 14e0 FF4000E2 		and	r4, r0, #255
 2782 14e4 38549FE5 		ldr	r5, .L267+12
 2783              	.LVL114:
 2784              		.loc 1 138 0
 2785 14e8 000093E5 		ldr	r0, [r3, #0]
 2786              		.loc 1 137 0
 2787 14ec 013044E2 		sub	r3, r4, #1
 2788 14f0 0530C5E5 		strb	r3, [r5, #5]
 2789              		.loc 1 138 0
 2790 14f4 0F10A0E3 		mov	r1, #15
 2791 14f8 FEFFFFEB 		bl	__modsi3
 2792              		.loc 1 141 0
 2793 14fc 24349FE5 		ldr	r3, .L267+16
 2794 1500 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2795              		.loc 1 142 0
 2796 1504 20349FE5 		ldr	r3, .L267+20
 2797              		.loc 1 138 0
 2798 1508 000050E3 		cmp	r0, #0
 2799 150c 0540C515 		strneb	r4, [r5, #5]
 2800              		.loc 1 142 0
 2801 1510 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2802              		.loc 1 140 0
 2803 1514 08449FE5 		ldr	r4, .L267+12
 2804 1518 0050A0E3 		mov	r5, #0
 2805              		.loc 1 142 0
 2806 151c 0430C4E5 		strb	r3, [r4, #4]
 2807              		.loc 1 145 0
 2808 1520 0130A0E3 		mov	r3, #1
 2809              		.loc 1 141 0
 2810 1524 0320C4E5 		strb	r2, [r4, #3]
 2811              		.loc 1 147 0
 2812 1528 0400A0E1 		mov	r0, r4
 2813 152c 0610A0E1 		mov	r1, r6
 2814              		.loc 1 145 0
 2815 1530 0030C4E5 		strb	r3, [r4, #0]
 2816              		.loc 1 140 0
 2817 1534 0250C4E5 		strb	r5, [r4, #2]
 2818              		.loc 1 144 0
 2819 1538 0650C4E5 		strb	r5, [r4, #6]
 2820              		.loc 1 146 0
 2821 153c 085084E5 		str	r5, [r4, #8]
 2822              		.loc 1 147 0
 2823 1540 FEFFFFEB 		bl	getNewFiles
 2824              	.LBB192:
 2825              		.loc 1 149 0
 2826 1544 E4239FE5 		ldr	r2, .L267+24
 2827              	.L241:
 2828 1548 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 2829              	.LVL115:
 2830              		.loc 1 148 0
 2831 154c 015085E2 		add	r5, r5, #1
 2832 1550 160055E3 		cmp	r5, #22
 2833              		.loc 1 149 0
 2834 1554 EC31C4E5 		strb	r3, [r4, #492]
 2835              		.loc 1 148 0
 2836 1558 014084E2 		add	r4, r4, #1
 2837 155c F9FFFF1A 		bne	.L241
 2838              	.LBE192:
 2839              		.loc 1 153 0
 2840 1560 CC039FE5 		ldr	r0, .L267+28
 2841 1564 FEFFFFEB 		bl	fillSettings
 2842              	.LBB193:
 2843              	.LBB195:
 2844              		.loc 1 846 0
 2845 1568 AC139FE5 		ldr	r1, .L267+4
 2846 156c 003091E5 		ldr	r3, [r1, #0]
 2847              	.LBE195:
 2848              	.LBE193:
 2849              		.loc 1 156 0
 2850 1570 AC239FE5 		ldr	r2, .L267+12
 2851 1574 BC439FE5 		ldr	r4, .L267+32
 2852              	.LBB197:
 2853              	.LBB194:
 2854              		.loc 1 846 0
 2855 1578 FF3DC3E3 		bic	r3, r3, #16320
 2856 157c 3030C3E3 		bic	r3, r3, #48
 2857              	.LBE194:
 2858              	.LBE197:
 2859              		.loc 1 158 0
 2860 1580 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 2861              		.loc 1 156 0
 2862 1584 002084E5 		str	r2, [r4, #0]
 2863              	.LBB198:
 2864              	.LBB196:
 2865              		.loc 1 846 0
 2866 1588 003081E5 		str	r3, [r1, #0]
 2867              	.LBE196:
 2868              	.LBE198:
 2869              		.loc 1 158 0
 2870 158c FEFFFFEB 		bl	LCDClear
 2871              		.loc 1 159 0
 2872 1590 000094E5 		ldr	r0, [r4, #0]
 2873 1594 FEFFFFEB 		bl	printMenu
 2874              		.loc 1 162 0
 2875 1598 003094E5 		ldr	r3, [r4, #0]
 2876 159c 0010A0E3 		mov	r1, #0
 2877 15a0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2878 15a4 00108DE5 		str	r1, [sp, #0]
 2879 15a8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2880 15ac 88039FE5 		ldr	r0, .L267+36
 2881 15b0 0230A0E3 		mov	r3, #2
 2882 15b4 04C08DE5 		str	ip, [sp, #4]
 2883 15b8 FEFFFFEB 		bl	LCDPrintString
 2884              		.loc 1 166 0
 2885 15bc 7C739FE5 		ldr	r7, .L267+40
 2886              		.loc 1 168 0
 2887 15c0 60939FE5 		ldr	r9, .L267+16
 2888              		.loc 1 178 0
 2889 15c4 78839FE5 		ldr	r8, .L267+44
 2890              	.LVL116:
 2891              	.LBB199:
 2892              	.LBB200:
 2893              		.loc 1 253 0
 2894 15c8 78A39FE5 		ldr	sl, .L267+48
 2895              	.L259:
 2896              	.LBE200:
 2897              	.LBE199:
 2898              		.loc 1 166 0
 2899 15cc 003097E5 		ldr	r3, [r7, #0]
 2900 15d0 020513E3 		tst	r3, #8388608
 2901 15d4 2100000A 		beq	.L242
 2902              		.loc 1 168 0
 2903 15d8 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 2904 15dc FEFFFFEB 		bl	LCDClear
 2905              		.loc 1 169 0
 2906 15e0 0430A0E3 		mov	r3, #4
 2907 15e4 00308DE5 		str	r3, [sp, #0]
 2908 15e8 003094E5 		ldr	r3, [r4, #0]
 2909 15ec 38139FE5 		ldr	r1, .L267+20
 2910 15f0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2911 15f4 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2912 15f8 0730A0E3 		mov	r3, #7
 2913 15fc 48039FE5 		ldr	r0, .L267+52
 2914 1600 0010A0E3 		mov	r1, #0
 2915 1604 04C08DE5 		str	ip, [sp, #4]
 2916 1608 FEFFFFEB 		bl	LCDPrintString
 2917 160c 0030A0E3 		mov	r3, #0
 2918              	.LVL117:
 2919              	.L243:
 2920              	.LBB202:
 2921              	.LBB203:
 2922              		.loc 1 253 0
 2923              	@ 253 "main.c" 1
 2924 1610 0000A0E1 		nop
 2925              	@ 0 "" 2
 2926 1614 34239FE5 		ldr	r2, .L267+56
 2927 1618 013083E2 		add	r3, r3, #1
 2928 161c 020053E1 		cmp	r3, r2
 2929 1620 FAFFFF1A 		bne	.L243
 2930              	.LBE203:
 2931              	.LBE202:
 2932              		.loc 1 171 0
 2933 1624 3020A0E3 		mov	r2, #48
 2934 1628 0030E0E3 		mvn	r3, #0
 2935              	.LVL118:
 2936 162c EB2F03E5 		str	r2, [r3, #-4075]
 2937              		.loc 1 172 0
 2938 1630 FEFFFFEB 		bl	main_msc
 2939              	.LBB204:
 2940              	.LBB205:
 2941              		.loc 1 683 0
 2942 1634 0E22A0E3 		mov	r2, #-536870912
 2943 1638 003092E5 		ldr	r3, [r2, #0]
 2944 163c 033083E3 		orr	r3, r3, #3
 2945 1640 003082E5 		str	r3, [r2, #0]
 2946              		.loc 1 684 0
 2947 1644 AA10A0E3 		mov	r1, #170
 2948              		.loc 1 685 0
 2949 1648 5530A0E3 		mov	r3, #85
 2950              		.loc 1 684 0
 2951 164c 081082E5 		str	r1, [r2, #8]
 2952              		.loc 1 685 0
 2953 1650 083082E5 		str	r3, [r2, #8]
 2954              		.loc 1 687 0
 2955 1654 0030A0E3 		mov	r3, #0
 2956              		.loc 1 686 0
 2957 1658 081082E5 		str	r1, [r2, #8]
 2958              		.loc 1 687 0
 2959 165c 083082E5 		str	r3, [r2, #8]
 2960              	.L242:
 2961              	.LBE205:
 2962              	.LBE204:
 2963              		.loc 1 178 0
 2964 1660 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2965 1664 000053E3 		cmp	r3, #0
 2966 1668 4300001A 		bne	.L244
 2967 166c E0329FE5 		ldr	r3, .L267+60
 2968 1670 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 2969              	.LVL119:
 2970 1674 000055E3 		cmp	r5, #0
 2971 1678 3F00001A 		bne	.L244
 2972              		.loc 1 180 0
 2973 167c D4329FE5 		ldr	r3, .L267+64
 2974 1680 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2975 1684 000053E3 		cmp	r3, #0
 2976 1688 3B00000A 		beq	.L244
 2977              		.loc 1 181 0
 2978 168c 2020A0E3 		mov	r2, #32
 2979 1690 0030E0E3 		mvn	r3, #0
 2980 1694 EB2F03E5 		str	r2, [r3, #-4075]
 2981              		.loc 1 182 0
 2982 1698 BC029FE5 		ldr	r0, .L267+68
 2983 169c FEFFFFEB 		bl	closeSong
 2984              		.loc 1 186 0
 2985 16a0 7C129FE5 		ldr	r1, .L267+12
 2986              		.loc 1 183 0
 2987 16a4 B4329FE5 		ldr	r3, .L267+72
 2988              		.loc 1 186 0
 2989 16a8 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2990              		.loc 1 183 0
 2991 16ac 0050C3E5 		strb	r5, [r3, #0]
 2992              		.loc 1 186 0
 2993 16b0 0E0052E3 		cmp	r2, #14
 2994              		.loc 1 184 0
 2995 16b4 0232A0E3 		mov	r3, #536870912
 2996 16b8 043087E5 		str	r3, [r7, #4]
 2997              		.loc 1 187 0
 2998 16bc 01208292 		addls	r2, r2, #1
 2999              		.loc 1 188 0
 3000 16c0 08309195 		ldrls	r3, [r1, #8]
 3001              		.loc 1 187 0
 3002 16c4 0020C195 		strlsb	r2, [r1, #0]
 3003              		.loc 1 191 0
 3004 16c8 54C29FE5 		ldr	ip, .L267+12
 3005              		.loc 1 188 0
 3006 16cc 01308392 		addls	r3, r3, #1
 3007 16d0 08308195 		strls	r3, [r1, #8]
 3008              		.loc 1 191 0
 3009 16d4 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 3010 16d8 0F0053E3 		cmp	r3, #15
 3011 16dc 0C00001A 		bne	.L246
 3012 16e0 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 3013 16e4 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 3014 16e8 020053E1 		cmp	r3, r2
 3015 16ec 0800009A 		bls	.L246
 3016              		.loc 1 194 0
 3017 16f0 013082E2 		add	r3, r2, #1
 3018              		.loc 1 192 0
 3019 16f4 0120A0E3 		mov	r2, #1
 3020 16f8 0020CCE5 		strb	r2, [ip, #0]
 3021              		.loc 1 193 0
 3022 16fc 0020A0E3 		mov	r2, #0
 3023              		.loc 1 195 0
 3024 1700 0C00A0E1 		mov	r0, ip
 3025 1704 0610A0E1 		mov	r1, r6
 3026              		.loc 1 193 0
 3027 1708 08208CE5 		str	r2, [ip, #8]
 3028              		.loc 1 194 0
 3029 170c 0630CCE5 		strb	r3, [ip, #6]
 3030              		.loc 1 195 0
 3031 1710 FEFFFFEB 		bl	getNewFiles
 3032              	.L246:
 3033              		.loc 1 198 0
 3034 1714 08529FE5 		ldr	r5, .L267+12
 3035 1718 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 3036 171c 833285E0 		add	r3, r5, r3, asl #5
 3037 1720 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3038 1724 000053E3 		cmp	r3, #0
 3039 1728 1300000A 		beq	.L244
 3040              		.loc 1 199 0
 3041 172c 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 3042 1730 FEFFFFEB 		bl	LCDClear
 3043              		.loc 1 200 0
 3044 1734 0500A0E1 		mov	r0, r5
 3045 1738 FEFFFFEB 		bl	printMenu
 3046              		.loc 1 201 0
 3047 173c 0510A0E1 		mov	r1, r5
 3048 1740 14029FE5 		ldr	r0, .L267+68
 3049 1744 FEFFFFEB 		bl	loadSongInfo
 3050 1748 10329FE5 		ldr	r3, .L267+72
 3051 174c 0000C3E5 		strb	r0, [r3, #0]
 3052              		.loc 1 202 0
 3053 1750 FEFFFFEB 		bl	vs1002Config
 3054              		.loc 1 203 0
 3055 1754 0000A0E3 		mov	r0, #0
 3056 1758 021BA0E3 		mov	r1, #2048
 3057 175c FEFFFFEB 		bl	vs1002SCIWrite
 3058              		.loc 1 204 0
 3059 1760 FEFFFFEB 		bl	vs1002Finish
 3060              		.loc 1 205 0
 3061 1764 0232A0E3 		mov	r3, #536870912
 3062 1768 0C3087E5 		str	r3, [r7, #12]
 3063              		.loc 1 206 0
 3064 176c 0020E0E3 		mvn	r2, #0
 3065 1770 EF3F12E5 		ldr	r3, [r2, #-4079]
 3066 1774 203083E3 		orr	r3, r3, #32
 3067 1778 EF3F02E5 		str	r3, [r2, #-4079]
 3068              	.LVL120:
 3069              	.L244:
 3070              		.loc 1 211 0
 3071 177c 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3072 1780 020053E3 		cmp	r3, #2
 3073 1784 0300001A 		bne	.L247
 3074 1788 000094E5 		ldr	r0, [r4, #0]
 3075 178c 0610A0E1 		mov	r1, r6
 3076 1790 FEFFFFEB 		bl	handleUpButton
 3077 1794 580000EA 		b	.L248
 3078              	.L247:
 3079              		.loc 1 212 0
 3080 1798 010053E3 		cmp	r3, #1
 3081 179c 0300001A 		bne	.L249
 3082 17a0 000094E5 		ldr	r0, [r4, #0]
 3083 17a4 0610A0E1 		mov	r1, r6
 3084 17a8 FEFFFFEB 		bl	handleDownButton
 3085 17ac 520000EA 		b	.L248
 3086              	.L249:
 3087              		.loc 1 213 0
 3088 17b0 030053E3 		cmp	r3, #3
 3089 17b4 0100001A 		bne	.L250
 3090 17b8 FEFFFFEB 		bl	handleMiddleButton
 3091 17bc 4E0000EA 		b	.L248
 3092              	.L250:
 3093              		.loc 1 215 0
 3094 17c0 8C319FE5 		ldr	r3, .L267+60
 3095 17c4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3096 17c8 000053E3 		cmp	r3, #0
 3097 17cc 4A00000A 		beq	.L248
 3098              		.loc 1 216 0
 3099 17d0 0030E0E3 		mvn	r3, #0
 3100 17d4 1020A0E3 		mov	r2, #16
 3101 17d8 EB2F03E5 		str	r2, [r3, #-4075]
 3102 17dc 013083E2 		add	r3, r3, #1
 3103              	.LVL121:
 3104              	.L251:
 3105              	.LBB206:
 3106              	.LBB201:
 3107              		.loc 1 253 0
 3108              	@ 253 "main.c" 1
 3109 17e0 0000A0E1 		nop
 3110              	@ 0 "" 2
 3111 17e4 013083E2 		add	r3, r3, #1
 3112 17e8 0A0053E1 		cmp	r3, sl
 3113 17ec FBFFFF1A 		bne	.L251
 3114              	.LBE201:
 3115              	.LBE206:
 3116              		.loc 1 218 0
 3117 17f0 FEFFFFEB 		bl	MMA_get_y
 3118              	.LVL122:
 3119 17f4 AF0F50E3 		cmp	r0, #700
 3120 17f8 190000DA 		ble	.L252
 3121 17fc 60319FE5 		ldr	r3, .L267+76
 3122 1800 003093E5 		ldr	r3, [r3, #0]
 3123 1804 AF0F53E3 		cmp	r3, #700
 3124 1808 150000DA 		ble	.L252
 3125              		.loc 1 219 0
 3126 180c 4C319FE5 		ldr	r3, .L267+72
 3127 1810 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3128 1814 000053E3 		cmp	r3, #0
 3129 1818 0200000A 		beq	.L253
 3130 181c 000094E5 		ldr	r0, [r4, #0]
 3131 1820 FEFFFFEB 		bl	quickClear
 3132 1824 020000EA 		b	.L254
 3133              	.L253:
 3134              		.loc 1 220 0
 3135 1828 003094E5 		ldr	r3, [r4, #0]
 3136 182c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3137 1830 FEFFFFEB 		bl	LCDClear
 3138              	.L254:
 3139              		.loc 1 224 0
 3140 1834 24319FE5 		ldr	r3, .L267+72
 3141 1838 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3142              		.loc 1 221 0
 3143 183c F0209FE5 		ldr	r2, .L267+28
 3144              		.loc 1 224 0
 3145 1840 000053E3 		cmp	r3, #0
 3146              		.loc 1 222 0
 3147 1844 0130A0E3 		mov	r3, #1
 3148 1848 0230C2E5 		strb	r3, [r2, #2]
 3149              		.loc 1 223 0
 3150 184c 0232A0E3 		mov	r3, #536870912
 3151 1850 043087E5 		str	r3, [r7, #4]
 3152              		.loc 1 221 0
 3153 1854 002084E5 		str	r2, [r4, #0]
 3154              		.loc 1 224 0
 3155 1858 0F328312 		addne	r3, r3, #-268435456
 3156              		.loc 1 225 0
 3157 185c 0131A003 		moveq	r3, #1073741824
 3158 1860 1E0000EA 		b	.L266
 3159              	.L252:
 3160              		.loc 1 227 0
 3161 1864 FEFFFFEB 		bl	MMA_get_y
 3162 1868 F8209FE5 		ldr	r2, .L267+80
 3163 186c 020050E1 		cmp	r0, r2
 3164 1870 1B0000CA 		bgt	.L256
 3165 1874 E8309FE5 		ldr	r3, .L267+76
 3166 1878 003093E5 		ldr	r3, [r3, #0]
 3167 187c 020053E1 		cmp	r3, r2
 3168 1880 170000CA 		bgt	.L256
 3169              		.loc 1 228 0
 3170 1884 D4309FE5 		ldr	r3, .L267+72
 3171 1888 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3172 188c 000053E3 		cmp	r3, #0
 3173 1890 0200000A 		beq	.L257
 3174 1894 000094E5 		ldr	r0, [r4, #0]
 3175 1898 FEFFFFEB 		bl	quickClear
 3176 189c 020000EA 		b	.L258
 3177              	.L257:
 3178              		.loc 1 229 0
 3179 18a0 003094E5 		ldr	r3, [r4, #0]
 3180 18a4 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3181 18a8 FEFFFFEB 		bl	LCDClear
 3182              	.L258:
 3183              		.loc 1 234 0
 3184 18ac AC309FE5 		ldr	r3, .L267+72
 3185 18b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3186              		.loc 1 230 0
 3187 18b4 68209FE5 		ldr	r2, .L267+12
 3188              		.loc 1 234 0
 3189 18b8 000053E3 		cmp	r3, #0
 3190              		.loc 1 231 0
 3191 18bc 0030A0E3 		mov	r3, #0
 3192 18c0 0230C2E5 		strb	r3, [r2, #2]
 3193              		.loc 1 232 0
 3194 18c4 013283E2 		add	r3, r3, #268435456
 3195 18c8 043087E5 		str	r3, [r7, #4]
 3196              		.loc 1 233 0
 3197 18cc 033283E2 		add	r3, r3, #805306368
 3198 18d0 043087E5 		str	r3, [r7, #4]
 3199              		.loc 1 230 0
 3200 18d4 002084E5 		str	r2, [r4, #0]
 3201              		.loc 1 234 0
 3202 18d8 0100000A 		beq	.L256
 3203 18dc 0E3283E2 		add	r3, r3, #-536870912
 3204              	.L266:
 3205 18e0 0C3087E5 		str	r3, [r7, #12]
 3206              	.L256:
 3207              		.loc 1 236 0
 3208 18e4 000094E5 		ldr	r0, [r4, #0]
 3209 18e8 FEFFFFEB 		bl	printMenu
 3210              		.loc 1 237 0
 3211 18ec 0020E0E3 		mvn	r2, #0
 3212 18f0 EF3F12E5 		ldr	r3, [r2, #-4079]
 3213 18f4 103083E3 		orr	r3, r3, #16
 3214 18f8 EF3F02E5 		str	r3, [r2, #-4079]
 3215              	.L248:
 3216              		.loc 1 240 0
 3217 18fc 0030E0E3 		mvn	r3, #0
 3218 1900 EF2F13E5 		ldr	r2, [r3, #-4079]
 3219 1904 102082E3 		orr	r2, r2, #16
 3220 1908 EF2F03E5 		str	r2, [r3, #-4079]
 3221              		.loc 1 239 0
 3222 190c 013083E2 		add	r3, r3, #1
 3223 1910 0030C8E5 		strb	r3, [r8, #0]
 3224 1914 2CFFFFEA 		b	.L259
 3225              	.L268:
 3226              		.align	2
 3227              	.L267:
 3228 1918 00000000 		.word	radio_channel
 3229 191c 00C002E0 		.word	-536690688
 3230 1920 04000000 		.word	NUMBEROFFILES
 3231 1924 74000000 		.word	file_manager
 3232 1928 00000000 		.word	white
 3233 192c 00000000 		.word	black
 3234 1930 00000000 		.word	welcome
 3235 1934 78020000 		.word	settings_menu
 3236 1938 7C040000 		.word	current_display
 3237 193c 2C000000 		.word	.LC5
 3238 1940 008002E0 		.word	-536707072
 3239 1944 08000000 		.word	button_pressed
 3240 1948 C0C62D00 		.word	3000000
 3241 194c 00000000 		.word	USB
 3242 1950 80969800 		.word	10000000
 3243 1954 09000000 		.word	update_screen
 3244 1958 02000000 		.word	song_is_over
 3245 195c 14000000 		.word	current_song
 3246 1960 01000000 		.word	file_is_open
 3247 1964 0C000000 		.word	prev_position
 3248 1968 BB020000 		.word	699
 3249              	.LFE2:
 3251              		.global	volume_setting
 3252              		.data
 3253              		.align	2
 3256              	volume_setting:
 3257 0000 10000000 		.word	16
 3258              		.global	radio_channel
 3259              		.align	2
 3262              	radio_channel:
 3263 0004 E8030000 		.word	1000
 3264              		.global	radio_enable
 3265              		.bss
 3268              	radio_enable:
 3269 0000 00       		.space	1
 3270              		.global	welcome
 3271              		.section	.rodata
 3274              	welcome:
 3275 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 3275      204C6973 
 3275      743A0A0D 
 3275      00
 3276 000d 00000000 		.space	9
 3276      00000000 
 3276      00
 3277              		.global	NotFound
 3280              	NotFound:
 3281 0016 46696C65 		.ascii	"File Not Found!"
 3281      204E6F74 
 3281      20466F75 
 3281      6E6421
 3282              		.global	USB
 3285              	USB:
 3286 0025 55534220 		.ascii	"USB Connected!"
 3286      436F6E6E 
 3286      65637465 
 3286      6421
 3287              		.global	newline
 3290              	newline:
 3291 0033 0A00     		.ascii	"\012\000"
 3292              		.global	volume
 3295              	volume:
 3296 0035 566F6C75 		.ascii	"Volume\000"
 3296      6D6500
 3297              		.global	contrast
 3300              	contrast:
 3301 003c 436F6E74 		.ascii	"Contrast\000"
 3301      72617374 
 3301      00
 3302              		.global	radio_power
 3305              	radio_power:
 3306 0045 52616469 		.ascii	"Radio Power"
 3306      6F20506F 
 3306      776572
 3307              		.global	radio_channel_menu
 3310              	radio_channel_menu:
 3311 0050 52616469 		.ascii	"Radio Channel"
 3311      6F204368 
 3311      616E6E65 
 3311      6C
 3312              		.global	settings
 3315              	settings:
 3316 005d 53657474 		.ascii	"Settings:\000"
 3316      696E6773 
 3316      3A00
 3317              		.bss
 3318              	file_is_open:
 3319 0001 00       		.space	1
 3320              	song_is_over:
 3321 0002 00       		.space	1
 3322 0003 00       		.align	2
 3323              	NUMBEROFFILES:
 3324 0004 00000000 		.space	4
 3325              	button_pressed:
 3326 0008 00       		.space	1
 3327              	update_screen:
 3328 0009 00       		.space	1
 3329 000a 0000     		.align	2
 3330              	prev_position:
 3331 000c 00000000 		.space	4
 3332              		.align	2
 3333              	cur_position:
 3334 0010 00000000 		.space	4
 3335              		.align	2
 3336              	current_song:
 3337 0014 00000000 		.space	96
 3337      00000000 
 3337      00000000 
 3337      00000000 
 3337      00000000 
 3338              		.align	2
 3339              	file_manager:
 3340 0074 00000000 		.space	516
 3340      00000000 
 3340      00000000 
 3340      00000000 
 3340      00000000 
 3341              		.align	2
 3342              	settings_menu:
 3343 0278 00000000 		.space	516
 3343      00000000 
 3343      00000000 
 3343      00000000 
 3343      00000000 
 3344              		.align	2
 3345              	current_display:
 3346 047c 00000000 		.space	4
 3916              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3323   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3295   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3305   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3310   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3315   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:363    .text:00000240 selectSD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:380    .text:00000254 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:386    .text:00000258 selectLCD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:394    .text:00000258 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:404    .text:00000270 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:410    .text:00000274 selectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:418    .text:00000274 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:427    .text:00000288 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:433    .text:0000028c deselectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:441    .text:0000028c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:450    .text:000002a0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:456    .text:000002a4 splashScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:462    .text:000002a4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:478    .text:000002c4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:488    .text:000002c8 lowerVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:495    .text:000002c8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:563    .text:0000036c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3256   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3345   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:572    .text:0000037c raiseVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:579    .text:0000037c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:644    .text:0000041c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:652    .text:00000428 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:662    .text:00000428 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:747    .text:000004e8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3290   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:755    .text:000004f4 printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:765    .text:000004f4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:848    .text:000005bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:854    .text:000005c0 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:864    .text:000005c0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:950    .text:00000698 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:956    .text:0000069c handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:963    .text:0000069c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1020   .text:00000714 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3339   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1026   .text:00000718 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1033   .text:00000718 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1088   .text:00000788 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1094   .text:0000078c sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1100   .text:0000078c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1145   .text:000007f0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3336   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3320   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1154   .text:00000800 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1160   .text:00000800 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1198   .text:00000860 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1204   .text:00000868 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1210   .text:00000868 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1228   .text:00000890 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1234   .text:00000894 initializeMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1240   .text:00000894 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1265   .text:000008b8 disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1346   .text:0000095c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3268   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1360   .text:00000970 enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1366   .text:00000970 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1442   .text:00000a18 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1452   .text:00000a2c initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1462   .text:00000a2c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1547   .text:00000a9c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1555   .text:00000aa8 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1562   .text:00000aa8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1592   .text:00000adc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1598   .text:00000ae0 stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1605   .text:00000ae0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1659   .text:00000b68 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3318   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1667   .text:00000b74 loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1674   .text:00000b74 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1788   .text:00000c48 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1794   .text:00000c4c handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:1800   .text:00000c4c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2312   .text:000010e0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3280   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3342   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3325   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3262   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2345   .text:00001138 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2351   .text:00001138 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2534   .text:000012f4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2550   .text:00001324 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2559   .text:00001324 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2637   .text:000013d4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3330   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3333   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3327   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2654   .text:000013ec main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:2660   .text:000013ec $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3228   .text:00001918 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3274   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3285   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3257   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3300   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccvzOj1f.s:3271   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
LCDInit
LCDClear
LCDPrintLogo
vs1002Config
vs1002SetVolume
vs1002Finish
LCDSetRowColor
LCDPrintString
vs1002SendMusic
fat16_read_file
vs1002SCIWrite
vs1002Reset
vs1002Init
ns73Config
ns73Send
ns73Init
ns73SetChannel
fat16_close_file
root_file_exists
root_open
fat16_file_size
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
MMA_get_y
__divsi3
__modsi3
rootDirectory_files_stream
rootDirectory_files
main_msc
