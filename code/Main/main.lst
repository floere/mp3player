   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting=16, radio_channel=973;
  78:main.c        **** char radio_enable=OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars=0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        ****   //Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   
 106:main.c        ****   //Initialize the MP3 player with double clock speed and lower volume
 107:main.c        ****   vs1002Config();			//Configure MP3 I/O
 108:main.c        ****   vs1002Reset();			//Reset MP3 Player
 109:main.c        ****   vs1002Init();			//Double the clock speed and set to "New" mode
 110:main.c        ****   for(char i=0; i<5; i++)vs1002SetVolume(DECREASE);		//Lower the Volume!!
 111:main.c        ****   vs1002Finish();			//Restore the SPI I/O lines
 112:main.c        ****   
 113:main.c        ****   //Show the splash-screen (Sparkfun Logo)
 114:main.c        ****   LCDInit();				//Initialize the LCD
 115:main.c        ****   LCDClear(white);		//Clear the screen with white
 116:main.c        ****   LCDPrintLogo();			//Print the Sparkfun Logo
 117:main.c        ****   
 118:main.c        ****   // Initialize the FM Transmitter to 97.3
 119:main.c        ****   initializeFMTransmitter(973);
 120:main.c        **** 
 121:main.c        ****   // Find Out how many files are on the SD card
 122:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the
 123:main.c        ****   do{
 124:main.c        ****   	numberOfChars++;
 125:main.c        ****   }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filena
 126:main.c        ****   char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD c
 127:main.c        ****   NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 128:main.c        ****   FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 129:main.c        ****   
 130:main.c        ****   //Get all of the filenames into a Global Array
 131:main.c        ****   int chartracker=0;	
 132:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 133:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 134:main.c        ****   		if(chartracker <= numberOfChars){
 135:main.c        ****   			if(tempNames[chartracker]==','){
 136:main.c        ****   				Files[j].file_name[i] = '\0';
 137:main.c        ****   				i=MAXFILENAMELEN+1;
 138:main.c        ****   			}
 139:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 140:main.c        ****   			chartracker++;
 141:main.c        ****   		}
 142:main.c        ****   		else Files[j].file_name[i] ='\0';
 143:main.c        ****   	}	
 144:main.c        ****   }
 145:main.c        **** 	
 146:main.c        **** 	
 147:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 148:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 149:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 150:main.c        **** 	
 151:main.c        **** 	file_manager.orientation =ORIENTUP;
 152:main.c        **** 	file_manager.text_color=white;
 153:main.c        **** 	file_manager.back_color=black;
 154:main.c        **** 	
 155:main.c        **** 	file_manager.current_page=0;
 156:main.c        **** 	file_manager.current_row=1;
 157:main.c        **** 	file_manager.current_index=0;	
 158:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 159:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++)file_manager.title[i]=welcome[i];
 160:main.c        **** 	
 161:main.c        **** 	//Generate the settings menu and fill in default settings values
 162:main.c        **** 	fillSettings(&settings_menu);
 163:main.c        **** 	
 164:main.c        **** 	//Setup the menu
 165:main.c        **** 	current_display = &file_manager;
 166:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 167:main.c        **** 	LCDClear(current_display->back_color);
 168:main.c        **** 	printMenu(current_display);
 169:main.c        **** 	
 170:main.c        **** 	// TODO Floere remove
 171:main.c        **** 	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 172:main.c        **** 	
 173:main.c        **** 	while(1){
 174:main.c        **** 	  // USB connected!
 175:main.c        **** 		if(IOPIN0 & (1<<23))
 176:main.c        **** 		{
 177:main.c        **** 			LCDClear(white);
 178:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 179:main.c        ****       delay_ms(1000);
 180:main.c        **** 			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
 181:main.c        **** 			main_msc();
 182:main.c        **** 			reset();
 183:main.c        **** 		}
 184:main.c        **** 	
 185:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 186:main.c        **** 		//while(!button_pressed && !update_screen){
 187:main.c        **** 		if(!button_pressed && !update_screen){
 188:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 189:main.c        **** 			if(song_is_over){
 190:main.c        **** 				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
 191:main.c        **** 				closeSong(&current_song);	//Close the current song
 192:main.c        **** 				file_is_open=0;				//change master flag
 193:main.c        **** 				ledBlueOff();
 194:main.c        **** 				//Get the next song on the page by changing rows
 195:main.c        **** 				if(file_manager.current_row < NUMROWS){
 196:main.c        **** 					file_manager.current_row++;
 197:main.c        **** 					file_manager.current_index++;
 198:main.c        **** 				}
 199:main.c        **** 				//Go to the next page of songs if necessary
 200:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 201:main.c        **** 					file_manager.current_row=1;
 202:main.c        **** 					file_manager.current_index=0;
 203:main.c        **** 					file_manager.current_page++;
 204:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 205:main.c        **** 				}
 206:main.c        **** 				//If there is another song in the list, get it and play it!
 207:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 208:main.c        **** 					LCDClear(file_manager.back_color);
 209:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 210:main.c        **** 					file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 211:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 212:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 213:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 214:main.c        **** 					ledBlueOn();
 215:main.c        **** 					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
 216:main.c        **** 				}	
 217:main.c        **** 			}
 218:main.c        **** 		}
 219:main.c        **** 
 220:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 221:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 222:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 223:main.c        **** 		
 224:main.c        **** 		else if(update_screen){
 225:main.c        **** 			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
 226:main.c        **** 			delay_ms(300);
 227:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 228:main.c        **** 				if(file_is_open)quickClear(current_display);
 229:main.c        **** 				else LCDClear(current_display->back_color);
 230:main.c        **** 				current_display = &settings_menu;
 231:main.c        **** 				current_display->orientation=ORIENTLEFT;
 232:main.c        **** 				ledBlueOff();
 233:main.c        **** 				if(file_is_open)ledGrnOn();
 234:main.c        **** 				else ledRedOn();
 235:main.c        **** 			}
 236:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 237:main.c        **** 				if(file_is_open)quickClear(current_display);
 238:main.c        **** 				else LCDClear(current_display->back_color);
 239:main.c        **** 				current_display = &file_manager;
 240:main.c        **** 				current_display->orientation=ORIENTUP;
 241:main.c        **** 				ledGrnOff();
 242:main.c        **** 				ledRedOff();
 243:main.c        **** 				if(file_is_open)ledBlueOn();
 244:main.c        **** 			}
 245:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 246:main.c        **** 			VICIntEnable |= 0x10;						//Re-enable interrupts
 247:main.c        **** 		}
 248:main.c        **** 		button_pressed=NO_BUT;
 249:main.c        **** 		VICIntEnable |= 0x10;
 250:main.c        **** 	}
 251:main.c        ****     return 0;
 252:main.c        **** }
 253:main.c        **** 
 254:main.c        **** 
 255:main.c        **** // Usage: delay_ms(1000);
 256:main.c        **** // Inputs: int count: Number of milliseconds to delay
 257:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 258:main.c        **** void delay_ms(int count)
 259:main.c        **** {
  16              		.loc 1 259 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 260:main.c        ****     int i;
 261:main.c        ****     count *= 10000;
  22              		.loc 1 261 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 262:main.c        ****     for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 262 0
  31              	@ 262 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 263:main.c        **** }
  38              		.loc 1 263 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 264:main.c        **** 
 265:main.c        **** // Usage: bootUp();
 266:main.c        **** // Inputs: None
 267:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 268:main.c        **** void bootUp(void)
 269:main.c        **** {
 270:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 271:main.c        ****     delay_ms(10); //Delay for power to stablize
 272:main.c        **** 
 273:main.c        ****     //Bring up SD and FAT
 274:main.c        ****     if(!sd_raw_init())
 275:main.c        ****     {
 276:main.c        ****         rprintf("SD Init Error\n");
 277:main.c        ****     }
 278:main.c        ****     if(openroot())
 279:main.c        ****     {
 280:main.c        ****         rprintf("SD OpenRoot Error\n");
 281:main.c        ****     }
 282:main.c        ****      
 283:main.c        ****   //Initialize I/O Ports and Peripherals
 284:main.c        ****   //Setup the MP3 I/O Lines
 285:main.c        ****   IODIR0 |= MP3_XCS;
 286:main.c        ****   IODIR0 &= ~MP3_DREQ;
 287:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 288:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 289:main.c        ****   
 290:main.c        ****   //Setupt the FM Trans. Lines
 291:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 292:main.c        ****   IODIR1 |= FM_CS;
 293:main.c        ****   
 294:main.c        ****   //Setup the SD Card I/O Lines
 295:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 296:main.c        ****   
 297:main.c        ****   //Setup the Accelerometer I/O Lines
 298:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 299:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 300:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 301:main.c        ****   
 302:main.c        ****   //Setup the LCD I/O Lines
 303:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 304:main.c        ****   
 305:main.c        ****   //Setup the LED Lines										
 306:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
 307:main.c        ****   ledBlueOff();
 308:main.c        ****   ledRedOff();
 309:main.c        ****   ledGrnOff();
 310:main.c        ****   
 311:main.c        ****   //Setup the Buttons
 312:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 313:main.c        ****   
 314:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 315:main.c        ****   
 316:main.c        ****     //Setupt the Interrupts
 317:main.c        ****   VPBDIV=1;										// Set PCLK equal to the System Clock	
 318:main.c        ****   VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 319:main.c        ****     VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Ti
 320:main.c        ****     VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
 321:main.c        ****     VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
 322:main.c        ****     VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
 323:main.c        ****     VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
 324:main.c        ****   
 325:main.c        ****   //Configure Timer0
 326:main.c        ****   T0PR = 300;										//Divide Clock by 300 for 40kHz PS
 327:main.c        ****   T0TCR |=0X01;									//Enable the clock
 328:main.c        ****   T0CTCR=0;										  //Timer Mode
 329:main.c        ****   T0MCR=0x0003;									//Interrupt and Reset Timer on Match
 330:main.c        ****   T0MR0=1000;										//Interrupt on 40Hz
 331:main.c        ****   
 332:main.c        ****   //Configure Timer1
 333:main.c        ****   T1PR = 200;										//Divide Clock by 200 for ??kHz PS
 334:main.c        ****   T1TCR |=0X01;									//Enable the clock
 335:main.c        ****   T1CTCR=0;									  	//Timer Mode
 336:main.c        ****   T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
 337:main.c        ****   
 338:main.c        ****   //Setup the SPI Port
 339:main.c        ****   S0SPCCR = 64;                 // SCK = 1 MHz, counter > 8 and even
 340:main.c        ****   S0SPCR  = 0x20;               // Master, no interrupt enable, 8 bits	
 341:main.c        **** }
 342:main.c        **** 
 343:main.c        **** //  Usage: None (Automatically Called by FW)
 344:main.c        **** //  Inputs: None
 345:main.c        **** //  This function is a global interrupt called by a match on the Timer 0 match.
 346:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 347:main.c        **** //  WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 play
 348:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 349:main.c        **** //
 350:main.c        **** static void timer1ISR(void) {
 351:main.c        ****   sendMP3Data();
 352:main.c        ****   T1IR = 0xFF;      // Clear the timer 0 interrupt
 353:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 354:main.c        **** }
 355:main.c        **** 
 356:main.c        **** //Usage: None (Automatically Called by FW)
 357:main.c        **** //Inputs: None
 358:main.c        **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 359:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 360:main.c        **** // and setting the appropriate global flag if either has occured.
 361:main.c        **** static void timer0ISR(void)
 362:main.c        **** {
 363:main.c        **** 	button_pressed=getButton();			//Find out if a button has been pressed, and which one
 364:main.c        **** 	cur_position=MMA_get_y();			//Get the current position of the screen
 365:main.c        **** 	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=
 366:main.c        **** 	else update_screen=0;				//Determine if the accelerometer has been rotated
 367:main.c        **** 	prev_position=cur_position;			//Save the position value for later reference
 368:main.c        **** 	T0IR = 0xFF;						//Clear the timer interrupt
 369:main.c        **** 	VICVectAddr =0;						//Update the VIC priorities
 370:main.c        **** }
 371:main.c        **** 
 372:main.c        **** //Usage: button_value=getButton();
 373:main.c        **** //Inputs:  None
 374:main.c        **** //Outputs: None
 375:main.c        **** //Function returns the value of the button that is currently being pressed.
 376:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 377:main.c        **** char getButton(void){
  51              		.loc 1 377 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 378:main.c        **** 	if(!(IOPIN1 & SW_UP)) return UP_BUT;
  56              		.loc 1 378 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 379:main.c        **** 	else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
  62              		.loc 1 379 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 380:main.c        **** 	else if(!(IOPIN1 & SW_MID)) return MID_BUT;
  67              		.loc 1 380 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 381:main.c        **** 	return NO_BUT;
 382:main.c        **** }
  72              		.loc 1 382 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 383:main.c        **** 
 384:main.c        **** 
 385:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 385 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 386:main.c        **** 	if(files->current_page < files->total_pages){
  93              		.loc 1 386 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 385 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 386 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB37:
 103              	.LBB38:
 387:main.c        **** 		for(int i =0; i<NUMROWS; i++){
 388:main.c        **** 			for(int j=0; j<MAXFILENAMELEN; j++){
 389:main.c        **** 				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 389 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE38:
 107              	.LBE37:
 108              		.loc 1 386 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB40:
 390:main.c        **** 			}
 391:main.c        **** 		}
 392:main.c        **** 	}
 393:main.c        **** 	else{
 394:main.c        **** 		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 394 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB42:
 395:main.c        **** 			for(int j=0; j<MAXFILENAMELEN; j++){
 396:main.c        **** 				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 396 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE42:
 125              	.LBE40:
 126              	.LBB43:
 127              	.LBB39:
 128              		.loc 1 389 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 388 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 389 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 388 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE39:
 141              		.loc 1 387 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE43:
 154              	.LBB44:
 155              	.LBB41:
 156              		.loc 1 396 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 395 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 396 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 395 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE41:
 169              		.loc 1 394 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE44:
 181              	.LBB45:
 397:main.c        **** 			}
 398:main.c        **** 		}
 399:main.c        **** 		for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0]=
 182              		.loc 1 399 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE45:
 188              	.LBB46:
 189              		.loc 1 394 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE46:
 198              	.LBB47:
 199              		.loc 1 399 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE47:
 400:main.c        **** 	}
 401:main.c        **** }
 209              		.loc 1 401 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 402:main.c        **** 
 403:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 404:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 405:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 406:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 407:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 408:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 409:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 410:main.c        **** 	//Get the selected songs file name
 411:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 412:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 413:main.c        **** 	}
 414:main.c        **** 	//Get the selected songs display name
 415:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 416:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 417:main.c        **** 			song->name[i]='\0';
 418:main.c        **** 			i=MAXDISPLEN;
 419:main.c        **** 		}	
 420:main.c        **** 		else song->name[i]=song->file_name[i];
 421:main.c        **** 	}
 422:main.c        **** 	
 423:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 424:main.c        **** 	//Check to see if the selected song is valid
 425:main.c        **** 	if(!root_file_exists(song->file_name)){
 426:main.c        **** 		PINSEL0 &= 0xFFFFC00F;
 427:main.c        **** 		return 0;
 428:main.c        **** 	}	
 429:main.c        **** 	//Open the selected song
 430:main.c        **** 	else{
 431:main.c        **** 		song->handle=root_open(song->file_name);
 432:main.c        **** 		song->size=fat16_file_size(song->handle);
 433:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 434:main.c        **** 	}
 435:main.c        **** 	
 436:main.c        **** 	
 437:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 438:main.c        **** 	return 1;
 439:main.c        **** }
 440:main.c        **** 
 441:main.c        **** //Usage: CloseSong(&current_song);
 442:main.c        **** //Inputs: SongStruct *song: Pointer to a song structure to be closed
 443:main.c        **** //Function closes a song that is currently open.
 444:main.c        **** void closeSong(SongStruct *song){
 445:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 446:main.c        **** 	fat16_close_file(song->handle);
 447:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 448:main.c        **** }
 449:main.c        **** 
 450:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 451:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 452:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 453:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 454:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 455:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 456:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 457:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 458:main.c        **** 	if(direction == PREVIOUS){
 459:main.c        **** 		display->current_row--;
 460:main.c        **** 		display->current_index--;
 461:main.c        **** 	}
 462:main.c        **** 	else{
 463:main.c        **** 		display->current_row++;
 464:main.c        **** 		display->current_index++;		
 465:main.c        **** 	}
 466:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 467:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 468:main.c        **** }
 469:main.c        **** 
 470:main.c        **** //Usage: printMenu(&settings_menu);
 471:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 472:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 473:main.c        **** void printMenu(DisplayStruct *display){
 474:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 475:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 476:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 477:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 478:main.c        **** 	}
 479:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 480:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 481:main.c        **** }
 482:main.c        **** 
 483:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 484:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 485:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 486:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 487:main.c        **** //also loads the default display values along with the default settings values. 
 488:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 488 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB48:
 489:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 490:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 490 0
 233 014c A4909FE5 		ldr	r9, .L36
 491:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 491 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 492:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 492 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 493:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 493 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE48:
 241              		.loc 1 488 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB49:
 249              		.loc 1 490 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 491 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 492 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 493 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 489 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 490 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 491 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 492 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 493 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 489 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE49:
 275              	.LBB50:
 494:main.c        **** 	}
 495:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 496:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 496 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 495 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 496 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 495 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE50:
 497:main.c        **** 	}
 498:main.c        **** 	menu->text_color=white;
 289              		.loc 1 498 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 499:main.c        **** 	menu->back_color=black;
 294              		.loc 1 499 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 500:main.c        **** 	menu->current_row=1;
 297              		.loc 1 500 0
 298 01d0 0130A0E3 		mov	r3, #1
 501:main.c        **** 	menu->current_column=0;
 502:main.c        **** 	menu->current_index=0;
 503:main.c        **** 	menu->orientation = ORIENTLEFT;
 504:main.c        **** 	menu->current_page=0;
 505:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 505 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 499 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 503 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 500 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 501 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 502 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 504 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 506:main.c        **** }
 313              		.loc 1 506 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 507:main.c        **** 
 508:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 509:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 510:main.c        **** //			FileStruct *Files: List of files on the SD card
 511:main.c        **** //Outputs: None
 512:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 513:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 514:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 515:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 516:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 517:main.c        **** 	}
 518:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 519:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 520:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 521:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 522:main.c        **** 		//if(file_is_open)quickClear(display);
 523:main.c        **** 		//else LCDClear(display->back_color);
 524:main.c        **** 		quickClear(display);
 525:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 526:main.c        **** 		display->current_index=14;					//
 527:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 528:main.c        **** 		printMenu(display);							//	display previous page
 529:main.c        **** 	}
 530:main.c        **** }
 531:main.c        **** 
 532:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 533:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 534:main.c        **** //			FileStruct *Files: List of files on the SD card
 535:main.c        **** //Outputs: None
 536:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 537:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 538:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 539:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 540:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 541:main.c        **** 	}
 542:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 543:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 544:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 545:main.c        **** 		display->current_page+=1;		
 546:main.c        **** 		//if(file_is_open)quickClear(display);
 547:main.c        **** 		//else LCDClear(display->back_color);
 548:main.c        **** 		quickClear(display);
 549:main.c        **** 		display->current_row=1;
 550:main.c        **** 		display->current_index=0;
 551:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 552:main.c        **** 		printMenu(display);				
 553:main.c        **** 	}
 554:main.c        **** }
 555:main.c        **** 
 556:main.c        **** //Usage: handleMiddleButton();
 557:main.c        **** //Inputs: None
 558:main.c        **** //Outputs: None
 559:main.c        **** //Description: This function is called when the middle button is pressed.
 560:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 561:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 562:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 563:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 564:main.c        **** void handleMiddleButton(void){
 565:main.c        **** 	VICIntEnClr = 0x10;
 566:main.c        **** 	delay_ms(250);
 567:main.c        **** 	
 568:main.c        **** 	//If the File Menu is being displayed, middle button acts like play/stop
 569:main.c        **** 	if(current_display == &file_manager){
 570:main.c        **** 		if(!file_is_open){				//If a file isn't already playing then this acts like a play button
 571:main.c        **** 			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
 572:main.c        **** 			if(!file_is_open){			//Make sure this is a valid file
 573:main.c        **** 				LCDClear(white);
 574:main.c        **** 				LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 575:main.c        **** 				delay_ms(1000);
 576:main.c        **** 				LCDClear(black);
 577:main.c        **** 				printMenu(&file_manager);
 578:main.c        **** 			}	
 579:main.c        **** 			else{
 580:main.c        **** 				vs1002Config();							//Enable the MP3 Comm. Lines
 581:main.c        **** 				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
 582:main.c        **** 				vs1002Finish();							//Disable the MP3 Comm. Lines
 583:main.c        **** 				ledBlueOn();
 584:main.c        **** 				//Send first song data
 585:main.c        **** 				vs1002Config();										//Enable MP3 Comm. Lines
 586:main.c        **** 				while((IOPIN0 & MP3_DREQ) != 0){
 587:main.c        **** 					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
 588:main.c        **** 					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;
 589:main.c        **** 					else song_is_over=0;									//if there's no more data available, set the flag, else leave it 
 590:main.c        **** 				}
 591:main.c        **** 				vs1002Finish();
 592:main.c        **** 				PINSEL1 |= 0x00000C00;						
 593:main.c        **** 				VICIntEnable |= 0x20;		//Enable Timer 1 Interrupts(This is the "Song Sending" interrupt).
 594:main.c        **** 				IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);		//Assign LCD pins as Outputs
 595:main.c        **** 			}
 596:main.c        **** 		}	
 597:main.c        **** 		else{							//If a file is already open then this acts like a stop button
 598:main.c        **** 			VICIntEnClr = 0x20;											//Disable Time 0 Interrupts(Stop the "Song Sending" interrupt)
 599:main.c        **** 			ledBlueOff();
 600:main.c        **** 			vs1002Config();												//Enable the MP3 Comm Lines
 601:main.c        **** 			vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);						//Tell the MP3 Player to jump out of WAV decoding
 602:main.c        **** 			for(int i=0; i<150; i++)vs1002SCIWrite(SCI_MODE, 0x00);	//Send 150 zeroes to the player to clear
 603:main.c        **** 			vs1002Finish();												//Disable the MP3 Comm. Lines
 604:main.c        **** 			IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);			//Assign LCD pins as Outputs
 605:main.c        **** 			closeSong(&current_song);									//Close the current song
 606:main.c        **** 			file_is_open=0;												//Clear the global flag
 607:main.c        **** 			VICIntEnable = 0x10;
 608:main.c        **** 		}
 609:main.c        **** 	}
 610:main.c        **** 	
 611:main.c        **** 	//Else we are on the Settings menu, and we need to handle the settins options
 612:main.c        **** 	else{
 613:main.c        **** 		if(file_is_open)quickClear(current_display);
 614:main.c        **** 		else LCDClear(settings_menu.back_color);
 615:main.c        **** 		LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_display-
 616:main.c        **** 		VICIntEnable|=0x10;
 617:main.c        **** 		if(current_display->current_row==VOLUMEMENU){
 618:main.c        **** 			VICIntEnable |= 0x10;
 619:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 620:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 621:main.c        **** 			while(button_pressed < MID_BUT){
 622:main.c        **** 				VICIntEnClr = 0x10;				//Stop Interrupts to
 623:main.c        **** 				delay_ms(150);					//	debounce the switch					
 624:main.c        **** 				if(button_pressed==UP_BUT){
 625:main.c        **** 					if(volume_setting < 32){
 626:main.c        **** 						volume_setting+=1;
 627:main.c        **** 						vs1002Config();				//Enable the MP3 Comm. Lines
 628:main.c        **** 						vs1002SetVolume(INCREASE);	//Lower the volume
 629:main.c        **** 						vs1002Finish();				//Disable MP3 Comm. Lines
 630:main.c        **** 					}	
 631:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 632:main.c        **** 					LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orien
 633:main.c        **** 				}
 634:main.c        **** 				else if(button_pressed==DWN_BUT){
 635:main.c        **** 					if(volume_setting >= 0){
 636:main.c        **** 						volume_setting--;
 637:main.c        **** 						vs1002Config();			//Enable the MP3 Comm. Lines
 638:main.c        **** 						vs1002SetVolume(DECREASE);	//Lower the volume
 639:main.c        **** 						vs1002Finish();			//Disable MP3 Comm. Lines
 640:main.c        **** 					}
 641:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 642:main.c        **** 					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 643:main.c        **** 				}
 644:main.c        **** 				VICIntEnable |= 0x10;
 645:main.c        **** 			}
 646:main.c        **** 		}	
 647:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 648:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 649:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 650:main.c        **** 			button_pressed=NO_BUT;
 651:main.c        **** 			VICIntEnable |= 0x10;
 652:main.c        **** 			while(button_pressed < MID_BUT){
 653:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 654:main.c        **** 				delay_ms(100);		//	debounce the switch					
 655:main.c        **** 				if(button_pressed==UP_BUT){
 656:main.c        **** 					//Increase Radio Channel
 657:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 658:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 659:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 660:main.c        **** 				}
 661:main.c        **** 				else if(button_pressed==DWN_BUT){
 662:main.c        **** 					//Decrease Radio Channel
 663:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 664:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 665:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 666:main.c        **** 				}
 667:main.c        **** 				ns73SetChannel(radio_channel);
 668:main.c        **** 				VICIntEnable |= 0x10;
 669:main.c        **** 			}
 670:main.c        **** 			IOCLR1 |= FM_CS;				//Select the FM transmitter
 671:main.c        **** 			delay_ms(100);
 672:main.c        **** 			ns73Config();					//Configigure the FM Trans. I/O
 673:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 674:main.c        **** 			IOSET1 |= FM_CS;				//Unselect the FM transmitter
 675:main.c        **** 		}
 676:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 677:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 678:main.c        **** 			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orient
 679:main.c        **** 			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 680:main.c        **** 			button_pressed=NO_BUT;
 681:main.c        **** 			VICIntEnable |= 0x10;
 682:main.c        **** 			while(button_pressed < MID_BUT){
 683:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 684:main.c        **** 				delay_ms(100);		//	debounce the switch					
 685:main.c        **** 				if(button_pressed==UP_BUT){
 686:main.c        ****           enableRadio();
 687:main.c        **** 				}
 688:main.c        **** 				else if(button_pressed==DWN_BUT){
 689:main.c        ****           disableRadio();
 690:main.c        **** 				}
 691:main.c        **** 				VICIntEnable |= 0x10;
 692:main.c        **** 			}
 693:main.c        **** 		}
 694:main.c        **** 		if(file_is_open)quickClear(current_display);
 695:main.c        **** 		else LCDClear(current_display->back_color);
 696:main.c        **** 		printMenu(current_display);
 697:main.c        **** 	}
 698:main.c        **** 	VICIntEnable |= 0x10;
 699:main.c        **** }
 700:main.c        **** 
 701:main.c        **** //  Usage: quickClear(currentDisplay);
 702:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 703:main.c        **** //  Outputs: None
 704:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 705:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 706:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 707:main.c        **** //               good to use while an MP3 is playing.
 708:main.c        **** //
 709:main.c        **** void quickClear(DisplayStruct *display){
 710:main.c        ****   PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 711:main.c        ****   //If we're on the first page of the menu, we also need to clear the title.
 712:main.c        ****   if (display->current_page==0) {
 713:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 714:main.c        ****   }
 715:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 716:main.c        ****   for (int j=0; j<NUMROWS; j++) {
 717:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 718:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 719:main.c        ****   }
 720:main.c        **** }
 721:main.c        **** 
 722:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 723:main.c        **** //
 724:main.c        **** void reset(void) {
 332              		.loc 1 724 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 725:main.c        ****     WDMOD |= 3;
 337              		.loc 1 725 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 726:main.c        ****     WDFEED = 0xAA;
 342              		.loc 1 726 0
 343 0220 AA10A0E3 		mov	r1, #170
 727:main.c        ****     WDFEED = 0x55;
 344              		.loc 1 727 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 726 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 727 0
 349 022c 083082E5 		str	r3, [r2, #8]
 728:main.c        ****     WDFEED = 0xAA;
 729:main.c        ****     WDFEED = 0x00;
 350              		.loc 1 729 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 728 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 729 0
 355 0238 083082E5 		str	r3, [r2, #8]
 730:main.c        **** }
 356              		.loc 1 730 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	initializeFMTransmitter
 363              	initializeFMTransmitter:
 364              	.LFB22:
 731:main.c        **** 
 732:main.c        **** // Enables the radio.
 733:main.c        **** //
 734:main.c        **** void enableRadio(void) {
 735:main.c        ****   radio_enable = ON;
 736:main.c        ****   
 737:main.c        ****   // graphics
 738:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 739:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 740:main.c        ****   
 741:main.c        ****   // send data
 742:main.c        ****   IOCLR1 |= FM_CS;        //Select the FM transmitter
 743:main.c        ****   delay_ms(100);
 744:main.c        ****   ns73Config();           //Configure the FM Trans. I/O
 745:main.c        ****   ns73Send(R0, PE | AG);  //Power up the radio
 746:main.c        ****   IOSET1 |= FM_CS;        //Unselect the FM transmitter
 747:main.c        **** }
 748:main.c        **** 
 749:main.c        **** // Disables the radio.
 750:main.c        **** //
 751:main.c        **** void disableRadio(void) {
 752:main.c        ****   radio_enable=OFF;
 753:main.c        ****   
 754:main.c        ****   // graphics
 755:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 756:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 757:main.c        ****   
 758:main.c        ****   // send data
 759:main.c        ****   IOCLR1 |= FM_CS;      //Select the FM transmitter
 760:main.c        ****   delay_ms(100);
 761:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 762:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 763:main.c        ****   IOSET1 |= FM_CS;      //Unselect the FM transmitter
 764:main.c        **** }
 765:main.c        **** 
 766:main.c        **** // Sends a piece of mp3 data from the current song.
 767:main.c        **** //
 768:main.c        **** void sendMP3Data(void) {
 769:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 770:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 771:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 772:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over
 773:main.c        ****     else song_is_over = 0;                                // If there's no more data available, set
 774:main.c        ****   }
 775:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 776:main.c        **** }
 777:main.c        **** 
 778:main.c        **** // initializes the FM transmitter to a given frequency.
 779:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 780:main.c        **** //
 781:main.c        **** void initializeFMTransmitter(int frequency) {
 365              		.loc 1 781 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL22:
 782:main.c        ****   IOCLR1 |= FM_CS;      //Select SPI for FM Transmitter
 370              		.loc 1 782 0
 371 0240 68209FE5 		ldr	r2, .L46
 372 0244 1C3092E5 		ldr	r3, [r2, #28]
 373 0248 013283E3 		orr	r3, r3, #268435456
 374 024c 1C3082E5 		str	r3, [r2, #28]
 375              	.LBB51:
 376              	.LBB52:
 377              		.loc 1 262 0
 378 0250 5C209FE5 		ldr	r2, .L46+4
 379              	.LBE52:
 380              	.LBE51:
 381              		.loc 1 781 0
 382 0254 10402DE9 		stmfd	sp!, {r4, lr}
 383              	.LCFI2:
 384              		.loc 1 782 0
 385 0258 0030A0E3 		mov	r3, #0
 386              	.LVL23:
 387              		.loc 1 781 0
 388 025c 0040A0E1 		mov	r4, r0
 389              	.LVL24:
 390              	.L41:
 391              	.LBB54:
 392              	.LBB53:
 393              		.loc 1 262 0
 394              	@ 262 "main.c" 1
 395 0260 0000A0E1 		nop
 396              	@ 0 "" 2
 397 0264 013083E2 		add	r3, r3, #1
 398 0268 020053E1 		cmp	r3, r2
 399 026c FBFFFF1A 		bne	.L41
 400              	.LBE53:
 401              	.LBE54:
 783:main.c        ****   delay_ms(900);
 784:main.c        ****   
 785:main.c        ****   ns73Config();         //Configigure the FM Trans. I/O
 402              		.loc 1 785 0
 403 0270 FEFFFFEB 		bl	ns73Config
 404              	.LVL25:
 786:main.c        ****   ns73Init();           //Setup the Default Register Values
 405              		.loc 1 786 0
 406 0274 FEFFFFEB 		bl	ns73Init
 787:main.c        ****   ns73SetChannel(frequency);  //Transmit to 97.3 FM
 407              		.loc 1 787 0
 408 0278 0400A0E1 		mov	r0, r4
 409 027c FEFFFFEB 		bl	ns73SetChannel
 788:main.c        ****   
 789:main.c        ****   IOSET1 |= FM_CS;      //Remove FM Transmitter from SPI bus
 410              		.loc 1 789 0
 411 0280 28209FE5 		ldr	r2, .L46
 412 0284 143092E5 		ldr	r3, [r2, #20]
 413 0288 013283E3 		orr	r3, r3, #268435456
 414 028c 143082E5 		str	r3, [r2, #20]
 415              	.LBB55:
 416              	.LBB56:
 417              		.loc 1 262 0
 418 0290 20209FE5 		ldr	r2, .L46+8
 419              	.LBE56:
 420              	.LBE55:
 421              		.loc 1 789 0
 422 0294 0030A0E3 		mov	r3, #0
 423              	.LVL26:
 424              	.L42:
 425              	.LBB58:
 426              	.LBB57:
 427              		.loc 1 262 0
 428              	@ 262 "main.c" 1
 429 0298 0000A0E1 		nop
 430              	@ 0 "" 2
 431 029c 013083E2 		add	r3, r3, #1
 432 02a0 020053E1 		cmp	r3, r2
 433 02a4 FBFFFF1A 		bne	.L42
 434              	.LBE57:
 435              	.LBE58:
 790:main.c        ****   delay_ms(100);
 791:main.c        **** }...
 436              		.loc 1 791 0
 437 02a8 1040BDE8 		ldmfd	sp!, {r4, lr}
 438 02ac 1EFF2FE1 		bx	lr
 439              	.L47:
 440              		.align	2
 441              	.L46:
 442 02b0 008002E0 		.word	-536707072
 443 02b4 40548900 		.word	9000000
 444 02b8 40420F00 		.word	1000000
 445              	.LFE22:
 447              		.align	2
 448              		.global	sendMP3Data
 450              	sendMP3Data:
 451              	.LFB21:
 452              		.loc 1 768 0
 453              		@ Function supports interworking.
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456 02bc F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 457              	.LCFI3:
 458              		.loc 1 769 0
 459 02c0 FEFFFFEB 		bl	vs1002Config
 460              		.loc 1 770 0
 461 02c4 54809FE5 		ldr	r8, .L54
 462              		.loc 1 772 0
 463 02c8 54709FE5 		ldr	r7, .L54+4
 464 02cc 54409FE5 		ldr	r4, .L54+8
 465              		.loc 1 773 0
 466 02d0 0060A0E3 		mov	r6, #0
 467              		.loc 1 772 0
 468 02d4 0150A0E3 		mov	r5, #1
 469 02d8 080000EA 		b	.L53
 470              	.L51:
 471              		.loc 1 771 0
 472 02dc FEFFFFEB 		bl	vs1002SendMusic
 473              		.loc 1 772 0
 474 02e0 340097E5 		ldr	r0, [r7, #52]
 475 02e4 40109FE5 		ldr	r1, .L54+12
 476 02e8 2020A0E3 		mov	r2, #32
 477 02ec FEFFFFEB 		bl	fat16_read_file
 478 02f0 0008A0E1 		mov	r0, r0, asl #16
 479 02f4 000050E3 		cmp	r0, #0
 480 02f8 0050C4D5 		strleb	r5, [r4, #0]
 481              		.loc 1 773 0
 482 02fc 0060C4C5 		strgtb	r6, [r4, #0]
 483              	.L53:
 484              		.loc 1 770 0
 485 0300 003098E5 		ldr	r3, [r8, #0]
 486 0304 020613E3 		tst	r3, #2097152
 487              		.loc 1 771 0
 488 0308 1C009FE5 		ldr	r0, .L54+12
 489 030c 2010A0E3 		mov	r1, #32
 490              		.loc 1 770 0
 491 0310 F1FFFF1A 		bne	.L51
 492              		.loc 1 775 0
 493 0314 FEFFFFEB 		bl	vs1002Finish
 494              		.loc 1 776 0
 495 0318 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 496 031c 1EFF2FE1 		bx	lr
 497              	.L55:
 498              		.align	2
 499              	.L54:
 500 0320 008002E0 		.word	-536707072
 501 0324 14000000 		.word	current_song
 502 0328 01000000 		.word	song_is_over
 503 032c 51000000 		.word	current_song+61
 504              	.LFE21:
 506              		.align	2
 508              	timer1ISR:
 509              	.LFB5:
 510              		.loc 1 350 0
 511              		@ Function supports interworking.
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0330 04E02DE5 		str	lr, [sp, #-4]!
 515              	.LCFI4:
 516              		.loc 1 351 0
 517 0334 FEFFFFEB 		bl	sendMP3Data
 518              		.loc 1 352 0
 519 0338 18309FE5 		ldr	r3, .L58
 520 033c FF20A0E3 		mov	r2, #255
 521 0340 002083E5 		str	r2, [r3, #0]
 522              		.loc 1 353 0
 523 0344 0020A0E3 		mov	r2, #0
 524 0348 0030E0E3 		mvn	r3, #0
 525 034c CF2F03E5 		str	r2, [r3, #-4047]
 526              		.loc 1 354 0
 527 0350 04E09DE4 		ldr	lr, [sp], #4
 528 0354 1EFF2FE1 		bx	lr
 529              	.L59:
 530              		.align	2
 531              	.L58:
 532 0358 008000E0 		.word	-536838144
 533              	.LFE5:
 535              		.align	2
 536              		.global	quickClear
 538              	quickClear:
 539              	.LFB17:
 540              		.loc 1 709 0
 541              		@ Function supports interworking.
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL27:
 545              		.loc 1 710 0
 546 035c B8209FE5 		ldr	r2, .L65
 547 0360 003092E5 		ldr	r3, [r2, #0]
 548              		.loc 1 709 0
 549 0364 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 550              	.LCFI5:
 551              		.loc 1 710 0
 552 0368 FF3DC3E3 		bic	r3, r3, #16320
 553 036c 3030C3E3 		bic	r3, r3, #48
 554 0370 003082E5 		str	r3, [r2, #0]
 555              		.loc 1 712 0
 556 0374 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 557 0378 00005EE3 		cmp	lr, #0
 558              		.loc 1 709 0
 559 037c 08D04DE2 		sub	sp, sp, #8
 560              	.LCFI6:
 561              		.loc 1 709 0
 562 0380 0050A0E1 		mov	r5, r0
 563              		.loc 1 712 0
 564 0384 0700001A 		bne	.L61
 565              	.LVL28:
 566              		.loc 1 713 0
 567 0388 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 568 038c 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 569 0390 0E10A0E1 		mov	r1, lr
 570 0394 7B0F80E2 		add	r0, r0, #492
 571 0398 0E30A0E1 		mov	r3, lr
 572 039c 04C08DE5 		str	ip, [sp, #4]
 573 03a0 00E08DE5 		str	lr, [sp, #0]
 574 03a4 FEFFFFEB 		bl	LCDPrintString
 575              	.LVL29:
 576              	.L61:
 577              		.loc 1 715 0
 578 03a8 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 579 03ac 0010A0E3 		mov	r1, #0
 580 03b0 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 581 03b4 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 582 03b8 FEFFFFEB 		bl	LCDSetRowColor
 583 03bc 0040A0E3 		mov	r4, #0
 584              	.LVL30:
 585              	.LBB59:
 586              		.loc 1 718 0
 587 03c0 58709FE5 		ldr	r7, .L65+4
 588              		.loc 1 717 0
 589 03c4 0460A0E1 		mov	r6, r4
 590              	.L62:
 591 03c8 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 592 03cc 840285E0 		add	r0, r5, r4, asl #5
 593              	.LBE59:
 594              		.loc 1 715 0
 595 03d0 014084E2 		add	r4, r4, #1
 596              	.LVL31:
 597              	.LBB60:
 598              		.loc 1 717 0
 599 03d4 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 600 03d8 0C0080E2 		add	r0, r0, #12
 601 03dc 0610A0E1 		mov	r1, r6
 602 03e0 0430A0E1 		mov	r3, r4
 603 03e4 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 604 03e8 FEFFFFEB 		bl	LCDPrintString
 605              		.loc 1 718 0
 606 03ec 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 607 03f0 2C009FE5 		ldr	r0, .L65+8
 608 03f4 0610A0E1 		mov	r1, r6
 609 03f8 0430A0E1 		mov	r3, r4
 610 03fc 00608DE5 		str	r6, [sp, #0]
 611 0400 04608DE5 		str	r6, [sp, #4]
 612 0404 FEFFFFEB 		bl	LCDPrintString
 613              		.loc 1 716 0
 614 0408 0F0054E3 		cmp	r4, #15
 615              	.LVL32:
 616 040c EDFFFF1A 		bne	.L62
 617              	.LBE60:
 618              		.loc 1 720 0
 619 0410 08D08DE2 		add	sp, sp, #8
 620 0414 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 621 0418 1EFF2FE1 		bx	lr
 622              	.L66:
 623              		.align	2
 624              	.L65:
 625 041c 00C002E0 		.word	-536690688
 626 0420 00000000 		.word	black
 627 0424 00000000 		.word	newline
 628              	.LFE17:
 630              		.align	2
 631              		.global	printMenu
 633              	printMenu:
 634              	.LFB12:
 635              		.loc 1 473 0
 636              		@ Function supports interworking.
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              	.LVL33:
 640              		.loc 1 474 0
 641 0428 C0209FE5 		ldr	r2, .L72
 642 042c 003092E5 		ldr	r3, [r2, #0]
 643              		.loc 1 473 0
 644 0430 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 645              	.LCFI7:
 646              		.loc 1 474 0
 647 0434 FF3DC3E3 		bic	r3, r3, #16320
 648 0438 3030C3E3 		bic	r3, r3, #48
 649 043c 003082E5 		str	r3, [r2, #0]
 650              		.loc 1 475 0
 651 0440 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 652 0444 00005EE3 		cmp	lr, #0
 653              		.loc 1 473 0
 654 0448 08D04DE2 		sub	sp, sp, #8
 655              	.LCFI8:
 656              		.loc 1 473 0
 657 044c 0050A0E1 		mov	r5, r0
 658              		.loc 1 475 0
 659 0450 0700001A 		bne	.L68
 660              	.LVL34:
 661 0454 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 662 0458 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 663 045c 0E10A0E1 		mov	r1, lr
 664 0460 7B0F80E2 		add	r0, r0, #492
 665 0464 0E30A0E1 		mov	r3, lr
 666 0468 04C08DE5 		str	ip, [sp, #4]
 667 046c 00E08DE5 		str	lr, [sp, #0]
 668 0470 FEFFFFEB 		bl	LCDPrintString
 669              	.LVL35:
 670              	.L68:
 671 0474 0030A0E3 		mov	r3, #0
 672              	.LVL36:
 673              	.LBB61:
 674              		.loc 1 477 0
 675 0478 0360A0E1 		mov	r6, r3
 676              	.L69:
 677 047c 014083E2 		add	r4, r3, #1
 678 0480 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 679 0484 830285E0 		add	r0, r5, r3, asl #5
 680 0488 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 681 048c 0430A0E1 		mov	r3, r4
 682              	.LVL37:
 683 0490 0C0080E2 		add	r0, r0, #12
 684 0494 0610A0E1 		mov	r1, r6
 685 0498 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 686 049c FEFFFFEB 		bl	LCDPrintString
 687              		.loc 1 476 0
 688 04a0 0F0054E3 		cmp	r4, #15
 689              	.LVL38:
 690 04a4 0430A0E1 		mov	r3, r4
 691              	.LVL39:
 692 04a8 F3FFFF1A 		bne	.L69
 693              	.LBE61:
 694              		.loc 1 479 0
 695 04ac 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 696 04b0 0610A0E1 		mov	r1, r6
 697 04b4 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 698 04b8 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 699              	.LVL40:
 700 04bc FEFFFFEB 		bl	LCDSetRowColor
 701              		.loc 1 480 0
 702 04c0 080095E5 		ldr	r0, [r5, #8]
 703 04c4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 704 04c8 800285E0 		add	r0, r5, r0, asl #5
 705 04cc 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 706 04d0 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 707 04d4 0C0080E2 		add	r0, r0, #12
 708 04d8 0610A0E1 		mov	r1, r6
 709 04dc 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 710 04e0 FEFFFFEB 		bl	LCDPrintString
 711              		.loc 1 481 0
 712 04e4 08D08DE2 		add	sp, sp, #8
 713 04e8 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 714 04ec 1EFF2FE1 		bx	lr
 715              	.L73:
 716              		.align	2
 717              	.L72:
 718 04f0 00C002E0 		.word	-536690688
 719              	.LFE12:
 721              		.align	2
 722              		.global	highlightRow
 724              	highlightRow:
 725              	.LFB11:
 726              		.loc 1 454 0
 727              		@ Function supports interworking.
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              	.LVL41:
 731              		.loc 1 455 0
 732 04f4 D0209FE5 		ldr	r2, .L79
 733 04f8 003092E5 		ldr	r3, [r2, #0]
 734              		.loc 1 454 0
 735 04fc 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 736              	.LCFI9:
 737              		.loc 1 455 0
 738 0500 FF3DC3E3 		bic	r3, r3, #16320
 739 0504 3030C3E3 		bic	r3, r3, #48
 740 0508 003082E5 		str	r3, [r2, #0]
 741              		.loc 1 454 0
 742 050c 0060A0E1 		mov	r6, r0
 743 0510 08D04DE2 		sub	sp, sp, #8
 744              	.LCFI10:
 745              		.loc 1 456 0
 746 0514 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 747 0518 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 748              		.loc 1 454 0
 749 051c 0140A0E1 		mov	r4, r1
 750              		.loc 1 456 0
 751 0520 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 752              	.LVL42:
 753 0524 0010A0E3 		mov	r1, #0
 754              	.LVL43:
 755 0528 FEFFFFEB 		bl	LCDSetRowColor
 756              		.loc 1 457 0
 757 052c 080096E5 		ldr	r0, [r6, #8]
 758 0530 00C0A0E3 		mov	ip, #0
 759 0534 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 760 0538 800286E0 		add	r0, r6, r0, asl #5
 761 053c 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 762 0540 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 763 0544 0C10A0E1 		mov	r1, ip
 764 0548 0C0080E2 		add	r0, r0, #12
 765 054c 00C08DE5 		str	ip, [sp, #0]
 766              		.loc 1 454 0
 767 0550 FF4004E2 		and	r4, r4, #255
 768              	.LVL44:
 769              		.loc 1 457 0
 770 0554 04508DE5 		str	r5, [sp, #4]
 771 0558 FEFFFFEB 		bl	LCDPrintString
 772 055c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 773              		.loc 1 458 0
 774 0560 010054E3 		cmp	r4, #1
 775 0564 082096E5 		ldr	r2, [r6, #8]
 776              		.loc 1 459 0
 777 0568 01304302 		subeq	r3, r3, #1
 778              		.loc 1 463 0
 779 056c 01308312 		addne	r3, r3, #1
 780 0570 0030C6E5 		strb	r3, [r6, #0]
 781              		.loc 1 460 0
 782 0574 01204202 		subeq	r2, r2, #1
 783              		.loc 1 464 0
 784 0578 01208212 		addne	r2, r2, #1
 785 057c 082086E5 		str	r2, [r6, #8]
 786              		.loc 1 466 0
 787 0580 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 788 0584 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 789 0588 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 790 058c 0010A0E3 		mov	r1, #0
 791 0590 FEFFFFEB 		bl	LCDSetRowColor
 792              		.loc 1 467 0
 793 0594 080096E5 		ldr	r0, [r6, #8]
 794 0598 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 795              	.LVL45:
 796 059c 00C0A0E3 		mov	ip, #0
 797 05a0 800286E0 		add	r0, r6, r0, asl #5
 798 05a4 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 799 05a8 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 800 05ac 0C0080E2 		add	r0, r0, #12
 801 05b0 0C10A0E1 		mov	r1, ip
 802 05b4 04408DE5 		str	r4, [sp, #4]
 803 05b8 00C08DE5 		str	ip, [sp, #0]
 804 05bc FEFFFFEB 		bl	LCDPrintString
 805              		.loc 1 468 0
 806 05c0 08D08DE2 		add	sp, sp, #8
 807 05c4 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 808 05c8 1EFF2FE1 		bx	lr
 809              	.L80:
 810              		.align	2
 811              	.L79:
 812 05cc 00C002E0 		.word	-536690688
 813              	.LFE11:
 815              		.align	2
 816              		.global	handleDownButton
 818              	handleDownButton:
 819              	.LFB15:
 820              		.loc 1 538 0
 821              		@ Function supports interworking.
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              	.LVL46:
 825 05d0 30402DE9 		stmfd	sp!, {r4, r5, lr}
 826              	.LCFI11:
 827              		.loc 1 539 0
 828 05d4 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 829 05d8 0E0053E3 		cmp	r3, #14
 830              		.loc 1 538 0
 831 05dc 0040A0E1 		mov	r4, r0
 832 05e0 0150A0E1 		mov	r5, r1
 833              		.loc 1 539 0
 834 05e4 0200008A 		bhi	.L82
 835              	.LVL47:
 836              		.loc 1 540 0
 837 05e8 0010A0E3 		mov	r1, #0
 838              		.loc 1 554 0
 839 05ec 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 840              		.loc 1 540 0
 841 05f0 FEFFFFEA 		b	highlightRow
 842              	.LVL48:
 843              	.L82:
 844              		.loc 1 543 0
 845 05f4 0F0053E3 		cmp	r3, #15
 846 05f8 1000001A 		bne	.L84
 847 05fc 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 848 0600 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 849 0604 020053E1 		cmp	r3, r2
 850 0608 0C00009A 		bls	.L84
 851              	.LVL49:
 852              		.loc 1 545 0
 853 060c 013082E2 		add	r3, r2, #1
 854 0610 0630C0E5 		strb	r3, [r0, #6]
 855              		.loc 1 548 0
 856 0614 FEFFFFEB 		bl	quickClear
 857              	.LVL50:
 858              		.loc 1 549 0
 859 0618 0130A0E3 		mov	r3, #1
 860 061c 0030C4E5 		strb	r3, [r4, #0]
 861              		.loc 1 550 0
 862 0620 0030A0E3 		mov	r3, #0
 863 0624 083084E5 		str	r3, [r4, #8]
 864              		.loc 1 551 0
 865 0628 0510A0E1 		mov	r1, r5
 866 062c 14009FE5 		ldr	r0, .L85
 867 0630 FEFFFFEB 		bl	getNewFiles
 868              		.loc 1 552 0
 869 0634 0400A0E1 		mov	r0, r4
 870              		.loc 1 554 0
 871 0638 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 872              		.loc 1 552 0
 873 063c FEFFFFEA 		b	printMenu
 874              	.LVL51:
 875              	.L84:
 876              		.loc 1 554 0
 877 0640 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 878 0644 1EFF2FE1 		bx	lr
 879              	.L86:
 880              		.align	2
 881              	.L85:
 882 0648 74000000 		.word	file_manager
 883              	.LFE15:
 885              		.align	2
 886              		.global	handleUpButton
 888              	handleUpButton:
 889              	.LFB14:
 890              		.loc 1 514 0
 891              		@ Function supports interworking.
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              	.LVL52:
 895 064c 30402DE9 		stmfd	sp!, {r4, r5, lr}
 896              	.LCFI12:
 897              		.loc 1 515 0
 898 0650 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 899 0654 010053E3 		cmp	r3, #1
 900              		.loc 1 514 0
 901 0658 0040A0E1 		mov	r4, r0
 902 065c 0150A0E1 		mov	r5, r1
 903              		.loc 1 515 0
 904 0660 0200009A 		bls	.L88
 905              	.LVL53:
 906              		.loc 1 516 0
 907 0664 0110A0E3 		mov	r1, #1
 908              		.loc 1 530 0
 909 0668 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 910              		.loc 1 516 0
 911 066c FEFFFFEA 		b	highlightRow
 912              	.LVL54:
 913              	.L88:
 914              		.loc 1 519 0
 915 0670 0F00001A 		bne	.L90
 916 0674 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 917 0678 000053E3 		cmp	r3, #0
 918 067c 0C00000A 		beq	.L90
 919              	.LVL55:
 920              		.loc 1 521 0
 921 0680 013043E2 		sub	r3, r3, #1
 922 0684 0630C0E5 		strb	r3, [r0, #6]
 923              		.loc 1 524 0
 924 0688 FEFFFFEB 		bl	quickClear
 925              	.LVL56:
 926              		.loc 1 525 0
 927 068c 0F30A0E3 		mov	r3, #15
 928 0690 0030C4E5 		strb	r3, [r4, #0]
 929              		.loc 1 526 0
 930 0694 0E30A0E3 		mov	r3, #14
 931 0698 083084E5 		str	r3, [r4, #8]
 932              		.loc 1 527 0
 933 069c 0510A0E1 		mov	r1, r5
 934 06a0 14009FE5 		ldr	r0, .L91
 935 06a4 FEFFFFEB 		bl	getNewFiles
 936              		.loc 1 528 0
 937 06a8 0400A0E1 		mov	r0, r4
 938              		.loc 1 530 0
 939 06ac 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 940              		.loc 1 528 0
 941 06b0 FEFFFFEA 		b	printMenu
 942              	.LVL57:
 943              	.L90:
 944              		.loc 1 530 0
 945 06b4 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 946 06b8 1EFF2FE1 		bx	lr
 947              	.L92:
 948              		.align	2
 949              	.L91:
 950 06bc 74000000 		.word	file_manager
 951              	.LFE14:
 953              		.section	.rodata.str1.1,"aMS",%progbits,1
 954              	.LC0:
 955 0000 4F666600 		.ascii	"Off\000"
 956              		.text
 957              		.align	2
 958              		.global	disableRadio
 960              	disableRadio:
 961              	.LFB20:
 962              		.loc 1 751 0
 963              		@ Function supports interworking.
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966 06c0 30402DE9 		stmfd	sp!, {r4, r5, lr}
 967              	.LCFI13:
 968              		.loc 1 752 0
 969 06c4 98309FE5 		ldr	r3, .L97
 970              		.loc 1 755 0
 971 06c8 98509FE5 		ldr	r5, .L97+4
 972              		.loc 1 752 0
 973 06cc 0040A0E3 		mov	r4, #0
 974 06d0 0040C3E5 		strb	r4, [r3, #0]
 975              		.loc 1 755 0
 976 06d4 002095E5 		ldr	r2, [r5, #0]
 977              		.loc 1 751 0
 978 06d8 08D04DE2 		sub	sp, sp, #8
 979              	.LCFI14:
 980              		.loc 1 755 0
 981 06dc 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 982 06e0 0200A0E3 		mov	r0, #2
 983 06e4 0410A0E1 		mov	r1, r4
 984 06e8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 985 06ec FEFFFFEB 		bl	LCDSetRowColor
 986              		.loc 1 756 0
 987 06f0 003095E5 		ldr	r3, [r5, #0]
 988 06f4 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 989 06f8 00408DE5 		str	r4, [sp, #0]
 990 06fc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 991 0700 64009FE5 		ldr	r0, .L97+8
 992 0704 0230A0E3 		mov	r3, #2
 993 0708 0410A0E1 		mov	r1, r4
 994 070c 04C08DE5 		str	ip, [sp, #4]
 995 0710 FEFFFFEB 		bl	LCDPrintString
 996              		.loc 1 759 0
 997 0714 54209FE5 		ldr	r2, .L97+12
 998 0718 1C3092E5 		ldr	r3, [r2, #28]
 999 071c 013283E3 		orr	r3, r3, #268435456
 1000 0720 1C3082E5 		str	r3, [r2, #28]
 1001              	.LBB62:
 1002              	.LBB63:
 1003              		.loc 1 262 0
 1004 0724 48309FE5 		ldr	r3, .L97+16
 1005              	.L94:
 1006              	@ 262 "main.c" 1
 1007 0728 0000A0E1 		nop
 1008              	@ 0 "" 2
 1009 072c 014084E2 		add	r4, r4, #1
 1010              	.LVL58:
 1011 0730 030054E1 		cmp	r4, r3
 1012 0734 FBFFFF1A 		bne	.L94
 1013              	.LBE63:
 1014              	.LBE62:
 1015              		.loc 1 761 0
 1016 0738 FEFFFFEB 		bl	ns73Config
 1017              		.loc 1 762 0
 1018 073c 0000A0E3 		mov	r0, #0
 1019 0740 0410A0E3 		mov	r1, #4
 1020 0744 FEFFFFEB 		bl	ns73Send
 1021              		.loc 1 763 0
 1022 0748 20209FE5 		ldr	r2, .L97+12
 1023 074c 143092E5 		ldr	r3, [r2, #20]
 1024 0750 013283E3 		orr	r3, r3, #268435456
 1025 0754 143082E5 		str	r3, [r2, #20]
 1026              		.loc 1 764 0
 1027 0758 08D08DE2 		add	sp, sp, #8
 1028 075c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1029 0760 1EFF2FE1 		bx	lr
 1030              	.L98:
 1031              		.align	2
 1032              	.L97:
 1033 0764 00000000 		.word	radio_enable
 1034 0768 7C040000 		.word	current_display
 1035 076c 00000000 		.word	.LC0
 1036 0770 008002E0 		.word	-536707072
 1037 0774 40420F00 		.word	1000000
 1038              	.LFE20:
 1040              		.section	.rodata.str1.1
 1041              	.LC1:
 1042 0004 4F6E00   		.ascii	"On\000"
 1043              		.text
 1044              		.align	2
 1045              		.global	enableRadio
 1047              	enableRadio:
 1048              	.LFB19:
 1049              		.loc 1 734 0
 1050              		@ Function supports interworking.
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053 0778 10402DE9 		stmfd	sp!, {r4, lr}
 1054              	.LCFI15:
 1055              		.loc 1 735 0
 1056 077c 9C309FE5 		ldr	r3, .L103
 1057              		.loc 1 738 0
 1058 0780 9C409FE5 		ldr	r4, .L103+4
 1059              		.loc 1 735 0
 1060 0784 0120A0E3 		mov	r2, #1
 1061 0788 0020C3E5 		strb	r2, [r3, #0]
 1062              		.loc 1 738 0
 1063 078c 002094E5 		ldr	r2, [r4, #0]
 1064              		.loc 1 734 0
 1065 0790 08D04DE2 		sub	sp, sp, #8
 1066              	.LCFI16:
 1067              		.loc 1 738 0
 1068 0794 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1069 0798 0200A0E3 		mov	r0, #2
 1070 079c 0010A0E3 		mov	r1, #0
 1071 07a0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1072 07a4 FEFFFFEB 		bl	LCDSetRowColor
 1073              		.loc 1 739 0
 1074 07a8 003094E5 		ldr	r3, [r4, #0]
 1075 07ac 0040A0E3 		mov	r4, #0
 1076 07b0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1077 07b4 00408DE5 		str	r4, [sp, #0]
 1078 07b8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1079 07bc 64009FE5 		ldr	r0, .L103+8
 1080 07c0 0230A0E3 		mov	r3, #2
 1081 07c4 0410A0E1 		mov	r1, r4
 1082 07c8 04C08DE5 		str	ip, [sp, #4]
 1083 07cc FEFFFFEB 		bl	LCDPrintString
 1084              		.loc 1 742 0
 1085 07d0 54209FE5 		ldr	r2, .L103+12
 1086 07d4 1C3092E5 		ldr	r3, [r2, #28]
 1087 07d8 013283E3 		orr	r3, r3, #268435456
 1088 07dc 1C3082E5 		str	r3, [r2, #28]
 1089              	.LBB64:
 1090              	.LBB65:
 1091              		.loc 1 262 0
 1092 07e0 48309FE5 		ldr	r3, .L103+16
 1093              	.L100:
 1094              	@ 262 "main.c" 1
 1095 07e4 0000A0E1 		nop
 1096              	@ 0 "" 2
 1097 07e8 014084E2 		add	r4, r4, #1
 1098              	.LVL59:
 1099 07ec 030054E1 		cmp	r4, r3
 1100 07f0 FBFFFF1A 		bne	.L100
 1101              	.LBE65:
 1102              	.LBE64:
 1103              		.loc 1 744 0
 1104 07f4 FEFFFFEB 		bl	ns73Config
 1105              		.loc 1 745 0
 1106 07f8 0000A0E3 		mov	r0, #0
 1107 07fc 8110A0E3 		mov	r1, #129
 1108 0800 FEFFFFEB 		bl	ns73Send
 1109              		.loc 1 746 0
 1110 0804 20209FE5 		ldr	r2, .L103+12
 1111 0808 143092E5 		ldr	r3, [r2, #20]
 1112 080c 013283E3 		orr	r3, r3, #268435456
 1113 0810 143082E5 		str	r3, [r2, #20]
 1114              		.loc 1 747 0
 1115 0814 08D08DE2 		add	sp, sp, #8
 1116 0818 1040BDE8 		ldmfd	sp!, {r4, lr}
 1117 081c 1EFF2FE1 		bx	lr
 1118              	.L104:
 1119              		.align	2
 1120              	.L103:
 1121 0820 00000000 		.word	radio_enable
 1122 0824 7C040000 		.word	current_display
 1123 0828 04000000 		.word	.LC1
 1124 082c 008002E0 		.word	-536707072
 1125 0830 40420F00 		.word	1000000
 1126              	.LFE19:
 1128              		.align	2
 1129              		.global	closeSong
 1131              	closeSong:
 1132              	.LFB10:
 1133              		.loc 1 444 0
 1134              		@ Function supports interworking.
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              	.LVL60:
 1138 0834 10402DE9 		stmfd	sp!, {r4, lr}
 1139              	.LCFI17:
 1140              		.loc 1 445 0
 1141 0838 28409FE5 		ldr	r4, .L107
 1142 083c 003094E5 		ldr	r3, [r4, #0]
 1143 0840 153C83E3 		orr	r3, r3, #5376
 1144 0844 003084E5 		str	r3, [r4, #0]
 1145              		.loc 1 446 0
 1146 0848 340090E5 		ldr	r0, [r0, #52]
 1147              	.LVL61:
 1148 084c FEFFFFEB 		bl	fat16_close_file
 1149              		.loc 1 447 0
 1150 0850 003094E5 		ldr	r3, [r4, #0]
 1151 0854 FF3DC3E3 		bic	r3, r3, #16320
 1152 0858 3030C3E3 		bic	r3, r3, #48
 1153 085c 003084E5 		str	r3, [r4, #0]
 1154              		.loc 1 448 0
 1155 0860 1040BDE8 		ldmfd	sp!, {r4, lr}
 1156 0864 1EFF2FE1 		bx	lr
 1157              	.L108:
 1158              		.align	2
 1159              	.L107:
 1160 0868 00C002E0 		.word	-536690688
 1161              	.LFE10:
 1163              		.align	2
 1164              		.global	loadSongInfo
 1166              	loadSongInfo:
 1167              	.LFB9:
 1168              		.loc 1 409 0
 1169              		@ Function supports interworking.
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              	.LVL62:
 1173 086c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1174              	.LCFI18:
 1175              		.loc 1 409 0
 1176 0870 0020A0E3 		mov	r2, #0
 1177              	.LVL63:
 1178 0874 0040A0E1 		mov	r4, r0
 1179              	.LVL64:
 1180              	.L110:
 1181              	.LBB66:
 1182              		.loc 1 412 0
 1183 0878 083091E5 		ldr	r3, [r1, #8]
 1184 087c 833281E0 		add	r3, r1, r3, asl #5
 1185 0880 023083E0 		add	r3, r3, r2
 1186 0884 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1187              		.loc 1 411 0
 1188 0888 012082E2 		add	r2, r2, #1
 1189 088c 1E0052E3 		cmp	r2, #30
 1190              		.loc 1 412 0
 1191 0890 1630C0E5 		strb	r3, [r0, #22]
 1192              		.loc 1 411 0
 1193 0894 010080E2 		add	r0, r0, #1
 1194 0898 F6FFFF1A 		bne	.L110
 1195 089c 0020A0E3 		mov	r2, #0
 1196              	.LVL65:
 1197              	.LBE66:
 1198              	.LBB67:
 1199              		.loc 1 417 0
 1200 08a0 0210A0E1 		mov	r1, r2
 1201              	.LVL66:
 1202              	.L113:
 1203              		.loc 1 416 0
 1204 08a4 023084E0 		add	r3, r4, r2
 1205 08a8 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 1206 08ac 150052E3 		cmp	r2, #21
 1207 08b0 2E005313 		cmpne	r3, #46
 1208              		.loc 1 417 0
 1209 08b4 0210C407 		streqb	r1, [r4, r2]
 1210 08b8 1620A003 		moveq	r2, #22
 1211              		.loc 1 420 0
 1212 08bc 0230C417 		strneb	r3, [r4, r2]
 1213              		.loc 1 415 0
 1214 08c0 012082E2 		add	r2, r2, #1
 1215 08c4 150052E3 		cmp	r2, #21
 1216 08c8 F5FFFFDA 		ble	.L113
 1217              	.LBE67:
 1218              		.loc 1 423 0
 1219 08cc 6C609FE5 		ldr	r6, .L119
 1220 08d0 003096E5 		ldr	r3, [r6, #0]
 1221              		.loc 1 425 0
 1222 08d4 165084E2 		add	r5, r4, #22
 1223              		.loc 1 423 0
 1224 08d8 153C83E3 		orr	r3, r3, #5376
 1225              		.loc 1 425 0
 1226 08dc 0500A0E1 		mov	r0, r5
 1227              		.loc 1 423 0
 1228 08e0 003086E5 		str	r3, [r6, #0]
 1229              		.loc 1 425 0
 1230 08e4 FEFFFFEB 		bl	root_file_exists
 1231              	.LVL67:
 1232 08e8 000050E3 		cmp	r0, #0
 1233              		.loc 1 426 0
 1234 08ec 00309605 		ldreq	r3, [r6, #0]
 1235 08f0 FF3DC303 		biceq	r3, r3, #16320
 1236 08f4 3030C303 		biceq	r3, r3, #48
 1237 08f8 00308605 		streq	r3, [r6, #0]
 1238 08fc 0D00000A 		beq	.L115
 1239              	.L114:
 1240              		.loc 1 431 0
 1241 0900 0500A0E1 		mov	r0, r5
 1242 0904 FEFFFFEB 		bl	root_open
 1243 0908 340084E5 		str	r0, [r4, #52]
 1244              		.loc 1 432 0
 1245 090c FEFFFFEB 		bl	fat16_file_size
 1246              		.loc 1 433 0
 1247 0910 3D1084E2 		add	r1, r4, #61
 1248              		.loc 1 432 0
 1249 0914 380084E5 		str	r0, [r4, #56]
 1250              		.loc 1 433 0
 1251 0918 2020A0E3 		mov	r2, #32
 1252 091c 340094E5 		ldr	r0, [r4, #52]
 1253 0920 FEFFFFEB 		bl	fat16_read_file
 1254              		.loc 1 437 0
 1255 0924 003096E5 		ldr	r3, [r6, #0]
 1256 0928 FF3DC3E3 		bic	r3, r3, #16320
 1257 092c 3030C3E3 		bic	r3, r3, #48
 1258 0930 003086E5 		str	r3, [r6, #0]
 1259 0934 0100A0E3 		mov	r0, #1
 1260              	.L115:
 1261              		.loc 1 439 0
 1262 0938 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1263 093c 1EFF2FE1 		bx	lr
 1264              	.L120:
 1265              		.align	2
 1266              	.L119:
 1267 0940 00C002E0 		.word	-536690688
 1268              	.LFE9:
 1270              		.section	.rodata.str1.1
 1271              	.LC2:
 1272 0007 256400   		.ascii	"%d\000"
 1273              		.text
 1274              		.align	2
 1275              		.global	handleMiddleButton
 1277              	handleMiddleButton:
 1278              	.LFB16:
 1279              		.loc 1 564 0
 1280              		@ Function supports interworking.
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283 0944 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1284              	.LCFI19:
 1285              		.loc 1 565 0
 1286 0948 1020A0E3 		mov	r2, #16
 1287 094c 0030E0E3 		mvn	r3, #0
 1288 0950 EB2F03E5 		str	r2, [r3, #-4075]
 1289              	.LBB68:
 1290              	.LBB69:
 1291              		.loc 1 262 0
 1292 0954 44269FE5 		ldr	r2, .L171
 1293              	.LBE69:
 1294              	.LBE68:
 1295              		.loc 1 564 0
 1296 0958 08D04DE2 		sub	sp, sp, #8
 1297              	.LCFI20:
 1298              		.loc 1 565 0
 1299 095c 013083E2 		add	r3, r3, #1
 1300              	.LVL68:
 1301              	.L122:
 1302              	.LBB71:
 1303              	.LBB70:
 1304              		.loc 1 262 0
 1305              	@ 262 "main.c" 1
 1306 0960 0000A0E1 		nop
 1307              	@ 0 "" 2
 1308 0964 013083E2 		add	r3, r3, #1
 1309 0968 020053E1 		cmp	r3, r2
 1310 096c FBFFFF1A 		bne	.L122
 1311              	.LBE70:
 1312              	.LBE71:
 1313              		.loc 1 569 0
 1314 0970 2C769FE5 		ldr	r7, .L171+4
 1315 0974 2C369FE5 		ldr	r3, .L171+8
 1316              	.LVL69:
 1317 0978 000097E5 		ldr	r0, [r7, #0]
 1318 097c 030050E1 		cmp	r0, r3
 1319 0980 24669FE5 		ldr	r6, .L171+12
 1320 0984 6C00001A 		bne	.L123
 1321              		.loc 1 570 0
 1322 0988 0050D6E5 		ldrb	r5, [r6, #0]	@ zero_extendqisi2
 1323 098c 000055E3 		cmp	r5, #0
 1324 0990 4900001A 		bne	.L124
 1325              		.loc 1 571 0
 1326 0994 0010A0E1 		mov	r1, r0
 1327 0998 10069FE5 		ldr	r0, .L171+16
 1328 099c FEFFFFEB 		bl	loadSongInfo
 1329              		.loc 1 572 0
 1330 09a0 000050E3 		cmp	r0, #0
 1331              		.loc 1 571 0
 1332 09a4 0040A0E1 		mov	r4, r0
 1333 09a8 0000C6E5 		strb	r0, [r6, #0]
 1334              		.loc 1 572 0
 1335 09ac 1700001A 		bne	.L125
 1336              		.loc 1 573 0
 1337 09b0 FC359FE5 		ldr	r3, .L171+20
 1338 09b4 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1339 09b8 FEFFFFEB 		bl	LCDClear
 1340              		.loc 1 574 0
 1341 09bc 00408DE5 		str	r4, [sp, #0]
 1342 09c0 001097E5 		ldr	r1, [r7, #0]
 1343 09c4 EC359FE5 		ldr	r3, .L171+24
 1344 09c8 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1345 09cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1346 09d0 E4059FE5 		ldr	r0, .L171+28
 1347 09d4 0130A0E3 		mov	r3, #1
 1348 09d8 0410A0E1 		mov	r1, r4
 1349 09dc 04C08DE5 		str	ip, [sp, #4]
 1350 09e0 FEFFFFEB 		bl	LCDPrintString
 1351              	.LBB72:
 1352              	.LBB73:
 1353              		.loc 1 262 0
 1354 09e4 D4359FE5 		ldr	r3, .L171+32
 1355              	.LBE73:
 1356              	.LBE72:
 1357              		.loc 1 574 0
 1358 09e8 0400A0E1 		mov	r0, r4
 1359              	.LVL70:
 1360              	.L126:
 1361              	.LBB75:
 1362              	.LBB74:
 1363              		.loc 1 262 0
 1364              	@ 262 "main.c" 1
 1365 09ec 0000A0E1 		nop
 1366              	@ 0 "" 2
 1367 09f0 010080E2 		add	r0, r0, #1
 1368 09f4 030050E1 		cmp	r0, r3
 1369 09f8 FBFFFF1A 		bne	.L126
 1370              	.LBE74:
 1371              	.LBE75:
 1372              		.loc 1 576 0
 1373 09fc B4359FE5 		ldr	r3, .L171+24
 1374 0a00 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1375              	.LVL71:
 1376 0a04 FEFFFFEB 		bl	LCDClear
 1377              		.loc 1 577 0
 1378 0a08 98059FE5 		ldr	r0, .L171+8
 1379 0a0c 5B0100EA 		b	.L170
 1380              	.L125:
 1381              		.loc 1 580 0
 1382 0a10 FEFFFFEB 		bl	vs1002Config
 1383              		.loc 1 583 0
 1384 0a14 A8459FE5 		ldr	r4, .L171+36
 1385              		.loc 1 581 0
 1386 0a18 0500A0E1 		mov	r0, r5
 1387 0a1c 021BA0E3 		mov	r1, #2048
 1388 0a20 FEFFFFEB 		bl	vs1002SCIWrite
 1389              		.loc 1 582 0
 1390 0a24 FEFFFFEB 		bl	vs1002Finish
 1391              		.loc 1 583 0
 1392 0a28 0232A0E3 		mov	r3, #536870912
 1393 0a2c 0C3084E5 		str	r3, [r4, #12]
 1394              		.loc 1 589 0
 1395 0a30 05A0A0E1 		mov	sl, r5
 1396              		.loc 1 585 0
 1397 0a34 FEFFFFEB 		bl	vs1002Config
 1398              		.loc 1 588 0
 1399 0a38 70859FE5 		ldr	r8, .L171+16
 1400 0a3c 84659FE5 		ldr	r6, .L171+40
 1401 0a40 0170A0E3 		mov	r7, #1
 1402 0a44 080000EA 		b	.L166
 1403              	.L130:
 1404              		.loc 1 587 0
 1405 0a48 FEFFFFEB 		bl	vs1002SendMusic
 1406              		.loc 1 588 0
 1407 0a4c 340098E5 		ldr	r0, [r8, #52]
 1408 0a50 74159FE5 		ldr	r1, .L171+44
 1409 0a54 2020A0E3 		mov	r2, #32
 1410 0a58 FEFFFFEB 		bl	fat16_read_file
 1411 0a5c 0008A0E1 		mov	r0, r0, asl #16
 1412 0a60 000050E3 		cmp	r0, #0
 1413 0a64 0070C6D5 		strleb	r7, [r6, #0]
 1414              		.loc 1 589 0
 1415 0a68 00A0C6C5 		strgtb	sl, [r6, #0]
 1416              	.L166:
 1417              		.loc 1 586 0
 1418 0a6c 003094E5 		ldr	r3, [r4, #0]
 1419 0a70 020613E3 		tst	r3, #2097152
 1420              		.loc 1 587 0
 1421 0a74 50059FE5 		ldr	r0, .L171+44
 1422 0a78 2010A0E3 		mov	r1, #32
 1423              		.loc 1 586 0
 1424 0a7c 40559FE5 		ldr	r5, .L171+36
 1425 0a80 F0FFFF1A 		bne	.L130
 1426              		.loc 1 591 0
 1427 0a84 FEFFFFEB 		bl	vs1002Finish
 1428              		.loc 1 592 0
 1429 0a88 40259FE5 		ldr	r2, .L171+48
 1430 0a8c 043092E5 		ldr	r3, [r2, #4]
 1431 0a90 033B83E3 		orr	r3, r3, #3072
 1432 0a94 043082E5 		str	r3, [r2, #4]
 1433              		.loc 1 593 0
 1434 0a98 0020E0E3 		mvn	r2, #0
 1435 0a9c EF3F12E5 		ldr	r3, [r2, #-4079]
 1436 0aa0 203083E3 		orr	r3, r3, #32
 1437 0aa4 EF3F02E5 		str	r3, [r2, #-4079]
 1438              		.loc 1 594 0
 1439 0aa8 083095E5 		ldr	r3, [r5, #8]
 1440 0aac 033783E3 		orr	r3, r3, #786432
 1441 0ab0 503083E3 		orr	r3, r3, #80
 1442 0ab4 083085E5 		str	r3, [r5, #8]
 1443 0ab8 310100EA 		b	.L127
 1444              	.L124:
 1445              		.loc 1 598 0
 1446 0abc 2020A0E3 		mov	r2, #32
 1447 0ac0 0030E0E3 		mvn	r3, #0
 1448 0ac4 EB2F03E5 		str	r2, [r3, #-4075]
 1449              		.loc 1 599 0
 1450 0ac8 F4349FE5 		ldr	r3, .L171+36
 1451 0acc 0222A0E3 		mov	r2, #536870912
 1452 0ad0 042083E5 		str	r2, [r3, #4]
 1453              		.loc 1 600 0
 1454 0ad4 FEFFFFEB 		bl	vs1002Config
 1455              		.loc 1 601 0
 1456 0ad8 0000A0E3 		mov	r0, #0
 1457 0adc 0810A0E3 		mov	r1, #8
 1458 0ae0 FEFFFFEB 		bl	vs1002SCIWrite
 1459 0ae4 0040A0E3 		mov	r4, #0
 1460              	.LVL72:
 1461              	.L131:
 1462              	.LBB76:
 1463              		.loc 1 602 0
 1464 0ae8 0000A0E3 		mov	r0, #0
 1465 0aec 014084E2 		add	r4, r4, #1
 1466 0af0 0010A0E1 		mov	r1, r0
 1467 0af4 FEFFFFEB 		bl	vs1002SCIWrite
 1468 0af8 960054E3 		cmp	r4, #150
 1469 0afc F9FFFF1A 		bne	.L131
 1470              	.LBE76:
 1471              		.loc 1 603 0
 1472 0b00 FEFFFFEB 		bl	vs1002Finish
 1473              		.loc 1 604 0
 1474 0b04 B8249FE5 		ldr	r2, .L171+36
 1475 0b08 083092E5 		ldr	r3, [r2, #8]
 1476 0b0c 033783E3 		orr	r3, r3, #786432
 1477 0b10 503083E3 		orr	r3, r3, #80
 1478 0b14 083082E5 		str	r3, [r2, #8]
 1479              		.loc 1 605 0
 1480 0b18 90049FE5 		ldr	r0, .L171+16
 1481 0b1c FEFFFFEB 		bl	closeSong
 1482              		.loc 1 606 0
 1483 0b20 84349FE5 		ldr	r3, .L171+12
 1484 0b24 0020A0E3 		mov	r2, #0
 1485 0b28 0020C3E5 		strb	r2, [r3, #0]
 1486              		.loc 1 607 0
 1487 0b2c 102082E2 		add	r2, r2, #16
 1488 0b30 0030E0E3 		mvn	r3, #0
 1489 0b34 EF2F03E5 		str	r2, [r3, #-4079]
 1490 0b38 110100EA 		b	.L127
 1491              	.LVL73:
 1492              	.L123:
 1493              		.loc 1 613 0
 1494 0b3c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1495 0b40 000053E3 		cmp	r3, #0
 1496 0b44 0100000A 		beq	.L132
 1497 0b48 FEFFFFEB 		bl	quickClear
 1498 0b4c 020000EA 		b	.L133
 1499              	.L132:
 1500              		.loc 1 614 0
 1501 0b50 7C349FE5 		ldr	r3, .L171+52
 1502 0b54 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1503 0b58 FEFFFFEB 		bl	LCDClear
 1504              	.L133:
 1505              		.loc 1 615 0
 1506 0b5c 40849FE5 		ldr	r8, .L171+4
 1507 0b60 003098E5 		ldr	r3, [r8, #0]
 1508 0b64 0070A0E3 		mov	r7, #0
 1509 0b68 080093E5 		ldr	r0, [r3, #8]
 1510 0b6c 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1511 0b70 00708DE5 		str	r7, [sp, #0]
 1512 0b74 800283E0 		add	r0, r3, r0, asl #5
 1513 0b78 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1514              		.loc 1 616 0
 1515 0b7c 0060E0E3 		mvn	r6, #0
 1516              		.loc 1 615 0
 1517 0b80 0130A0E3 		mov	r3, #1
 1518 0b84 0C0080E2 		add	r0, r0, #12
 1519 0b88 0710A0E1 		mov	r1, r7
 1520 0b8c 04C08DE5 		str	ip, [sp, #4]
 1521 0b90 FEFFFFEB 		bl	LCDPrintString
 1522              		.loc 1 616 0
 1523 0b94 EF3F16E5 		ldr	r3, [r6, #-4079]
 1524 0b98 103083E3 		orr	r3, r3, #16
 1525 0b9c EF3F06E5 		str	r3, [r6, #-4079]
 1526              		.loc 1 617 0
 1527 0ba0 002098E5 		ldr	r2, [r8, #0]
 1528 0ba4 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 1529 0ba8 010054E3 		cmp	r4, #1
 1530 0bac 5500001A 		bne	.L134
 1531              		.loc 1 618 0
 1532 0bb0 EF3F16E5 		ldr	r3, [r6, #-4079]
 1533 0bb4 103083E3 		orr	r3, r3, #16
 1534 0bb8 EF3F06E5 		str	r3, [r6, #-4079]
 1535              		.loc 1 619 0
 1536 0bbc 0200A0E3 		mov	r0, #2
 1537 0bc0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1538 0bc4 0710A0E1 		mov	r1, r7
 1539 0bc8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1540 0bcc FEFFFFEB 		bl	LCDSetRowColor
 1541              		.loc 1 620 0
 1542 0bd0 00708DE5 		str	r7, [sp, #0]
 1543 0bd4 003098E5 		ldr	r3, [r8, #0]
 1544 0bd8 D4539FE5 		ldr	r5, .L171+20
 1545 0bdc F4439FE5 		ldr	r4, .L171+56
 1546 0be0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1547 0be4 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1548 0be8 001094E5 		ldr	r1, [r4, #0]
 1549 0bec E8039FE5 		ldr	r0, .L171+60
 1550 0bf0 0230A0E3 		mov	r3, #2
 1551 0bf4 04C08DE5 		str	ip, [sp, #4]
 1552              		.loc 1 622 0
 1553 0bf8 06A0A0E1 		mov	sl, r6
 1554              		.loc 1 642 0
 1555 0bfc 05B0A0E1 		mov	fp, r5
 1556              		.loc 1 641 0
 1557 0c00 0860A0E1 		mov	r6, r8
 1558              		.loc 1 620 0
 1559 0c04 FEFFFFEB 		bl	LCDPrintString
 1560              		.loc 1 621 0
 1561 0c08 D0539FE5 		ldr	r5, .L171+64
 1562              		.loc 1 622 0
 1563 0c0c 1090A0E3 		mov	r9, #16
 1564              	.LBB77:
 1565              	.LBB78:
 1566              		.loc 1 262 0
 1567 0c10 CC839FE5 		ldr	r8, .L171+68
 1568 0c14 370000EA 		b	.L135
 1569              	.LVL74:
 1570              	.L141:
 1571              	.LBE78:
 1572              	.LBE77:
 1573              		.loc 1 622 0
 1574 0c18 EB9F0AE5 		str	r9, [sl, #-4075]
 1575 0c1c 0030A0E3 		mov	r3, #0
 1576              	.LVL75:
 1577              	.L136:
 1578              	.LBB80:
 1579              	.LBB79:
 1580              		.loc 1 262 0
 1581              	@ 262 "main.c" 1
 1582 0c20 0000A0E1 		nop
 1583              	@ 0 "" 2
 1584 0c24 013083E2 		add	r3, r3, #1
 1585 0c28 080053E1 		cmp	r3, r8
 1586 0c2c FBFFFF1A 		bne	.L136
 1587              	.LBE79:
 1588              	.LBE80:
 1589              		.loc 1 624 0
 1590 0c30 020052E3 		cmp	r2, #2
 1591 0c34 1200001A 		bne	.L137
 1592              		.loc 1 625 0
 1593 0c38 003094E5 		ldr	r3, [r4, #0]
 1594              	.LVL76:
 1595 0c3c 1F0053E3 		cmp	r3, #31
 1596 0c40 050000CA 		bgt	.L138
 1597              		.loc 1 626 0
 1598 0c44 013083E2 		add	r3, r3, #1
 1599 0c48 003084E5 		str	r3, [r4, #0]
 1600              		.loc 1 627 0
 1601 0c4c FEFFFFEB 		bl	vs1002Config
 1602              		.loc 1 628 0
 1603 0c50 3100A0E3 		mov	r0, #49
 1604 0c54 FEFFFFEB 		bl	vs1002SetVolume
 1605              		.loc 1 629 0
 1606 0c58 FEFFFFEB 		bl	vs1002Finish
 1607              	.L138:
 1608              		.loc 1 631 0
 1609 0c5c 002096E5 		ldr	r2, [r6, #0]
 1610 0c60 0200A0E3 		mov	r0, #2
 1611 0c64 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1612 0c68 0010A0E3 		mov	r1, #0
 1613 0c6c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1614 0c70 FEFFFFEB 		bl	LCDSetRowColor
 1615              		.loc 1 632 0
 1616 0c74 003096E5 		ldr	r3, [r6, #0]
 1617 0c78 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1618 0c7c 00708DE5 		str	r7, [sp, #0]
 1619              	.LVL77:
 1620 0c80 130000EA 		b	.L167
 1621              	.LVL78:
 1622              	.L137:
 1623              		.loc 1 634 0
 1624 0c84 010052E3 		cmp	r2, #1
 1625 0c88 1700001A 		bne	.L139
 1626              		.loc 1 635 0
 1627 0c8c 003094E5 		ldr	r3, [r4, #0]
 1628              	.LVL79:
 1629 0c90 000053E3 		cmp	r3, #0
 1630 0c94 050000BA 		blt	.L140
 1631              		.loc 1 636 0
 1632 0c98 013043E2 		sub	r3, r3, #1
 1633 0c9c 003084E5 		str	r3, [r4, #0]
 1634              		.loc 1 637 0
 1635 0ca0 FEFFFFEB 		bl	vs1002Config
 1636              		.loc 1 638 0
 1637 0ca4 3000A0E3 		mov	r0, #48
 1638 0ca8 FEFFFFEB 		bl	vs1002SetVolume
 1639              		.loc 1 639 0
 1640 0cac FEFFFFEB 		bl	vs1002Finish
 1641              	.L140:
 1642              		.loc 1 641 0
 1643 0cb0 002096E5 		ldr	r2, [r6, #0]
 1644 0cb4 0200A0E3 		mov	r0, #2
 1645 0cb8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1646 0cbc 0010A0E3 		mov	r1, #0
 1647 0cc0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1648 0cc4 FEFFFFEB 		bl	LCDSetRowColor
 1649              		.loc 1 642 0
 1650 0cc8 00708DE5 		str	r7, [sp, #0]
 1651              	.LVL80:
 1652 0ccc 003096E5 		ldr	r3, [r6, #0]
 1653 0cd0 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1654              	.L167:
 1655 0cd4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1656 0cd8 001094E5 		ldr	r1, [r4, #0]
 1657 0cdc F8029FE5 		ldr	r0, .L171+60
 1658 0ce0 0230A0E3 		mov	r3, #2
 1659 0ce4 04C08DE5 		str	ip, [sp, #4]
 1660 0ce8 FEFFFFEB 		bl	LCDPrintString
 1661              	.LVL81:
 1662              	.L139:
 1663              		.loc 1 644 0
 1664 0cec EF3F1AE5 		ldr	r3, [sl, #-4079]
 1665 0cf0 103083E3 		orr	r3, r3, #16
 1666 0cf4 EF3F0AE5 		str	r3, [sl, #-4079]
 1667              	.L135:
 1668              		.loc 1 621 0
 1669 0cf8 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1670 0cfc 020052E3 		cmp	r2, #2
 1671 0d00 C4FFFF9A 		bls	.L141
 1672 0d04 900000EA 		b	.L142
 1673              	.LVL82:
 1674              	.L134:
 1675              		.loc 1 647 0
 1676 0d08 030054E3 		cmp	r4, #3
 1677 0d0c 5F00001A 		bne	.L143
 1678              		.loc 1 648 0
 1679 0d10 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1680 0d14 0710A0E1 		mov	r1, r7
 1681 0d18 0200A0E3 		mov	r0, #2
 1682 0d1c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1683 0d20 FEFFFFEB 		bl	LCDSetRowColor
 1684              		.loc 1 649 0
 1685 0d24 00708DE5 		str	r7, [sp, #0]
 1686 0d28 003098E5 		ldr	r3, [r8, #0]
 1687 0d2c 80529FE5 		ldr	r5, .L171+20
 1688 0d30 B0429FE5 		ldr	r4, .L171+72
 1689 0d34 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1690 0d38 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1691 0d3c 001094E5 		ldr	r1, [r4, #0]
 1692 0d40 0230A0E3 		mov	r3, #2
 1693 0d44 90029FE5 		ldr	r0, .L171+60
 1694 0d48 04C08DE5 		str	ip, [sp, #4]
 1695 0d4c FEFFFFEB 		bl	LCDPrintString
 1696              		.loc 1 651 0
 1697 0d50 EF3F16E5 		ldr	r3, [r6, #-4079]
 1698              		.loc 1 650 0
 1699 0d54 84229FE5 		ldr	r2, .L171+64
 1700              		.loc 1 651 0
 1701 0d58 103083E3 		orr	r3, r3, #16
 1702              		.loc 1 650 0
 1703 0d5c 0070C2E5 		strb	r7, [r2, #0]
 1704              		.loc 1 652 0
 1705 0d60 02B0A0E1 		mov	fp, r2
 1706              		.loc 1 651 0
 1707 0d64 EF3F06E5 		str	r3, [r6, #-4079]
 1708              		.loc 1 653 0
 1709 0d68 0670A0E1 		mov	r7, r6
 1710              	.LBB81:
 1711              	.LBB82:
 1712              		.loc 1 262 0
 1713 0d6c 78929FE5 		ldr	r9, .L171+76
 1714              	.LBE82:
 1715              	.LBE81:
 1716              		.loc 1 664 0
 1717 0d70 0860A0E1 		mov	r6, r8
 1718              		.loc 1 663 0
 1719 0d74 74A29FE5 		ldr	sl, .L171+80
 1720              		.loc 1 657 0
 1721 0d78 74829FE5 		ldr	r8, .L171+84
 1722 0d7c 2D0000EA 		b	.L144
 1723              	.L150:
 1724              		.loc 1 653 0
 1725 0d80 1030A0E3 		mov	r3, #16
 1726 0d84 EB3F07E5 		str	r3, [r7, #-4075]
 1727 0d88 0030A0E3 		mov	r3, #0
 1728              	.LVL83:
 1729              	.L145:
 1730              	.LBB84:
 1731              	.LBB83:
 1732              		.loc 1 262 0
 1733              	@ 262 "main.c" 1
 1734 0d8c 0000A0E1 		nop
 1735              	@ 0 "" 2
 1736 0d90 013083E2 		add	r3, r3, #1
 1737 0d94 090053E1 		cmp	r3, r9
 1738 0d98 FBFFFF1A 		bne	.L145
 1739              	.LBE83:
 1740              	.LBE84:
 1741              		.loc 1 655 0
 1742 0d9c 020052E3 		cmp	r2, #2
 1743 0da0 0900001A 		bne	.L146
 1744              		.loc 1 657 0
 1745 0da4 003094E5 		ldr	r3, [r4, #0]
 1746              	.LVL84:
 1747 0da8 080053E1 		cmp	r3, r8
 1748 0dac 023083D2 		addle	r3, r3, #2
 1749 0db0 003084D5 		strle	r3, [r4, #0]
 1750              		.loc 1 658 0
 1751 0db4 002096E5 		ldr	r2, [r6, #0]
 1752 0db8 0200A0E3 		mov	r0, #2
 1753 0dbc 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1754 0dc0 0010A0E3 		mov	r1, #0
 1755 0dc4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1756 0dc8 0A0000EA 		b	.L168
 1757              	.LVL85:
 1758              	.L146:
 1759              		.loc 1 661 0
 1760 0dcc 010052E3 		cmp	r2, #1
 1761 0dd0 1300001A 		bne	.L148
 1762              		.loc 1 663 0
 1763 0dd4 003094E5 		ldr	r3, [r4, #0]
 1764              	.LVL86:
 1765 0dd8 0A0053E1 		cmp	r3, sl
 1766 0ddc 023043C2 		subgt	r3, r3, #2
 1767 0de0 003084C5 		strgt	r3, [r4, #0]
 1768              		.loc 1 664 0
 1769 0de4 002096E5 		ldr	r2, [r6, #0]
 1770 0de8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1771 0dec 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1772 0df0 0200A0E3 		mov	r0, #2
 1773 0df4 0010A0E3 		mov	r1, #0
 1774              	.L168:
 1775 0df8 FEFFFFEB 		bl	LCDSetRowColor
 1776              		.loc 1 665 0
 1777 0dfc 0030A0E3 		mov	r3, #0
 1778 0e00 00308DE5 		str	r3, [sp, #0]
 1779 0e04 003096E5 		ldr	r3, [r6, #0]
 1780 0e08 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1781 0e0c 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1782 0e10 001094E5 		ldr	r1, [r4, #0]
 1783 0e14 C0019FE5 		ldr	r0, .L171+60
 1784 0e18 0230A0E3 		mov	r3, #2
 1785 0e1c 04C08DE5 		str	ip, [sp, #4]
 1786 0e20 FEFFFFEB 		bl	LCDPrintString
 1787              	.LVL87:
 1788              	.L148:
 1789              		.loc 1 667 0
 1790 0e24 000094E5 		ldr	r0, [r4, #0]
 1791 0e28 FEFFFFEB 		bl	ns73SetChannel
 1792              	.LVL88:
 1793              		.loc 1 668 0
 1794 0e2c EF3F17E5 		ldr	r3, [r7, #-4079]
 1795 0e30 103083E3 		orr	r3, r3, #16
 1796 0e34 EF3F07E5 		str	r3, [r7, #-4079]
 1797              	.L144:
 1798              		.loc 1 652 0
 1799 0e38 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1800 0e3c 020052E3 		cmp	r2, #2
 1801 0e40 CEFFFF9A 		bls	.L150
 1802              		.loc 1 670 0
 1803 0e44 78219FE5 		ldr	r2, .L171+36
 1804 0e48 1C3092E5 		ldr	r3, [r2, #28]
 1805 0e4c 013283E3 		orr	r3, r3, #268435456
 1806 0e50 1C3082E5 		str	r3, [r2, #28]
 1807              	.LBB85:
 1808              	.LBB86:
 1809              		.loc 1 262 0
 1810 0e54 90219FE5 		ldr	r2, .L171+76
 1811              	.LBE86:
 1812              	.LBE85:
 1813              		.loc 1 670 0
 1814 0e58 0030A0E3 		mov	r3, #0
 1815              	.LVL89:
 1816              	.L151:
 1817              	.LBB88:
 1818              	.LBB87:
 1819              		.loc 1 262 0
 1820              	@ 262 "main.c" 1
 1821 0e5c 0000A0E1 		nop
 1822              	@ 0 "" 2
 1823 0e60 013083E2 		add	r3, r3, #1
 1824 0e64 020053E1 		cmp	r3, r2
 1825 0e68 FBFFFF1A 		bne	.L151
 1826              	.LBE87:
 1827              	.LBE88:
 1828              		.loc 1 672 0
 1829 0e6c FEFFFFEB 		bl	ns73Config
 1830              	.LVL90:
 1831              		.loc 1 673 0
 1832 0e70 70319FE5 		ldr	r3, .L171+72
 1833 0e74 000093E5 		ldr	r0, [r3, #0]
 1834 0e78 FEFFFFEB 		bl	ns73SetChannel
 1835              		.loc 1 674 0
 1836 0e7c 40219FE5 		ldr	r2, .L171+36
 1837 0e80 143092E5 		ldr	r3, [r2, #20]
 1838 0e84 013283E3 		orr	r3, r3, #268435456
 1839 0e88 143082E5 		str	r3, [r2, #20]
 1840 0e8c 2E0000EA 		b	.L142
 1841              	.L143:
 1842              		.loc 1 676 0
 1843 0e90 020054E3 		cmp	r4, #2
 1844 0e94 2C00001A 		bne	.L142
 1845              		.loc 1 677 0
 1846 0e98 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1847 0e9c 0710A0E1 		mov	r1, r7
 1848 0ea0 0400A0E1 		mov	r0, r4
 1849 0ea4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1850 0ea8 FEFFFFEB 		bl	LCDSetRowColor
 1851              		.loc 1 678 0
 1852 0eac 44319FE5 		ldr	r3, .L171+88
 1853 0eb0 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1854 0eb4 000051E3 		cmp	r1, #0
 1855 0eb8 0700000A 		beq	.L152
 1856 0ebc 003098E5 		ldr	r3, [r8, #0]
 1857 0ec0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1858 0ec4 00708DE5 		str	r7, [sp, #0]
 1859 0ec8 0710A0E1 		mov	r1, r7
 1860 0ecc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1861 0ed0 24019FE5 		ldr	r0, .L171+92
 1862 0ed4 0430A0E1 		mov	r3, r4
 1863 0ed8 050000EA 		b	.L169
 1864              	.L152:
 1865              		.loc 1 679 0
 1866 0edc 003098E5 		ldr	r3, [r8, #0]
 1867 0ee0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1868 0ee4 00108DE5 		str	r1, [sp, #0]
 1869 0ee8 10019FE5 		ldr	r0, .L171+96
 1870 0eec 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1871 0ef0 0430A0E1 		mov	r3, r4
 1872              	.L169:
 1873 0ef4 04C08DE5 		str	ip, [sp, #4]
 1874 0ef8 FEFFFFEB 		bl	LCDPrintString
 1875              		.loc 1 681 0
 1876 0efc 0010E0E3 		mvn	r1, #0
 1877 0f00 EF2F11E5 		ldr	r2, [r1, #-4079]
 1878              		.loc 1 680 0
 1879 0f04 D4309FE5 		ldr	r3, .L171+64
 1880              		.loc 1 681 0
 1881 0f08 102082E3 		orr	r2, r2, #16
 1882              		.loc 1 680 0
 1883 0f0c 0000A0E3 		mov	r0, #0
 1884 0f10 0000C3E5 		strb	r0, [r3, #0]
 1885              		.loc 1 681 0
 1886 0f14 EF2F01E5 		str	r2, [r1, #-4079]
 1887              		.loc 1 683 0
 1888 0f18 100080E2 		add	r0, r0, #16
 1889              	.LBB89:
 1890              	.LBB90:
 1891              		.loc 1 262 0
 1892 0f1c C8209FE5 		ldr	r2, .L171+76
 1893 0f20 060000EA 		b	.L154
 1894              	.LVL91:
 1895              	.L155:
 1896              	@ 262 "main.c" 1
 1897 0f24 0000A0E1 		nop
 1898              	@ 0 "" 2
 1899 0f28 013083E2 		add	r3, r3, #1
 1900 0f2c 020053E1 		cmp	r3, r2
 1901 0f30 FBFFFF1A 		bne	.L155
 1902              	.LBE90:
 1903              	.LBE89:
 1904              		.loc 1 691 0
 1905 0f34 EF3F11E5 		ldr	r3, [r1, #-4079]
 1906              	.LVL92:
 1907 0f38 103083E3 		orr	r3, r3, #16
 1908 0f3c EF3F01E5 		str	r3, [r1, #-4079]
 1909              	.L154:
 1910              		.loc 1 683 0
 1911 0f40 EB0F01E5 		str	r0, [r1, #-4075]
 1912 0f44 0030A0E3 		mov	r3, #0
 1913              	.LVL93:
 1914 0f48 F5FFFFEA 		b	.L155
 1915              	.LVL94:
 1916              	.L142:
 1917              		.loc 1 694 0
 1918 0f4c 58309FE5 		ldr	r3, .L171+12
 1919 0f50 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1920 0f54 000053E3 		cmp	r3, #0
 1921 0f58 44009FE5 		ldr	r0, .L171+4
 1922 0f5c 0200000A 		beq	.L156
 1923 0f60 000090E5 		ldr	r0, [r0, #0]
 1924 0f64 FEFFFFEB 		bl	quickClear
 1925 0f68 020000EA 		b	.L157
 1926              	.L156:
 1927              		.loc 1 695 0
 1928 0f6c 003090E5 		ldr	r3, [r0, #0]
 1929 0f70 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1930 0f74 FEFFFFEB 		bl	LCDClear
 1931              	.L157:
 1932              		.loc 1 696 0
 1933 0f78 24309FE5 		ldr	r3, .L171+4
 1934 0f7c 000093E5 		ldr	r0, [r3, #0]
 1935              	.L170:
 1936 0f80 FEFFFFEB 		bl	printMenu
 1937              	.LVL95:
 1938              	.L127:
 1939              		.loc 1 698 0
 1940 0f84 0020E0E3 		mvn	r2, #0
 1941 0f88 EF3F12E5 		ldr	r3, [r2, #-4079]
 1942 0f8c 103083E3 		orr	r3, r3, #16
 1943 0f90 EF3F02E5 		str	r3, [r2, #-4079]
 1944              		.loc 1 699 0
 1945 0f94 08D08DE2 		add	sp, sp, #8
 1946 0f98 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1947 0f9c 1EFF2FE1 		bx	lr
 1948              	.L172:
 1949              		.align	2
 1950              	.L171:
 1951 0fa0 A0252600 		.word	2500000
 1952 0fa4 7C040000 		.word	current_display
 1953 0fa8 74000000 		.word	file_manager
 1954 0fac 02000000 		.word	file_is_open
 1955 0fb0 14000000 		.word	current_song
 1956 0fb4 00000000 		.word	white
 1957 0fb8 00000000 		.word	black
 1958 0fbc 00000000 		.word	NotFound
 1959 0fc0 80969800 		.word	10000000
 1960 0fc4 008002E0 		.word	-536707072
 1961 0fc8 01000000 		.word	song_is_over
 1962 0fcc 51000000 		.word	current_song+61
 1963 0fd0 00C002E0 		.word	-536690688
 1964 0fd4 78020000 		.word	settings_menu
 1965 0fd8 00000000 		.word	volume_setting
 1966 0fdc 07000000 		.word	.LC2
 1967 0fe0 08000000 		.word	button_pressed
 1968 0fe4 60E31600 		.word	1500000
 1969 0fe8 00000000 		.word	radio_channel
 1970 0fec 40420F00 		.word	1000000
 1971 0ff0 75030000 		.word	885
 1972 0ff4 32040000 		.word	1074
 1973 0ff8 00000000 		.word	radio_enable
 1974 0ffc 04000000 		.word	.LC1
 1975 1000 00000000 		.word	.LC0
 1976              	.LFE16:
 1978              		.section	.rodata.str1.1
 1979              	.LC3:
 1980 000a 53442049 		.ascii	"SD Init Error\012\000"
 1980      6E697420 
 1980      4572726F 
 1980      720A00
 1981              	.LC4:
 1982 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 1982      70656E52 
 1982      6F6F7420 
 1982      4572726F 
 1982      720A00
 1983              		.text
 1984              		.align	2
 1985              		.global	bootUp
 1987              	bootUp:
 1988              	.LFB4:
 1989              		.loc 1 269 0
 1990              		@ Function supports interworking.
 1991              		@ args = 0, pretend = 0, frame = 0
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993 1004 04E02DE5 		str	lr, [sp, #-4]!
 1994              	.LCFI21:
 1995              		.loc 1 270 0
 1996 1008 B0019FE5 		ldr	r0, .L179
 1997 100c FEFFFFEB 		bl	rprintf_devopen
 1998              	.LBB91:
 1999              	.LBB92:
 2000              		.loc 1 262 0
 2001 1010 AC219FE5 		ldr	r2, .L179+4
 2002              	.LBE92:
 2003              	.LBE91:
 2004              		.loc 1 270 0
 2005 1014 0030A0E3 		mov	r3, #0
 2006              	.LVL96:
 2007              	.L174:
 2008              	.LBB94:
 2009              	.LBB93:
 2010              		.loc 1 262 0
 2011              	@ 262 "main.c" 1
 2012 1018 0000A0E1 		nop
 2013              	@ 0 "" 2
 2014 101c 013083E2 		add	r3, r3, #1
 2015 1020 020053E1 		cmp	r3, r2
 2016 1024 FBFFFF1A 		bne	.L174
 2017              	.LBE93:
 2018              	.LBE94:
 2019              		.loc 1 274 0
 2020 1028 FEFFFFEB 		bl	sd_raw_init
 2021              	.LVL97:
 2022 102c 000050E3 		cmp	r0, #0
 2023              		.loc 1 276 0
 2024 1030 90019F05 		ldreq	r0, .L179+8
 2025 1034 FEFFFF0B 		bleq	rprintf
 2026              	.L175:
 2027              		.loc 1 278 0
 2028 1038 FEFFFFEB 		bl	openroot
 2029 103c 000050E3 		cmp	r0, #0
 2030              		.loc 1 280 0
 2031 1040 84019F15 		ldrne	r0, .L179+12
 2032 1044 FEFFFF1B 		blne	rprintf
 2033              	.L176:
 2034              		.loc 1 285 0
 2035 1048 80219FE5 		ldr	r2, .L179+16
 2036 104c 083092E5 		ldr	r3, [r2, #8]
 2037 1050 013683E3 		orr	r3, r3, #1048576
 2038 1054 083082E5 		str	r3, [r2, #8]
 2039              		.loc 1 286 0
 2040 1058 083092E5 		ldr	r3, [r2, #8]
 2041 105c 0236C3E3 		bic	r3, r3, #2097152
 2042 1060 083082E5 		str	r3, [r2, #8]
 2043              		.loc 1 287 0
 2044 1064 68119FE5 		ldr	r1, .L179+20
 2045 1068 043091E5 		ldr	r3, [r1, #4]
 2046 106c 033B83E3 		orr	r3, r3, #3072
 2047 1070 043081E5 		str	r3, [r1, #4]
 2048              		.loc 1 288 0
 2049 1074 183092E5 		ldr	r3, [r2, #24]
 2050 1078 013483E3 		orr	r3, r3, #16777216
 2051 107c 033883E3 		orr	r3, r3, #196608
 2052 1080 183082E5 		str	r3, [r2, #24]
 2053              		.loc 1 291 0
 2054 1084 183092E5 		ldr	r3, [r2, #24]
 2055 1088 023483E3 		orr	r3, r3, #33554432
 2056 108c 183082E5 		str	r3, [r2, #24]
 2057              		.loc 1 292 0
 2058 1090 183092E5 		ldr	r3, [r2, #24]
 2059 1094 013283E3 		orr	r3, r3, #268435456
 2060 1098 183082E5 		str	r3, [r2, #24]
 2061              		.loc 1 295 0
 2062 109c 083092E5 		ldr	r3, [r2, #8]
 2063 10a0 803083E3 		orr	r3, r3, #128
 2064 10a4 083082E5 		str	r3, [r2, #8]
 2065              		.loc 1 298 0
 2066 10a8 083092E5 		ldr	r3, [r2, #8]
 2067 10ac 033B83E3 		orr	r3, r3, #3072
 2068 10b0 083082E5 		str	r3, [r2, #8]
 2069              		.loc 1 299 0
 2070 10b4 003091E5 		ldr	r3, [r1, #0]
 2071 10b8 CF3483E3 		orr	r3, r3, #-822083584
 2072 10bc 003081E5 		str	r3, [r1, #0]
 2073              		.loc 1 300 0
 2074 10c0 033BA0E3 		mov	r3, #3072
 2075 10c4 0C3082E5 		str	r3, [r2, #12]
 2076              		.loc 1 303 0
 2077 10c8 083092E5 		ldr	r3, [r2, #8]
 2078 10cc 033783E3 		orr	r3, r3, #786432
 2079 10d0 083082E5 		str	r3, [r2, #8]
 2080              		.loc 1 306 0
 2081 10d4 083092E5 		ldr	r3, [r2, #8]
 2082 10d8 073283E3 		orr	r3, r3, #1879048192
 2083 10dc 083082E5 		str	r3, [r2, #8]
 2084              		.loc 1 307 0
 2085 10e0 0232A0E3 		mov	r3, #536870912
 2086 10e4 043082E5 		str	r3, [r2, #4]
 2087              		.loc 1 308 0
 2088 10e8 033083E0 		add	r3, r3, r3
 2089 10ec 043082E5 		str	r3, [r2, #4]
 2090              		.loc 1 309 0
 2091 10f0 0D3283E2 		add	r3, r3, #-805306368
 2092 10f4 043082E5 		str	r3, [r2, #4]
 2093              		.loc 1 312 0
 2094 10f8 183092E5 		ldr	r3, [r2, #24]
 2095 10fc 0E36C3E3 		bic	r3, r3, #14680064
 2096 1100 183082E5 		str	r3, [r2, #24]
 2097              		.loc 1 314 0
 2098 1104 083092E5 		ldr	r3, [r2, #8]
 2099 1108 0235C3E3 		bic	r3, r3, #8388608
 2100 110c 083082E5 		str	r3, [r2, #8]
 2101              		.loc 1 317 0
 2102 1110 C0309FE5 		ldr	r3, .L179+24
 2103 1114 0120A0E3 		mov	r2, #1
 2104              		.loc 1 318 0
 2105 1118 0010E0E3 		mvn	r1, #0
 2106              		.loc 1 317 0
 2107 111c 002183E5 		str	r2, [r3, #256]
 2108              		.loc 1 318 0
 2109 1120 3030E0E3 		mvn	r3, #48
 2110 1124 F33F01E5 		str	r3, [r1, #-4083]
 2111              		.loc 1 319 0
 2112 1128 413083E2 		add	r3, r3, #65
 2113 112c EF3F01E5 		str	r3, [r1, #-4079]
 2114              		.loc 1 320 0
 2115 1130 153083E2 		add	r3, r3, #21
 2116 1134 FF3D01E5 		str	r3, [r1, #-3583]
 2117              		.loc 1 321 0
 2118 1138 9C309FE5 		ldr	r3, .L179+28
 2119 113c FF3E01E5 		str	r3, [r1, #-3839]
 2120              		.loc 1 322 0
 2121 1140 2430A0E3 		mov	r3, #36
 2122 1144 FB3D01E5 		str	r3, [r1, #-3579]
 2123              		.loc 1 323 0
 2124 1148 90309FE5 		ldr	r3, .L179+32
 2125              		.loc 1 326 0
 2126 114c 90009FE5 		ldr	r0, .L179+36
 2127              		.loc 1 323 0
 2128 1150 FB3E01E5 		str	r3, [r1, #-3835]
 2129              		.loc 1 326 0
 2130 1154 4B3FA0E3 		mov	r3, #300
 2131 1158 0C3080E5 		str	r3, [r0, #12]
 2132              		.loc 1 327 0
 2133 115c 043090E5 		ldr	r3, [r0, #4]
 2134 1160 013083E3 		orr	r3, r3, #1
 2135 1164 043080E5 		str	r3, [r0, #4]
 2136              		.loc 1 328 0
 2137 1168 00C0A0E3 		mov	ip, #0
 2138              		.loc 1 329 0
 2139 116c 0330A0E3 		mov	r3, #3
 2140              		.loc 1 328 0
 2141 1170 70C080E5 		str	ip, [r0, #112]
 2142              		.loc 1 333 0
 2143 1174 6C209FE5 		ldr	r2, .L179+40
 2144              		.loc 1 329 0
 2145 1178 143080E5 		str	r3, [r0, #20]
 2146              		.loc 1 330 0
 2147 117c FA3FA0E3 		mov	r3, #1000
 2148 1180 183080E5 		str	r3, [r0, #24]
 2149              		.loc 1 333 0
 2150 1184 323E43E2 		sub	r3, r3, #800
 2151 1188 0C3082E5 		str	r3, [r2, #12]
 2152              		.loc 1 334 0
 2153 118c 043092E5 		ldr	r3, [r2, #4]
 2154 1190 013083E3 		orr	r3, r3, #1
 2155 1194 043082E5 		str	r3, [r2, #4]
 2156              		.loc 1 339 0
 2157 1198 4C109FE5 		ldr	r1, .L179+44
 2158              		.loc 1 336 0
 2159 119c 0A3CA0E3 		mov	r3, #2560
 2160              		.loc 1 335 0
 2161 11a0 70C082E5 		str	ip, [r2, #112]
 2162              		.loc 1 336 0
 2163 11a4 283082E5 		str	r3, [r2, #40]
 2164              		.loc 1 339 0
 2165 11a8 273D43E2 		sub	r3, r3, #2496
 2166 11ac 0C3081E5 		str	r3, [r1, #12]
 2167              		.loc 1 340 0
 2168 11b0 2030A0E3 		mov	r3, #32
 2169 11b4 003081E5 		str	r3, [r1, #0]
 2170              		.loc 1 341 0
 2171 11b8 04E09DE4 		ldr	lr, [sp], #4
 2172 11bc 1EFF2FE1 		bx	lr
 2173              	.L180:
 2174              		.align	2
 2175              	.L179:
 2176 11c0 00000000 		.word	putc_serial0
 2177 11c4 A0860100 		.word	100000
 2178 11c8 0A000000 		.word	.LC3
 2179 11cc 19000000 		.word	.LC4
 2180 11d0 008002E0 		.word	-536707072
 2181 11d4 00C002E0 		.word	-536690688
 2182 11d8 00C01FE0 		.word	-534790144
 2183 11dc 00000000 		.word	timer1ISR
 2184 11e0 00000000 		.word	timer0ISR
 2185 11e4 004000E0 		.word	-536854528
 2186 11e8 008000E0 		.word	-536838144
 2187 11ec 000002E0 		.word	-536739840
 2188              	.LFE4:
 2190              		.align	2
 2192              	timer0ISR:
 2193              	.LFB6:
 2194              		.loc 1 362 0
 2195              		@ Function supports interworking.
 2196              		@ args = 0, pretend = 0, frame = 0
 2197              		@ frame_needed = 0, uses_anonymous_args = 0
 2198              	.LBB95:
 2199              	.LBB96:
 2200              		.loc 1 378 0
 2201 11f0 A8209FE5 		ldr	r2, .L192
 2202 11f4 103092E5 		ldr	r3, [r2, #16]
 2203 11f8 020513E3 		tst	r3, #8388608
 2204              	.LBE96:
 2205              	.LBE95:
 2206              		.loc 1 362 0
 2207 11fc 04E02DE5 		str	lr, [sp, #-4]!
 2208              	.LCFI22:
 2209              	.LBB98:
 2210              	.LBB97:
 2211              		.loc 1 378 0
 2212 1200 0220A003 		moveq	r2, #2
 2213 1204 0700000A 		beq	.L183
 2214              		.loc 1 379 0
 2215 1208 103092E5 		ldr	r3, [r2, #16]
 2216 120c 020613E3 		tst	r3, #2097152
 2217 1210 0120A003 		moveq	r2, #1
 2218 1214 0300000A 		beq	.L183
 2219              		.loc 1 380 0
 2220 1218 103092E5 		ldr	r3, [r2, #16]
 2221 121c 010513E3 		tst	r3, #4194304
 2222 1220 0320A003 		moveq	r2, #3
 2223 1224 0020A013 		movne	r2, #0
 2224              	.L183:
 2225              	.LBE97:
 2226              	.LBE98:
 2227              		.loc 1 363 0
 2228 1228 74309FE5 		ldr	r3, .L192+4
 2229 122c 0020C3E5 		strb	r2, [r3, #0]
 2230              		.loc 1 364 0
 2231 1230 FEFFFFEB 		bl	MMA_get_y
 2232              		.loc 1 365 0
 2233 1234 6C309FE5 		ldr	r3, .L192+8
 2234 1238 002093E5 		ldr	r2, [r3, #0]
 2235              		.loc 1 364 0
 2236 123c 68309FE5 		ldr	r3, .L192+12
 2237              		.loc 1 365 0
 2238 1240 AF0F52E3 		cmp	r2, #700
 2239              		.loc 1 364 0
 2240 1244 000083E5 		str	r0, [r3, #0]
 2241              		.loc 1 365 0
 2242 1248 010000AA 		bge	.L186
 2243 124c AF0F50E3 		cmp	r0, #700
 2244 1250 030000CA 		bgt	.L187
 2245              	.L186:
 2246 1254 AF0F52E3 		cmp	r2, #700
 2247 1258 030000DA 		ble	.L188
 2248 125c AF0F50E3 		cmp	r0, #700
 2249 1260 010000AA 		bge	.L188
 2250              	.L187:
 2251 1264 0120A0E3 		mov	r2, #1
 2252 1268 000000EA 		b	.L191
 2253              	.L188:
 2254              		.loc 1 366 0
 2255 126c 0020A0E3 		mov	r2, #0
 2256              	.L191:
 2257 1270 38309FE5 		ldr	r3, .L192+16
 2258 1274 0020C3E5 		strb	r2, [r3, #0]
 2259              		.loc 1 368 0
 2260 1278 34309FE5 		ldr	r3, .L192+20
 2261 127c FF20A0E3 		mov	r2, #255
 2262 1280 002083E5 		str	r2, [r3, #0]
 2263              		.loc 1 367 0
 2264 1284 1C309FE5 		ldr	r3, .L192+8
 2265              		.loc 1 369 0
 2266 1288 0020A0E3 		mov	r2, #0
 2267              		.loc 1 367 0
 2268 128c 000083E5 		str	r0, [r3, #0]
 2269              		.loc 1 369 0
 2270 1290 0030E0E3 		mvn	r3, #0
 2271 1294 CF2F03E5 		str	r2, [r3, #-4047]
 2272              		.loc 1 370 0
 2273 1298 04E09DE4 		ldr	lr, [sp], #4
 2274 129c 1EFF2FE1 		bx	lr
 2275              	.L193:
 2276              		.align	2
 2277              	.L192:
 2278 12a0 008002E0 		.word	-536707072
 2279 12a4 08000000 		.word	button_pressed
 2280 12a8 0C000000 		.word	prev_position
 2281 12ac 10000000 		.word	cur_position
 2282 12b0 09000000 		.word	update_screen
 2283 12b4 004000E0 		.word	-536854528
 2284              	.LFE6:
 2286              		.global	__divsi3
 2287              		.global	__modsi3
 2288              		.section	.rodata.str1.1
 2289              	.LC5:
 2290 002c 474F2047 		.ascii	"GO GO MP3!\000"
 2290      4F204D50 
 2290      332100
 2291              		.text
 2292              		.align	2
 2293              		.global	main
 2295              	main:
 2296              	.LFB2:
 2297              		.loc 1 94 0
 2298              		@ Function supports interworking.
 2299              		@ args = 0, pretend = 0, frame = 0
 2300              		@ frame_needed = 1, uses_anonymous_args = 0
 2301 12b8 0DC0A0E1 		mov	ip, sp
 2302              	.LCFI23:
 2303 12bc F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2304              	.LCFI24:
 2305 12c0 04B04CE2 		sub	fp, ip, #4
 2306              	.LCFI25:
 2307 12c4 08D04DE2 		sub	sp, sp, #8
 2308              	.LCFI26:
 2309              		.loc 1 104 0
 2310 12c8 FEFFFFEB 		bl	bootUp
 2311              		.loc 1 107 0
 2312 12cc FEFFFFEB 		bl	vs1002Config
 2313              		.loc 1 108 0
 2314 12d0 FEFFFFEB 		bl	vs1002Reset
 2315              		.loc 1 109 0
 2316 12d4 FEFFFFEB 		bl	vs1002Init
 2317              	.LBB99:
 2318              		.loc 1 110 0
 2319 12d8 3000A0E3 		mov	r0, #48
 2320 12dc FEFFFFEB 		bl	vs1002SetVolume
 2321 12e0 3000A0E3 		mov	r0, #48
 2322 12e4 FEFFFFEB 		bl	vs1002SetVolume
 2323 12e8 3000A0E3 		mov	r0, #48
 2324 12ec FEFFFFEB 		bl	vs1002SetVolume
 2325 12f0 3000A0E3 		mov	r0, #48
 2326 12f4 FEFFFFEB 		bl	vs1002SetVolume
 2327 12f8 3000A0E3 		mov	r0, #48
 2328 12fc FEFFFFEB 		bl	vs1002SetVolume
 2329              	.LBE99:
 2330              		.loc 1 111 0
 2331 1300 FEFFFFEB 		bl	vs1002Finish
 2332              		.loc 1 114 0
 2333 1304 FEFFFFEB 		bl	LCDInit
 2334              		.loc 1 115 0
 2335 1308 14359FE5 		ldr	r3, .L230
 2336 130c 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2337 1310 FEFFFFEB 		bl	LCDClear
 2338              		.loc 1 116 0
 2339 1314 FEFFFFEB 		bl	LCDPrintLogo
 2340              		.loc 1 119 0
 2341 1318 08059FE5 		ldr	r0, .L230+4
 2342 131c FEFFFFEB 		bl	initializeFMTransmitter
 2343              		.loc 1 122 0
 2344 1320 04259FE5 		ldr	r2, .L230+8
 2345 1324 003092E5 		ldr	r3, [r2, #0]
 2346 1328 153C83E3 		orr	r3, r3, #5376
 2347 132c 003082E5 		str	r3, [r2, #0]
 2348 1330 0050A0E3 		mov	r5, #0
 2349              	.LVL98:
 2350              	.L195:
 2351              		.loc 1 125 0
 2352 1334 0000A0E3 		mov	r0, #0
 2353 1338 FEFFFFEB 		bl	rootDirectory_files_stream
 2354 133c 006050E2 		subs	r6, r0, #0
 2355              		.loc 1 124 0
 2356 1340 015085E2 		add	r5, r5, #1
 2357              		.loc 1 125 0
 2358 1344 FAFFFF1A 		bne	.L195
 2359              		.loc 1 126 0
 2360 1348 063085E2 		add	r3, r5, #6
 2361 134c 0330C3E3 		bic	r3, r3, #3
 2362 1350 0DD063E0 		rsb	sp, r3, sp
 2363 1354 08708DE2 		add	r7, sp, #8
 2364              		.loc 1 127 0
 2365 1358 0700A0E1 		mov	r0, r7
 2366 135c 011085E2 		add	r1, r5, #1
 2367 1360 FEFFFFEB 		bl	rootDirectory_files
 2368              		.loc 1 128 0
 2369 1364 8032A0E1 		mov	r3, r0, asl #5
 2370 1368 043083E2 		add	r3, r3, #4
 2371 136c 0DD063E0 		rsb	sp, r3, sp
 2372              		.loc 1 127 0
 2373 1370 B8349FE5 		ldr	r3, .L230+12
 2374 1374 0040A0E1 		mov	r4, r0
 2375              	.LBB100:
 2376              		.loc 1 132 0
 2377 1378 0600A0E1 		mov	r0, r6
 2378              	.LVL99:
 2379              	.LBE100:
 2380              		.loc 1 127 0
 2381 137c 004083E5 		str	r4, [r3, #0]
 2382              		.loc 1 128 0
 2383 1380 08608DE2 		add	r6, sp, #8
 2384              	.LBB102:
 2385              		.loc 1 132 0
 2386 1384 00E0A0E1 		mov	lr, r0
 2387              	.LVL100:
 2388 1388 0080A0E1 		mov	r8, r0
 2389              	.LVL101:
 2390 138c 100000EA 		b	.L196
 2391              	.LVL102:
 2392              	.L202:
 2393 1390 0030A0E3 		mov	r3, #0
 2394              	.LBB101:
 2395              		.loc 1 142 0
 2396 1394 8EC2A0E1 		mov	ip, lr, asl #5
 2397              	.L201:
 2398              		.loc 1 134 0
 2399 1398 050050E1 		cmp	r0, r5
 2400              		.loc 1 142 0
 2401 139c 03208CE0 		add	r2, ip, r3
 2402 13a0 0280C687 		strhib	r8, [r6, r2]
 2403              		.loc 1 134 0
 2404 13a4 0600008A 		bhi	.L200
 2405              	.LVL103:
 2406              		.loc 1 135 0
 2407 13a8 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 2408 13ac 2C0051E3 		cmp	r1, #44
 2409              		.loc 1 136 0
 2410 13b0 0230A001 		moveq	r3, r2
 2411              		.loc 1 139 0
 2412 13b4 0210C617 		strneb	r1, [r6, r2]
 2413              		.loc 1 136 0
 2414 13b8 0380C607 		streqb	r8, [r6, r3]
 2415              		.loc 1 140 0
 2416 13bc 010080E2 		add	r0, r0, #1
 2417              		.loc 1 136 0
 2418 13c0 1F30A003 		moveq	r3, #31
 2419              	.LVL104:
 2420              	.L200:
 2421              		.loc 1 133 0
 2422 13c4 013083E2 		add	r3, r3, #1
 2423 13c8 200053E3 		cmp	r3, #32
 2424 13cc F1FFFF1A 		bne	.L201
 2425              	.LBE101:
 2426              		.loc 1 132 0
 2427 13d0 01E08EE2 		add	lr, lr, #1
 2428              	.LVL105:
 2429              	.L196:
 2430 13d4 04005EE1 		cmp	lr, r4
 2431 13d8 ECFFFFBA 		blt	.L202
 2432              	.LBE102:
 2433              		.loc 1 148 0
 2434 13dc 0400A0E1 		mov	r0, r4
 2435              	.LVL106:
 2436 13e0 0F10A0E3 		mov	r1, #15
 2437 13e4 FEFFFFEB 		bl	__divsi3
 2438              	.LVL107:
 2439              		.loc 1 149 0
 2440 13e8 40349FE5 		ldr	r3, .L230+12
 2441              		.loc 1 148 0
 2442 13ec FF4000E2 		and	r4, r0, #255
 2443 13f0 3C549FE5 		ldr	r5, .L230+16
 2444              	.LVL108:
 2445              		.loc 1 149 0
 2446 13f4 000093E5 		ldr	r0, [r3, #0]
 2447              		.loc 1 148 0
 2448 13f8 013044E2 		sub	r3, r4, #1
 2449 13fc 0530C5E5 		strb	r3, [r5, #5]
 2450              		.loc 1 149 0
 2451 1400 0F10A0E3 		mov	r1, #15
 2452 1404 FEFFFFEB 		bl	__modsi3
 2453              		.loc 1 152 0
 2454 1408 14349FE5 		ldr	r3, .L230
 2455 140c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2456              		.loc 1 153 0
 2457 1410 20349FE5 		ldr	r3, .L230+20
 2458              		.loc 1 149 0
 2459 1414 000050E3 		cmp	r0, #0
 2460 1418 0540C515 		strneb	r4, [r5, #5]
 2461              		.loc 1 153 0
 2462 141c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2463              		.loc 1 151 0
 2464 1420 0C449FE5 		ldr	r4, .L230+16
 2465 1424 0050A0E3 		mov	r5, #0
 2466              		.loc 1 153 0
 2467 1428 0430C4E5 		strb	r3, [r4, #4]
 2468              		.loc 1 156 0
 2469 142c 0130A0E3 		mov	r3, #1
 2470              		.loc 1 152 0
 2471 1430 0320C4E5 		strb	r2, [r4, #3]
 2472              		.loc 1 158 0
 2473 1434 0400A0E1 		mov	r0, r4
 2474 1438 0610A0E1 		mov	r1, r6
 2475              		.loc 1 156 0
 2476 143c 0030C4E5 		strb	r3, [r4, #0]
 2477              		.loc 1 151 0
 2478 1440 0250C4E5 		strb	r5, [r4, #2]
 2479              		.loc 1 155 0
 2480 1444 0650C4E5 		strb	r5, [r4, #6]
 2481              		.loc 1 157 0
 2482 1448 085084E5 		str	r5, [r4, #8]
 2483              		.loc 1 158 0
 2484 144c FEFFFFEB 		bl	getNewFiles
 2485              	.LBB103:
 2486              		.loc 1 159 0
 2487 1450 E4239FE5 		ldr	r2, .L230+24
 2488              	.L204:
 2489 1454 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 2490              	.LVL109:
 2491 1458 015085E2 		add	r5, r5, #1
 2492 145c 160055E3 		cmp	r5, #22
 2493 1460 EC31C4E5 		strb	r3, [r4, #492]
 2494 1464 014084E2 		add	r4, r4, #1
 2495 1468 F9FFFF1A 		bne	.L204
 2496              	.LBE103:
 2497              		.loc 1 162 0
 2498 146c CC039FE5 		ldr	r0, .L230+28
 2499 1470 FEFFFFEB 		bl	fillSettings
 2500              		.loc 1 166 0
 2501 1474 B0139FE5 		ldr	r1, .L230+8
 2502 1478 003091E5 		ldr	r3, [r1, #0]
 2503              		.loc 1 165 0
 2504 147c B0239FE5 		ldr	r2, .L230+16
 2505 1480 BC439FE5 		ldr	r4, .L230+32
 2506              		.loc 1 166 0
 2507 1484 FF3DC3E3 		bic	r3, r3, #16320
 2508 1488 3030C3E3 		bic	r3, r3, #48
 2509              		.loc 1 167 0
 2510 148c 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 2511              		.loc 1 165 0
 2512 1490 002084E5 		str	r2, [r4, #0]
 2513              		.loc 1 166 0
 2514 1494 003081E5 		str	r3, [r1, #0]
 2515              		.loc 1 167 0
 2516 1498 FEFFFFEB 		bl	LCDClear
 2517              		.loc 1 168 0
 2518 149c 000094E5 		ldr	r0, [r4, #0]
 2519 14a0 FEFFFFEB 		bl	printMenu
 2520              		.loc 1 171 0
 2521 14a4 003094E5 		ldr	r3, [r4, #0]
 2522 14a8 0010A0E3 		mov	r1, #0
 2523 14ac 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2524 14b0 00108DE5 		str	r1, [sp, #0]
 2525 14b4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2526 14b8 88039FE5 		ldr	r0, .L230+36
 2527 14bc 0230A0E3 		mov	r3, #2
 2528 14c0 04C08DE5 		str	ip, [sp, #4]
 2529 14c4 FEFFFFEB 		bl	LCDPrintString
 2530              		.loc 1 175 0
 2531 14c8 7C739FE5 		ldr	r7, .L230+40
 2532              		.loc 1 177 0
 2533 14cc 50939FE5 		ldr	r9, .L230
 2534              		.loc 1 187 0
 2535 14d0 78839FE5 		ldr	r8, .L230+44
 2536              	.LVL110:
 2537              	.LBB104:
 2538              	.LBB105:
 2539              		.loc 1 262 0
 2540 14d4 78A39FE5 		ldr	sl, .L230+48
 2541              	.L222:
 2542              	.LBE105:
 2543              	.LBE104:
 2544              		.loc 1 175 0
 2545 14d8 003097E5 		ldr	r3, [r7, #0]
 2546 14dc 020513E3 		tst	r3, #8388608
 2547 14e0 2100000A 		beq	.L205
 2548              		.loc 1 177 0
 2549 14e4 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 2550 14e8 FEFFFFEB 		bl	LCDClear
 2551              		.loc 1 178 0
 2552 14ec 0430A0E3 		mov	r3, #4
 2553 14f0 00308DE5 		str	r3, [sp, #0]
 2554 14f4 003094E5 		ldr	r3, [r4, #0]
 2555 14f8 38139FE5 		ldr	r1, .L230+20
 2556 14fc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2557 1500 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2558 1504 0730A0E3 		mov	r3, #7
 2559 1508 48039FE5 		ldr	r0, .L230+52
 2560 150c 0010A0E3 		mov	r1, #0
 2561 1510 04C08DE5 		str	ip, [sp, #4]
 2562 1514 FEFFFFEB 		bl	LCDPrintString
 2563 1518 0030A0E3 		mov	r3, #0
 2564              	.LVL111:
 2565              	.L206:
 2566              	.LBB107:
 2567              	.LBB108:
 2568              		.loc 1 262 0
 2569              	@ 262 "main.c" 1
 2570 151c 0000A0E1 		nop
 2571              	@ 0 "" 2
 2572 1520 34239FE5 		ldr	r2, .L230+56
 2573 1524 013083E2 		add	r3, r3, #1
 2574 1528 020053E1 		cmp	r3, r2
 2575 152c FAFFFF1A 		bne	.L206
 2576              	.LBE108:
 2577              	.LBE107:
 2578              		.loc 1 180 0
 2579 1530 3020A0E3 		mov	r2, #48
 2580 1534 0030E0E3 		mvn	r3, #0
 2581              	.LVL112:
 2582 1538 EB2F03E5 		str	r2, [r3, #-4075]
 2583              		.loc 1 181 0
 2584 153c FEFFFFEB 		bl	main_msc
 2585              	.LBB109:
 2586              	.LBB110:
 2587              		.loc 1 725 0
 2588 1540 0E22A0E3 		mov	r2, #-536870912
 2589 1544 003092E5 		ldr	r3, [r2, #0]
 2590 1548 033083E3 		orr	r3, r3, #3
 2591 154c 003082E5 		str	r3, [r2, #0]
 2592              		.loc 1 726 0
 2593 1550 AA10A0E3 		mov	r1, #170
 2594              		.loc 1 727 0
 2595 1554 5530A0E3 		mov	r3, #85
 2596              		.loc 1 726 0
 2597 1558 081082E5 		str	r1, [r2, #8]
 2598              		.loc 1 727 0
 2599 155c 083082E5 		str	r3, [r2, #8]
 2600              		.loc 1 729 0
 2601 1560 0030A0E3 		mov	r3, #0
 2602              		.loc 1 728 0
 2603 1564 081082E5 		str	r1, [r2, #8]
 2604              		.loc 1 729 0
 2605 1568 083082E5 		str	r3, [r2, #8]
 2606              	.L205:
 2607              	.LBE110:
 2608              	.LBE109:
 2609              		.loc 1 187 0
 2610 156c 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2611 1570 000053E3 		cmp	r3, #0
 2612 1574 4300001A 		bne	.L207
 2613 1578 E0329FE5 		ldr	r3, .L230+60
 2614 157c 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 2615              	.LVL113:
 2616 1580 000055E3 		cmp	r5, #0
 2617 1584 3F00001A 		bne	.L207
 2618              		.loc 1 189 0
 2619 1588 D4329FE5 		ldr	r3, .L230+64
 2620 158c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2621 1590 000053E3 		cmp	r3, #0
 2622 1594 3B00000A 		beq	.L207
 2623              		.loc 1 190 0
 2624 1598 2020A0E3 		mov	r2, #32
 2625 159c 0030E0E3 		mvn	r3, #0
 2626 15a0 EB2F03E5 		str	r2, [r3, #-4075]
 2627              		.loc 1 191 0
 2628 15a4 BC029FE5 		ldr	r0, .L230+68
 2629 15a8 FEFFFFEB 		bl	closeSong
 2630              		.loc 1 195 0
 2631 15ac 80129FE5 		ldr	r1, .L230+16
 2632              		.loc 1 192 0
 2633 15b0 B4329FE5 		ldr	r3, .L230+72
 2634              		.loc 1 195 0
 2635 15b4 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2636              		.loc 1 192 0
 2637 15b8 0050C3E5 		strb	r5, [r3, #0]
 2638              		.loc 1 195 0
 2639 15bc 0E0052E3 		cmp	r2, #14
 2640              		.loc 1 193 0
 2641 15c0 0232A0E3 		mov	r3, #536870912
 2642 15c4 043087E5 		str	r3, [r7, #4]
 2643              		.loc 1 196 0
 2644 15c8 01208292 		addls	r2, r2, #1
 2645              		.loc 1 197 0
 2646 15cc 08309195 		ldrls	r3, [r1, #8]
 2647              		.loc 1 196 0
 2648 15d0 0020C195 		strlsb	r2, [r1, #0]
 2649              		.loc 1 200 0
 2650 15d4 58C29FE5 		ldr	ip, .L230+16
 2651              		.loc 1 197 0
 2652 15d8 01308392 		addls	r3, r3, #1
 2653 15dc 08308195 		strls	r3, [r1, #8]
 2654              		.loc 1 200 0
 2655 15e0 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 2656 15e4 0F0053E3 		cmp	r3, #15
 2657 15e8 0C00001A 		bne	.L209
 2658 15ec 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 2659 15f0 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 2660 15f4 030052E1 		cmp	r2, r3
 2661 15f8 0800002A 		bcs	.L209
 2662              		.loc 1 203 0
 2663 15fc 013082E2 		add	r3, r2, #1
 2664              		.loc 1 201 0
 2665 1600 0120A0E3 		mov	r2, #1
 2666 1604 0020CCE5 		strb	r2, [ip, #0]
 2667              		.loc 1 202 0
 2668 1608 0020A0E3 		mov	r2, #0
 2669              		.loc 1 204 0
 2670 160c 0C00A0E1 		mov	r0, ip
 2671 1610 0610A0E1 		mov	r1, r6
 2672              		.loc 1 202 0
 2673 1614 08208CE5 		str	r2, [ip, #8]
 2674              		.loc 1 203 0
 2675 1618 0630CCE5 		strb	r3, [ip, #6]
 2676              		.loc 1 204 0
 2677 161c FEFFFFEB 		bl	getNewFiles
 2678              	.L209:
 2679              		.loc 1 207 0
 2680 1620 0C529FE5 		ldr	r5, .L230+16
 2681 1624 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2682 1628 833285E0 		add	r3, r5, r3, asl #5
 2683 162c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2684 1630 000053E3 		cmp	r3, #0
 2685 1634 1300000A 		beq	.L207
 2686              		.loc 1 208 0
 2687 1638 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 2688 163c FEFFFFEB 		bl	LCDClear
 2689              		.loc 1 209 0
 2690 1640 0500A0E1 		mov	r0, r5
 2691 1644 FEFFFFEB 		bl	printMenu
 2692              		.loc 1 210 0
 2693 1648 0510A0E1 		mov	r1, r5
 2694 164c 14029FE5 		ldr	r0, .L230+68
 2695 1650 FEFFFFEB 		bl	loadSongInfo
 2696 1654 10329FE5 		ldr	r3, .L230+72
 2697 1658 0000C3E5 		strb	r0, [r3, #0]
 2698              		.loc 1 211 0
 2699 165c FEFFFFEB 		bl	vs1002Config
 2700              		.loc 1 212 0
 2701 1660 0000A0E3 		mov	r0, #0
 2702 1664 021BA0E3 		mov	r1, #2048
 2703 1668 FEFFFFEB 		bl	vs1002SCIWrite
 2704              		.loc 1 213 0
 2705 166c FEFFFFEB 		bl	vs1002Finish
 2706              		.loc 1 214 0
 2707 1670 0232A0E3 		mov	r3, #536870912
 2708 1674 0C3087E5 		str	r3, [r7, #12]
 2709              		.loc 1 215 0
 2710 1678 0020E0E3 		mvn	r2, #0
 2711 167c EF3F12E5 		ldr	r3, [r2, #-4079]
 2712 1680 203083E3 		orr	r3, r3, #32
 2713 1684 EF3F02E5 		str	r3, [r2, #-4079]
 2714              	.LVL114:
 2715              	.L207:
 2716              		.loc 1 220 0
 2717 1688 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2718 168c 020053E3 		cmp	r3, #2
 2719 1690 0300001A 		bne	.L210
 2720 1694 000094E5 		ldr	r0, [r4, #0]
 2721 1698 0610A0E1 		mov	r1, r6
 2722 169c FEFFFFEB 		bl	handleUpButton
 2723 16a0 580000EA 		b	.L211
 2724              	.L210:
 2725              		.loc 1 221 0
 2726 16a4 010053E3 		cmp	r3, #1
 2727 16a8 0300001A 		bne	.L212
 2728 16ac 000094E5 		ldr	r0, [r4, #0]
 2729 16b0 0610A0E1 		mov	r1, r6
 2730 16b4 FEFFFFEB 		bl	handleDownButton
 2731 16b8 520000EA 		b	.L211
 2732              	.L212:
 2733              		.loc 1 222 0
 2734 16bc 030053E3 		cmp	r3, #3
 2735 16c0 0100001A 		bne	.L213
 2736 16c4 FEFFFFEB 		bl	handleMiddleButton
 2737 16c8 4E0000EA 		b	.L211
 2738              	.L213:
 2739              		.loc 1 224 0
 2740 16cc 8C319FE5 		ldr	r3, .L230+60
 2741 16d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2742 16d4 000053E3 		cmp	r3, #0
 2743 16d8 4A00000A 		beq	.L211
 2744              		.loc 1 225 0
 2745 16dc 0030E0E3 		mvn	r3, #0
 2746 16e0 1020A0E3 		mov	r2, #16
 2747 16e4 EB2F03E5 		str	r2, [r3, #-4075]
 2748 16e8 013083E2 		add	r3, r3, #1
 2749              	.LVL115:
 2750              	.L214:
 2751              	.LBB111:
 2752              	.LBB106:
 2753              		.loc 1 262 0
 2754              	@ 262 "main.c" 1
 2755 16ec 0000A0E1 		nop
 2756              	@ 0 "" 2
 2757 16f0 013083E2 		add	r3, r3, #1
 2758 16f4 0A0053E1 		cmp	r3, sl
 2759 16f8 FBFFFF1A 		bne	.L214
 2760              	.LBE106:
 2761              	.LBE111:
 2762              		.loc 1 227 0
 2763 16fc FEFFFFEB 		bl	MMA_get_y
 2764              	.LVL116:
 2765 1700 AF0F50E3 		cmp	r0, #700
 2766 1704 190000DA 		ble	.L215
 2767 1708 60319FE5 		ldr	r3, .L230+76
 2768 170c 003093E5 		ldr	r3, [r3, #0]
 2769 1710 AF0F53E3 		cmp	r3, #700
 2770 1714 150000DA 		ble	.L215
 2771              		.loc 1 228 0
 2772 1718 4C319FE5 		ldr	r3, .L230+72
 2773 171c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2774 1720 000053E3 		cmp	r3, #0
 2775 1724 0200000A 		beq	.L216
 2776 1728 000094E5 		ldr	r0, [r4, #0]
 2777 172c FEFFFFEB 		bl	quickClear
 2778 1730 020000EA 		b	.L217
 2779              	.L216:
 2780              		.loc 1 229 0
 2781 1734 003094E5 		ldr	r3, [r4, #0]
 2782 1738 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2783 173c FEFFFFEB 		bl	LCDClear
 2784              	.L217:
 2785              		.loc 1 233 0
 2786 1740 24319FE5 		ldr	r3, .L230+72
 2787 1744 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2788              		.loc 1 230 0
 2789 1748 F0209FE5 		ldr	r2, .L230+28
 2790              		.loc 1 233 0
 2791 174c 000053E3 		cmp	r3, #0
 2792              		.loc 1 231 0
 2793 1750 0130A0E3 		mov	r3, #1
 2794 1754 0230C2E5 		strb	r3, [r2, #2]
 2795              		.loc 1 232 0
 2796 1758 0232A0E3 		mov	r3, #536870912
 2797 175c 043087E5 		str	r3, [r7, #4]
 2798              		.loc 1 230 0
 2799 1760 002084E5 		str	r2, [r4, #0]
 2800              		.loc 1 233 0
 2801 1764 0F328312 		addne	r3, r3, #-268435456
 2802              		.loc 1 234 0
 2803 1768 0131A003 		moveq	r3, #1073741824
 2804 176c 1E0000EA 		b	.L229
 2805              	.L215:
 2806              		.loc 1 236 0
 2807 1770 FEFFFFEB 		bl	MMA_get_y
 2808 1774 F8209FE5 		ldr	r2, .L230+80
 2809 1778 020050E1 		cmp	r0, r2
 2810 177c 1B0000CA 		bgt	.L219
 2811 1780 E8309FE5 		ldr	r3, .L230+76
 2812 1784 003093E5 		ldr	r3, [r3, #0]
 2813 1788 020053E1 		cmp	r3, r2
 2814 178c 170000CA 		bgt	.L219
 2815              		.loc 1 237 0
 2816 1790 D4309FE5 		ldr	r3, .L230+72
 2817 1794 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2818 1798 000053E3 		cmp	r3, #0
 2819 179c 0200000A 		beq	.L220
 2820 17a0 000094E5 		ldr	r0, [r4, #0]
 2821 17a4 FEFFFFEB 		bl	quickClear
 2822 17a8 020000EA 		b	.L221
 2823              	.L220:
 2824              		.loc 1 238 0
 2825 17ac 003094E5 		ldr	r3, [r4, #0]
 2826 17b0 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2827 17b4 FEFFFFEB 		bl	LCDClear
 2828              	.L221:
 2829              		.loc 1 243 0
 2830 17b8 AC309FE5 		ldr	r3, .L230+72
 2831 17bc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2832              		.loc 1 239 0
 2833 17c0 6C209FE5 		ldr	r2, .L230+16
 2834              		.loc 1 243 0
 2835 17c4 000053E3 		cmp	r3, #0
 2836              		.loc 1 240 0
 2837 17c8 0030A0E3 		mov	r3, #0
 2838 17cc 0230C2E5 		strb	r3, [r2, #2]
 2839              		.loc 1 241 0
 2840 17d0 013283E2 		add	r3, r3, #268435456
 2841 17d4 043087E5 		str	r3, [r7, #4]
 2842              		.loc 1 242 0
 2843 17d8 033283E2 		add	r3, r3, #805306368
 2844 17dc 043087E5 		str	r3, [r7, #4]
 2845              		.loc 1 239 0
 2846 17e0 002084E5 		str	r2, [r4, #0]
 2847              		.loc 1 243 0
 2848 17e4 0100000A 		beq	.L219
 2849 17e8 0E3283E2 		add	r3, r3, #-536870912
 2850              	.L229:
 2851 17ec 0C3087E5 		str	r3, [r7, #12]
 2852              	.L219:
 2853              		.loc 1 245 0
 2854 17f0 000094E5 		ldr	r0, [r4, #0]
 2855 17f4 FEFFFFEB 		bl	printMenu
 2856              		.loc 1 246 0
 2857 17f8 0020E0E3 		mvn	r2, #0
 2858 17fc EF3F12E5 		ldr	r3, [r2, #-4079]
 2859 1800 103083E3 		orr	r3, r3, #16
 2860 1804 EF3F02E5 		str	r3, [r2, #-4079]
 2861              	.L211:
 2862              		.loc 1 249 0
 2863 1808 0030E0E3 		mvn	r3, #0
 2864 180c EF2F13E5 		ldr	r2, [r3, #-4079]
 2865 1810 102082E3 		orr	r2, r2, #16
 2866 1814 EF2F03E5 		str	r2, [r3, #-4079]
 2867              		.loc 1 248 0
 2868 1818 013083E2 		add	r3, r3, #1
 2869 181c 0030C8E5 		strb	r3, [r8, #0]
 2870 1820 2CFFFFEA 		b	.L222
 2871              	.L231:
 2872              		.align	2
 2873              	.L230:
 2874 1824 00000000 		.word	white
 2875 1828 CD030000 		.word	973
 2876 182c 00C002E0 		.word	-536690688
 2877 1830 04000000 		.word	NUMBEROFFILES
 2878 1834 74000000 		.word	file_manager
 2879 1838 00000000 		.word	black
 2880 183c 00000000 		.word	welcome
 2881 1840 78020000 		.word	settings_menu
 2882 1844 7C040000 		.word	current_display
 2883 1848 2C000000 		.word	.LC5
 2884 184c 008002E0 		.word	-536707072
 2885 1850 08000000 		.word	button_pressed
 2886 1854 C0C62D00 		.word	3000000
 2887 1858 00000000 		.word	USB
 2888 185c 80969800 		.word	10000000
 2889 1860 09000000 		.word	update_screen
 2890 1864 01000000 		.word	song_is_over
 2891 1868 14000000 		.word	current_song
 2892 186c 02000000 		.word	file_is_open
 2893 1870 0C000000 		.word	prev_position
 2894 1874 BB020000 		.word	699
 2895              	.LFE2:
 2897              		.global	volume_setting
 2898              		.data
 2899              		.align	2
 2902              	volume_setting:
 2903 0000 10000000 		.word	16
 2904              		.global	radio_channel
 2905              		.align	2
 2908              	radio_channel:
 2909 0004 CD030000 		.word	973
 2910              		.global	radio_enable
 2911              		.bss
 2914              	radio_enable:
 2915 0000 00       		.space	1
 2916              		.global	welcome
 2917              		.section	.rodata
 2920              	welcome:
 2921 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 2921      204C6973 
 2921      743A0A0D 
 2921      00
 2922 000d 00000000 		.space	9
 2922      00000000 
 2922      00
 2923              		.global	NotFound
 2926              	NotFound:
 2927 0016 46696C65 		.ascii	"File Not Found!"
 2927      204E6F74 
 2927      20466F75 
 2927      6E6421
 2928              		.global	USB
 2931              	USB:
 2932 0025 55534220 		.ascii	"USB Connected!"
 2932      436F6E6E 
 2932      65637465 
 2932      6421
 2933              		.global	newline
 2936              	newline:
 2937 0033 0A00     		.ascii	"\012\000"
 2938              		.global	volume
 2941              	volume:
 2942 0035 566F6C75 		.ascii	"Volume\000"
 2942      6D6500
 2943              		.global	contrast
 2946              	contrast:
 2947 003c 436F6E74 		.ascii	"Contrast\000"
 2947      72617374 
 2947      00
 2948              		.global	radio_power
 2951              	radio_power:
 2952 0045 52616469 		.ascii	"Radio Power"
 2952      6F20506F 
 2952      776572
 2953              		.global	radio_channel_menu
 2956              	radio_channel_menu:
 2957 0050 52616469 		.ascii	"Radio Channel"
 2957      6F204368 
 2957      616E6E65 
 2957      6C
 2958              		.global	settings
 2961              	settings:
 2962 005d 53657474 		.ascii	"Settings:\000"
 2962      696E6773 
 2962      3A00
 2963              		.bss
 2964              	song_is_over:
 2965 0001 00       		.space	1
 2966              	file_is_open:
 2967 0002 00       		.space	1
 2968 0003 00       		.align	2
 2969              	NUMBEROFFILES:
 2970 0004 00000000 		.space	4
 2971              	button_pressed:
 2972 0008 00       		.space	1
 2973              	update_screen:
 2974 0009 00       		.space	1
 2975 000a 0000     		.align	2
 2976              	prev_position:
 2977 000c 00000000 		.space	4
 2978              		.align	2
 2979              	cur_position:
 2980 0010 00000000 		.space	4
 2981              		.align	2
 2982              	current_song:
 2983 0014 00000000 		.space	96
 2983      00000000 
 2983      00000000 
 2983      00000000 
 2983      00000000 
 2984              		.align	2
 2985              	file_manager:
 2986 0074 00000000 		.space	516
 2986      00000000 
 2986      00000000 
 2986      00000000 
 2986      00000000 
 2987              		.align	2
 2988              	settings_menu:
 2989 0278 00000000 		.space	516
 2989      00000000 
 2989      00000000 
 2989      00000000 
 2989      00000000 
 2990              		.align	2
 2991              	current_display:
 2992 047c 00000000 		.space	4
 3422              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2969   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2941   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2951   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2956   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2961   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:363    .text:00000240 initializeFMTransmitter
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:442    .text:000002b0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:450    .text:000002bc sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:456    .text:000002bc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:500    .text:00000320 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2982   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2964   .bss:00000001 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:508    .text:00000330 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:514    .text:00000330 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:532    .text:00000358 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:538    .text:0000035c quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:546    .text:0000035c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:625    .text:0000041c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2936   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:633    .text:00000428 printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:641    .text:00000428 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:718    .text:000004f0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:724    .text:000004f4 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:732    .text:000004f4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:812    .text:000005cc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:818    .text:000005d0 handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:825    .text:000005d0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:882    .text:00000648 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2985   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:888    .text:0000064c handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:895    .text:0000064c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:950    .text:000006bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:960    .text:000006c0 disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:966    .text:000006c0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1033   .text:00000764 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2914   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2991   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1047   .text:00000778 enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1053   .text:00000778 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1121   .text:00000820 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1131   .text:00000834 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1138   .text:00000834 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1160   .text:00000868 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1166   .text:0000086c loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1173   .text:0000086c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1267   .text:00000940 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1277   .text:00000944 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1283   .text:00000944 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1951   .text:00000fa0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2966   .bss:00000002 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2926   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2988   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2902   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2971   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2908   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1987   .text:00001004 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:1993   .text:00001004 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2176   .text:000011c0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2192   .text:000011f0 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2201   .text:000011f0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2278   .text:000012a0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2976   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2979   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2973   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2295   .text:000012b8 main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2301   .text:000012b8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2874   .text:00001824 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2920   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2931   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2903   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2946   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccbd4ffO.s:2917   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
ns73Config
ns73Init
ns73SetChannel
vs1002Config
vs1002SendMusic
fat16_read_file
vs1002Finish
LCDPrintString
LCDSetRowColor
ns73Send
fat16_close_file
root_file_exists
root_open
fat16_file_size
LCDClear
vs1002SCIWrite
vs1002SetVolume
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
MMA_get_y
__divsi3
__modsi3
vs1002Reset
vs1002Init
LCDInit
LCDPrintLogo
rootDirectory_files_stream
rootDirectory_files
main_msc
