   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting=16, radio_channel=973;
  78:main.c        **** char radio_enable=OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars=0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        ****   //Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   
 106:main.c        ****   //Initialize the MP3 player with double clock speed and lower volume
 107:main.c        ****   vs1002Config();			//Configure MP3 I/O
 108:main.c        ****   vs1002Reset();			//Reset MP3 Player
 109:main.c        ****   vs1002Init();			//Double the clock speed and set to "New" mode
 110:main.c        ****   for(char i=0; i<5; i++)vs1002SetVolume(DECREASE);		//Lower the Volume!!
 111:main.c        ****   vs1002Finish();			//Restore the SPI I/O lines
 112:main.c        ****   
 113:main.c        ****   //Show the splash-screen (Sparkfun Logo)
 114:main.c        ****   LCDInit();				//Initialize the LCD
 115:main.c        ****   LCDClear(white);		//Clear the screen with white
 116:main.c        ****   LCDPrintLogo();			//Print the Sparkfun Logo
 117:main.c        ****   
 118:main.c        ****   // Initialize the FM Transmitter to 97.3
 119:main.c        ****   initializeRadio(973);
 120:main.c        **** 
 121:main.c        ****   // Find Out how many files are on the SD card
 122:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the
 123:main.c        ****   do{
 124:main.c        ****   	numberOfChars++;
 125:main.c        ****   }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filena
 126:main.c        ****   char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD c
 127:main.c        ****   NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 128:main.c        ****   FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 129:main.c        ****   
 130:main.c        ****   //Get all of the filenames into a Global Array
 131:main.c        ****   int chartracker=0;	
 132:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 133:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 134:main.c        ****   		if(chartracker <= numberOfChars){
 135:main.c        ****   			if(tempNames[chartracker]==','){
 136:main.c        ****   				Files[j].file_name[i] = '\0';
 137:main.c        ****   				i=MAXFILENAMELEN+1;
 138:main.c        ****   			}
 139:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 140:main.c        ****   			chartracker++;
 141:main.c        ****   		}
 142:main.c        ****   		else Files[j].file_name[i] ='\0';
 143:main.c        ****   	}	
 144:main.c        ****   }
 145:main.c        **** 	
 146:main.c        **** 	
 147:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 148:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 149:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 150:main.c        **** 	
 151:main.c        **** 	file_manager.orientation =ORIENTUP;
 152:main.c        **** 	file_manager.text_color=white;
 153:main.c        **** 	file_manager.back_color=black;
 154:main.c        **** 	
 155:main.c        **** 	file_manager.current_page=0;
 156:main.c        **** 	file_manager.current_row=1;
 157:main.c        **** 	file_manager.current_index=0;	
 158:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 159:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++)file_manager.title[i]=welcome[i];
 160:main.c        **** 	
 161:main.c        **** 	//Generate the settings menu and fill in default settings values
 162:main.c        **** 	fillSettings(&settings_menu);
 163:main.c        **** 	
 164:main.c        **** 	//Setup the menu
 165:main.c        **** 	current_display = &file_manager;
 166:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 167:main.c        **** 	LCDClear(current_display->back_color);
 168:main.c        **** 	printMenu(current_display);
 169:main.c        **** 	
 170:main.c        **** 	// TODO Floere remove
 171:main.c        **** 	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 172:main.c        **** 	
 173:main.c        **** 	while(1){
 174:main.c        **** 	  // USB connected!
 175:main.c        **** 		if(IOPIN0 & (1<<23))
 176:main.c        **** 		{
 177:main.c        **** 			LCDClear(white);
 178:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 179:main.c        ****       delay_ms(1000);
 180:main.c        **** 			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
 181:main.c        **** 			main_msc();
 182:main.c        **** 			reset();
 183:main.c        **** 		}
 184:main.c        **** 	
 185:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 186:main.c        **** 		//while(!button_pressed && !update_screen){
 187:main.c        **** 		if(!button_pressed && !update_screen){
 188:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 189:main.c        **** 			if(song_is_over){
 190:main.c        **** 				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
 191:main.c        **** 				closeSong(&current_song);	//Close the current song
 192:main.c        **** 				file_is_open=0;				//change master flag
 193:main.c        **** 				ledBlueOff();
 194:main.c        **** 				//Get the next song on the page by changing rows
 195:main.c        **** 				if(file_manager.current_row < NUMROWS){
 196:main.c        **** 					file_manager.current_row++;
 197:main.c        **** 					file_manager.current_index++;
 198:main.c        **** 				}
 199:main.c        **** 				//Go to the next page of songs if necessary
 200:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 201:main.c        **** 					file_manager.current_row=1;
 202:main.c        **** 					file_manager.current_index=0;
 203:main.c        **** 					file_manager.current_page++;
 204:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 205:main.c        **** 				}
 206:main.c        **** 				//If there is another song in the list, get it and play it!
 207:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 208:main.c        **** 					LCDClear(file_manager.back_color);
 209:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 210:main.c        **** 					file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 211:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 212:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 213:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 214:main.c        **** 					ledBlueOn();
 215:main.c        **** 					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
 216:main.c        **** 				}	
 217:main.c        **** 			}
 218:main.c        **** 		}
 219:main.c        **** 
 220:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 221:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 222:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 223:main.c        **** 		
 224:main.c        **** 		else if(update_screen){
 225:main.c        **** 			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
 226:main.c        **** 			delay_ms(300);
 227:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 228:main.c        **** 				if(file_is_open)quickClear(current_display);
 229:main.c        **** 				else LCDClear(current_display->back_color);
 230:main.c        **** 				current_display = &settings_menu;
 231:main.c        **** 				current_display->orientation=ORIENTLEFT;
 232:main.c        **** 				ledBlueOff();
 233:main.c        **** 				if(file_is_open)ledGrnOn();
 234:main.c        **** 				else ledRedOn();
 235:main.c        **** 			}
 236:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 237:main.c        **** 				if(file_is_open)quickClear(current_display);
 238:main.c        **** 				else LCDClear(current_display->back_color);
 239:main.c        **** 				current_display = &file_manager;
 240:main.c        **** 				current_display->orientation=ORIENTUP;
 241:main.c        **** 				ledGrnOff();
 242:main.c        **** 				ledRedOff();
 243:main.c        **** 				if(file_is_open)ledBlueOn();
 244:main.c        **** 			}
 245:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 246:main.c        **** 			VICIntEnable |= 0x10;						//Re-enable interrupts
 247:main.c        **** 		}
 248:main.c        **** 		button_pressed=NO_BUT;
 249:main.c        **** 		VICIntEnable |= 0x10;
 250:main.c        **** 	}
 251:main.c        ****     return 0;
 252:main.c        **** }
 253:main.c        **** 
 254:main.c        **** 
 255:main.c        **** // Usage: delay_ms(1000);
 256:main.c        **** // Inputs: int count: Number of milliseconds to delay
 257:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 258:main.c        **** void delay_ms(int count)
 259:main.c        **** {
  16              		.loc 1 259 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 260:main.c        ****     int i;
 261:main.c        ****     count *= 10000;
  22              		.loc 1 261 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 262:main.c        ****     for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 262 0
  31              	@ 262 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 263:main.c        **** }
  38              		.loc 1 263 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 264:main.c        **** 
 265:main.c        **** // Usage: bootUp();
 266:main.c        **** // Inputs: None
 267:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 268:main.c        **** void bootUp(void)
 269:main.c        **** {
 270:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 271:main.c        ****     delay_ms(10); //Delay for power to stablize
 272:main.c        **** 
 273:main.c        ****     //Bring up SD and FAT
 274:main.c        ****     if(!sd_raw_init())
 275:main.c        ****     {
 276:main.c        ****         rprintf("SD Init Error\n");
 277:main.c        ****     }
 278:main.c        ****     if(openroot())
 279:main.c        ****     {
 280:main.c        ****         rprintf("SD OpenRoot Error\n");
 281:main.c        ****     }
 282:main.c        ****      
 283:main.c        ****   //Initialize I/O Ports and Peripherals
 284:main.c        ****   //Setup the MP3 I/O Lines
 285:main.c        ****   IODIR0 |= MP3_XCS;
 286:main.c        ****   IODIR0 &= ~MP3_DREQ;
 287:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 288:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 289:main.c        ****   
 290:main.c        ****   //Setupt the FM Trans. Lines
 291:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 292:main.c        ****   IODIR1 |= FM_CS;
 293:main.c        ****   
 294:main.c        ****   //Setup the SD Card I/O Lines
 295:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 296:main.c        ****   
 297:main.c        ****   //Setup the Accelerometer I/O Lines
 298:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 299:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 300:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 301:main.c        ****   
 302:main.c        ****   //Setup the LCD I/O Lines
 303:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 304:main.c        ****   
 305:main.c        ****   //Setup the LED Lines										
 306:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
 307:main.c        ****   ledBlueOff();
 308:main.c        ****   ledRedOff();
 309:main.c        ****   ledGrnOff();
 310:main.c        ****   
 311:main.c        ****   //Setup the Buttons
 312:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 313:main.c        ****   
 314:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 315:main.c        ****   
 316:main.c        ****     //Setupt the Interrupts
 317:main.c        ****   VPBDIV=1;										// Set PCLK equal to the System Clock	
 318:main.c        ****   VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 319:main.c        ****     VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Ti
 320:main.c        ****     VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
 321:main.c        ****     VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
 322:main.c        ****     VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
 323:main.c        ****     VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
 324:main.c        ****   
 325:main.c        ****   //Configure Timer0
 326:main.c        ****   T0PR = 300;										//Divide Clock by 300 for 40kHz PS
 327:main.c        ****   T0TCR |=0X01;									//Enable the clock
 328:main.c        ****   T0CTCR=0;										  //Timer Mode
 329:main.c        ****   T0MCR=0x0003;									//Interrupt and Reset Timer on Match
 330:main.c        ****   T0MR0=1000;										//Interrupt on 40Hz
 331:main.c        ****   
 332:main.c        ****   //Configure Timer1
 333:main.c        ****   T1PR = 200;										//Divide Clock by 200 for ??kHz PS
 334:main.c        ****   T1TCR |=0X01;									//Enable the clock
 335:main.c        ****   T1CTCR=0;									  	//Timer Mode
 336:main.c        ****   T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
 337:main.c        ****   
 338:main.c        ****   //Setup the SPI Port
 339:main.c        ****   S0SPCCR = 64;                 // SCK = 1 MHz, counter > 8 and even
 340:main.c        ****   S0SPCR  = 0x20;               // Master, no interrupt enable, 8 bits	
 341:main.c        **** }
 342:main.c        **** 
 343:main.c        **** //  Usage: None (Automatically Called by FW)
 344:main.c        **** //  Inputs: None
 345:main.c        **** //  This function is a global interrupt called by a match on the Timer 0 match.
 346:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 347:main.c        **** //  WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 play
 348:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 349:main.c        **** //
 350:main.c        **** static void timer1ISR(void) {
 351:main.c        ****   sendMP3Data();
 352:main.c        ****   T1IR = 0xFF;      // Clear the timer 0 interrupt
 353:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 354:main.c        **** }
 355:main.c        **** 
 356:main.c        **** //Usage: None (Automatically Called by FW)
 357:main.c        **** //Inputs: None
 358:main.c        **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 359:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 360:main.c        **** // and setting the appropriate global flag if either has occured.
 361:main.c        **** static void timer0ISR(void)
 362:main.c        **** {
 363:main.c        **** 	button_pressed=getButton();			//Find out if a button has been pressed, and which one
 364:main.c        **** 	cur_position=MMA_get_y();			//Get the current position of the screen
 365:main.c        **** 	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=
 366:main.c        **** 	else update_screen=0;				//Determine if the accelerometer has been rotated
 367:main.c        **** 	prev_position=cur_position;			//Save the position value for later reference
 368:main.c        **** 	T0IR = 0xFF;						//Clear the timer interrupt
 369:main.c        **** 	VICVectAddr =0;						//Update the VIC priorities
 370:main.c        **** }
 371:main.c        **** 
 372:main.c        **** //Usage: button_value=getButton();
 373:main.c        **** //Inputs:  None
 374:main.c        **** //Outputs: None
 375:main.c        **** //Function returns the value of the button that is currently being pressed.
 376:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 377:main.c        **** char getButton(void){
  51              		.loc 1 377 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 378:main.c        ****   if(!(IOPIN1 & SW_UP)) return UP_BUT;
  56              		.loc 1 378 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 379:main.c        ****   else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
  62              		.loc 1 379 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 380:main.c        ****   else if(!(IOPIN1 & SW_MID)) return MID_BUT;
  67              		.loc 1 380 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 381:main.c        ****   return NO_BUT;
 382:main.c        **** }
  72              		.loc 1 382 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 383:main.c        **** 
 384:main.c        **** 
 385:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 385 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 386:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 386 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 385 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 386 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB36:
 103              	.LBB37:
 387:main.c        ****     for(int i =0; i<NUMROWS; i++){
 388:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 389:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 389 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE37:
 107              	.LBE36:
 108              		.loc 1 386 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB39:
 390:main.c        ****       }
 391:main.c        ****     }
 392:main.c        ****   }
 393:main.c        ****   else{
 394:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 394 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB41:
 395:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 396:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 396 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE41:
 125              	.LBE39:
 126              	.LBB42:
 127              	.LBB38:
 128              		.loc 1 389 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 388 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 389 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 388 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE38:
 141              		.loc 1 387 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE42:
 154              	.LBB43:
 155              	.LBB40:
 156              		.loc 1 396 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 395 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 396 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 395 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE40:
 169              		.loc 1 394 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE43:
 181              	.LBB44:
 397:main.c        ****       }
 398:main.c        ****     }
 399:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 399 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE44:
 188              	.LBB45:
 189              		.loc 1 394 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE45:
 198              	.LBB46:
 199              		.loc 1 399 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE46:
 400:main.c        ****   }
 401:main.c        **** }
 209              		.loc 1 401 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 402:main.c        **** 
 403:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 404:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 405:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 406:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 407:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 408:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 409:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 410:main.c        **** 	//Get the selected songs file name
 411:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 412:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 413:main.c        **** 	}
 414:main.c        **** 	//Get the selected songs display name
 415:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 416:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 417:main.c        **** 			song->name[i]='\0';
 418:main.c        **** 			i=MAXDISPLEN;
 419:main.c        **** 		}	
 420:main.c        **** 		else song->name[i]=song->file_name[i];
 421:main.c        **** 	}
 422:main.c        **** 	
 423:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 424:main.c        **** 	//Check to see if the selected song is valid
 425:main.c        **** 	if(!root_file_exists(song->file_name)){
 426:main.c        **** 		PINSEL0 &= 0xFFFFC00F;
 427:main.c        **** 		return 0;
 428:main.c        **** 	}	
 429:main.c        **** 	//Open the selected song
 430:main.c        **** 	else{
 431:main.c        **** 		song->handle=root_open(song->file_name);
 432:main.c        **** 		song->size=fat16_file_size(song->handle);
 433:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 434:main.c        **** 	}
 435:main.c        **** 	
 436:main.c        **** 	
 437:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 438:main.c        **** 	return 1;
 439:main.c        **** }
 440:main.c        **** 
 441:main.c        **** //Usage: CloseSong(&current_song);
 442:main.c        **** //Inputs: SongStruct *song: Pointer to a song structure to be closed
 443:main.c        **** //Function closes a song that is currently open.
 444:main.c        **** void closeSong(SongStruct *song){
 445:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 446:main.c        **** 	fat16_close_file(song->handle);
 447:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 448:main.c        **** }
 449:main.c        **** 
 450:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 451:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 452:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 453:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 454:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 455:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 456:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 457:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 458:main.c        **** 	if(direction == PREVIOUS){
 459:main.c        **** 		display->current_row--;
 460:main.c        **** 		display->current_index--;
 461:main.c        **** 	}
 462:main.c        **** 	else{
 463:main.c        **** 		display->current_row++;
 464:main.c        **** 		display->current_index++;		
 465:main.c        **** 	}
 466:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 467:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 468:main.c        **** }
 469:main.c        **** 
 470:main.c        **** //Usage: printMenu(&settings_menu);
 471:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 472:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 473:main.c        **** void printMenu(DisplayStruct *display){
 474:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 475:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 476:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 477:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 478:main.c        **** 	}
 479:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 480:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 481:main.c        **** }
 482:main.c        **** 
 483:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 484:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 485:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 486:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 487:main.c        **** //also loads the default display values along with the default settings values. 
 488:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 488 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB47:
 489:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 490:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 490 0
 233 014c A4909FE5 		ldr	r9, .L36
 491:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 491 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 492:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 492 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 493:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 493 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE47:
 241              		.loc 1 488 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB48:
 249              		.loc 1 490 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 491 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 492 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 493 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 489 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 490 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 491 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 492 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 493 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 489 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE48:
 275              	.LBB49:
 494:main.c        **** 	}
 495:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 496:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 496 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 495 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 496 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 495 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE49:
 497:main.c        **** 	}
 498:main.c        **** 	menu->text_color=white;
 289              		.loc 1 498 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 499:main.c        **** 	menu->back_color=black;
 294              		.loc 1 499 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 500:main.c        **** 	menu->current_row=1;
 297              		.loc 1 500 0
 298 01d0 0130A0E3 		mov	r3, #1
 501:main.c        **** 	menu->current_column=0;
 502:main.c        **** 	menu->current_index=0;
 503:main.c        **** 	menu->orientation = ORIENTLEFT;
 504:main.c        **** 	menu->current_page=0;
 505:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 505 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 499 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 503 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 500 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 501 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 502 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 504 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 506:main.c        **** }
 313              		.loc 1 506 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 507:main.c        **** 
 508:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 509:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 510:main.c        **** //			FileStruct *Files: List of files on the SD card
 511:main.c        **** //Outputs: None
 512:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 513:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 514:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 515:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 516:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 517:main.c        **** 	}
 518:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 519:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 520:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 521:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 522:main.c        **** 		//if(file_is_open)quickClear(display);
 523:main.c        **** 		//else LCDClear(display->back_color);
 524:main.c        **** 		quickClear(display);
 525:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 526:main.c        **** 		display->current_index=14;					//
 527:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 528:main.c        **** 		printMenu(display);							//	display previous page
 529:main.c        **** 	}
 530:main.c        **** }
 531:main.c        **** 
 532:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 533:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 534:main.c        **** //			FileStruct *Files: List of files on the SD card
 535:main.c        **** //Outputs: None
 536:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 537:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 538:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 539:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 540:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 541:main.c        **** 	}
 542:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 543:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 544:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 545:main.c        **** 		display->current_page+=1;		
 546:main.c        **** 		//if(file_is_open)quickClear(display);
 547:main.c        **** 		//else LCDClear(display->back_color);
 548:main.c        **** 		quickClear(display);
 549:main.c        **** 		display->current_row=1;
 550:main.c        **** 		display->current_index=0;
 551:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 552:main.c        **** 		printMenu(display);				
 553:main.c        **** 	}
 554:main.c        **** }
 555:main.c        **** 
 556:main.c        **** //Usage: handleMiddleButton();
 557:main.c        **** //Inputs: None
 558:main.c        **** //Outputs: None
 559:main.c        **** //Description: This function is called when the middle button is pressed.
 560:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 561:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 562:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 563:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 564:main.c        **** void handleMiddleButton(void){
 565:main.c        **** 	VICIntEnClr = 0x10;
 566:main.c        **** 	delay_ms(250);
 567:main.c        **** 	
 568:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 569:main.c        ****   if (current_display == &file_manager) {
 570:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 571:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 572:main.c        ****       if (!file_is_open) { //Make sure this is a valid file
 573:main.c        ****         LCDClear(white);
 574:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 575:main.c        ****         delay_ms(1000);
 576:main.c        ****         LCDClear(black);
 577:main.c        ****         printMenu(&file_manager);
 578:main.c        ****       } else {
 579:main.c        ****         startMP3Player();
 580:main.c        ****       }
 581:main.c        ****     } else { // If a file is already open then this acts like a stop button
 582:main.c        ****       stopMP3Player();
 583:main.c        ****     }
 584:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 585:main.c        ****     if (file_is_open) {
 586:main.c        ****       quickClear(current_display);
 587:main.c        ****     } else {
 588:main.c        ****       LCDClear(settings_menu.back_color);
 589:main.c        ****     }
 590:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 591:main.c        **** 		VICIntEnable|=0x10;
 592:main.c        **** 		if(current_display->current_row==VOLUMEMENU){
 593:main.c        **** 			VICIntEnable |= 0x10;
 594:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 595:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 596:main.c        **** 			while(button_pressed < MID_BUT){
 597:main.c        **** 				VICIntEnClr = 0x10;				//Stop Interrupts to
 598:main.c        **** 				delay_ms(150);					//	debounce the switch					
 599:main.c        **** 				if(button_pressed==UP_BUT){
 600:main.c        **** 					if(volume_setting < 32){
 601:main.c        **** 						volume_setting+=1;
 602:main.c        **** 						vs1002Config();				//Enable the MP3 Comm. Lines
 603:main.c        **** 						vs1002SetVolume(INCREASE);	//Lower the volume
 604:main.c        **** 						vs1002Finish();				//Disable MP3 Comm. Lines
 605:main.c        **** 					}	
 606:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 607:main.c        **** 					LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orien
 608:main.c        **** 				}
 609:main.c        **** 				else if(button_pressed==DWN_BUT){
 610:main.c        **** 					if(volume_setting >= 0){
 611:main.c        **** 						volume_setting--;
 612:main.c        **** 						vs1002Config();			//Enable the MP3 Comm. Lines
 613:main.c        **** 						vs1002SetVolume(DECREASE);	//Lower the volume
 614:main.c        **** 						vs1002Finish();			//Disable MP3 Comm. Lines
 615:main.c        **** 					}
 616:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 617:main.c        **** 					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 618:main.c        **** 				}
 619:main.c        **** 				VICIntEnable |= 0x10;
 620:main.c        **** 			}
 621:main.c        **** 		}	
 622:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 623:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 624:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 625:main.c        **** 			button_pressed=NO_BUT;
 626:main.c        **** 			VICIntEnable |= 0x10;
 627:main.c        **** 			while(button_pressed < MID_BUT){
 628:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 629:main.c        **** 				delay_ms(100);		//	debounce the switch					
 630:main.c        **** 				if(button_pressed==UP_BUT){
 631:main.c        **** 					//Increase Radio Channel
 632:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 633:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 634:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 635:main.c        **** 				}
 636:main.c        **** 				else if(button_pressed==DWN_BUT){
 637:main.c        **** 					//Decrease Radio Channel
 638:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 639:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 640:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 641:main.c        **** 				}
 642:main.c        **** 				ns73SetChannel(radio_channel);
 643:main.c        **** 				VICIntEnable |= 0x10;
 644:main.c        **** 			}
 645:main.c        **** 			IOCLR1 |= FM_CS;				//Select the FM transmitter
 646:main.c        **** 			delay_ms(100);
 647:main.c        **** 			ns73Config();					//Configigure the FM Trans. I/O
 648:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 649:main.c        **** 			IOSET1 |= FM_CS;				//Unselect the FM transmitter
 650:main.c        **** 		}
 651:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 652:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 653:main.c        **** 			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orient
 654:main.c        **** 			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 655:main.c        **** 			button_pressed=NO_BUT;
 656:main.c        **** 			VICIntEnable |= 0x10;
 657:main.c        **** 			while(button_pressed < MID_BUT){
 658:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 659:main.c        **** 				delay_ms(100);		//	debounce the switch					
 660:main.c        **** 				if(button_pressed==UP_BUT){
 661:main.c        ****           enableRadio();
 662:main.c        **** 				}
 663:main.c        **** 				else if(button_pressed==DWN_BUT){
 664:main.c        ****           disableRadio();
 665:main.c        **** 				}
 666:main.c        **** 				VICIntEnable |= 0x10;
 667:main.c        **** 			}
 668:main.c        **** 		}
 669:main.c        **** 		if(file_is_open)quickClear(current_display);
 670:main.c        **** 		else LCDClear(current_display->back_color);
 671:main.c        **** 		printMenu(current_display);
 672:main.c        **** 	}
 673:main.c        **** 	VICIntEnable |= 0x10;
 674:main.c        **** }
 675:main.c        **** 
 676:main.c        **** //  Usage: quickClear(currentDisplay);
 677:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 678:main.c        **** //  Outputs: None
 679:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 680:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 681:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 682:main.c        **** //               good to use while an MP3 is playing.
 683:main.c        **** //
 684:main.c        **** void quickClear(DisplayStruct *display){
 685:main.c        ****   PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 686:main.c        ****   //If we're on the first page of the menu, we also need to clear the title.
 687:main.c        ****   if (display->current_page==0) {
 688:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 689:main.c        ****   }
 690:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 691:main.c        ****   for (int j=0; j<NUMROWS; j++) {
 692:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 693:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 694:main.c        ****   }
 695:main.c        **** }
 696:main.c        **** 
 697:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 698:main.c        **** //
 699:main.c        **** void reset(void) {
 332              		.loc 1 699 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 700:main.c        ****     WDMOD |= 3;
 337              		.loc 1 700 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 701:main.c        ****     WDFEED = 0xAA;
 342              		.loc 1 701 0
 343 0220 AA10A0E3 		mov	r1, #170
 702:main.c        ****     WDFEED = 0x55;
 344              		.loc 1 702 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 701 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 702 0
 349 022c 083082E5 		str	r3, [r2, #8]
 703:main.c        ****     WDFEED = 0xAA;
 704:main.c        ****     WDFEED = 0x00;
 350              		.loc 1 704 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 703 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 704 0
 355 0238 083082E5 		str	r3, [r2, #8]
 705:main.c        **** }
 356              		.loc 1 705 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	sendMP3Data
 363              	sendMP3Data:
 364              	.LFB23:
 706:main.c        **** 
 707:main.c        **** // Flöre refactors here!
 708:main.c        **** 
 709:main.c        **** // initializes the FM transmitter to a given frequency.
 710:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 711:main.c        **** //
 712:main.c        **** void initializeRadio(int frequency) {
 713:main.c        ****   IOCLR1 |= FM_CS;      //Select SPI for FM Transmitter
 714:main.c        ****   delay_ms(900);
 715:main.c        ****   
 716:main.c        ****   ns73Config();         //Configigure the FM Trans. I/O
 717:main.c        ****   ns73Init();           //Setup the Default Register Values
 718:main.c        ****   ns73SetChannel(frequency);  //Transmit to 97.3 FM
 719:main.c        ****   
 720:main.c        ****   IOSET1 |= FM_CS;      //Remove FM Transmitter from SPI bus
 721:main.c        ****   delay_ms(100);
 722:main.c        **** }
 723:main.c        **** 
 724:main.c        **** // Enables the radio.
 725:main.c        **** //
 726:main.c        **** void enableRadio(void) {
 727:main.c        ****   radio_enable = ON;
 728:main.c        ****   
 729:main.c        ****   // graphics
 730:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 731:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 732:main.c        ****   
 733:main.c        ****   // send data
 734:main.c        ****   IOCLR1 |= FM_CS;        //Select the FM transmitter
 735:main.c        ****   delay_ms(100);
 736:main.c        ****   ns73Config();           //Configure the FM Trans. I/O
 737:main.c        ****   ns73Send(R0, PE | AG);  //Power up the radio
 738:main.c        ****   IOSET1 |= FM_CS;        //Unselect the FM transmitter
 739:main.c        **** }
 740:main.c        **** 
 741:main.c        **** // Disables the radio.
 742:main.c        **** //
 743:main.c        **** void disableRadio(void) {
 744:main.c        ****   radio_enable=OFF;
 745:main.c        ****   
 746:main.c        ****   // graphics
 747:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 748:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 749:main.c        ****   
 750:main.c        ****   // send data
 751:main.c        ****   IOCLR1 |= FM_CS;      //Select the FM transmitter
 752:main.c        ****   delay_ms(100);
 753:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 754:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 755:main.c        ****   IOSET1 |= FM_CS;      //Unselect the FM transmitter
 756:main.c        **** }
 757:main.c        **** 
 758:main.c        **** // Start playing.
 759:main.c        **** //
 760:main.c        **** void startMP3Player(void) {
 761:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 762:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 763:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 764:main.c        ****   ledBlueOn();
 765:main.c        ****   sendMP3Data();                        // Send first song data
 766:main.c        ****   PINSEL1 |= 0x00000C00;
 767:main.c        ****   VICIntEnable |= 0x20;                 // Enable Timer 1 Interrupts(This is the "Song Sending" int
 768:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 769:main.c        **** }
 770:main.c        **** 
 771:main.c        **** // Sends a piece of mp3 data from the current song.
 772:main.c        **** //
 773:main.c        **** void sendMP3Data(void) {
 365              		.loc 1 773 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0240 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 370              	.LCFI2:
 774:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 371              		.loc 1 774 0
 372 0244 FEFFFFEB 		bl	vs1002Config
 775:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 373              		.loc 1 775 0
 374 0248 54809FE5 		ldr	r8, .L46
 776:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 777:main.c        ****     // Buffer more data if available
 778:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) { song_is_over
 375              		.loc 1 778 0
 376 024c 54709FE5 		ldr	r7, .L46+4
 377 0250 54409FE5 		ldr	r4, .L46+8
 779:main.c        ****     else song_is_over = 0;                                // If there's no more data available, set
 378              		.loc 1 779 0
 379 0254 0060A0E3 		mov	r6, #0
 380              		.loc 1 778 0
 381 0258 0150A0E3 		mov	r5, #1
 382 025c 080000EA 		b	.L45
 383              	.L43:
 384              		.loc 1 776 0
 385 0260 FEFFFFEB 		bl	vs1002SendMusic
 386              		.loc 1 778 0
 387 0264 340097E5 		ldr	r0, [r7, #52]
 388 0268 40109FE5 		ldr	r1, .L46+12
 389 026c 2020A0E3 		mov	r2, #32
 390 0270 FEFFFFEB 		bl	fat16_read_file
 391 0274 0008A0E1 		mov	r0, r0, asl #16
 392 0278 000050E3 		cmp	r0, #0
 393 027c 0050C4D5 		strleb	r5, [r4, #0]
 394              		.loc 1 779 0
 395 0280 0060C4C5 		strgtb	r6, [r4, #0]
 396              	.L45:
 397              		.loc 1 775 0
 398 0284 003098E5 		ldr	r3, [r8, #0]
 399 0288 020613E3 		tst	r3, #2097152
 400              		.loc 1 776 0
 401 028c 1C009FE5 		ldr	r0, .L46+12
 402 0290 2010A0E3 		mov	r1, #32
 403              		.loc 1 775 0
 404 0294 F1FFFF1A 		bne	.L43
 780:main.c        ****   }
 781:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 405              		.loc 1 781 0
 406 0298 FEFFFFEB 		bl	vs1002Finish
 782:main.c        **** }
 407              		.loc 1 782 0
 408 029c F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 409 02a0 1EFF2FE1 		bx	lr
 410              	.L47:
 411              		.align	2
 412              	.L46:
 413 02a4 008002E0 		.word	-536707072
 414 02a8 14000000 		.word	current_song
 415 02ac 02000000 		.word	song_is_over
 416 02b0 51000000 		.word	current_song+61
 417              	.LFE23:
 419              		.align	2
 420              		.global	startMP3Player
 422              	startMP3Player:
 423              	.LFB22:
 424              		.loc 1 760 0
 425              		@ Function supports interworking.
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428 02b4 10402DE9 		stmfd	sp!, {r4, lr}
 429              	.LCFI3:
 430              		.loc 1 761 0
 431 02b8 FEFFFFEB 		bl	vs1002Config
 432              		.loc 1 764 0
 433 02bc 50409FE5 		ldr	r4, .L50
 434              		.loc 1 762 0
 435 02c0 0000A0E3 		mov	r0, #0
 436 02c4 021BA0E3 		mov	r1, #2048
 437 02c8 FEFFFFEB 		bl	vs1002SCIWrite
 438              		.loc 1 763 0
 439 02cc FEFFFFEB 		bl	vs1002Finish
 440              		.loc 1 764 0
 441 02d0 0232A0E3 		mov	r3, #536870912
 442 02d4 0C3084E5 		str	r3, [r4, #12]
 443              		.loc 1 765 0
 444 02d8 FEFFFFEB 		bl	sendMP3Data
 445              		.loc 1 766 0
 446 02dc 34209FE5 		ldr	r2, .L50+4
 447 02e0 043092E5 		ldr	r3, [r2, #4]
 448 02e4 033B83E3 		orr	r3, r3, #3072
 449 02e8 043082E5 		str	r3, [r2, #4]
 450              		.loc 1 767 0
 451 02ec 0020E0E3 		mvn	r2, #0
 452 02f0 EF3F12E5 		ldr	r3, [r2, #-4079]
 453 02f4 203083E3 		orr	r3, r3, #32
 454 02f8 EF3F02E5 		str	r3, [r2, #-4079]
 455              		.loc 1 768 0
 456 02fc 083094E5 		ldr	r3, [r4, #8]
 457 0300 033783E3 		orr	r3, r3, #786432
 458 0304 503083E3 		orr	r3, r3, #80
 459 0308 083084E5 		str	r3, [r4, #8]
 460              		.loc 1 769 0
 461 030c 1040BDE8 		ldmfd	sp!, {r4, lr}
 462 0310 1EFF2FE1 		bx	lr
 463              	.L51:
 464              		.align	2
 465              	.L50:
 466 0314 008002E0 		.word	-536707072
 467 0318 00C002E0 		.word	-536690688
 468              	.LFE22:
 470              		.align	2
 472              	timer1ISR:
 473              	.LFB5:
 474              		.loc 1 350 0
 475              		@ Function supports interworking.
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478 031c 04E02DE5 		str	lr, [sp, #-4]!
 479              	.LCFI4:
 480              		.loc 1 351 0
 481 0320 FEFFFFEB 		bl	sendMP3Data
 482              		.loc 1 352 0
 483 0324 18309FE5 		ldr	r3, .L54
 484 0328 FF20A0E3 		mov	r2, #255
 485 032c 002083E5 		str	r2, [r3, #0]
 486              		.loc 1 353 0
 487 0330 0020A0E3 		mov	r2, #0
 488 0334 0030E0E3 		mvn	r3, #0
 489 0338 CF2F03E5 		str	r2, [r3, #-4047]
 490              		.loc 1 354 0
 491 033c 04E09DE4 		ldr	lr, [sp], #4
 492 0340 1EFF2FE1 		bx	lr
 493              	.L55:
 494              		.align	2
 495              	.L54:
 496 0344 008000E0 		.word	-536838144
 497              	.LFE5:
 499              		.align	2
 500              		.global	quickClear
 502              	quickClear:
 503              	.LFB17:
 504              		.loc 1 684 0
 505              		@ Function supports interworking.
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              	.LVL22:
 509              		.loc 1 685 0
 510 0348 B8209FE5 		ldr	r2, .L61
 511 034c 003092E5 		ldr	r3, [r2, #0]
 512              		.loc 1 684 0
 513 0350 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 514              	.LCFI5:
 515              		.loc 1 685 0
 516 0354 FF3DC3E3 		bic	r3, r3, #16320
 517 0358 3030C3E3 		bic	r3, r3, #48
 518 035c 003082E5 		str	r3, [r2, #0]
 519              		.loc 1 687 0
 520 0360 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 521 0364 00005EE3 		cmp	lr, #0
 522              		.loc 1 684 0
 523 0368 08D04DE2 		sub	sp, sp, #8
 524              	.LCFI6:
 525              		.loc 1 684 0
 526 036c 0050A0E1 		mov	r5, r0
 527              		.loc 1 687 0
 528 0370 0700001A 		bne	.L57
 529              	.LVL23:
 530              		.loc 1 688 0
 531 0374 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 532 0378 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 533 037c 0E10A0E1 		mov	r1, lr
 534 0380 7B0F80E2 		add	r0, r0, #492
 535 0384 0E30A0E1 		mov	r3, lr
 536 0388 04C08DE5 		str	ip, [sp, #4]
 537 038c 00E08DE5 		str	lr, [sp, #0]
 538 0390 FEFFFFEB 		bl	LCDPrintString
 539              	.LVL24:
 540              	.L57:
 541              		.loc 1 690 0
 542 0394 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 543 0398 0010A0E3 		mov	r1, #0
 544 039c 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 545 03a0 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 546 03a4 FEFFFFEB 		bl	LCDSetRowColor
 547 03a8 0040A0E3 		mov	r4, #0
 548              	.LVL25:
 549              	.LBB50:
 550              		.loc 1 693 0
 551 03ac 58709FE5 		ldr	r7, .L61+4
 552              		.loc 1 692 0
 553 03b0 0460A0E1 		mov	r6, r4
 554              	.L58:
 555 03b4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 556 03b8 840285E0 		add	r0, r5, r4, asl #5
 557              	.LBE50:
 558              		.loc 1 690 0
 559 03bc 014084E2 		add	r4, r4, #1
 560              	.LVL26:
 561              	.LBB51:
 562              		.loc 1 692 0
 563 03c0 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 564 03c4 0C0080E2 		add	r0, r0, #12
 565 03c8 0610A0E1 		mov	r1, r6
 566 03cc 0430A0E1 		mov	r3, r4
 567 03d0 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 568 03d4 FEFFFFEB 		bl	LCDPrintString
 569              		.loc 1 693 0
 570 03d8 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 571 03dc 2C009FE5 		ldr	r0, .L61+8
 572 03e0 0610A0E1 		mov	r1, r6
 573 03e4 0430A0E1 		mov	r3, r4
 574 03e8 00608DE5 		str	r6, [sp, #0]
 575 03ec 04608DE5 		str	r6, [sp, #4]
 576 03f0 FEFFFFEB 		bl	LCDPrintString
 577              		.loc 1 691 0
 578 03f4 0F0054E3 		cmp	r4, #15
 579              	.LVL27:
 580 03f8 EDFFFF1A 		bne	.L58
 581              	.LBE51:
 582              		.loc 1 695 0
 583 03fc 08D08DE2 		add	sp, sp, #8
 584 0400 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 585 0404 1EFF2FE1 		bx	lr
 586              	.L62:
 587              		.align	2
 588              	.L61:
 589 0408 00C002E0 		.word	-536690688
 590 040c 00000000 		.word	black
 591 0410 00000000 		.word	newline
 592              	.LFE17:
 594              		.align	2
 595              		.global	printMenu
 597              	printMenu:
 598              	.LFB12:
 599              		.loc 1 473 0
 600              		@ Function supports interworking.
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              	.LVL28:
 604              		.loc 1 474 0
 605 0414 C0209FE5 		ldr	r2, .L68
 606 0418 003092E5 		ldr	r3, [r2, #0]
 607              		.loc 1 473 0
 608 041c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 609              	.LCFI7:
 610              		.loc 1 474 0
 611 0420 FF3DC3E3 		bic	r3, r3, #16320
 612 0424 3030C3E3 		bic	r3, r3, #48
 613 0428 003082E5 		str	r3, [r2, #0]
 614              		.loc 1 475 0
 615 042c 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 616 0430 00005EE3 		cmp	lr, #0
 617              		.loc 1 473 0
 618 0434 08D04DE2 		sub	sp, sp, #8
 619              	.LCFI8:
 620              		.loc 1 473 0
 621 0438 0050A0E1 		mov	r5, r0
 622              		.loc 1 475 0
 623 043c 0700001A 		bne	.L64
 624              	.LVL29:
 625 0440 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 626 0444 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 627 0448 0E10A0E1 		mov	r1, lr
 628 044c 7B0F80E2 		add	r0, r0, #492
 629 0450 0E30A0E1 		mov	r3, lr
 630 0454 04C08DE5 		str	ip, [sp, #4]
 631 0458 00E08DE5 		str	lr, [sp, #0]
 632 045c FEFFFFEB 		bl	LCDPrintString
 633              	.LVL30:
 634              	.L64:
 635 0460 0030A0E3 		mov	r3, #0
 636              	.LVL31:
 637              	.LBB52:
 638              		.loc 1 477 0
 639 0464 0360A0E1 		mov	r6, r3
 640              	.L65:
 641 0468 014083E2 		add	r4, r3, #1
 642 046c 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 643 0470 830285E0 		add	r0, r5, r3, asl #5
 644 0474 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 645 0478 0430A0E1 		mov	r3, r4
 646              	.LVL32:
 647 047c 0C0080E2 		add	r0, r0, #12
 648 0480 0610A0E1 		mov	r1, r6
 649 0484 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 650 0488 FEFFFFEB 		bl	LCDPrintString
 651              		.loc 1 476 0
 652 048c 0F0054E3 		cmp	r4, #15
 653              	.LVL33:
 654 0490 0430A0E1 		mov	r3, r4
 655              	.LVL34:
 656 0494 F3FFFF1A 		bne	.L65
 657              	.LBE52:
 658              		.loc 1 479 0
 659 0498 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 660 049c 0610A0E1 		mov	r1, r6
 661 04a0 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 662 04a4 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 663              	.LVL35:
 664 04a8 FEFFFFEB 		bl	LCDSetRowColor
 665              		.loc 1 480 0
 666 04ac 080095E5 		ldr	r0, [r5, #8]
 667 04b0 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 668 04b4 800285E0 		add	r0, r5, r0, asl #5
 669 04b8 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 670 04bc 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 671 04c0 0C0080E2 		add	r0, r0, #12
 672 04c4 0610A0E1 		mov	r1, r6
 673 04c8 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 674 04cc FEFFFFEB 		bl	LCDPrintString
 675              		.loc 1 481 0
 676 04d0 08D08DE2 		add	sp, sp, #8
 677 04d4 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 678 04d8 1EFF2FE1 		bx	lr
 679              	.L69:
 680              		.align	2
 681              	.L68:
 682 04dc 00C002E0 		.word	-536690688
 683              	.LFE12:
 685              		.align	2
 686              		.global	highlightRow
 688              	highlightRow:
 689              	.LFB11:
 690              		.loc 1 454 0
 691              		@ Function supports interworking.
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              	.LVL36:
 695              		.loc 1 455 0
 696 04e0 D0209FE5 		ldr	r2, .L75
 697 04e4 003092E5 		ldr	r3, [r2, #0]
 698              		.loc 1 454 0
 699 04e8 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 700              	.LCFI9:
 701              		.loc 1 455 0
 702 04ec FF3DC3E3 		bic	r3, r3, #16320
 703 04f0 3030C3E3 		bic	r3, r3, #48
 704 04f4 003082E5 		str	r3, [r2, #0]
 705              		.loc 1 454 0
 706 04f8 0060A0E1 		mov	r6, r0
 707 04fc 08D04DE2 		sub	sp, sp, #8
 708              	.LCFI10:
 709              		.loc 1 456 0
 710 0500 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 711 0504 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 712              		.loc 1 454 0
 713 0508 0140A0E1 		mov	r4, r1
 714              		.loc 1 456 0
 715 050c 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 716              	.LVL37:
 717 0510 0010A0E3 		mov	r1, #0
 718              	.LVL38:
 719 0514 FEFFFFEB 		bl	LCDSetRowColor
 720              		.loc 1 457 0
 721 0518 080096E5 		ldr	r0, [r6, #8]
 722 051c 00C0A0E3 		mov	ip, #0
 723 0520 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 724 0524 800286E0 		add	r0, r6, r0, asl #5
 725 0528 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 726 052c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 727 0530 0C10A0E1 		mov	r1, ip
 728 0534 0C0080E2 		add	r0, r0, #12
 729 0538 00C08DE5 		str	ip, [sp, #0]
 730              		.loc 1 454 0
 731 053c FF4004E2 		and	r4, r4, #255
 732              	.LVL39:
 733              		.loc 1 457 0
 734 0540 04508DE5 		str	r5, [sp, #4]
 735 0544 FEFFFFEB 		bl	LCDPrintString
 736 0548 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 737              		.loc 1 458 0
 738 054c 010054E3 		cmp	r4, #1
 739 0550 082096E5 		ldr	r2, [r6, #8]
 740              		.loc 1 459 0
 741 0554 01304302 		subeq	r3, r3, #1
 742              		.loc 1 463 0
 743 0558 01308312 		addne	r3, r3, #1
 744 055c 0030C6E5 		strb	r3, [r6, #0]
 745              		.loc 1 460 0
 746 0560 01204202 		subeq	r2, r2, #1
 747              		.loc 1 464 0
 748 0564 01208212 		addne	r2, r2, #1
 749 0568 082086E5 		str	r2, [r6, #8]
 750              		.loc 1 466 0
 751 056c 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 752 0570 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 753 0574 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 754 0578 0010A0E3 		mov	r1, #0
 755 057c FEFFFFEB 		bl	LCDSetRowColor
 756              		.loc 1 467 0
 757 0580 080096E5 		ldr	r0, [r6, #8]
 758 0584 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 759              	.LVL40:
 760 0588 00C0A0E3 		mov	ip, #0
 761 058c 800286E0 		add	r0, r6, r0, asl #5
 762 0590 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 763 0594 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 764 0598 0C0080E2 		add	r0, r0, #12
 765 059c 0C10A0E1 		mov	r1, ip
 766 05a0 04408DE5 		str	r4, [sp, #4]
 767 05a4 00C08DE5 		str	ip, [sp, #0]
 768 05a8 FEFFFFEB 		bl	LCDPrintString
 769              		.loc 1 468 0
 770 05ac 08D08DE2 		add	sp, sp, #8
 771 05b0 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 772 05b4 1EFF2FE1 		bx	lr
 773              	.L76:
 774              		.align	2
 775              	.L75:
 776 05b8 00C002E0 		.word	-536690688
 777              	.LFE11:
 779              		.align	2
 780              		.global	handleDownButton
 782              	handleDownButton:
 783              	.LFB15:
 784              		.loc 1 538 0
 785              		@ Function supports interworking.
 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              	.LVL41:
 789 05bc 30402DE9 		stmfd	sp!, {r4, r5, lr}
 790              	.LCFI11:
 791              		.loc 1 539 0
 792 05c0 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 793 05c4 0E0053E3 		cmp	r3, #14
 794              		.loc 1 538 0
 795 05c8 0040A0E1 		mov	r4, r0
 796 05cc 0150A0E1 		mov	r5, r1
 797              		.loc 1 539 0
 798 05d0 0200008A 		bhi	.L78
 799              	.LVL42:
 800              		.loc 1 540 0
 801 05d4 0010A0E3 		mov	r1, #0
 802              		.loc 1 554 0
 803 05d8 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 804              		.loc 1 540 0
 805 05dc FEFFFFEA 		b	highlightRow
 806              	.LVL43:
 807              	.L78:
 808              		.loc 1 543 0
 809 05e0 0F0053E3 		cmp	r3, #15
 810 05e4 1000001A 		bne	.L80
 811 05e8 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 812 05ec 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 813 05f0 020053E1 		cmp	r3, r2
 814 05f4 0C00009A 		bls	.L80
 815              	.LVL44:
 816              		.loc 1 545 0
 817 05f8 013082E2 		add	r3, r2, #1
 818 05fc 0630C0E5 		strb	r3, [r0, #6]
 819              		.loc 1 548 0
 820 0600 FEFFFFEB 		bl	quickClear
 821              	.LVL45:
 822              		.loc 1 549 0
 823 0604 0130A0E3 		mov	r3, #1
 824 0608 0030C4E5 		strb	r3, [r4, #0]
 825              		.loc 1 550 0
 826 060c 0030A0E3 		mov	r3, #0
 827 0610 083084E5 		str	r3, [r4, #8]
 828              		.loc 1 551 0
 829 0614 0510A0E1 		mov	r1, r5
 830 0618 14009FE5 		ldr	r0, .L81
 831 061c FEFFFFEB 		bl	getNewFiles
 832              		.loc 1 552 0
 833 0620 0400A0E1 		mov	r0, r4
 834              		.loc 1 554 0
 835 0624 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 836              		.loc 1 552 0
 837 0628 FEFFFFEA 		b	printMenu
 838              	.LVL46:
 839              	.L80:
 840              		.loc 1 554 0
 841 062c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 842 0630 1EFF2FE1 		bx	lr
 843              	.L82:
 844              		.align	2
 845              	.L81:
 846 0634 74000000 		.word	file_manager
 847              	.LFE15:
 849              		.align	2
 850              		.global	handleUpButton
 852              	handleUpButton:
 853              	.LFB14:
 854              		.loc 1 514 0
 855              		@ Function supports interworking.
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              	.LVL47:
 859 0638 30402DE9 		stmfd	sp!, {r4, r5, lr}
 860              	.LCFI12:
 861              		.loc 1 515 0
 862 063c 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 863 0640 010053E3 		cmp	r3, #1
 864              		.loc 1 514 0
 865 0644 0040A0E1 		mov	r4, r0
 866 0648 0150A0E1 		mov	r5, r1
 867              		.loc 1 515 0
 868 064c 0200009A 		bls	.L84
 869              	.LVL48:
 870              		.loc 1 516 0
 871 0650 0110A0E3 		mov	r1, #1
 872              		.loc 1 530 0
 873 0654 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 874              		.loc 1 516 0
 875 0658 FEFFFFEA 		b	highlightRow
 876              	.LVL49:
 877              	.L84:
 878              		.loc 1 519 0
 879 065c 0F00001A 		bne	.L86
 880 0660 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 881 0664 000053E3 		cmp	r3, #0
 882 0668 0C00000A 		beq	.L86
 883              	.LVL50:
 884              		.loc 1 521 0
 885 066c 013043E2 		sub	r3, r3, #1
 886 0670 0630C0E5 		strb	r3, [r0, #6]
 887              		.loc 1 524 0
 888 0674 FEFFFFEB 		bl	quickClear
 889              	.LVL51:
 890              		.loc 1 525 0
 891 0678 0F30A0E3 		mov	r3, #15
 892 067c 0030C4E5 		strb	r3, [r4, #0]
 893              		.loc 1 526 0
 894 0680 0E30A0E3 		mov	r3, #14
 895 0684 083084E5 		str	r3, [r4, #8]
 896              		.loc 1 527 0
 897 0688 0510A0E1 		mov	r1, r5
 898 068c 14009FE5 		ldr	r0, .L87
 899 0690 FEFFFFEB 		bl	getNewFiles
 900              		.loc 1 528 0
 901 0694 0400A0E1 		mov	r0, r4
 902              		.loc 1 530 0
 903 0698 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 904              		.loc 1 528 0
 905 069c FEFFFFEA 		b	printMenu
 906              	.LVL52:
 907              	.L86:
 908              		.loc 1 530 0
 909 06a0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 910 06a4 1EFF2FE1 		bx	lr
 911              	.L88:
 912              		.align	2
 913              	.L87:
 914 06a8 74000000 		.word	file_manager
 915              	.LFE14:
 917              		.section	.rodata.str1.1,"aMS",%progbits,1
 918              	.LC0:
 919 0000 4F666600 		.ascii	"Off\000"
 920              		.text
 921              		.align	2
 922              		.global	disableRadio
 924              	disableRadio:
 925              	.LFB21:
 926              		.loc 1 743 0
 927              		@ Function supports interworking.
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930 06ac 30402DE9 		stmfd	sp!, {r4, r5, lr}
 931              	.LCFI13:
 932              		.loc 1 744 0
 933 06b0 98309FE5 		ldr	r3, .L93
 934              		.loc 1 747 0
 935 06b4 98509FE5 		ldr	r5, .L93+4
 936              		.loc 1 744 0
 937 06b8 0040A0E3 		mov	r4, #0
 938 06bc 0040C3E5 		strb	r4, [r3, #0]
 939              		.loc 1 747 0
 940 06c0 002095E5 		ldr	r2, [r5, #0]
 941              		.loc 1 743 0
 942 06c4 08D04DE2 		sub	sp, sp, #8
 943              	.LCFI14:
 944              		.loc 1 747 0
 945 06c8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 946 06cc 0200A0E3 		mov	r0, #2
 947 06d0 0410A0E1 		mov	r1, r4
 948 06d4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 949 06d8 FEFFFFEB 		bl	LCDSetRowColor
 950              		.loc 1 748 0
 951 06dc 003095E5 		ldr	r3, [r5, #0]
 952 06e0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 953 06e4 00408DE5 		str	r4, [sp, #0]
 954 06e8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 955 06ec 64009FE5 		ldr	r0, .L93+8
 956 06f0 0230A0E3 		mov	r3, #2
 957 06f4 0410A0E1 		mov	r1, r4
 958 06f8 04C08DE5 		str	ip, [sp, #4]
 959 06fc FEFFFFEB 		bl	LCDPrintString
 960              		.loc 1 751 0
 961 0700 54209FE5 		ldr	r2, .L93+12
 962 0704 1C3092E5 		ldr	r3, [r2, #28]
 963 0708 013283E3 		orr	r3, r3, #268435456
 964 070c 1C3082E5 		str	r3, [r2, #28]
 965              	.LBB53:
 966              	.LBB54:
 967              		.loc 1 262 0
 968 0710 48309FE5 		ldr	r3, .L93+16
 969              	.L90:
 970              	@ 262 "main.c" 1
 971 0714 0000A0E1 		nop
 972              	@ 0 "" 2
 973 0718 014084E2 		add	r4, r4, #1
 974              	.LVL53:
 975 071c 030054E1 		cmp	r4, r3
 976 0720 FBFFFF1A 		bne	.L90
 977              	.LBE54:
 978              	.LBE53:
 979              		.loc 1 753 0
 980 0724 FEFFFFEB 		bl	ns73Config
 981              		.loc 1 754 0
 982 0728 0000A0E3 		mov	r0, #0
 983 072c 0410A0E3 		mov	r1, #4
 984 0730 FEFFFFEB 		bl	ns73Send
 985              		.loc 1 755 0
 986 0734 20209FE5 		ldr	r2, .L93+12
 987 0738 143092E5 		ldr	r3, [r2, #20]
 988 073c 013283E3 		orr	r3, r3, #268435456
 989 0740 143082E5 		str	r3, [r2, #20]
 990              		.loc 1 756 0
 991 0744 08D08DE2 		add	sp, sp, #8
 992 0748 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 993 074c 1EFF2FE1 		bx	lr
 994              	.L94:
 995              		.align	2
 996              	.L93:
 997 0750 00000000 		.word	radio_enable
 998 0754 7C040000 		.word	current_display
 999 0758 00000000 		.word	.LC0
 1000 075c 008002E0 		.word	-536707072
 1001 0760 40420F00 		.word	1000000
 1002              	.LFE21:
 1004              		.section	.rodata.str1.1
 1005              	.LC1:
 1006 0004 4F6E00   		.ascii	"On\000"
 1007              		.text
 1008              		.align	2
 1009              		.global	enableRadio
 1011              	enableRadio:
 1012              	.LFB20:
 1013              		.loc 1 726 0
 1014              		@ Function supports interworking.
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017 0764 10402DE9 		stmfd	sp!, {r4, lr}
 1018              	.LCFI15:
 1019              		.loc 1 727 0
 1020 0768 9C309FE5 		ldr	r3, .L99
 1021              		.loc 1 730 0
 1022 076c 9C409FE5 		ldr	r4, .L99+4
 1023              		.loc 1 727 0
 1024 0770 0120A0E3 		mov	r2, #1
 1025 0774 0020C3E5 		strb	r2, [r3, #0]
 1026              		.loc 1 730 0
 1027 0778 002094E5 		ldr	r2, [r4, #0]
 1028              		.loc 1 726 0
 1029 077c 08D04DE2 		sub	sp, sp, #8
 1030              	.LCFI16:
 1031              		.loc 1 730 0
 1032 0780 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1033 0784 0200A0E3 		mov	r0, #2
 1034 0788 0010A0E3 		mov	r1, #0
 1035 078c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1036 0790 FEFFFFEB 		bl	LCDSetRowColor
 1037              		.loc 1 731 0
 1038 0794 003094E5 		ldr	r3, [r4, #0]
 1039 0798 0040A0E3 		mov	r4, #0
 1040 079c 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1041 07a0 00408DE5 		str	r4, [sp, #0]
 1042 07a4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1043 07a8 64009FE5 		ldr	r0, .L99+8
 1044 07ac 0230A0E3 		mov	r3, #2
 1045 07b0 0410A0E1 		mov	r1, r4
 1046 07b4 04C08DE5 		str	ip, [sp, #4]
 1047 07b8 FEFFFFEB 		bl	LCDPrintString
 1048              		.loc 1 734 0
 1049 07bc 54209FE5 		ldr	r2, .L99+12
 1050 07c0 1C3092E5 		ldr	r3, [r2, #28]
 1051 07c4 013283E3 		orr	r3, r3, #268435456
 1052 07c8 1C3082E5 		str	r3, [r2, #28]
 1053              	.LBB55:
 1054              	.LBB56:
 1055              		.loc 1 262 0
 1056 07cc 48309FE5 		ldr	r3, .L99+16
 1057              	.L96:
 1058              	@ 262 "main.c" 1
 1059 07d0 0000A0E1 		nop
 1060              	@ 0 "" 2
 1061 07d4 014084E2 		add	r4, r4, #1
 1062              	.LVL54:
 1063 07d8 030054E1 		cmp	r4, r3
 1064 07dc FBFFFF1A 		bne	.L96
 1065              	.LBE56:
 1066              	.LBE55:
 1067              		.loc 1 736 0
 1068 07e0 FEFFFFEB 		bl	ns73Config
 1069              		.loc 1 737 0
 1070 07e4 0000A0E3 		mov	r0, #0
 1071 07e8 8110A0E3 		mov	r1, #129
 1072 07ec FEFFFFEB 		bl	ns73Send
 1073              		.loc 1 738 0
 1074 07f0 20209FE5 		ldr	r2, .L99+12
 1075 07f4 143092E5 		ldr	r3, [r2, #20]
 1076 07f8 013283E3 		orr	r3, r3, #268435456
 1077 07fc 143082E5 		str	r3, [r2, #20]
 1078              		.loc 1 739 0
 1079 0800 08D08DE2 		add	sp, sp, #8
 1080 0804 1040BDE8 		ldmfd	sp!, {r4, lr}
 1081 0808 1EFF2FE1 		bx	lr
 1082              	.L100:
 1083              		.align	2
 1084              	.L99:
 1085 080c 00000000 		.word	radio_enable
 1086 0810 7C040000 		.word	current_display
 1087 0814 04000000 		.word	.LC1
 1088 0818 008002E0 		.word	-536707072
 1089 081c 40420F00 		.word	1000000
 1090              	.LFE20:
 1092              		.align	2
 1093              		.global	initializeRadio
 1095              	initializeRadio:
 1096              	.LFB19:
 1097              		.loc 1 712 0
 1098              		@ Function supports interworking.
 1099              		@ args = 0, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101              	.LVL55:
 1102              		.loc 1 713 0
 1103 0820 68209FE5 		ldr	r2, .L107
 1104 0824 1C3092E5 		ldr	r3, [r2, #28]
 1105 0828 013283E3 		orr	r3, r3, #268435456
 1106 082c 1C3082E5 		str	r3, [r2, #28]
 1107              	.LBB57:
 1108              	.LBB58:
 1109              		.loc 1 262 0
 1110 0830 5C209FE5 		ldr	r2, .L107+4
 1111              	.LBE58:
 1112              	.LBE57:
 1113              		.loc 1 712 0
 1114 0834 10402DE9 		stmfd	sp!, {r4, lr}
 1115              	.LCFI17:
 1116              		.loc 1 713 0
 1117 0838 0030A0E3 		mov	r3, #0
 1118              	.LVL56:
 1119              		.loc 1 712 0
 1120 083c 0040A0E1 		mov	r4, r0
 1121              	.LVL57:
 1122              	.L102:
 1123              	.LBB60:
 1124              	.LBB59:
 1125              		.loc 1 262 0
 1126              	@ 262 "main.c" 1
 1127 0840 0000A0E1 		nop
 1128              	@ 0 "" 2
 1129 0844 013083E2 		add	r3, r3, #1
 1130 0848 020053E1 		cmp	r3, r2
 1131 084c FBFFFF1A 		bne	.L102
 1132              	.LBE59:
 1133              	.LBE60:
 1134              		.loc 1 716 0
 1135 0850 FEFFFFEB 		bl	ns73Config
 1136              	.LVL58:
 1137              		.loc 1 717 0
 1138 0854 FEFFFFEB 		bl	ns73Init
 1139              		.loc 1 718 0
 1140 0858 0400A0E1 		mov	r0, r4
 1141 085c FEFFFFEB 		bl	ns73SetChannel
 1142              		.loc 1 720 0
 1143 0860 28209FE5 		ldr	r2, .L107
 1144 0864 143092E5 		ldr	r3, [r2, #20]
 1145 0868 013283E3 		orr	r3, r3, #268435456
 1146 086c 143082E5 		str	r3, [r2, #20]
 1147              	.LBB61:
 1148              	.LBB62:
 1149              		.loc 1 262 0
 1150 0870 20209FE5 		ldr	r2, .L107+8
 1151              	.LBE62:
 1152              	.LBE61:
 1153              		.loc 1 720 0
 1154 0874 0030A0E3 		mov	r3, #0
 1155              	.LVL59:
 1156              	.L103:
 1157              	.LBB64:
 1158              	.LBB63:
 1159              		.loc 1 262 0
 1160              	@ 262 "main.c" 1
 1161 0878 0000A0E1 		nop
 1162              	@ 0 "" 2
 1163 087c 013083E2 		add	r3, r3, #1
 1164 0880 020053E1 		cmp	r3, r2
 1165 0884 FBFFFF1A 		bne	.L103
 1166              	.LBE63:
 1167              	.LBE64:
 1168              		.loc 1 722 0
 1169 0888 1040BDE8 		ldmfd	sp!, {r4, lr}
 1170 088c 1EFF2FE1 		bx	lr
 1171              	.L108:
 1172              		.align	2
 1173              	.L107:
 1174 0890 008002E0 		.word	-536707072
 1175 0894 40548900 		.word	9000000
 1176 0898 40420F00 		.word	1000000
 1177              	.LFE19:
 1179              		.align	2
 1180              		.global	closeSong
 1182              	closeSong:
 1183              	.LFB10:
 1184              		.loc 1 444 0
 1185              		@ Function supports interworking.
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              	.LVL60:
 1189 089c 10402DE9 		stmfd	sp!, {r4, lr}
 1190              	.LCFI18:
 1191              		.loc 1 445 0
 1192 08a0 28409FE5 		ldr	r4, .L111
 1193 08a4 003094E5 		ldr	r3, [r4, #0]
 1194 08a8 153C83E3 		orr	r3, r3, #5376
 1195 08ac 003084E5 		str	r3, [r4, #0]
 1196              		.loc 1 446 0
 1197 08b0 340090E5 		ldr	r0, [r0, #52]
 1198              	.LVL61:
 1199 08b4 FEFFFFEB 		bl	fat16_close_file
 1200              		.loc 1 447 0
 1201 08b8 003094E5 		ldr	r3, [r4, #0]
 1202 08bc FF3DC3E3 		bic	r3, r3, #16320
 1203 08c0 3030C3E3 		bic	r3, r3, #48
 1204 08c4 003084E5 		str	r3, [r4, #0]
 1205              		.loc 1 448 0
 1206 08c8 1040BDE8 		ldmfd	sp!, {r4, lr}
 1207 08cc 1EFF2FE1 		bx	lr
 1208              	.L112:
 1209              		.align	2
 1210              	.L111:
 1211 08d0 00C002E0 		.word	-536690688
 1212              	.LFE10:
 1214              		.align	2
 1215              		.global	stopMP3Player
 1217              	stopMP3Player:
 1218              	.LFB24:
 783:main.c        **** 
 784:main.c        **** void stopMP3Player(void) {
 1219              		.loc 1 784 0
 1220              		@ Function supports interworking.
 1221              		@ args = 0, pretend = 0, frame = 0
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 785:main.c        ****   VICIntEnClr = 0x20;                                     // Disable Time 0 Interrupts(Stop the "So
 1223              		.loc 1 785 0
 1224 08d4 2020A0E3 		mov	r2, #32
 1225 08d8 0030E0E3 		mvn	r3, #0
 1226 08dc EB2F03E5 		str	r2, [r3, #-4075]
 786:main.c        ****   ledBlueOff();
 1227              		.loc 1 786 0
 1228 08e0 74309FE5 		ldr	r3, .L117
 1229 08e4 0222A0E3 		mov	r2, #536870912
 1230              		.loc 1 784 0
 1231 08e8 10402DE9 		stmfd	sp!, {r4, lr}
 1232              	.LCFI19:
 1233              		.loc 1 786 0
 1234 08ec 042083E5 		str	r2, [r3, #4]
 787:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 1235              		.loc 1 787 0
 1236 08f0 FEFFFFEB 		bl	vs1002Config
 788:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 1237              		.loc 1 788 0
 1238 08f4 0000A0E3 		mov	r0, #0
 1239 08f8 0810A0E3 		mov	r1, #8
 1240 08fc FEFFFFEB 		bl	vs1002SCIWrite
 1241 0900 0040A0E3 		mov	r4, #0
 1242              	.LVL62:
 1243              	.L114:
 1244              	.LBB65:
 789:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 1245              		.loc 1 789 0
 1246 0904 0000A0E3 		mov	r0, #0
 1247 0908 014084E2 		add	r4, r4, #1
 1248 090c 0010A0E1 		mov	r1, r0
 1249 0910 FEFFFFEB 		bl	vs1002SCIWrite
 1250 0914 960054E3 		cmp	r4, #150
 1251 0918 F9FFFF1A 		bne	.L114
 1252              	.LBE65:
 790:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 1253              		.loc 1 790 0
 1254 091c FEFFFFEB 		bl	vs1002Finish
 791:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 1255              		.loc 1 791 0
 1256 0920 34209FE5 		ldr	r2, .L117
 1257 0924 083092E5 		ldr	r3, [r2, #8]
 1258 0928 033783E3 		orr	r3, r3, #786432
 1259 092c 503083E3 		orr	r3, r3, #80
 1260 0930 083082E5 		str	r3, [r2, #8]
 792:main.c        ****   closeSong(&current_song);                               // Close the current song
 1261              		.loc 1 792 0
 1262 0934 24009FE5 		ldr	r0, .L117+4
 1263 0938 FEFFFFEB 		bl	closeSong
 793:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 1264              		.loc 1 793 0
 1265 093c 20309FE5 		ldr	r3, .L117+8
 1266 0940 0020A0E3 		mov	r2, #0
 1267 0944 0020C3E5 		strb	r2, [r3, #0]
 794:main.c        ****   VICIntEnable = 0x10;
 1268              		.loc 1 794 0
 1269 0948 102082E2 		add	r2, r2, #16
 1270 094c 0030E0E3 		mvn	r3, #0
 1271 0950 EF2F03E5 		str	r2, [r3, #-4079]
 795:main.c        **** }...
 1272              		.loc 1 795 0
 1273 0954 1040BDE8 		ldmfd	sp!, {r4, lr}
 1274 0958 1EFF2FE1 		bx	lr
 1275              	.L118:
 1276              		.align	2
 1277              	.L117:
 1278 095c 008002E0 		.word	-536707072
 1279 0960 14000000 		.word	current_song
 1280 0964 01000000 		.word	file_is_open
 1281              	.LFE24:
 1283              		.align	2
 1284              		.global	loadSongInfo
 1286              	loadSongInfo:
 1287              	.LFB9:
 1288              		.loc 1 409 0
 1289              		@ Function supports interworking.
 1290              		@ args = 0, pretend = 0, frame = 0
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 1292              	.LVL63:
 1293 0968 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1294              	.LCFI20:
 1295              		.loc 1 409 0
 1296 096c 0020A0E3 		mov	r2, #0
 1297              	.LVL64:
 1298 0970 0040A0E1 		mov	r4, r0
 1299              	.LVL65:
 1300              	.L120:
 1301              	.LBB66:
 1302              		.loc 1 412 0
 1303 0974 083091E5 		ldr	r3, [r1, #8]
 1304 0978 833281E0 		add	r3, r1, r3, asl #5
 1305 097c 023083E0 		add	r3, r3, r2
 1306 0980 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1307              		.loc 1 411 0
 1308 0984 012082E2 		add	r2, r2, #1
 1309 0988 1E0052E3 		cmp	r2, #30
 1310              		.loc 1 412 0
 1311 098c 1630C0E5 		strb	r3, [r0, #22]
 1312              		.loc 1 411 0
 1313 0990 010080E2 		add	r0, r0, #1
 1314 0994 F6FFFF1A 		bne	.L120
 1315 0998 0020A0E3 		mov	r2, #0
 1316              	.LVL66:
 1317              	.LBE66:
 1318              	.LBB67:
 1319              		.loc 1 417 0
 1320 099c 0210A0E1 		mov	r1, r2
 1321              	.LVL67:
 1322              	.L123:
 1323              		.loc 1 416 0
 1324 09a0 023084E0 		add	r3, r4, r2
 1325 09a4 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 1326 09a8 150052E3 		cmp	r2, #21
 1327 09ac 2E005313 		cmpne	r3, #46
 1328              		.loc 1 417 0
 1329 09b0 0210C407 		streqb	r1, [r4, r2]
 1330 09b4 1620A003 		moveq	r2, #22
 1331              		.loc 1 420 0
 1332 09b8 0230C417 		strneb	r3, [r4, r2]
 1333              		.loc 1 415 0
 1334 09bc 012082E2 		add	r2, r2, #1
 1335 09c0 150052E3 		cmp	r2, #21
 1336 09c4 F5FFFFDA 		ble	.L123
 1337              	.LBE67:
 1338              		.loc 1 423 0
 1339 09c8 6C609FE5 		ldr	r6, .L129
 1340 09cc 003096E5 		ldr	r3, [r6, #0]
 1341              		.loc 1 425 0
 1342 09d0 165084E2 		add	r5, r4, #22
 1343              		.loc 1 423 0
 1344 09d4 153C83E3 		orr	r3, r3, #5376
 1345              		.loc 1 425 0
 1346 09d8 0500A0E1 		mov	r0, r5
 1347              		.loc 1 423 0
 1348 09dc 003086E5 		str	r3, [r6, #0]
 1349              		.loc 1 425 0
 1350 09e0 FEFFFFEB 		bl	root_file_exists
 1351              	.LVL68:
 1352 09e4 000050E3 		cmp	r0, #0
 1353              		.loc 1 426 0
 1354 09e8 00309605 		ldreq	r3, [r6, #0]
 1355 09ec FF3DC303 		biceq	r3, r3, #16320
 1356 09f0 3030C303 		biceq	r3, r3, #48
 1357 09f4 00308605 		streq	r3, [r6, #0]
 1358 09f8 0D00000A 		beq	.L125
 1359              	.L124:
 1360              		.loc 1 431 0
 1361 09fc 0500A0E1 		mov	r0, r5
 1362 0a00 FEFFFFEB 		bl	root_open
 1363 0a04 340084E5 		str	r0, [r4, #52]
 1364              		.loc 1 432 0
 1365 0a08 FEFFFFEB 		bl	fat16_file_size
 1366              		.loc 1 433 0
 1367 0a0c 3D1084E2 		add	r1, r4, #61
 1368              		.loc 1 432 0
 1369 0a10 380084E5 		str	r0, [r4, #56]
 1370              		.loc 1 433 0
 1371 0a14 2020A0E3 		mov	r2, #32
 1372 0a18 340094E5 		ldr	r0, [r4, #52]
 1373 0a1c FEFFFFEB 		bl	fat16_read_file
 1374              		.loc 1 437 0
 1375 0a20 003096E5 		ldr	r3, [r6, #0]
 1376 0a24 FF3DC3E3 		bic	r3, r3, #16320
 1377 0a28 3030C3E3 		bic	r3, r3, #48
 1378 0a2c 003086E5 		str	r3, [r6, #0]
 1379 0a30 0100A0E3 		mov	r0, #1
 1380              	.L125:
 1381              		.loc 1 439 0
 1382 0a34 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1383 0a38 1EFF2FE1 		bx	lr
 1384              	.L130:
 1385              		.align	2
 1386              	.L129:
 1387 0a3c 00C002E0 		.word	-536690688
 1388              	.LFE9:
 1390              		.section	.rodata.str1.1
 1391              	.LC2:
 1392 0007 256400   		.ascii	"%d\000"
 1393              		.text
 1394              		.align	2
 1395              		.global	handleMiddleButton
 1397              	handleMiddleButton:
 1398              	.LFB16:
 1399              		.loc 1 564 0
 1400              		@ Function supports interworking.
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403 0a40 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1404              	.LCFI21:
 1405              		.loc 1 565 0
 1406 0a44 1020A0E3 		mov	r2, #16
 1407 0a48 0030E0E3 		mvn	r3, #0
 1408 0a4c EB2F03E5 		str	r2, [r3, #-4075]
 1409              	.LBB68:
 1410              	.LBB69:
 1411              		.loc 1 262 0
 1412 0a50 28259FE5 		ldr	r2, .L175
 1413              	.LBE69:
 1414              	.LBE68:
 1415              		.loc 1 564 0
 1416 0a54 08D04DE2 		sub	sp, sp, #8
 1417              	.LCFI22:
 1418              		.loc 1 565 0
 1419 0a58 013083E2 		add	r3, r3, #1
 1420              	.LVL69:
 1421              	.L132:
 1422              	.LBB71:
 1423              	.LBB70:
 1424              		.loc 1 262 0
 1425              	@ 262 "main.c" 1
 1426 0a5c 0000A0E1 		nop
 1427              	@ 0 "" 2
 1428 0a60 013083E2 		add	r3, r3, #1
 1429 0a64 020053E1 		cmp	r3, r2
 1430 0a68 FBFFFF1A 		bne	.L132
 1431              	.LBE70:
 1432              	.LBE71:
 1433              		.loc 1 569 0
 1434 0a6c 10659FE5 		ldr	r6, .L175+4
 1435 0a70 10359FE5 		ldr	r3, .L175+8
 1436              	.LVL70:
 1437 0a74 000096E5 		ldr	r0, [r6, #0]
 1438 0a78 030050E1 		cmp	r0, r3
 1439 0a7c 08559FE5 		ldr	r5, .L175+12
 1440 0a80 2500001A 		bne	.L133
 1441              		.loc 1 570 0
 1442 0a84 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1443 0a88 000053E3 		cmp	r3, #0
 1444 0a8c 2000001A 		bne	.L134
 1445              		.loc 1 571 0
 1446 0a90 0010A0E1 		mov	r1, r0
 1447 0a94 F4049FE5 		ldr	r0, .L175+16
 1448 0a98 FEFFFFEB 		bl	loadSongInfo
 1449              		.loc 1 572 0
 1450 0a9c 000050E3 		cmp	r0, #0
 1451              		.loc 1 571 0
 1452 0aa0 0040A0E1 		mov	r4, r0
 1453 0aa4 0000C5E5 		strb	r0, [r5, #0]
 1454              		.loc 1 572 0
 1455 0aa8 1700001A 		bne	.L135
 1456              		.loc 1 573 0
 1457 0aac E0349FE5 		ldr	r3, .L175+20
 1458 0ab0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1459 0ab4 FEFFFFEB 		bl	LCDClear
 1460              		.loc 1 574 0
 1461 0ab8 00408DE5 		str	r4, [sp, #0]
 1462 0abc 001096E5 		ldr	r1, [r6, #0]
 1463 0ac0 D0349FE5 		ldr	r3, .L175+24
 1464 0ac4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1465 0ac8 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1466 0acc C8049FE5 		ldr	r0, .L175+28
 1467 0ad0 0130A0E3 		mov	r3, #1
 1468 0ad4 0410A0E1 		mov	r1, r4
 1469 0ad8 04C08DE5 		str	ip, [sp, #4]
 1470 0adc FEFFFFEB 		bl	LCDPrintString
 1471              	.LBB72:
 1472              	.LBB73:
 1473              		.loc 1 262 0
 1474 0ae0 B8349FE5 		ldr	r3, .L175+32
 1475              	.LBE73:
 1476              	.LBE72:
 1477              		.loc 1 574 0
 1478 0ae4 0400A0E1 		mov	r0, r4
 1479              	.LVL71:
 1480              	.L136:
 1481              	.LBB75:
 1482              	.LBB74:
 1483              		.loc 1 262 0
 1484              	@ 262 "main.c" 1
 1485 0ae8 0000A0E1 		nop
 1486              	@ 0 "" 2
 1487 0aec 010080E2 		add	r0, r0, #1
 1488 0af0 030050E1 		cmp	r0, r3
 1489 0af4 FBFFFF1A 		bne	.L136
 1490              	.LBE74:
 1491              	.LBE75:
 1492              		.loc 1 576 0
 1493 0af8 98349FE5 		ldr	r3, .L175+24
 1494 0afc 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1495              	.LVL72:
 1496 0b00 FEFFFFEB 		bl	LCDClear
 1497              		.loc 1 577 0
 1498 0b04 7C049FE5 		ldr	r0, .L175+8
 1499 0b08 140100EA 		b	.L174
 1500              	.L135:
 1501              		.loc 1 579 0
 1502 0b0c FEFFFFEB 		bl	startMP3Player
 1503 0b10 130100EA 		b	.L137
 1504              	.L134:
 1505              		.loc 1 582 0
 1506 0b14 FEFFFFEB 		bl	stopMP3Player
 1507 0b18 110100EA 		b	.L137
 1508              	.L133:
 1509              		.loc 1 585 0
 1510 0b1c 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1511 0b20 000053E3 		cmp	r3, #0
 1512 0b24 0100000A 		beq	.L138
 1513              		.loc 1 586 0
 1514 0b28 FEFFFFEB 		bl	quickClear
 1515 0b2c 020000EA 		b	.L139
 1516              	.L138:
 1517              		.loc 1 588 0
 1518 0b30 6C349FE5 		ldr	r3, .L175+36
 1519 0b34 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1520 0b38 FEFFFFEB 		bl	LCDClear
 1521              	.L139:
 1522              		.loc 1 590 0
 1523 0b3c 40849FE5 		ldr	r8, .L175+4
 1524 0b40 003098E5 		ldr	r3, [r8, #0]
 1525 0b44 0070A0E3 		mov	r7, #0
 1526 0b48 080093E5 		ldr	r0, [r3, #8]
 1527 0b4c 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1528 0b50 00708DE5 		str	r7, [sp, #0]
 1529 0b54 800283E0 		add	r0, r3, r0, asl #5
 1530 0b58 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1531              		.loc 1 591 0
 1532 0b5c 0060E0E3 		mvn	r6, #0
 1533              		.loc 1 590 0
 1534 0b60 0130A0E3 		mov	r3, #1
 1535 0b64 0C0080E2 		add	r0, r0, #12
 1536 0b68 0710A0E1 		mov	r1, r7
 1537 0b6c 04C08DE5 		str	ip, [sp, #4]
 1538 0b70 FEFFFFEB 		bl	LCDPrintString
 1539              		.loc 1 591 0
 1540 0b74 EF3F16E5 		ldr	r3, [r6, #-4079]
 1541 0b78 103083E3 		orr	r3, r3, #16
 1542 0b7c EF3F06E5 		str	r3, [r6, #-4079]
 1543              		.loc 1 592 0
 1544 0b80 002098E5 		ldr	r2, [r8, #0]
 1545 0b84 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 1546 0b88 010054E3 		cmp	r4, #1
 1547 0b8c 5500001A 		bne	.L140
 1548              		.loc 1 593 0
 1549 0b90 EF3F16E5 		ldr	r3, [r6, #-4079]
 1550 0b94 103083E3 		orr	r3, r3, #16
 1551 0b98 EF3F06E5 		str	r3, [r6, #-4079]
 1552              		.loc 1 594 0
 1553 0b9c 0200A0E3 		mov	r0, #2
 1554 0ba0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1555 0ba4 0710A0E1 		mov	r1, r7
 1556 0ba8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1557 0bac FEFFFFEB 		bl	LCDSetRowColor
 1558              		.loc 1 595 0
 1559 0bb0 00708DE5 		str	r7, [sp, #0]
 1560 0bb4 003098E5 		ldr	r3, [r8, #0]
 1561 0bb8 D4539FE5 		ldr	r5, .L175+20
 1562 0bbc E4439FE5 		ldr	r4, .L175+40
 1563 0bc0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1564 0bc4 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1565 0bc8 001094E5 		ldr	r1, [r4, #0]
 1566 0bcc D8039FE5 		ldr	r0, .L175+44
 1567 0bd0 0230A0E3 		mov	r3, #2
 1568 0bd4 04C08DE5 		str	ip, [sp, #4]
 1569              		.loc 1 597 0
 1570 0bd8 06A0A0E1 		mov	sl, r6
 1571              		.loc 1 617 0
 1572 0bdc 05B0A0E1 		mov	fp, r5
 1573              		.loc 1 616 0
 1574 0be0 0860A0E1 		mov	r6, r8
 1575              		.loc 1 595 0
 1576 0be4 FEFFFFEB 		bl	LCDPrintString
 1577              		.loc 1 596 0
 1578 0be8 C0539FE5 		ldr	r5, .L175+48
 1579              		.loc 1 597 0
 1580 0bec 1090A0E3 		mov	r9, #16
 1581              	.LBB76:
 1582              	.LBB77:
 1583              		.loc 1 262 0
 1584 0bf0 BC839FE5 		ldr	r8, .L175+52
 1585 0bf4 370000EA 		b	.L141
 1586              	.LVL73:
 1587              	.L147:
 1588              	.LBE77:
 1589              	.LBE76:
 1590              		.loc 1 597 0
 1591 0bf8 EB9F0AE5 		str	r9, [sl, #-4075]
 1592 0bfc 0030A0E3 		mov	r3, #0
 1593              	.LVL74:
 1594              	.L142:
 1595              	.LBB79:
 1596              	.LBB78:
 1597              		.loc 1 262 0
 1598              	@ 262 "main.c" 1
 1599 0c00 0000A0E1 		nop
 1600              	@ 0 "" 2
 1601 0c04 013083E2 		add	r3, r3, #1
 1602 0c08 080053E1 		cmp	r3, r8
 1603 0c0c FBFFFF1A 		bne	.L142
 1604              	.LBE78:
 1605              	.LBE79:
 1606              		.loc 1 599 0
 1607 0c10 020052E3 		cmp	r2, #2
 1608 0c14 1200001A 		bne	.L143
 1609              		.loc 1 600 0
 1610 0c18 003094E5 		ldr	r3, [r4, #0]
 1611              	.LVL75:
 1612 0c1c 1F0053E3 		cmp	r3, #31
 1613 0c20 050000CA 		bgt	.L144
 1614              		.loc 1 601 0
 1615 0c24 013083E2 		add	r3, r3, #1
 1616 0c28 003084E5 		str	r3, [r4, #0]
 1617              		.loc 1 602 0
 1618 0c2c FEFFFFEB 		bl	vs1002Config
 1619              		.loc 1 603 0
 1620 0c30 3100A0E3 		mov	r0, #49
 1621 0c34 FEFFFFEB 		bl	vs1002SetVolume
 1622              		.loc 1 604 0
 1623 0c38 FEFFFFEB 		bl	vs1002Finish
 1624              	.L144:
 1625              		.loc 1 606 0
 1626 0c3c 002096E5 		ldr	r2, [r6, #0]
 1627 0c40 0200A0E3 		mov	r0, #2
 1628 0c44 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1629 0c48 0010A0E3 		mov	r1, #0
 1630 0c4c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1631 0c50 FEFFFFEB 		bl	LCDSetRowColor
 1632              		.loc 1 607 0
 1633 0c54 003096E5 		ldr	r3, [r6, #0]
 1634 0c58 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1635 0c5c 00708DE5 		str	r7, [sp, #0]
 1636              	.LVL76:
 1637 0c60 130000EA 		b	.L171
 1638              	.LVL77:
 1639              	.L143:
 1640              		.loc 1 609 0
 1641 0c64 010052E3 		cmp	r2, #1
 1642 0c68 1700001A 		bne	.L145
 1643              		.loc 1 610 0
 1644 0c6c 003094E5 		ldr	r3, [r4, #0]
 1645              	.LVL78:
 1646 0c70 000053E3 		cmp	r3, #0
 1647 0c74 050000BA 		blt	.L146
 1648              		.loc 1 611 0
 1649 0c78 013043E2 		sub	r3, r3, #1
 1650 0c7c 003084E5 		str	r3, [r4, #0]
 1651              		.loc 1 612 0
 1652 0c80 FEFFFFEB 		bl	vs1002Config
 1653              		.loc 1 613 0
 1654 0c84 3000A0E3 		mov	r0, #48
 1655 0c88 FEFFFFEB 		bl	vs1002SetVolume
 1656              		.loc 1 614 0
 1657 0c8c FEFFFFEB 		bl	vs1002Finish
 1658              	.L146:
 1659              		.loc 1 616 0
 1660 0c90 002096E5 		ldr	r2, [r6, #0]
 1661 0c94 0200A0E3 		mov	r0, #2
 1662 0c98 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1663 0c9c 0010A0E3 		mov	r1, #0
 1664 0ca0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1665 0ca4 FEFFFFEB 		bl	LCDSetRowColor
 1666              		.loc 1 617 0
 1667 0ca8 00708DE5 		str	r7, [sp, #0]
 1668              	.LVL79:
 1669 0cac 003096E5 		ldr	r3, [r6, #0]
 1670 0cb0 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1671              	.L171:
 1672 0cb4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1673 0cb8 001094E5 		ldr	r1, [r4, #0]
 1674 0cbc E8029FE5 		ldr	r0, .L175+44
 1675 0cc0 0230A0E3 		mov	r3, #2
 1676 0cc4 04C08DE5 		str	ip, [sp, #4]
 1677 0cc8 FEFFFFEB 		bl	LCDPrintString
 1678              	.LVL80:
 1679              	.L145:
 1680              		.loc 1 619 0
 1681 0ccc EF3F1AE5 		ldr	r3, [sl, #-4079]
 1682 0cd0 103083E3 		orr	r3, r3, #16
 1683 0cd4 EF3F0AE5 		str	r3, [sl, #-4079]
 1684              	.L141:
 1685              		.loc 1 596 0
 1686 0cd8 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1687 0cdc 020052E3 		cmp	r2, #2
 1688 0ce0 C4FFFF9A 		bls	.L147
 1689 0ce4 900000EA 		b	.L148
 1690              	.LVL81:
 1691              	.L140:
 1692              		.loc 1 622 0
 1693 0ce8 030054E3 		cmp	r4, #3
 1694 0cec 5F00001A 		bne	.L149
 1695              		.loc 1 623 0
 1696 0cf0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1697 0cf4 0710A0E1 		mov	r1, r7
 1698 0cf8 0200A0E3 		mov	r0, #2
 1699 0cfc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1700 0d00 FEFFFFEB 		bl	LCDSetRowColor
 1701              		.loc 1 624 0
 1702 0d04 00708DE5 		str	r7, [sp, #0]
 1703 0d08 003098E5 		ldr	r3, [r8, #0]
 1704 0d0c 80529FE5 		ldr	r5, .L175+20
 1705 0d10 A0429FE5 		ldr	r4, .L175+56
 1706 0d14 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1707 0d18 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1708 0d1c 001094E5 		ldr	r1, [r4, #0]
 1709 0d20 0230A0E3 		mov	r3, #2
 1710 0d24 80029FE5 		ldr	r0, .L175+44
 1711 0d28 04C08DE5 		str	ip, [sp, #4]
 1712 0d2c FEFFFFEB 		bl	LCDPrintString
 1713              		.loc 1 626 0
 1714 0d30 EF3F16E5 		ldr	r3, [r6, #-4079]
 1715              		.loc 1 625 0
 1716 0d34 74229FE5 		ldr	r2, .L175+48
 1717              		.loc 1 626 0
 1718 0d38 103083E3 		orr	r3, r3, #16
 1719              		.loc 1 625 0
 1720 0d3c 0070C2E5 		strb	r7, [r2, #0]
 1721              		.loc 1 627 0
 1722 0d40 02B0A0E1 		mov	fp, r2
 1723              		.loc 1 626 0
 1724 0d44 EF3F06E5 		str	r3, [r6, #-4079]
 1725              		.loc 1 628 0
 1726 0d48 0670A0E1 		mov	r7, r6
 1727              	.LBB80:
 1728              	.LBB81:
 1729              		.loc 1 262 0
 1730 0d4c 68929FE5 		ldr	r9, .L175+60
 1731              	.LBE81:
 1732              	.LBE80:
 1733              		.loc 1 639 0
 1734 0d50 0860A0E1 		mov	r6, r8
 1735              		.loc 1 638 0
 1736 0d54 64A29FE5 		ldr	sl, .L175+64
 1737              		.loc 1 632 0
 1738 0d58 64829FE5 		ldr	r8, .L175+68
 1739 0d5c 2D0000EA 		b	.L150
 1740              	.L156:
 1741              		.loc 1 628 0
 1742 0d60 1030A0E3 		mov	r3, #16
 1743 0d64 EB3F07E5 		str	r3, [r7, #-4075]
 1744 0d68 0030A0E3 		mov	r3, #0
 1745              	.LVL82:
 1746              	.L151:
 1747              	.LBB83:
 1748              	.LBB82:
 1749              		.loc 1 262 0
 1750              	@ 262 "main.c" 1
 1751 0d6c 0000A0E1 		nop
 1752              	@ 0 "" 2
 1753 0d70 013083E2 		add	r3, r3, #1
 1754 0d74 090053E1 		cmp	r3, r9
 1755 0d78 FBFFFF1A 		bne	.L151
 1756              	.LBE82:
 1757              	.LBE83:
 1758              		.loc 1 630 0
 1759 0d7c 020052E3 		cmp	r2, #2
 1760 0d80 0900001A 		bne	.L152
 1761              		.loc 1 632 0
 1762 0d84 003094E5 		ldr	r3, [r4, #0]
 1763              	.LVL83:
 1764 0d88 080053E1 		cmp	r3, r8
 1765 0d8c 023083D2 		addle	r3, r3, #2
 1766 0d90 003084D5 		strle	r3, [r4, #0]
 1767              		.loc 1 633 0
 1768 0d94 002096E5 		ldr	r2, [r6, #0]
 1769 0d98 0200A0E3 		mov	r0, #2
 1770 0d9c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1771 0da0 0010A0E3 		mov	r1, #0
 1772 0da4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1773 0da8 0A0000EA 		b	.L172
 1774              	.LVL84:
 1775              	.L152:
 1776              		.loc 1 636 0
 1777 0dac 010052E3 		cmp	r2, #1
 1778 0db0 1300001A 		bne	.L154
 1779              		.loc 1 638 0
 1780 0db4 003094E5 		ldr	r3, [r4, #0]
 1781              	.LVL85:
 1782 0db8 0A0053E1 		cmp	r3, sl
 1783 0dbc 023043C2 		subgt	r3, r3, #2
 1784 0dc0 003084C5 		strgt	r3, [r4, #0]
 1785              		.loc 1 639 0
 1786 0dc4 002096E5 		ldr	r2, [r6, #0]
 1787 0dc8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1788 0dcc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1789 0dd0 0200A0E3 		mov	r0, #2
 1790 0dd4 0010A0E3 		mov	r1, #0
 1791              	.L172:
 1792 0dd8 FEFFFFEB 		bl	LCDSetRowColor
 1793              		.loc 1 640 0
 1794 0ddc 0030A0E3 		mov	r3, #0
 1795 0de0 00308DE5 		str	r3, [sp, #0]
 1796 0de4 003096E5 		ldr	r3, [r6, #0]
 1797 0de8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1798 0dec 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1799 0df0 001094E5 		ldr	r1, [r4, #0]
 1800 0df4 B0019FE5 		ldr	r0, .L175+44
 1801 0df8 0230A0E3 		mov	r3, #2
 1802 0dfc 04C08DE5 		str	ip, [sp, #4]
 1803 0e00 FEFFFFEB 		bl	LCDPrintString
 1804              	.LVL86:
 1805              	.L154:
 1806              		.loc 1 642 0
 1807 0e04 000094E5 		ldr	r0, [r4, #0]
 1808 0e08 FEFFFFEB 		bl	ns73SetChannel
 1809              	.LVL87:
 1810              		.loc 1 643 0
 1811 0e0c EF3F17E5 		ldr	r3, [r7, #-4079]
 1812 0e10 103083E3 		orr	r3, r3, #16
 1813 0e14 EF3F07E5 		str	r3, [r7, #-4079]
 1814              	.L150:
 1815              		.loc 1 627 0
 1816 0e18 0020DBE5 		ldrb	r2, [fp, #0]	@ zero_extendqisi2
 1817 0e1c 020052E3 		cmp	r2, #2
 1818 0e20 CEFFFF9A 		bls	.L156
 1819              		.loc 1 645 0
 1820 0e24 9C219FE5 		ldr	r2, .L175+72
 1821 0e28 1C3092E5 		ldr	r3, [r2, #28]
 1822 0e2c 013283E3 		orr	r3, r3, #268435456
 1823 0e30 1C3082E5 		str	r3, [r2, #28]
 1824              	.LBB84:
 1825              	.LBB85:
 1826              		.loc 1 262 0
 1827 0e34 80219FE5 		ldr	r2, .L175+60
 1828              	.LBE85:
 1829              	.LBE84:
 1830              		.loc 1 645 0
 1831 0e38 0030A0E3 		mov	r3, #0
 1832              	.LVL88:
 1833              	.L157:
 1834              	.LBB87:
 1835              	.LBB86:
 1836              		.loc 1 262 0
 1837              	@ 262 "main.c" 1
 1838 0e3c 0000A0E1 		nop
 1839              	@ 0 "" 2
 1840 0e40 013083E2 		add	r3, r3, #1
 1841 0e44 020053E1 		cmp	r3, r2
 1842 0e48 FBFFFF1A 		bne	.L157
 1843              	.LBE86:
 1844              	.LBE87:
 1845              		.loc 1 647 0
 1846 0e4c FEFFFFEB 		bl	ns73Config
 1847              	.LVL89:
 1848              		.loc 1 648 0
 1849 0e50 60319FE5 		ldr	r3, .L175+56
 1850 0e54 000093E5 		ldr	r0, [r3, #0]
 1851 0e58 FEFFFFEB 		bl	ns73SetChannel
 1852              		.loc 1 649 0
 1853 0e5c 64219FE5 		ldr	r2, .L175+72
 1854 0e60 143092E5 		ldr	r3, [r2, #20]
 1855 0e64 013283E3 		orr	r3, r3, #268435456
 1856 0e68 143082E5 		str	r3, [r2, #20]
 1857 0e6c 2E0000EA 		b	.L148
 1858              	.L149:
 1859              		.loc 1 651 0
 1860 0e70 020054E3 		cmp	r4, #2
 1861 0e74 2C00001A 		bne	.L148
 1862              		.loc 1 652 0
 1863 0e78 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1864 0e7c 0710A0E1 		mov	r1, r7
 1865 0e80 0400A0E1 		mov	r0, r4
 1866 0e84 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1867 0e88 FEFFFFEB 		bl	LCDSetRowColor
 1868              		.loc 1 653 0
 1869 0e8c 38319FE5 		ldr	r3, .L175+76
 1870 0e90 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1871 0e94 000051E3 		cmp	r1, #0
 1872 0e98 0700000A 		beq	.L158
 1873 0e9c 003098E5 		ldr	r3, [r8, #0]
 1874 0ea0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1875 0ea4 00708DE5 		str	r7, [sp, #0]
 1876 0ea8 0710A0E1 		mov	r1, r7
 1877 0eac 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1878 0eb0 18019FE5 		ldr	r0, .L175+80
 1879 0eb4 0430A0E1 		mov	r3, r4
 1880 0eb8 050000EA 		b	.L173
 1881              	.L158:
 1882              		.loc 1 654 0
 1883 0ebc 003098E5 		ldr	r3, [r8, #0]
 1884 0ec0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1885 0ec4 00108DE5 		str	r1, [sp, #0]
 1886 0ec8 04019FE5 		ldr	r0, .L175+84
 1887 0ecc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1888 0ed0 0430A0E1 		mov	r3, r4
 1889              	.L173:
 1890 0ed4 04C08DE5 		str	ip, [sp, #4]
 1891 0ed8 FEFFFFEB 		bl	LCDPrintString
 1892              		.loc 1 656 0
 1893 0edc 0010E0E3 		mvn	r1, #0
 1894 0ee0 EF2F11E5 		ldr	r2, [r1, #-4079]
 1895              		.loc 1 655 0
 1896 0ee4 C4309FE5 		ldr	r3, .L175+48
 1897              		.loc 1 656 0
 1898 0ee8 102082E3 		orr	r2, r2, #16
 1899              		.loc 1 655 0
 1900 0eec 0000A0E3 		mov	r0, #0
 1901 0ef0 0000C3E5 		strb	r0, [r3, #0]
 1902              		.loc 1 656 0
 1903 0ef4 EF2F01E5 		str	r2, [r1, #-4079]
 1904              		.loc 1 658 0
 1905 0ef8 100080E2 		add	r0, r0, #16
 1906              	.LBB88:
 1907              	.LBB89:
 1908              		.loc 1 262 0
 1909 0efc B8209FE5 		ldr	r2, .L175+60
 1910 0f00 060000EA 		b	.L160
 1911              	.LVL90:
 1912              	.L161:
 1913              	@ 262 "main.c" 1
 1914 0f04 0000A0E1 		nop
 1915              	@ 0 "" 2
 1916 0f08 013083E2 		add	r3, r3, #1
 1917 0f0c 020053E1 		cmp	r3, r2
 1918 0f10 FBFFFF1A 		bne	.L161
 1919              	.LBE89:
 1920              	.LBE88:
 1921              		.loc 1 666 0
 1922 0f14 EF3F11E5 		ldr	r3, [r1, #-4079]
 1923              	.LVL91:
 1924 0f18 103083E3 		orr	r3, r3, #16
 1925 0f1c EF3F01E5 		str	r3, [r1, #-4079]
 1926              	.L160:
 1927              		.loc 1 658 0
 1928 0f20 EB0F01E5 		str	r0, [r1, #-4075]
 1929 0f24 0030A0E3 		mov	r3, #0
 1930              	.LVL92:
 1931 0f28 F5FFFFEA 		b	.L161
 1932              	.LVL93:
 1933              	.L148:
 1934              		.loc 1 669 0
 1935 0f2c 58309FE5 		ldr	r3, .L175+12
 1936 0f30 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1937 0f34 000053E3 		cmp	r3, #0
 1938 0f38 44009FE5 		ldr	r0, .L175+4
 1939 0f3c 0200000A 		beq	.L162
 1940 0f40 000090E5 		ldr	r0, [r0, #0]
 1941 0f44 FEFFFFEB 		bl	quickClear
 1942 0f48 020000EA 		b	.L163
 1943              	.L162:
 1944              		.loc 1 670 0
 1945 0f4c 003090E5 		ldr	r3, [r0, #0]
 1946 0f50 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1947 0f54 FEFFFFEB 		bl	LCDClear
 1948              	.L163:
 1949              		.loc 1 671 0
 1950 0f58 24309FE5 		ldr	r3, .L175+4
 1951 0f5c 000093E5 		ldr	r0, [r3, #0]
 1952              	.L174:
 1953 0f60 FEFFFFEB 		bl	printMenu
 1954              	.L137:
 1955              		.loc 1 673 0
 1956 0f64 0020E0E3 		mvn	r2, #0
 1957 0f68 EF3F12E5 		ldr	r3, [r2, #-4079]
 1958 0f6c 103083E3 		orr	r3, r3, #16
 1959 0f70 EF3F02E5 		str	r3, [r2, #-4079]
 1960              		.loc 1 674 0
 1961 0f74 08D08DE2 		add	sp, sp, #8
 1962 0f78 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1963 0f7c 1EFF2FE1 		bx	lr
 1964              	.L176:
 1965              		.align	2
 1966              	.L175:
 1967 0f80 A0252600 		.word	2500000
 1968 0f84 7C040000 		.word	current_display
 1969 0f88 74000000 		.word	file_manager
 1970 0f8c 01000000 		.word	file_is_open
 1971 0f90 14000000 		.word	current_song
 1972 0f94 00000000 		.word	white
 1973 0f98 00000000 		.word	black
 1974 0f9c 00000000 		.word	NotFound
 1975 0fa0 80969800 		.word	10000000
 1976 0fa4 78020000 		.word	settings_menu
 1977 0fa8 00000000 		.word	volume_setting
 1978 0fac 07000000 		.word	.LC2
 1979 0fb0 08000000 		.word	button_pressed
 1980 0fb4 60E31600 		.word	1500000
 1981 0fb8 00000000 		.word	radio_channel
 1982 0fbc 40420F00 		.word	1000000
 1983 0fc0 75030000 		.word	885
 1984 0fc4 32040000 		.word	1074
 1985 0fc8 008002E0 		.word	-536707072
 1986 0fcc 00000000 		.word	radio_enable
 1987 0fd0 04000000 		.word	.LC1
 1988 0fd4 00000000 		.word	.LC0
 1989              	.LFE16:
 1991              		.section	.rodata.str1.1
 1992              	.LC3:
 1993 000a 53442049 		.ascii	"SD Init Error\012\000"
 1993      6E697420 
 1993      4572726F 
 1993      720A00
 1994              	.LC4:
 1995 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 1995      70656E52 
 1995      6F6F7420 
 1995      4572726F 
 1995      720A00
 1996              		.text
 1997              		.align	2
 1998              		.global	bootUp
 2000              	bootUp:
 2001              	.LFB4:
 2002              		.loc 1 269 0
 2003              		@ Function supports interworking.
 2004              		@ args = 0, pretend = 0, frame = 0
 2005              		@ frame_needed = 0, uses_anonymous_args = 0
 2006 0fd8 04E02DE5 		str	lr, [sp, #-4]!
 2007              	.LCFI23:
 2008              		.loc 1 270 0
 2009 0fdc B0019FE5 		ldr	r0, .L183
 2010 0fe0 FEFFFFEB 		bl	rprintf_devopen
 2011              	.LBB90:
 2012              	.LBB91:
 2013              		.loc 1 262 0
 2014 0fe4 AC219FE5 		ldr	r2, .L183+4
 2015              	.LBE91:
 2016              	.LBE90:
 2017              		.loc 1 270 0
 2018 0fe8 0030A0E3 		mov	r3, #0
 2019              	.LVL94:
 2020              	.L178:
 2021              	.LBB93:
 2022              	.LBB92:
 2023              		.loc 1 262 0
 2024              	@ 262 "main.c" 1
 2025 0fec 0000A0E1 		nop
 2026              	@ 0 "" 2
 2027 0ff0 013083E2 		add	r3, r3, #1
 2028 0ff4 020053E1 		cmp	r3, r2
 2029 0ff8 FBFFFF1A 		bne	.L178
 2030              	.LBE92:
 2031              	.LBE93:
 2032              		.loc 1 274 0
 2033 0ffc FEFFFFEB 		bl	sd_raw_init
 2034              	.LVL95:
 2035 1000 000050E3 		cmp	r0, #0
 2036              		.loc 1 276 0
 2037 1004 90019F05 		ldreq	r0, .L183+8
 2038 1008 FEFFFF0B 		bleq	rprintf
 2039              	.L179:
 2040              		.loc 1 278 0
 2041 100c FEFFFFEB 		bl	openroot
 2042 1010 000050E3 		cmp	r0, #0
 2043              		.loc 1 280 0
 2044 1014 84019F15 		ldrne	r0, .L183+12
 2045 1018 FEFFFF1B 		blne	rprintf
 2046              	.L180:
 2047              		.loc 1 285 0
 2048 101c 80219FE5 		ldr	r2, .L183+16
 2049 1020 083092E5 		ldr	r3, [r2, #8]
 2050 1024 013683E3 		orr	r3, r3, #1048576
 2051 1028 083082E5 		str	r3, [r2, #8]
 2052              		.loc 1 286 0
 2053 102c 083092E5 		ldr	r3, [r2, #8]
 2054 1030 0236C3E3 		bic	r3, r3, #2097152
 2055 1034 083082E5 		str	r3, [r2, #8]
 2056              		.loc 1 287 0
 2057 1038 68119FE5 		ldr	r1, .L183+20
 2058 103c 043091E5 		ldr	r3, [r1, #4]
 2059 1040 033B83E3 		orr	r3, r3, #3072
 2060 1044 043081E5 		str	r3, [r1, #4]
 2061              		.loc 1 288 0
 2062 1048 183092E5 		ldr	r3, [r2, #24]
 2063 104c 013483E3 		orr	r3, r3, #16777216
 2064 1050 033883E3 		orr	r3, r3, #196608
 2065 1054 183082E5 		str	r3, [r2, #24]
 2066              		.loc 1 291 0
 2067 1058 183092E5 		ldr	r3, [r2, #24]
 2068 105c 023483E3 		orr	r3, r3, #33554432
 2069 1060 183082E5 		str	r3, [r2, #24]
 2070              		.loc 1 292 0
 2071 1064 183092E5 		ldr	r3, [r2, #24]
 2072 1068 013283E3 		orr	r3, r3, #268435456
 2073 106c 183082E5 		str	r3, [r2, #24]
 2074              		.loc 1 295 0
 2075 1070 083092E5 		ldr	r3, [r2, #8]
 2076 1074 803083E3 		orr	r3, r3, #128
 2077 1078 083082E5 		str	r3, [r2, #8]
 2078              		.loc 1 298 0
 2079 107c 083092E5 		ldr	r3, [r2, #8]
 2080 1080 033B83E3 		orr	r3, r3, #3072
 2081 1084 083082E5 		str	r3, [r2, #8]
 2082              		.loc 1 299 0
 2083 1088 003091E5 		ldr	r3, [r1, #0]
 2084 108c CF3483E3 		orr	r3, r3, #-822083584
 2085 1090 003081E5 		str	r3, [r1, #0]
 2086              		.loc 1 300 0
 2087 1094 033BA0E3 		mov	r3, #3072
 2088 1098 0C3082E5 		str	r3, [r2, #12]
 2089              		.loc 1 303 0
 2090 109c 083092E5 		ldr	r3, [r2, #8]
 2091 10a0 033783E3 		orr	r3, r3, #786432
 2092 10a4 083082E5 		str	r3, [r2, #8]
 2093              		.loc 1 306 0
 2094 10a8 083092E5 		ldr	r3, [r2, #8]
 2095 10ac 073283E3 		orr	r3, r3, #1879048192
 2096 10b0 083082E5 		str	r3, [r2, #8]
 2097              		.loc 1 307 0
 2098 10b4 0232A0E3 		mov	r3, #536870912
 2099 10b8 043082E5 		str	r3, [r2, #4]
 2100              		.loc 1 308 0
 2101 10bc 033083E0 		add	r3, r3, r3
 2102 10c0 043082E5 		str	r3, [r2, #4]
 2103              		.loc 1 309 0
 2104 10c4 0D3283E2 		add	r3, r3, #-805306368
 2105 10c8 043082E5 		str	r3, [r2, #4]
 2106              		.loc 1 312 0
 2107 10cc 183092E5 		ldr	r3, [r2, #24]
 2108 10d0 0E36C3E3 		bic	r3, r3, #14680064
 2109 10d4 183082E5 		str	r3, [r2, #24]
 2110              		.loc 1 314 0
 2111 10d8 083092E5 		ldr	r3, [r2, #8]
 2112 10dc 0235C3E3 		bic	r3, r3, #8388608
 2113 10e0 083082E5 		str	r3, [r2, #8]
 2114              		.loc 1 317 0
 2115 10e4 C0309FE5 		ldr	r3, .L183+24
 2116 10e8 0120A0E3 		mov	r2, #1
 2117              		.loc 1 318 0
 2118 10ec 0010E0E3 		mvn	r1, #0
 2119              		.loc 1 317 0
 2120 10f0 002183E5 		str	r2, [r3, #256]
 2121              		.loc 1 318 0
 2122 10f4 3030E0E3 		mvn	r3, #48
 2123 10f8 F33F01E5 		str	r3, [r1, #-4083]
 2124              		.loc 1 319 0
 2125 10fc 413083E2 		add	r3, r3, #65
 2126 1100 EF3F01E5 		str	r3, [r1, #-4079]
 2127              		.loc 1 320 0
 2128 1104 153083E2 		add	r3, r3, #21
 2129 1108 FF3D01E5 		str	r3, [r1, #-3583]
 2130              		.loc 1 321 0
 2131 110c 9C309FE5 		ldr	r3, .L183+28
 2132 1110 FF3E01E5 		str	r3, [r1, #-3839]
 2133              		.loc 1 322 0
 2134 1114 2430A0E3 		mov	r3, #36
 2135 1118 FB3D01E5 		str	r3, [r1, #-3579]
 2136              		.loc 1 323 0
 2137 111c 90309FE5 		ldr	r3, .L183+32
 2138              		.loc 1 326 0
 2139 1120 90009FE5 		ldr	r0, .L183+36
 2140              		.loc 1 323 0
 2141 1124 FB3E01E5 		str	r3, [r1, #-3835]
 2142              		.loc 1 326 0
 2143 1128 4B3FA0E3 		mov	r3, #300
 2144 112c 0C3080E5 		str	r3, [r0, #12]
 2145              		.loc 1 327 0
 2146 1130 043090E5 		ldr	r3, [r0, #4]
 2147 1134 013083E3 		orr	r3, r3, #1
 2148 1138 043080E5 		str	r3, [r0, #4]
 2149              		.loc 1 328 0
 2150 113c 00C0A0E3 		mov	ip, #0
 2151              		.loc 1 329 0
 2152 1140 0330A0E3 		mov	r3, #3
 2153              		.loc 1 328 0
 2154 1144 70C080E5 		str	ip, [r0, #112]
 2155              		.loc 1 333 0
 2156 1148 6C209FE5 		ldr	r2, .L183+40
 2157              		.loc 1 329 0
 2158 114c 143080E5 		str	r3, [r0, #20]
 2159              		.loc 1 330 0
 2160 1150 FA3FA0E3 		mov	r3, #1000
 2161 1154 183080E5 		str	r3, [r0, #24]
 2162              		.loc 1 333 0
 2163 1158 323E43E2 		sub	r3, r3, #800
 2164 115c 0C3082E5 		str	r3, [r2, #12]
 2165              		.loc 1 334 0
 2166 1160 043092E5 		ldr	r3, [r2, #4]
 2167 1164 013083E3 		orr	r3, r3, #1
 2168 1168 043082E5 		str	r3, [r2, #4]
 2169              		.loc 1 339 0
 2170 116c 4C109FE5 		ldr	r1, .L183+44
 2171              		.loc 1 336 0
 2172 1170 0A3CA0E3 		mov	r3, #2560
 2173              		.loc 1 335 0
 2174 1174 70C082E5 		str	ip, [r2, #112]
 2175              		.loc 1 336 0
 2176 1178 283082E5 		str	r3, [r2, #40]
 2177              		.loc 1 339 0
 2178 117c 273D43E2 		sub	r3, r3, #2496
 2179 1180 0C3081E5 		str	r3, [r1, #12]
 2180              		.loc 1 340 0
 2181 1184 2030A0E3 		mov	r3, #32
 2182 1188 003081E5 		str	r3, [r1, #0]
 2183              		.loc 1 341 0
 2184 118c 04E09DE4 		ldr	lr, [sp], #4
 2185 1190 1EFF2FE1 		bx	lr
 2186              	.L184:
 2187              		.align	2
 2188              	.L183:
 2189 1194 00000000 		.word	putc_serial0
 2190 1198 A0860100 		.word	100000
 2191 119c 0A000000 		.word	.LC3
 2192 11a0 19000000 		.word	.LC4
 2193 11a4 008002E0 		.word	-536707072
 2194 11a8 00C002E0 		.word	-536690688
 2195 11ac 00C01FE0 		.word	-534790144
 2196 11b0 00000000 		.word	timer1ISR
 2197 11b4 00000000 		.word	timer0ISR
 2198 11b8 004000E0 		.word	-536854528
 2199 11bc 008000E0 		.word	-536838144
 2200 11c0 000002E0 		.word	-536739840
 2201              	.LFE4:
 2203              		.align	2
 2205              	timer0ISR:
 2206              	.LFB6:
 2207              		.loc 1 362 0
 2208              		@ Function supports interworking.
 2209              		@ args = 0, pretend = 0, frame = 0
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 2211              	.LBB94:
 2212              	.LBB95:
 2213              		.loc 1 378 0
 2214 11c4 A8209FE5 		ldr	r2, .L196
 2215 11c8 103092E5 		ldr	r3, [r2, #16]
 2216 11cc 020513E3 		tst	r3, #8388608
 2217              	.LBE95:
 2218              	.LBE94:
 2219              		.loc 1 362 0
 2220 11d0 04E02DE5 		str	lr, [sp, #-4]!
 2221              	.LCFI24:
 2222              	.LBB97:
 2223              	.LBB96:
 2224              		.loc 1 378 0
 2225 11d4 0220A003 		moveq	r2, #2
 2226 11d8 0700000A 		beq	.L187
 2227              		.loc 1 379 0
 2228 11dc 103092E5 		ldr	r3, [r2, #16]
 2229 11e0 020613E3 		tst	r3, #2097152
 2230 11e4 0120A003 		moveq	r2, #1
 2231 11e8 0300000A 		beq	.L187
 2232              		.loc 1 380 0
 2233 11ec 103092E5 		ldr	r3, [r2, #16]
 2234 11f0 010513E3 		tst	r3, #4194304
 2235 11f4 0320A003 		moveq	r2, #3
 2236 11f8 0020A013 		movne	r2, #0
 2237              	.L187:
 2238              	.LBE96:
 2239              	.LBE97:
 2240              		.loc 1 363 0
 2241 11fc 74309FE5 		ldr	r3, .L196+4
 2242 1200 0020C3E5 		strb	r2, [r3, #0]
 2243              		.loc 1 364 0
 2244 1204 FEFFFFEB 		bl	MMA_get_y
 2245              		.loc 1 365 0
 2246 1208 6C309FE5 		ldr	r3, .L196+8
 2247 120c 002093E5 		ldr	r2, [r3, #0]
 2248              		.loc 1 364 0
 2249 1210 68309FE5 		ldr	r3, .L196+12
 2250              		.loc 1 365 0
 2251 1214 AF0F52E3 		cmp	r2, #700
 2252              		.loc 1 364 0
 2253 1218 000083E5 		str	r0, [r3, #0]
 2254              		.loc 1 365 0
 2255 121c 010000AA 		bge	.L190
 2256 1220 AF0F50E3 		cmp	r0, #700
 2257 1224 030000CA 		bgt	.L191
 2258              	.L190:
 2259 1228 AF0F52E3 		cmp	r2, #700
 2260 122c 030000DA 		ble	.L192
 2261 1230 AF0F50E3 		cmp	r0, #700
 2262 1234 010000AA 		bge	.L192
 2263              	.L191:
 2264 1238 0120A0E3 		mov	r2, #1
 2265 123c 000000EA 		b	.L195
 2266              	.L192:
 2267              		.loc 1 366 0
 2268 1240 0020A0E3 		mov	r2, #0
 2269              	.L195:
 2270 1244 38309FE5 		ldr	r3, .L196+16
 2271 1248 0020C3E5 		strb	r2, [r3, #0]
 2272              		.loc 1 368 0
 2273 124c 34309FE5 		ldr	r3, .L196+20
 2274 1250 FF20A0E3 		mov	r2, #255
 2275 1254 002083E5 		str	r2, [r3, #0]
 2276              		.loc 1 367 0
 2277 1258 1C309FE5 		ldr	r3, .L196+8
 2278              		.loc 1 369 0
 2279 125c 0020A0E3 		mov	r2, #0
 2280              		.loc 1 367 0
 2281 1260 000083E5 		str	r0, [r3, #0]
 2282              		.loc 1 369 0
 2283 1264 0030E0E3 		mvn	r3, #0
 2284 1268 CF2F03E5 		str	r2, [r3, #-4047]
 2285              		.loc 1 370 0
 2286 126c 04E09DE4 		ldr	lr, [sp], #4
 2287 1270 1EFF2FE1 		bx	lr
 2288              	.L197:
 2289              		.align	2
 2290              	.L196:
 2291 1274 008002E0 		.word	-536707072
 2292 1278 08000000 		.word	button_pressed
 2293 127c 0C000000 		.word	prev_position
 2294 1280 10000000 		.word	cur_position
 2295 1284 09000000 		.word	update_screen
 2296 1288 004000E0 		.word	-536854528
 2297              	.LFE6:
 2299              		.global	__divsi3
 2300              		.global	__modsi3
 2301              		.section	.rodata.str1.1
 2302              	.LC5:
 2303 002c 474F2047 		.ascii	"GO GO MP3!\000"
 2303      4F204D50 
 2303      332100
 2304              		.text
 2305              		.align	2
 2306              		.global	main
 2308              	main:
 2309              	.LFB2:
 2310              		.loc 1 94 0
 2311              		@ Function supports interworking.
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 1, uses_anonymous_args = 0
 2314 128c 0DC0A0E1 		mov	ip, sp
 2315              	.LCFI25:
 2316 1290 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2317              	.LCFI26:
 2318 1294 04B04CE2 		sub	fp, ip, #4
 2319              	.LCFI27:
 2320 1298 08D04DE2 		sub	sp, sp, #8
 2321              	.LCFI28:
 2322              		.loc 1 104 0
 2323 129c FEFFFFEB 		bl	bootUp
 2324              		.loc 1 107 0
 2325 12a0 FEFFFFEB 		bl	vs1002Config
 2326              		.loc 1 108 0
 2327 12a4 FEFFFFEB 		bl	vs1002Reset
 2328              		.loc 1 109 0
 2329 12a8 FEFFFFEB 		bl	vs1002Init
 2330              	.LBB98:
 2331              		.loc 1 110 0
 2332 12ac 3000A0E3 		mov	r0, #48
 2333 12b0 FEFFFFEB 		bl	vs1002SetVolume
 2334 12b4 3000A0E3 		mov	r0, #48
 2335 12b8 FEFFFFEB 		bl	vs1002SetVolume
 2336 12bc 3000A0E3 		mov	r0, #48
 2337 12c0 FEFFFFEB 		bl	vs1002SetVolume
 2338 12c4 3000A0E3 		mov	r0, #48
 2339 12c8 FEFFFFEB 		bl	vs1002SetVolume
 2340 12cc 3000A0E3 		mov	r0, #48
 2341 12d0 FEFFFFEB 		bl	vs1002SetVolume
 2342              	.LBE98:
 2343              		.loc 1 111 0
 2344 12d4 FEFFFFEB 		bl	vs1002Finish
 2345              		.loc 1 114 0
 2346 12d8 FEFFFFEB 		bl	LCDInit
 2347              		.loc 1 115 0
 2348 12dc 14359FE5 		ldr	r3, .L234
 2349 12e0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2350 12e4 FEFFFFEB 		bl	LCDClear
 2351              		.loc 1 116 0
 2352 12e8 FEFFFFEB 		bl	LCDPrintLogo
 2353              		.loc 1 119 0
 2354 12ec 08059FE5 		ldr	r0, .L234+4
 2355 12f0 FEFFFFEB 		bl	initializeRadio
 2356              		.loc 1 122 0
 2357 12f4 04259FE5 		ldr	r2, .L234+8
 2358 12f8 003092E5 		ldr	r3, [r2, #0]
 2359 12fc 153C83E3 		orr	r3, r3, #5376
 2360 1300 003082E5 		str	r3, [r2, #0]
 2361 1304 0050A0E3 		mov	r5, #0
 2362              	.LVL96:
 2363              	.L199:
 2364              		.loc 1 125 0
 2365 1308 0000A0E3 		mov	r0, #0
 2366 130c FEFFFFEB 		bl	rootDirectory_files_stream
 2367 1310 006050E2 		subs	r6, r0, #0
 2368              		.loc 1 124 0
 2369 1314 015085E2 		add	r5, r5, #1
 2370              		.loc 1 125 0
 2371 1318 FAFFFF1A 		bne	.L199
 2372              		.loc 1 126 0
 2373 131c 063085E2 		add	r3, r5, #6
 2374 1320 0330C3E3 		bic	r3, r3, #3
 2375 1324 0DD063E0 		rsb	sp, r3, sp
 2376 1328 08708DE2 		add	r7, sp, #8
 2377              		.loc 1 127 0
 2378 132c 0700A0E1 		mov	r0, r7
 2379 1330 011085E2 		add	r1, r5, #1
 2380 1334 FEFFFFEB 		bl	rootDirectory_files
 2381              		.loc 1 128 0
 2382 1338 8032A0E1 		mov	r3, r0, asl #5
 2383 133c 043083E2 		add	r3, r3, #4
 2384 1340 0DD063E0 		rsb	sp, r3, sp
 2385              		.loc 1 127 0
 2386 1344 B8349FE5 		ldr	r3, .L234+12
 2387 1348 0040A0E1 		mov	r4, r0
 2388              	.LBB99:
 2389              		.loc 1 132 0
 2390 134c 0600A0E1 		mov	r0, r6
 2391              	.LVL97:
 2392              	.LBE99:
 2393              		.loc 1 127 0
 2394 1350 004083E5 		str	r4, [r3, #0]
 2395              		.loc 1 128 0
 2396 1354 08608DE2 		add	r6, sp, #8
 2397              	.LBB101:
 2398              		.loc 1 132 0
 2399 1358 00E0A0E1 		mov	lr, r0
 2400              	.LVL98:
 2401 135c 0080A0E1 		mov	r8, r0
 2402              	.LVL99:
 2403 1360 100000EA 		b	.L200
 2404              	.LVL100:
 2405              	.L206:
 2406 1364 0030A0E3 		mov	r3, #0
 2407              	.LBB100:
 2408              		.loc 1 142 0
 2409 1368 8EC2A0E1 		mov	ip, lr, asl #5
 2410              	.L205:
 2411              		.loc 1 134 0
 2412 136c 050050E1 		cmp	r0, r5
 2413              		.loc 1 142 0
 2414 1370 03208CE0 		add	r2, ip, r3
 2415 1374 0280C687 		strhib	r8, [r6, r2]
 2416              		.loc 1 134 0
 2417 1378 0600008A 		bhi	.L204
 2418              	.LVL101:
 2419              		.loc 1 135 0
 2420 137c 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 2421 1380 2C0051E3 		cmp	r1, #44
 2422              		.loc 1 136 0
 2423 1384 0230A001 		moveq	r3, r2
 2424              		.loc 1 139 0
 2425 1388 0210C617 		strneb	r1, [r6, r2]
 2426              		.loc 1 136 0
 2427 138c 0380C607 		streqb	r8, [r6, r3]
 2428              		.loc 1 140 0
 2429 1390 010080E2 		add	r0, r0, #1
 2430              		.loc 1 136 0
 2431 1394 1F30A003 		moveq	r3, #31
 2432              	.LVL102:
 2433              	.L204:
 2434              		.loc 1 133 0
 2435 1398 013083E2 		add	r3, r3, #1
 2436 139c 200053E3 		cmp	r3, #32
 2437 13a0 F1FFFF1A 		bne	.L205
 2438              	.LBE100:
 2439              		.loc 1 132 0
 2440 13a4 01E08EE2 		add	lr, lr, #1
 2441              	.LVL103:
 2442              	.L200:
 2443 13a8 04005EE1 		cmp	lr, r4
 2444 13ac ECFFFFBA 		blt	.L206
 2445              	.LBE101:
 2446              		.loc 1 148 0
 2447 13b0 0400A0E1 		mov	r0, r4
 2448              	.LVL104:
 2449 13b4 0F10A0E3 		mov	r1, #15
 2450 13b8 FEFFFFEB 		bl	__divsi3
 2451              	.LVL105:
 2452              		.loc 1 149 0
 2453 13bc 40349FE5 		ldr	r3, .L234+12
 2454              		.loc 1 148 0
 2455 13c0 FF4000E2 		and	r4, r0, #255
 2456 13c4 3C549FE5 		ldr	r5, .L234+16
 2457              	.LVL106:
 2458              		.loc 1 149 0
 2459 13c8 000093E5 		ldr	r0, [r3, #0]
 2460              		.loc 1 148 0
 2461 13cc 013044E2 		sub	r3, r4, #1
 2462 13d0 0530C5E5 		strb	r3, [r5, #5]
 2463              		.loc 1 149 0
 2464 13d4 0F10A0E3 		mov	r1, #15
 2465 13d8 FEFFFFEB 		bl	__modsi3
 2466              		.loc 1 152 0
 2467 13dc 14349FE5 		ldr	r3, .L234
 2468 13e0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2469              		.loc 1 153 0
 2470 13e4 20349FE5 		ldr	r3, .L234+20
 2471              		.loc 1 149 0
 2472 13e8 000050E3 		cmp	r0, #0
 2473 13ec 0540C515 		strneb	r4, [r5, #5]
 2474              		.loc 1 153 0
 2475 13f0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2476              		.loc 1 151 0
 2477 13f4 0C449FE5 		ldr	r4, .L234+16
 2478 13f8 0050A0E3 		mov	r5, #0
 2479              		.loc 1 153 0
 2480 13fc 0430C4E5 		strb	r3, [r4, #4]
 2481              		.loc 1 156 0
 2482 1400 0130A0E3 		mov	r3, #1
 2483              		.loc 1 152 0
 2484 1404 0320C4E5 		strb	r2, [r4, #3]
 2485              		.loc 1 158 0
 2486 1408 0400A0E1 		mov	r0, r4
 2487 140c 0610A0E1 		mov	r1, r6
 2488              		.loc 1 156 0
 2489 1410 0030C4E5 		strb	r3, [r4, #0]
 2490              		.loc 1 151 0
 2491 1414 0250C4E5 		strb	r5, [r4, #2]
 2492              		.loc 1 155 0
 2493 1418 0650C4E5 		strb	r5, [r4, #6]
 2494              		.loc 1 157 0
 2495 141c 085084E5 		str	r5, [r4, #8]
 2496              		.loc 1 158 0
 2497 1420 FEFFFFEB 		bl	getNewFiles
 2498              	.LBB102:
 2499              		.loc 1 159 0
 2500 1424 E4239FE5 		ldr	r2, .L234+24
 2501              	.L208:
 2502 1428 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 2503              	.LVL107:
 2504 142c 015085E2 		add	r5, r5, #1
 2505 1430 160055E3 		cmp	r5, #22
 2506 1434 EC31C4E5 		strb	r3, [r4, #492]
 2507 1438 014084E2 		add	r4, r4, #1
 2508 143c F9FFFF1A 		bne	.L208
 2509              	.LBE102:
 2510              		.loc 1 162 0
 2511 1440 CC039FE5 		ldr	r0, .L234+28
 2512 1444 FEFFFFEB 		bl	fillSettings
 2513              		.loc 1 166 0
 2514 1448 B0139FE5 		ldr	r1, .L234+8
 2515 144c 003091E5 		ldr	r3, [r1, #0]
 2516              		.loc 1 165 0
 2517 1450 B0239FE5 		ldr	r2, .L234+16
 2518 1454 BC439FE5 		ldr	r4, .L234+32
 2519              		.loc 1 166 0
 2520 1458 FF3DC3E3 		bic	r3, r3, #16320
 2521 145c 3030C3E3 		bic	r3, r3, #48
 2522              		.loc 1 167 0
 2523 1460 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 2524              		.loc 1 165 0
 2525 1464 002084E5 		str	r2, [r4, #0]
 2526              		.loc 1 166 0
 2527 1468 003081E5 		str	r3, [r1, #0]
 2528              		.loc 1 167 0
 2529 146c FEFFFFEB 		bl	LCDClear
 2530              		.loc 1 168 0
 2531 1470 000094E5 		ldr	r0, [r4, #0]
 2532 1474 FEFFFFEB 		bl	printMenu
 2533              		.loc 1 171 0
 2534 1478 003094E5 		ldr	r3, [r4, #0]
 2535 147c 0010A0E3 		mov	r1, #0
 2536 1480 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2537 1484 00108DE5 		str	r1, [sp, #0]
 2538 1488 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2539 148c 88039FE5 		ldr	r0, .L234+36
 2540 1490 0230A0E3 		mov	r3, #2
 2541 1494 04C08DE5 		str	ip, [sp, #4]
 2542 1498 FEFFFFEB 		bl	LCDPrintString
 2543              		.loc 1 175 0
 2544 149c 7C739FE5 		ldr	r7, .L234+40
 2545              		.loc 1 177 0
 2546 14a0 50939FE5 		ldr	r9, .L234
 2547              		.loc 1 187 0
 2548 14a4 78839FE5 		ldr	r8, .L234+44
 2549              	.LVL108:
 2550              	.LBB103:
 2551              	.LBB104:
 2552              		.loc 1 262 0
 2553 14a8 78A39FE5 		ldr	sl, .L234+48
 2554              	.L226:
 2555              	.LBE104:
 2556              	.LBE103:
 2557              		.loc 1 175 0
 2558 14ac 003097E5 		ldr	r3, [r7, #0]
 2559 14b0 020513E3 		tst	r3, #8388608
 2560 14b4 2100000A 		beq	.L209
 2561              		.loc 1 177 0
 2562 14b8 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 2563 14bc FEFFFFEB 		bl	LCDClear
 2564              		.loc 1 178 0
 2565 14c0 0430A0E3 		mov	r3, #4
 2566 14c4 00308DE5 		str	r3, [sp, #0]
 2567 14c8 003094E5 		ldr	r3, [r4, #0]
 2568 14cc 38139FE5 		ldr	r1, .L234+20
 2569 14d0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2570 14d4 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2571 14d8 0730A0E3 		mov	r3, #7
 2572 14dc 48039FE5 		ldr	r0, .L234+52
 2573 14e0 0010A0E3 		mov	r1, #0
 2574 14e4 04C08DE5 		str	ip, [sp, #4]
 2575 14e8 FEFFFFEB 		bl	LCDPrintString
 2576 14ec 0030A0E3 		mov	r3, #0
 2577              	.LVL109:
 2578              	.L210:
 2579              	.LBB106:
 2580              	.LBB107:
 2581              		.loc 1 262 0
 2582              	@ 262 "main.c" 1
 2583 14f0 0000A0E1 		nop
 2584              	@ 0 "" 2
 2585 14f4 34239FE5 		ldr	r2, .L234+56
 2586 14f8 013083E2 		add	r3, r3, #1
 2587 14fc 020053E1 		cmp	r3, r2
 2588 1500 FAFFFF1A 		bne	.L210
 2589              	.LBE107:
 2590              	.LBE106:
 2591              		.loc 1 180 0
 2592 1504 3020A0E3 		mov	r2, #48
 2593 1508 0030E0E3 		mvn	r3, #0
 2594              	.LVL110:
 2595 150c EB2F03E5 		str	r2, [r3, #-4075]
 2596              		.loc 1 181 0
 2597 1510 FEFFFFEB 		bl	main_msc
 2598              	.LBB108:
 2599              	.LBB109:
 2600              		.loc 1 700 0
 2601 1514 0E22A0E3 		mov	r2, #-536870912
 2602 1518 003092E5 		ldr	r3, [r2, #0]
 2603 151c 033083E3 		orr	r3, r3, #3
 2604 1520 003082E5 		str	r3, [r2, #0]
 2605              		.loc 1 701 0
 2606 1524 AA10A0E3 		mov	r1, #170
 2607              		.loc 1 702 0
 2608 1528 5530A0E3 		mov	r3, #85
 2609              		.loc 1 701 0
 2610 152c 081082E5 		str	r1, [r2, #8]
 2611              		.loc 1 702 0
 2612 1530 083082E5 		str	r3, [r2, #8]
 2613              		.loc 1 704 0
 2614 1534 0030A0E3 		mov	r3, #0
 2615              		.loc 1 703 0
 2616 1538 081082E5 		str	r1, [r2, #8]
 2617              		.loc 1 704 0
 2618 153c 083082E5 		str	r3, [r2, #8]
 2619              	.L209:
 2620              	.LBE109:
 2621              	.LBE108:
 2622              		.loc 1 187 0
 2623 1540 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2624 1544 000053E3 		cmp	r3, #0
 2625 1548 4300001A 		bne	.L211
 2626 154c E0329FE5 		ldr	r3, .L234+60
 2627 1550 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 2628              	.LVL111:
 2629 1554 000055E3 		cmp	r5, #0
 2630 1558 3F00001A 		bne	.L211
 2631              		.loc 1 189 0
 2632 155c D4329FE5 		ldr	r3, .L234+64
 2633 1560 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2634 1564 000053E3 		cmp	r3, #0
 2635 1568 3B00000A 		beq	.L211
 2636              		.loc 1 190 0
 2637 156c 2020A0E3 		mov	r2, #32
 2638 1570 0030E0E3 		mvn	r3, #0
 2639 1574 EB2F03E5 		str	r2, [r3, #-4075]
 2640              		.loc 1 191 0
 2641 1578 BC029FE5 		ldr	r0, .L234+68
 2642 157c FEFFFFEB 		bl	closeSong
 2643              		.loc 1 195 0
 2644 1580 80129FE5 		ldr	r1, .L234+16
 2645              		.loc 1 192 0
 2646 1584 B4329FE5 		ldr	r3, .L234+72
 2647              		.loc 1 195 0
 2648 1588 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2649              		.loc 1 192 0
 2650 158c 0050C3E5 		strb	r5, [r3, #0]
 2651              		.loc 1 195 0
 2652 1590 0E0052E3 		cmp	r2, #14
 2653              		.loc 1 193 0
 2654 1594 0232A0E3 		mov	r3, #536870912
 2655 1598 043087E5 		str	r3, [r7, #4]
 2656              		.loc 1 196 0
 2657 159c 01208292 		addls	r2, r2, #1
 2658              		.loc 1 197 0
 2659 15a0 08309195 		ldrls	r3, [r1, #8]
 2660              		.loc 1 196 0
 2661 15a4 0020C195 		strlsb	r2, [r1, #0]
 2662              		.loc 1 200 0
 2663 15a8 58C29FE5 		ldr	ip, .L234+16
 2664              		.loc 1 197 0
 2665 15ac 01308392 		addls	r3, r3, #1
 2666 15b0 08308195 		strls	r3, [r1, #8]
 2667              		.loc 1 200 0
 2668 15b4 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 2669 15b8 0F0053E3 		cmp	r3, #15
 2670 15bc 0C00001A 		bne	.L213
 2671 15c0 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 2672 15c4 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 2673 15c8 030052E1 		cmp	r2, r3
 2674 15cc 0800002A 		bcs	.L213
 2675              		.loc 1 203 0
 2676 15d0 013082E2 		add	r3, r2, #1
 2677              		.loc 1 201 0
 2678 15d4 0120A0E3 		mov	r2, #1
 2679 15d8 0020CCE5 		strb	r2, [ip, #0]
 2680              		.loc 1 202 0
 2681 15dc 0020A0E3 		mov	r2, #0
 2682              		.loc 1 204 0
 2683 15e0 0C00A0E1 		mov	r0, ip
 2684 15e4 0610A0E1 		mov	r1, r6
 2685              		.loc 1 202 0
 2686 15e8 08208CE5 		str	r2, [ip, #8]
 2687              		.loc 1 203 0
 2688 15ec 0630CCE5 		strb	r3, [ip, #6]
 2689              		.loc 1 204 0
 2690 15f0 FEFFFFEB 		bl	getNewFiles
 2691              	.L213:
 2692              		.loc 1 207 0
 2693 15f4 0C529FE5 		ldr	r5, .L234+16
 2694 15f8 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2695 15fc 833285E0 		add	r3, r5, r3, asl #5
 2696 1600 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2697 1604 000053E3 		cmp	r3, #0
 2698 1608 1300000A 		beq	.L211
 2699              		.loc 1 208 0
 2700 160c 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 2701 1610 FEFFFFEB 		bl	LCDClear
 2702              		.loc 1 209 0
 2703 1614 0500A0E1 		mov	r0, r5
 2704 1618 FEFFFFEB 		bl	printMenu
 2705              		.loc 1 210 0
 2706 161c 0510A0E1 		mov	r1, r5
 2707 1620 14029FE5 		ldr	r0, .L234+68
 2708 1624 FEFFFFEB 		bl	loadSongInfo
 2709 1628 10329FE5 		ldr	r3, .L234+72
 2710 162c 0000C3E5 		strb	r0, [r3, #0]
 2711              		.loc 1 211 0
 2712 1630 FEFFFFEB 		bl	vs1002Config
 2713              		.loc 1 212 0
 2714 1634 0000A0E3 		mov	r0, #0
 2715 1638 021BA0E3 		mov	r1, #2048
 2716 163c FEFFFFEB 		bl	vs1002SCIWrite
 2717              		.loc 1 213 0
 2718 1640 FEFFFFEB 		bl	vs1002Finish
 2719              		.loc 1 214 0
 2720 1644 0232A0E3 		mov	r3, #536870912
 2721 1648 0C3087E5 		str	r3, [r7, #12]
 2722              		.loc 1 215 0
 2723 164c 0020E0E3 		mvn	r2, #0
 2724 1650 EF3F12E5 		ldr	r3, [r2, #-4079]
 2725 1654 203083E3 		orr	r3, r3, #32
 2726 1658 EF3F02E5 		str	r3, [r2, #-4079]
 2727              	.LVL112:
 2728              	.L211:
 2729              		.loc 1 220 0
 2730 165c 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2731 1660 020053E3 		cmp	r3, #2
 2732 1664 0300001A 		bne	.L214
 2733 1668 000094E5 		ldr	r0, [r4, #0]
 2734 166c 0610A0E1 		mov	r1, r6
 2735 1670 FEFFFFEB 		bl	handleUpButton
 2736 1674 580000EA 		b	.L215
 2737              	.L214:
 2738              		.loc 1 221 0
 2739 1678 010053E3 		cmp	r3, #1
 2740 167c 0300001A 		bne	.L216
 2741 1680 000094E5 		ldr	r0, [r4, #0]
 2742 1684 0610A0E1 		mov	r1, r6
 2743 1688 FEFFFFEB 		bl	handleDownButton
 2744 168c 520000EA 		b	.L215
 2745              	.L216:
 2746              		.loc 1 222 0
 2747 1690 030053E3 		cmp	r3, #3
 2748 1694 0100001A 		bne	.L217
 2749 1698 FEFFFFEB 		bl	handleMiddleButton
 2750 169c 4E0000EA 		b	.L215
 2751              	.L217:
 2752              		.loc 1 224 0
 2753 16a0 8C319FE5 		ldr	r3, .L234+60
 2754 16a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2755 16a8 000053E3 		cmp	r3, #0
 2756 16ac 4A00000A 		beq	.L215
 2757              		.loc 1 225 0
 2758 16b0 0030E0E3 		mvn	r3, #0
 2759 16b4 1020A0E3 		mov	r2, #16
 2760 16b8 EB2F03E5 		str	r2, [r3, #-4075]
 2761 16bc 013083E2 		add	r3, r3, #1
 2762              	.LVL113:
 2763              	.L218:
 2764              	.LBB110:
 2765              	.LBB105:
 2766              		.loc 1 262 0
 2767              	@ 262 "main.c" 1
 2768 16c0 0000A0E1 		nop
 2769              	@ 0 "" 2
 2770 16c4 013083E2 		add	r3, r3, #1
 2771 16c8 0A0053E1 		cmp	r3, sl
 2772 16cc FBFFFF1A 		bne	.L218
 2773              	.LBE105:
 2774              	.LBE110:
 2775              		.loc 1 227 0
 2776 16d0 FEFFFFEB 		bl	MMA_get_y
 2777              	.LVL114:
 2778 16d4 AF0F50E3 		cmp	r0, #700
 2779 16d8 190000DA 		ble	.L219
 2780 16dc 60319FE5 		ldr	r3, .L234+76
 2781 16e0 003093E5 		ldr	r3, [r3, #0]
 2782 16e4 AF0F53E3 		cmp	r3, #700
 2783 16e8 150000DA 		ble	.L219
 2784              		.loc 1 228 0
 2785 16ec 4C319FE5 		ldr	r3, .L234+72
 2786 16f0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2787 16f4 000053E3 		cmp	r3, #0
 2788 16f8 0200000A 		beq	.L220
 2789 16fc 000094E5 		ldr	r0, [r4, #0]
 2790 1700 FEFFFFEB 		bl	quickClear
 2791 1704 020000EA 		b	.L221
 2792              	.L220:
 2793              		.loc 1 229 0
 2794 1708 003094E5 		ldr	r3, [r4, #0]
 2795 170c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2796 1710 FEFFFFEB 		bl	LCDClear
 2797              	.L221:
 2798              		.loc 1 233 0
 2799 1714 24319FE5 		ldr	r3, .L234+72
 2800 1718 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2801              		.loc 1 230 0
 2802 171c F0209FE5 		ldr	r2, .L234+28
 2803              		.loc 1 233 0
 2804 1720 000053E3 		cmp	r3, #0
 2805              		.loc 1 231 0
 2806 1724 0130A0E3 		mov	r3, #1
 2807 1728 0230C2E5 		strb	r3, [r2, #2]
 2808              		.loc 1 232 0
 2809 172c 0232A0E3 		mov	r3, #536870912
 2810 1730 043087E5 		str	r3, [r7, #4]
 2811              		.loc 1 230 0
 2812 1734 002084E5 		str	r2, [r4, #0]
 2813              		.loc 1 233 0
 2814 1738 0F328312 		addne	r3, r3, #-268435456
 2815              		.loc 1 234 0
 2816 173c 0131A003 		moveq	r3, #1073741824
 2817 1740 1E0000EA 		b	.L233
 2818              	.L219:
 2819              		.loc 1 236 0
 2820 1744 FEFFFFEB 		bl	MMA_get_y
 2821 1748 F8209FE5 		ldr	r2, .L234+80
 2822 174c 020050E1 		cmp	r0, r2
 2823 1750 1B0000CA 		bgt	.L223
 2824 1754 E8309FE5 		ldr	r3, .L234+76
 2825 1758 003093E5 		ldr	r3, [r3, #0]
 2826 175c 020053E1 		cmp	r3, r2
 2827 1760 170000CA 		bgt	.L223
 2828              		.loc 1 237 0
 2829 1764 D4309FE5 		ldr	r3, .L234+72
 2830 1768 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2831 176c 000053E3 		cmp	r3, #0
 2832 1770 0200000A 		beq	.L224
 2833 1774 000094E5 		ldr	r0, [r4, #0]
 2834 1778 FEFFFFEB 		bl	quickClear
 2835 177c 020000EA 		b	.L225
 2836              	.L224:
 2837              		.loc 1 238 0
 2838 1780 003094E5 		ldr	r3, [r4, #0]
 2839 1784 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2840 1788 FEFFFFEB 		bl	LCDClear
 2841              	.L225:
 2842              		.loc 1 243 0
 2843 178c AC309FE5 		ldr	r3, .L234+72
 2844 1790 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2845              		.loc 1 239 0
 2846 1794 6C209FE5 		ldr	r2, .L234+16
 2847              		.loc 1 243 0
 2848 1798 000053E3 		cmp	r3, #0
 2849              		.loc 1 240 0
 2850 179c 0030A0E3 		mov	r3, #0
 2851 17a0 0230C2E5 		strb	r3, [r2, #2]
 2852              		.loc 1 241 0
 2853 17a4 013283E2 		add	r3, r3, #268435456
 2854 17a8 043087E5 		str	r3, [r7, #4]
 2855              		.loc 1 242 0
 2856 17ac 033283E2 		add	r3, r3, #805306368
 2857 17b0 043087E5 		str	r3, [r7, #4]
 2858              		.loc 1 239 0
 2859 17b4 002084E5 		str	r2, [r4, #0]
 2860              		.loc 1 243 0
 2861 17b8 0100000A 		beq	.L223
 2862 17bc 0E3283E2 		add	r3, r3, #-536870912
 2863              	.L233:
 2864 17c0 0C3087E5 		str	r3, [r7, #12]
 2865              	.L223:
 2866              		.loc 1 245 0
 2867 17c4 000094E5 		ldr	r0, [r4, #0]
 2868 17c8 FEFFFFEB 		bl	printMenu
 2869              		.loc 1 246 0
 2870 17cc 0020E0E3 		mvn	r2, #0
 2871 17d0 EF3F12E5 		ldr	r3, [r2, #-4079]
 2872 17d4 103083E3 		orr	r3, r3, #16
 2873 17d8 EF3F02E5 		str	r3, [r2, #-4079]
 2874              	.L215:
 2875              		.loc 1 249 0
 2876 17dc 0030E0E3 		mvn	r3, #0
 2877 17e0 EF2F13E5 		ldr	r2, [r3, #-4079]
 2878 17e4 102082E3 		orr	r2, r2, #16
 2879 17e8 EF2F03E5 		str	r2, [r3, #-4079]
 2880              		.loc 1 248 0
 2881 17ec 013083E2 		add	r3, r3, #1
 2882 17f0 0030C8E5 		strb	r3, [r8, #0]
 2883 17f4 2CFFFFEA 		b	.L226
 2884              	.L235:
 2885              		.align	2
 2886              	.L234:
 2887 17f8 00000000 		.word	white
 2888 17fc CD030000 		.word	973
 2889 1800 00C002E0 		.word	-536690688
 2890 1804 04000000 		.word	NUMBEROFFILES
 2891 1808 74000000 		.word	file_manager
 2892 180c 00000000 		.word	black
 2893 1810 00000000 		.word	welcome
 2894 1814 78020000 		.word	settings_menu
 2895 1818 7C040000 		.word	current_display
 2896 181c 2C000000 		.word	.LC5
 2897 1820 008002E0 		.word	-536707072
 2898 1824 08000000 		.word	button_pressed
 2899 1828 C0C62D00 		.word	3000000
 2900 182c 00000000 		.word	USB
 2901 1830 80969800 		.word	10000000
 2902 1834 09000000 		.word	update_screen
 2903 1838 02000000 		.word	song_is_over
 2904 183c 14000000 		.word	current_song
 2905 1840 01000000 		.word	file_is_open
 2906 1844 0C000000 		.word	prev_position
 2907 1848 BB020000 		.word	699
 2908              	.LFE2:
 2910              		.global	volume_setting
 2911              		.data
 2912              		.align	2
 2915              	volume_setting:
 2916 0000 10000000 		.word	16
 2917              		.global	radio_channel
 2918              		.align	2
 2921              	radio_channel:
 2922 0004 CD030000 		.word	973
 2923              		.global	radio_enable
 2924              		.bss
 2927              	radio_enable:
 2928 0000 00       		.space	1
 2929              		.global	welcome
 2930              		.section	.rodata
 2933              	welcome:
 2934 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 2934      204C6973 
 2934      743A0A0D 
 2934      00
 2935 000d 00000000 		.space	9
 2935      00000000 
 2935      00
 2936              		.global	NotFound
 2939              	NotFound:
 2940 0016 46696C65 		.ascii	"File Not Found!"
 2940      204E6F74 
 2940      20466F75 
 2940      6E6421
 2941              		.global	USB
 2944              	USB:
 2945 0025 55534220 		.ascii	"USB Connected!"
 2945      436F6E6E 
 2945      65637465 
 2945      6421
 2946              		.global	newline
 2949              	newline:
 2950 0033 0A00     		.ascii	"\012\000"
 2951              		.global	volume
 2954              	volume:
 2955 0035 566F6C75 		.ascii	"Volume\000"
 2955      6D6500
 2956              		.global	contrast
 2959              	contrast:
 2960 003c 436F6E74 		.ascii	"Contrast\000"
 2960      72617374 
 2960      00
 2961              		.global	radio_power
 2964              	radio_power:
 2965 0045 52616469 		.ascii	"Radio Power"
 2965      6F20506F 
 2965      776572
 2966              		.global	radio_channel_menu
 2969              	radio_channel_menu:
 2970 0050 52616469 		.ascii	"Radio Channel"
 2970      6F204368 
 2970      616E6E65 
 2970      6C
 2971              		.global	settings
 2974              	settings:
 2975 005d 53657474 		.ascii	"Settings:\000"
 2975      696E6773 
 2975      3A00
 2976              		.bss
 2977              	file_is_open:
 2978 0001 00       		.space	1
 2979              	song_is_over:
 2980 0002 00       		.space	1
 2981 0003 00       		.align	2
 2982              	NUMBEROFFILES:
 2983 0004 00000000 		.space	4
 2984              	button_pressed:
 2985 0008 00       		.space	1
 2986              	update_screen:
 2987 0009 00       		.space	1
 2988 000a 0000     		.align	2
 2989              	prev_position:
 2990 000c 00000000 		.space	4
 2991              		.align	2
 2992              	cur_position:
 2993 0010 00000000 		.space	4
 2994              		.align	2
 2995              	current_song:
 2996 0014 00000000 		.space	96
 2996      00000000 
 2996      00000000 
 2996      00000000 
 2996      00000000 
 2997              		.align	2
 2998              	file_manager:
 2999 0074 00000000 		.space	516
 2999      00000000 
 2999      00000000 
 2999      00000000 
 2999      00000000 
 3000              		.align	2
 3001              	settings_menu:
 3002 0278 00000000 		.space	516
 3002      00000000 
 3002      00000000 
 3002      00000000 
 3002      00000000 
 3003              		.align	2
 3004              	current_display:
 3005 047c 00000000 		.space	4
 3467              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2982   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2954   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2964   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2969   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2974   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:363    .text:00000240 sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:413    .text:000002a4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2995   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2979   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:422    .text:000002b4 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:428    .text:000002b4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:466    .text:00000314 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:472    .text:0000031c timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:478    .text:0000031c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:496    .text:00000344 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:502    .text:00000348 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:510    .text:00000348 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:589    .text:00000408 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2949   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:597    .text:00000414 printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:605    .text:00000414 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:682    .text:000004dc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:688    .text:000004e0 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:696    .text:000004e0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:776    .text:000005b8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:782    .text:000005bc handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:789    .text:000005bc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:846    .text:00000634 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2998   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:852    .text:00000638 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:859    .text:00000638 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:914    .text:000006a8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:924    .text:000006ac disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:930    .text:000006ac $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:997    .text:00000750 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2927   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:3004   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1011   .text:00000764 enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1017   .text:00000764 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1085   .text:0000080c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1095   .text:00000820 initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1103   .text:00000820 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1174   .text:00000890 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1182   .text:0000089c closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1189   .text:0000089c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1211   .text:000008d0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1217   .text:000008d4 stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1224   .text:000008d4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1278   .text:0000095c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2977   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1286   .text:00000968 loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1293   .text:00000968 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1387   .text:00000a3c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1397   .text:00000a40 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1403   .text:00000a40 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:1967   .text:00000f80 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2939   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:3001   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2915   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2984   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2921   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2000   .text:00000fd8 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2006   .text:00000fd8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2189   .text:00001194 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2205   .text:000011c4 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2214   .text:000011c4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2291   .text:00001274 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2989   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2992   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2986   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2308   .text:0000128c main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2314   .text:0000128c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2887   .text:000017f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2933   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2944   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2916   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2959   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccWUsDgn.s:2930   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
vs1002Config
vs1002SendMusic
fat16_read_file
vs1002Finish
vs1002SCIWrite
LCDPrintString
LCDSetRowColor
ns73Config
ns73Send
ns73Init
ns73SetChannel
fat16_close_file
root_file_exists
root_open
fat16_file_size
LCDClear
vs1002SetVolume
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
MMA_get_y
__divsi3
__modsi3
vs1002Reset
vs1002Init
LCDInit
LCDPrintLogo
rootDirectory_files_stream
rootDirectory_files
main_msc
