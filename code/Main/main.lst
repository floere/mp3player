   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting = 16, radio_channel = 1000;
  78:main.c        **** char radio_enable = OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void)
  94:main.c        **** {
  95:main.c        **** //*******************************************************
  96:main.c        **** //					Local Variables
  97:main.c        **** //*******************************************************
  98:main.c        **** unsigned long int numberOfChars = 0;
  99:main.c        **** 
 100:main.c        **** //*******************************************************
 101:main.c        **** //					Main Code
 102:main.c        **** //*******************************************************
 103:main.c        ****   //Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   initializeMP3Player();
 106:main.c        ****   splashScreen();
 107:main.c        ****   initializeRadio(radio_channel);
 108:main.c        ****   
 109:main.c        ****   // Find Out how many files are on the SD card
 110:main.c        ****   selectSD();	//Make sure SPI is selected for reading the card
 111:main.c        ****   
 112:main.c        ****   do{
 113:main.c        ****   	numberOfChars++;
 114:main.c        ****   }while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filena
 115:main.c        ****   char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD c
 116:main.c        ****   NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 117:main.c        ****   FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 118:main.c        ****   
 119:main.c        ****   //Get all of the filenames into a Global Array
 120:main.c        ****   int chartracker=0;	
 121:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 122:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 123:main.c        ****   		if(chartracker <= numberOfChars){
 124:main.c        ****   			if(tempNames[chartracker]==','){
 125:main.c        ****   				Files[j].file_name[i] = '\0';
 126:main.c        ****   				i=MAXFILENAMELEN+1;
 127:main.c        ****   			}
 128:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 129:main.c        ****   			chartracker++;
 130:main.c        ****   		}
 131:main.c        ****   		else Files[j].file_name[i] ='\0';
 132:main.c        ****   	}	
 133:main.c        ****   }
 134:main.c        **** 	
 135:main.c        **** 	
 136:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 137:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 138:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 139:main.c        **** 	
 140:main.c        **** 	file_manager.orientation =ORIENTUP;
 141:main.c        **** 	file_manager.text_color=white;
 142:main.c        **** 	file_manager.back_color=black;
 143:main.c        **** 	
 144:main.c        **** 	file_manager.current_page=0;
 145:main.c        **** 	file_manager.current_row=1;
 146:main.c        **** 	file_manager.current_index=0;	
 147:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 148:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++) {
 149:main.c        **** 	  file_manager.title[i] = welcome[i];
 150:main.c        ****   }
 151:main.c        **** 	
 152:main.c        **** 	//Generate the settings menu and fill in default settings values
 153:main.c        **** 	fillSettings(&settings_menu);
 154:main.c        **** 	
 155:main.c        **** 	//Setup the menu
 156:main.c        **** 	current_display = &file_manager;
 157:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 158:main.c        **** 	LCDClear(current_display->back_color);
 159:main.c        **** 	printMenu(current_display);
 160:main.c        **** 	
 161:main.c        **** 	// TODO Floere remove
 162:main.c        **** 	LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 163:main.c        **** 	
 164:main.c        **** 	while(1){
 165:main.c        **** 	  // USB connected!
 166:main.c        **** 		if (isUSBConnected()) {
 167:main.c        **** 			LCDClear(white);
 168:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 169:main.c        ****       delay_ms(1000);
 170:main.c        ****       stopAllInterrupts(); // To allow USB communication
 171:main.c        **** 			main_msc();
 172:main.c        **** 			reset();
 173:main.c        **** 		}
 174:main.c        **** 	
 175:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 176:main.c        **** 		//while(!button_pressed && !update_screen){
 177:main.c        **** 		if(!button_pressed && !update_screen){
 178:main.c        ****       // If the current song is done playing, start playing the next song if it's available.
 179:main.c        ****       if (song_is_over) {
 180:main.c        ****         disableMP3Interrupt();
 181:main.c        ****         closeSong(&current_song); // Close the current song
 182:main.c        ****         file_is_open = 0;         //change master flag
 183:main.c        ****         ledBlueOff();
 184:main.c        ****         // Get the next song on the page by changing rows
 185:main.c        **** 				if(file_manager.current_row < NUMROWS){
 186:main.c        **** 					file_manager.current_row++;
 187:main.c        **** 					file_manager.current_index++;
 188:main.c        **** 				}
 189:main.c        **** 				//Go to the next page of songs if necessary
 190:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 191:main.c        **** 					file_manager.current_row=1;
 192:main.c        **** 					file_manager.current_index=0;
 193:main.c        **** 					file_manager.current_page++;
 194:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 195:main.c        **** 				}
 196:main.c        **** 				//If there is another song in the list, get it and play it!
 197:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 198:main.c        **** 					LCDClear(file_manager.back_color);
 199:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 200:main.c        **** 					file_is_open = loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 201:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 202:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode. TOD
 203:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 204:main.c        **** 					ledBlueOn();
 205:main.c        **** 					enableMP3Interrupt();
 206:main.c        **** 				}	
 207:main.c        **** 			}
 208:main.c        **** 		}
 209:main.c        **** 
 210:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);
 211:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 212:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 213:main.c        **** 		
 214:main.c        **** 		else if(update_screen){
 215:main.c        **** 			disableUIInterrupt(DEBOUNCE_ACCELEROMETER); // Stop interrupts and allow accelerometer to stabil
 216:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 217:main.c        **** 				if(file_is_open)quickClear(current_display);
 218:main.c        **** 				else LCDClear(current_display->back_color);
 219:main.c        **** 				current_display = &settings_menu;
 220:main.c        **** 				current_display->orientation=ORIENTLEFT;
 221:main.c        **** 				ledBlueOff();
 222:main.c        **** 				if(file_is_open)ledGrnOn();
 223:main.c        **** 				else ledRedOn();
 224:main.c        **** 			}
 225:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 226:main.c        **** 				if(file_is_open)quickClear(current_display);
 227:main.c        **** 				else LCDClear(current_display->back_color);
 228:main.c        **** 				current_display = &file_manager;
 229:main.c        **** 				current_display->orientation=ORIENTUP;
 230:main.c        **** 				ledGrnOff();
 231:main.c        **** 				ledRedOff();
 232:main.c        **** 				if(file_is_open)ledBlueOn();
 233:main.c        **** 			}
 234:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 235:main.c        **** 			enableUIInterrupt();
 236:main.c        **** 		}
 237:main.c        **** 		button_pressed=NO_BUT;
 238:main.c        **** 		enableUIInterrupt();
 239:main.c        **** 	}
 240:main.c        ****     return 0;
 241:main.c        **** }
 242:main.c        **** 
 243:main.c        **** 
 244:main.c        **** // Usage: delay_ms(1000);
 245:main.c        **** // Inputs: int count: Number of milliseconds to delay
 246:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 247:main.c        **** void delay_ms(int count)
 248:main.c        **** {
  16              		.loc 1 248 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 249:main.c        ****   int i;
 250:main.c        ****   count *= 10000;
  22              		.loc 1 250 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 251:main.c        ****   for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 251 0
  31              	@ 251 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 252:main.c        **** }
  38              		.loc 1 252 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 253:main.c        **** 
 254:main.c        **** // Usage: bootUp();
 255:main.c        **** // Inputs: None
 256:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 257:main.c        **** void bootUp(void)
 258:main.c        **** {
 259:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 260:main.c        ****     delay_ms(10); //Delay for power to stablize
 261:main.c        **** 
 262:main.c        ****     //Bring up SD and FAT
 263:main.c        ****     if(!sd_raw_init())
 264:main.c        ****     {
 265:main.c        ****         rprintf("SD Init Error\n");
 266:main.c        ****     }
 267:main.c        ****     if(openroot())
 268:main.c        ****     {
 269:main.c        ****         rprintf("SD OpenRoot Error\n");
 270:main.c        ****     }
 271:main.c        ****      
 272:main.c        ****   //Initialize I/O Ports and Peripherals
 273:main.c        ****   //Setup the MP3 I/O Lines
 274:main.c        ****   IODIR0 |= MP3_XCS;
 275:main.c        ****   IODIR0 &= ~MP3_DREQ;
 276:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 277:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 278:main.c        ****   
 279:main.c        ****   //Setupt the FM Trans. Lines
 280:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 281:main.c        ****   IODIR1 |= FM_CS;
 282:main.c        ****   
 283:main.c        ****   //Setup the SD Card I/O Lines
 284:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 285:main.c        ****   
 286:main.c        ****   //Setup the Accelerometer I/O Lines
 287:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 288:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 289:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 290:main.c        ****   
 291:main.c        ****   //Setup the LCD I/O Lines
 292:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 293:main.c        ****   
 294:main.c        ****   initializeLEDs();
 295:main.c        ****   
 296:main.c        ****   //Setup the Buttons
 297:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 298:main.c        ****   
 299:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 300:main.c        ****   
 301:main.c        ****   initializeInterrupts();
 302:main.c        ****   initializeUITimer();
 303:main.c        ****   initializeMP3Player();
 304:main.c        ****   
 305:main.c        ****   initializeSPI();
 306:main.c        **** }
 307:main.c        **** 
 308:main.c        **** //Usage: None (Automatically Called by FW)
 309:main.c        **** //Inputs: None
 310:main.c        **** //This function is a global interrupt called by a match on the Timer 0 match.  The interrupt
 311:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 312:main.c        **** // and setting the appropriate global flag if either has occured.
 313:main.c        **** static void timer0ISR(void)
 314:main.c        **** {
 315:main.c        ****   button_pressed = getButton(); // Find out if a button has been pressed, and which one
 316:main.c        ****   cur_position = MMA_get_y();   // Get the current position of the screen
 317:main.c        ****   if((prev_position<700 && cur_position>700) || (prev_position>700 && cur_position<700)) {
 318:main.c        ****     update_screen = 1;
 319:main.c        ****   } else {
 320:main.c        ****     update_screen = 0; // Determine if the accelerometer has been rotated
 321:main.c        ****   }
 322:main.c        ****   prev_position = cur_position; // Save the position value for later reference
 323:main.c        ****   
 324:main.c        ****   T0IR = 0xFF;                  // Clear the timer interrupt
 325:main.c        ****   VICVectAddr = 0;              // Update the VIC priorities
 326:main.c        **** }
 327:main.c        **** 
 328:main.c        **** //  Usage: None (Automatically Called by FW)
 329:main.c        **** //  Inputs: None
 330:main.c        **** //  This function is a global interrupt called by a match on the Timer 1 match.
 331:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 332:main.c        **** //  WARNING: Altering the Timer 1 Prescale register or Timer 1 Match value will put proper MP3 play
 333:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 334:main.c        **** //
 335:main.c        **** static void timer1ISR(void) {
 336:main.c        ****   sendMP3Data();
 337:main.c        ****   
 338:main.c        ****   T1IR = 0xFF;      // Clear the timer 1 interrupt
 339:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 340:main.c        **** }
 341:main.c        **** 
 342:main.c        **** // Usage: button_value = getButton();
 343:main.c        **** // Inputs:  None
 344:main.c        **** // Outputs: None
 345:main.c        **** // Function returns the value of the button that is currently being pressed.
 346:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 347:main.c        **** char getButton(void){
  51              		.loc 1 347 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 348:main.c        ****   if (!(IOPIN1 & SW_UP)) {
  56              		.loc 1 348 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 349:main.c        ****     return UP_BUT;
 350:main.c        ****   } else if (!(IOPIN1 & SW_DWN)) {
  62              		.loc 1 350 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 351:main.c        ****     return DWN_BUT;
 352:main.c        ****   } else if (!(IOPIN1 & SW_MID)) {
  67              		.loc 1 352 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 353:main.c        ****     return MID_BUT;
 354:main.c        ****   }
 355:main.c        ****   return NO_BUT;
 356:main.c        **** }
  72              		.loc 1 356 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 357:main.c        **** 
 358:main.c        **** 
 359:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 359 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 360:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 360 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 359 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 360 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB136:
 103              	.LBB137:
 361:main.c        ****     for(int i =0; i<NUMROWS; i++){
 362:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 363:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 363 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE137:
 107              	.LBE136:
 108              		.loc 1 360 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB139:
 364:main.c        ****       }
 365:main.c        ****     }
 366:main.c        ****   }
 367:main.c        ****   else{
 368:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 368 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB141:
 369:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 370:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 370 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE141:
 125              	.LBE139:
 126              	.LBB142:
 127              	.LBB138:
 128              		.loc 1 363 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 362 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 363 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 362 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE138:
 141              		.loc 1 361 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE142:
 154              	.LBB143:
 155              	.LBB140:
 156              		.loc 1 370 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 369 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 370 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 369 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE140:
 169              		.loc 1 368 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE143:
 181              	.LBB144:
 371:main.c        ****       }
 372:main.c        ****     }
 373:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 373 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE144:
 188              	.LBB145:
 189              		.loc 1 368 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE145:
 198              	.LBB146:
 199              		.loc 1 373 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE146:
 374:main.c        ****   }
 375:main.c        **** }
 209              		.loc 1 375 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 376:main.c        **** 
 377:main.c        **** // Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 378:main.c        **** // Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 379:main.c        **** // DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 380:main.c        **** //
 381:main.c        **** // The function takes the currently selected file name from the selected_song structure and loads
 382:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 383:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 384:main.c        **** //
 385:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 386:main.c        ****   // Get the selected songs file name
 387:main.c        ****   for(int i=0; i < MAXFILENAMELEN; i++) {
 388:main.c        ****     song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 389:main.c        ****   }
 390:main.c        ****   // Get the selected songs display name
 391:main.c        ****   for(int i=0; i<MAXDISPLEN; i++){
 392:main.c        ****     if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 393:main.c        ****       song->name[i] = '\0';
 394:main.c        ****       i = MAXDISPLEN;
 395:main.c        ****     } else {
 396:main.c        ****       song->name[i]=song->file_name[i];
 397:main.c        ****     }
 398:main.c        ****   }
 399:main.c        ****   
 400:main.c        ****   selectSD(); // Make sure SPI is selected for reading the card
 401:main.c        ****   
 402:main.c        ****   // Check to see if the selected song is valid
 403:main.c        ****   if(!root_file_exists(song->file_name)) {
 404:main.c        ****     selectLCD();
 405:main.c        ****     return 0;
 406:main.c        ****   } else {
 407:main.c        ****     // open the selected song
 408:main.c        ****     song->handle = root_open(song->file_name);
 409:main.c        ****     song->size = fat16_file_size(song->handle);
 410:main.c        ****     fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 411:main.c        ****   }
 412:main.c        ****   
 413:main.c        ****   selectLCD();
 414:main.c        ****   return 1;
 415:main.c        **** }
 416:main.c        **** 
 417:main.c        **** // Usage: CloseSong(&current_song);
 418:main.c        **** // Inputs: SongStruct *song: Pointer to a song structure to be closed
 419:main.c        **** // Function closes a song that is currently open.
 420:main.c        **** void closeSong(SongStruct *song){
 421:main.c        ****   selectSD(); // Open SPI line for the SD Card.
 422:main.c        ****   fat16_close_file(song->handle);
 423:main.c        ****   selectLCD(); // Return SPI line to LCD.
 424:main.c        **** }
 425:main.c        **** 
 426:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 427:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 428:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 429:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 430:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 431:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 432:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 433:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 434:main.c        **** 	if(direction == PREVIOUS){
 435:main.c        **** 		display->current_row--;
 436:main.c        **** 		display->current_index--;
 437:main.c        **** 	}
 438:main.c        **** 	else{
 439:main.c        **** 		display->current_row++;
 440:main.c        **** 		display->current_index++;		
 441:main.c        **** 	}
 442:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 443:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 444:main.c        **** }
 445:main.c        **** 
 446:main.c        **** //Usage: printMenu(&settings_menu);
 447:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 448:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 449:main.c        **** void printMenu(DisplayStruct *display){
 450:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 451:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 452:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 453:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 454:main.c        **** 	}
 455:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 456:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 457:main.c        **** }
 458:main.c        **** 
 459:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 460:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 461:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 462:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 463:main.c        **** //also loads the default display values along with the default settings values. 
 464:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 464 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB147:
 465:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 466:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 466 0
 233 014c A4909FE5 		ldr	r9, .L36
 467:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 467 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 468:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 468 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 469:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 469 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE147:
 241              		.loc 1 464 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB148:
 249              		.loc 1 466 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 467 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 468 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 469 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 465 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 466 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 467 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 468 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 469 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 465 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE148:
 275              	.LBB149:
 470:main.c        **** 	}
 471:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 472:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 472 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 471 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 472 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 471 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE149:
 473:main.c        **** 	}
 474:main.c        **** 	menu->text_color=white;
 289              		.loc 1 474 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 475:main.c        **** 	menu->back_color=black;
 294              		.loc 1 475 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 476:main.c        **** 	menu->current_row=1;
 297              		.loc 1 476 0
 298 01d0 0130A0E3 		mov	r3, #1
 477:main.c        **** 	menu->current_column=0;
 478:main.c        **** 	menu->current_index=0;
 479:main.c        **** 	menu->orientation = ORIENTLEFT;
 480:main.c        **** 	menu->current_page=0;
 481:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 481 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 475 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 479 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 476 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 477 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 478 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 480 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 482:main.c        **** }
 313              		.loc 1 482 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 483:main.c        **** 
 484:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 485:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 486:main.c        **** //			FileStruct *Files: List of files on the SD card
 487:main.c        **** //Outputs: None
 488:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 489:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 490:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 491:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 492:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 493:main.c        **** 	}
 494:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 495:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 496:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 497:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 498:main.c        **** 		//if(file_is_open)quickClear(display);
 499:main.c        **** 		//else LCDClear(display->back_color);
 500:main.c        **** 		quickClear(display);
 501:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 502:main.c        **** 		display->current_index=14;					//
 503:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 504:main.c        **** 		printMenu(display);							//	display previous page
 505:main.c        **** 	}
 506:main.c        **** }
 507:main.c        **** 
 508:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 509:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 510:main.c        **** //			FileStruct *Files: List of files on the SD card
 511:main.c        **** //Outputs: None
 512:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 513:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 514:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 515:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 516:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 517:main.c        **** 	}
 518:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 519:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 520:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 521:main.c        **** 		display->current_page+=1;		
 522:main.c        **** 		//if(file_is_open)quickClear(display);
 523:main.c        **** 		//else LCDClear(display->back_color);
 524:main.c        **** 		quickClear(display);
 525:main.c        **** 		display->current_row=1;
 526:main.c        **** 		display->current_index=0;
 527:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 528:main.c        **** 		printMenu(display);				
 529:main.c        **** 	}
 530:main.c        **** }
 531:main.c        **** 
 532:main.c        **** //Usage: handleMiddleButton();
 533:main.c        **** //Inputs: None
 534:main.c        **** //Outputs: None
 535:main.c        **** //Description: This function is called when the middle button is pressed.
 536:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 537:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 538:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 539:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 540:main.c        **** void handleMiddleButton(void){
 541:main.c        ****   disableUIInterrupt(DEBOUNCE_SWITCH); // was 250
 542:main.c        ****   
 543:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 544:main.c        ****   if (current_display == &file_manager) {
 545:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 546:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 547:main.c        ****       if (!file_is_open) { // Make sure this is a valid file
 548:main.c        ****         LCDClear(white);
 549:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 550:main.c        ****         delay_ms(1000);
 551:main.c        ****         LCDClear(black);
 552:main.c        ****         printMenu(&file_manager);
 553:main.c        ****       } else {
 554:main.c        ****         startMP3Player();
 555:main.c        ****       }
 556:main.c        ****     } else { // If a file is already open then this acts like a stop button
 557:main.c        ****       stopMP3Player();
 558:main.c        ****     }
 559:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 560:main.c        ****     if (file_is_open) {
 561:main.c        ****       quickClear(current_display);
 562:main.c        ****     } else {
 563:main.c        ****       LCDClear(settings_menu.back_color);
 564:main.c        ****     }
 565:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 566:main.c        **** 		enableUIInterrupt();
 567:main.c        **** 		if (current_display->current_row == VOLUMEMENU) {
 568:main.c        **** 			enableUIInterrupt();
 569:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 570:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 571:main.c        **** 			while(button_pressed < MID_BUT){
 572:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 150
 573:main.c        ****         if (button_pressed==UP_BUT) {
 574:main.c        ****           raiseVolume(1);
 575:main.c        ****         } else if (button_pressed==DWN_BUT) {
 576:main.c        ****           lowerVolume(1);
 577:main.c        ****         }
 578:main.c        ****         enableUIInterrupt();
 579:main.c        **** 			}
 580:main.c        **** 		}	
 581:main.c        ****     else if (current_display->current_row == RADIOCMENU) {
 582:main.c        ****       displayRadioMenu();
 583:main.c        ****       button_pressed = NO_BUT;
 584:main.c        ****       enableUIInterrupt();
 585:main.c        ****       while (button_pressed < MID_BUT) {
 586:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 100
 587:main.c        ****         if (button_pressed == UP_BUT) {
 588:main.c        ****           changeRadioFrequency(2);
 589:main.c        ****         } else if (button_pressed == DWN_BUT) {
 590:main.c        ****           changeRadioFrequency(-2);
 591:main.c        ****         }
 592:main.c        ****         enableUIInterrupt();
 593:main.c        ****       }
 594:main.c        ****       setRadioFrequency(radio_channel); // TODO Not really necessary, is it?
 595:main.c        ****     } else if (current_display->current_row == RADIOPMENU) {
 596:main.c        ****       LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 597:main.c        ****       if (radio_enable) {
 598:main.c        ****         LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 599:main.c        ****       } else {
 600:main.c        ****         LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 601:main.c        ****       }
 602:main.c        ****       button_pressed = NO_BUT;
 603:main.c        ****       enableUIInterrupt();
 604:main.c        ****       while (button_pressed < MID_BUT) {
 605:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 100
 606:main.c        ****         if (button_pressed == UP_BUT) {
 607:main.c        ****           enableRadio();
 608:main.c        ****         } else if (button_pressed == DWN_BUT) {
 609:main.c        ****           disableRadio();
 610:main.c        ****         }
 611:main.c        ****         enableUIInterrupt();
 612:main.c        ****       }
 613:main.c        ****     }
 614:main.c        ****     if (file_is_open) {
 615:main.c        ****       quickClear(current_display);
 616:main.c        ****     } else {
 617:main.c        ****       LCDClear(current_display->back_color);
 618:main.c        ****     }
 619:main.c        ****     printMenu(current_display);
 620:main.c        ****   }
 621:main.c        ****   enableUIInterrupt();
 622:main.c        **** }
 623:main.c        **** 
 624:main.c        **** //  Usage: quickClear(currentDisplay);
 625:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 626:main.c        **** //  Outputs: None
 627:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 628:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 629:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 630:main.c        **** //               good to use while an MP3 is playing.
 631:main.c        **** //
 632:main.c        **** void quickClear(DisplayStruct *display){
 633:main.c        ****   selectLCD();		//Hand over SPI lines to LCD talk
 634:main.c        ****   // If we're on the first page of the menu, we also need to clear the title.
 635:main.c        ****   if (display->current_page == 0) {
 636:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 637:main.c        ****   }
 638:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 639:main.c        ****   for (int j = 0; j < NUMROWS; j++) {
 640:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 641:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 642:main.c        ****   }
 643:main.c        **** }
 644:main.c        **** 
 645:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 646:main.c        **** //
 647:main.c        **** void reset(void) {
 332              		.loc 1 647 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 648:main.c        ****   WDMOD |= 3;
 337              		.loc 1 648 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 649:main.c        ****   WDFEED = 0xAA;
 342              		.loc 1 649 0
 343 0220 AA10A0E3 		mov	r1, #170
 650:main.c        ****   WDFEED = 0x55;
 344              		.loc 1 650 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 649 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 650 0
 349 022c 083082E5 		str	r3, [r2, #8]
 651:main.c        ****   WDFEED = 0xAA;
 652:main.c        ****   WDFEED = 0x00;
 350              		.loc 1 652 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 651 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 652 0
 355 0238 083082E5 		str	r3, [r2, #8]
 653:main.c        **** }
 356              		.loc 1 653 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	initializeSPI
 363              	initializeSPI:
 364              	.LFB30:
 654:main.c        **** 
 655:main.c        **** // Flöre refactors here!
 656:main.c        **** 
 657:main.c        **** //
 658:main.c        **** // RADIO
 659:main.c        **** //
 660:main.c        **** 
 661:main.c        **** // initializes the FM transmitter to a given frequency.
 662:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 663:main.c        **** //
 664:main.c        **** void initializeRadio(int frequency) {
 665:main.c        ****   selectRadio();        // Select SPI for FM Transmitter
 666:main.c        ****   
 667:main.c        ****   // TODO use setRadioFrequency here?
 668:main.c        ****   ns73Config();         // Configure the FM Trans. I/O
 669:main.c        ****   ns73Init();           // Setup the Default Register Values
 670:main.c        ****   ns73SetChannel(frequency); // Transmit
 671:main.c        ****   
 672:main.c        ****   deselectRadio();      // Remove FM Transmitter from SPI bus
 673:main.c        ****   delay_ms(100);
 674:main.c        **** }
 675:main.c        **** 
 676:main.c        **** // Enables the radio.
 677:main.c        **** //
 678:main.c        **** void enableRadio(void) {
 679:main.c        ****   radio_enable = ON;
 680:main.c        ****   
 681:main.c        ****   // graphics
 682:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 683:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 684:main.c        ****   
 685:main.c        ****   // send data
 686:main.c        ****   selectRadio();          //Select the FM transmitter
 687:main.c        ****   ns73Config();           // Configure the FM Trans. I/O
 688:main.c        ****   ns73Send(R0, PE | AG);  // Power up the radio
 689:main.c        ****   deselectRadio();        // Unselect the FM transmitter
 690:main.c        **** }
 691:main.c        **** 
 692:main.c        **** // Disables the radio.
 693:main.c        **** //
 694:main.c        **** void disableRadio(void) {
 695:main.c        ****   radio_enable = OFF;
 696:main.c        ****   
 697:main.c        ****   // graphics
 698:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 699:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 700:main.c        ****   
 701:main.c        ****   // send data
 702:main.c        ****   selectRadio();      //Select the FM transmitter
 703:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 704:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 705:main.c        ****   deselectRadio();      //Unselect the FM transmitter
 706:main.c        **** }
 707:main.c        **** 
 708:main.c        **** // Set the radio frequency to f where f is i.e. 1000 for 100.0 Mhz.
 709:main.c        **** //
 710:main.c        **** void setRadioFrequency(int f) {
 711:main.c        ****   selectRadio();     // Select the FM transmitter
 712:main.c        ****   ns73Config();      // Configure the FM Trans. I/O
 713:main.c        ****   ns73SetChannel(f); // Set the channel	
 714:main.c        ****   deselectRadio();   // Unselect the FM transmitter
 715:main.c        **** }
 716:main.c        **** 
 717:main.c        **** // Change the radio frequency by f where change is 0.1 times f Mhz.
 718:main.c        **** //
 719:main.c        **** void changeRadioFrequency(int f) {
 720:main.c        ****   if ((885 < radio_channel) && (radio_channel < 1075)) {
 721:main.c        ****     radio_channel += f;
 722:main.c        ****   }
 723:main.c        ****   displayRadioMenu();
 724:main.c        ****   ns73SetChannel(radio_channel); // TODO or setRadioFrequency?
 725:main.c        **** }
 726:main.c        **** 
 727:main.c        **** //
 728:main.c        **** // MP3
 729:main.c        **** //
 730:main.c        **** 
 731:main.c        **** // Initialize the MP3 player with double clock speed and lower volume.
 732:main.c        **** //
 733:main.c        **** void initializeMP3Player(void) {
 734:main.c        ****   vs1002Config(); // Configure MP3 I/O
 735:main.c        ****   vs1002Reset();  // Reset MP3 Player
 736:main.c        ****   vs1002Init();   // Double the clock speed and set to "New" mode
 737:main.c        ****   lowerVolume(5); // Lower the Volume a bit
 738:main.c        ****   vs1002Finish(); // Restore the SPI I/O lines
 739:main.c        **** }
 740:main.c        **** 
 741:main.c        **** // Start playing.
 742:main.c        **** //
 743:main.c        **** void startMP3Player(void) {
 744:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 745:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 746:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 747:main.c        ****   ledBlueOn();
 748:main.c        ****   sendMP3Data();                        // Send first song data
 749:main.c        ****   PINSEL1 |= 0x00000C00;
 750:main.c        ****   enableMP3Interrupt();
 751:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 752:main.c        **** }
 753:main.c        **** 
 754:main.c        **** // Sends a piece of mp3 data from the current song.
 755:main.c        **** //
 756:main.c        **** void sendMP3Data(void) {
 757:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 758:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 759:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 760:main.c        ****     // Buffer more data if available
 761:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) {
 762:main.c        ****       song_is_over = 1;
 763:main.c        ****     } else {
 764:main.c        ****       song_is_over = 0; // If there's no more data available, set the flag, else leave it alone
 765:main.c        ****     }
 766:main.c        ****   }
 767:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 768:main.c        **** }
 769:main.c        **** 
 770:main.c        **** // Stop playing.
 771:main.c        **** //
 772:main.c        **** void stopMP3Player(void) {
 773:main.c        ****   disableMP3Interrupt();
 774:main.c        ****   
 775:main.c        ****   ledBlueOff();
 776:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 777:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 778:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 779:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 780:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 781:main.c        ****   closeSong(&current_song);                               // Close the current song
 782:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 783:main.c        ****   
 784:main.c        ****   exclusiveUIInterrupt();
 785:main.c        **** }
 786:main.c        **** 
 787:main.c        **** //
 788:main.c        **** // VOLUME
 789:main.c        **** //
 790:main.c        **** 
 791:main.c        **** // Raises the Volume by n.
 792:main.c        **** //
 793:main.c        **** void raiseVolume(int n) {
 794:main.c        ****   for(char i = 0; i < n; i++) {
 795:main.c        ****     if(volume_setting < 32){
 796:main.c        ****       volume_setting += 1;
 797:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 798:main.c        ****       vs1002SetVolume(INCREASE);  // Raise the volume
 799:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 800:main.c        ****     }
 801:main.c        ****   }
 802:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 803:main.c        ****   LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientat
 804:main.c        **** }
 805:main.c        **** 
 806:main.c        **** // Lowers the volume by n.
 807:main.c        **** //
 808:main.c        **** void lowerVolume(int n) {
 809:main.c        ****   for(char i = 0; i < n; i++) {
 810:main.c        ****     if(volume_setting >= 0){
 811:main.c        ****       volume_setting--;
 812:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 813:main.c        ****       vs1002SetVolume(DECREASE);  // Lower the volume
 814:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 815:main.c        ****     }
 816:main.c        ****   }
 817:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 818:main.c        ****   LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 819:main.c        **** }
 820:main.c        **** 
 821:main.c        **** //
 822:main.c        **** // SPI
 823:main.c        **** //
 824:main.c        **** 
 825:main.c        **** // Initialize the SPI port.
 826:main.c        **** //
 827:main.c        **** void initializeSPI(void) {
 365              		.loc 1 827 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 828:main.c        ****   S0SPCCR = 64;   // SCK = 1 MHz, counter > 8 and even
 370              		.loc 1 828 0
 371 0240 10309FE5 		ldr	r3, .L42
 372 0244 4020A0E3 		mov	r2, #64
 373 0248 0C2083E5 		str	r2, [r3, #12]
 829:main.c        ****   S0SPCR  = 0x20; // Master, no interrupt enable, 8 bits
 374              		.loc 1 829 0
 375 024c 2020A0E3 		mov	r2, #32
 376 0250 002083E5 		str	r2, [r3, #0]
 830:main.c        **** }
 377              		.loc 1 830 0
 378 0254 1EFF2FE1 		bx	lr
 379              	.L43:
 380              		.align	2
 381              	.L42:
 382 0258 000002E0 		.word	-536739840
 383              	.LFE30:
 385              		.align	2
 386              		.global	selectSD
 388              	selectSD:
 389              	.LFB31:
 831:main.c        **** 
 832:main.c        **** // Hand over SPI lines to SD talk.
 833:main.c        **** //
 834:main.c        **** void selectSD(void) {
 390              		.loc 1 834 0
 391              		@ Function supports interworking.
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 835:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 395              		.loc 1 835 0
 396 025c 0C209FE5 		ldr	r2, .L46
 397 0260 003092E5 		ldr	r3, [r2, #0]
 398 0264 153C83E3 		orr	r3, r3, #5376
 399 0268 003082E5 		str	r3, [r2, #0]
 836:main.c        **** }
 400              		.loc 1 836 0
 401 026c 1EFF2FE1 		bx	lr
 402              	.L47:
 403              		.align	2
 404              	.L46:
 405 0270 00C002E0 		.word	-536690688
 406              	.LFE31:
 408              		.align	2
 409              		.global	selectLCD
 411              	selectLCD:
 412              	.LFB32:
 837:main.c        **** 
 838:main.c        **** // Hand over SPI lines to LCD talk.
 839:main.c        **** //
 840:main.c        **** void selectLCD(void) {
 413              		.loc 1 840 0
 414              		@ Function supports interworking.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 841:main.c        ****   PINSEL0 &= 0xFFFFC00F;
 418              		.loc 1 841 0
 419 0274 10209FE5 		ldr	r2, .L50
 420 0278 003092E5 		ldr	r3, [r2, #0]
 421 027c FF3DC3E3 		bic	r3, r3, #16320
 422 0280 3030C3E3 		bic	r3, r3, #48
 423 0284 003082E5 		str	r3, [r2, #0]
 842:main.c        **** }
 424              		.loc 1 842 0
 425 0288 1EFF2FE1 		bx	lr
 426              	.L51:
 427              		.align	2
 428              	.L50:
 429 028c 00C002E0 		.word	-536690688
 430              	.LFE32:
 432              		.align	2
 433              		.global	selectRadio
 435              	selectRadio:
 436              	.LFB33:
 843:main.c        **** 
 844:main.c        **** // Hand over SPI lines to radio talk.
 845:main.c        **** void selectRadio(void) {
 437              		.loc 1 845 0
 438              		@ Function supports interworking.
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 846:main.c        ****   IOCLR1 |= FM_CS;
 442              		.loc 1 846 0
 443 0290 24209FE5 		ldr	r2, .L56
 444 0294 1C3092E5 		ldr	r3, [r2, #28]
 445 0298 013283E3 		orr	r3, r3, #268435456
 446 029c 1C3082E5 		str	r3, [r2, #28]
 447              	.LBB150:
 448              	.LBB151:
 449              		.loc 1 251 0
 450 02a0 18209FE5 		ldr	r2, .L56+4
 451              	.LBE151:
 452              	.LBE150:
 453              		.loc 1 846 0
 454 02a4 0030A0E3 		mov	r3, #0
 455              	.LVL22:
 456              	.L53:
 457              	.LBB153:
 458              	.LBB152:
 459              		.loc 1 251 0
 460              	@ 251 "main.c" 1
 461 02a8 0000A0E1 		nop
 462              	@ 0 "" 2
 463 02ac 013083E2 		add	r3, r3, #1
 464 02b0 020053E1 		cmp	r3, r2
 465 02b4 FBFFFF1A 		bne	.L53
 466              	.LBE152:
 467              	.LBE153:
 847:main.c        ****   delay_ms(100);
 848:main.c        ****   // In enableRadio: delay_ms(900); // TODO Does this really need to be 900?
 849:main.c        **** }
 468              		.loc 1 849 0
 469 02b8 1EFF2FE1 		bx	lr
 470              	.L57:
 471              		.align	2
 472              	.L56:
 473 02bc 008002E0 		.word	-536707072
 474 02c0 40420F00 		.word	1000000
 475              	.LFE33:
 477              		.align	2
 478              		.global	deselectRadio
 480              	deselectRadio:
 481              	.LFB34:
 850:main.c        **** 
 851:main.c        **** // Hand off SPI lines from radio talk.
 852:main.c        **** void deselectRadio(void) {
 482              		.loc 1 852 0
 483              		@ Function supports interworking.
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 853:main.c        ****   IOSET1 |= FM_CS;
 487              		.loc 1 853 0
 488 02c4 0C209FE5 		ldr	r2, .L60
 489 02c8 143092E5 		ldr	r3, [r2, #20]
 490 02cc 013283E3 		orr	r3, r3, #268435456
 491 02d0 143082E5 		str	r3, [r2, #20]
 854:main.c        **** }
 492              		.loc 1 854 0
 493 02d4 1EFF2FE1 		bx	lr
 494              	.L61:
 495              		.align	2
 496              	.L60:
 497 02d8 008002E0 		.word	-536707072
 498              	.LFE34:
 500              		.align	2
 501              		.global	isUSBConnected
 503              	isUSBConnected:
 504              	.LFB35:
 855:main.c        **** 
 856:main.c        **** //
 857:main.c        **** // USB
 858:main.c        **** //
 859:main.c        **** 
 860:main.c        **** // Returns if the USB is connected.
 861:main.c        **** //
 862:main.c        **** int isUSBConnected(void) {
 505              		.loc 1 862 0
 506              		@ Function supports interworking.
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 863:main.c        ****   return IOPIN0 & (1<<23);
 510              		.loc 1 863 0
 511 02dc 08309FE5 		ldr	r3, .L64
 512 02e0 000093E5 		ldr	r0, [r3, #0]
 864:main.c        **** }
 513              		.loc 1 864 0
 514 02e4 020500E2 		and	r0, r0, #8388608
 515 02e8 1EFF2FE1 		bx	lr
 516              	.L65:
 517              		.align	2
 518              	.L64:
 519 02ec 008002E0 		.word	-536707072
 520              	.LFE35:
 522              		.align	2
 523              		.global	initializeUITimer
 525              	initializeUITimer:
 526              	.LFB37:
 865:main.c        **** 
 866:main.c        **** //
 867:main.c        **** // LCD
 868:main.c        **** //
 869:main.c        **** 
 870:main.c        **** // Show the splash-screen (Sparkfun Logo)
 871:main.c        **** //
 872:main.c        **** void splashScreen(void) {
 873:main.c        ****   LCDInit();       // Initialize the LCD
 874:main.c        ****   LCDClear(white); // Clear the screen with white
 875:main.c        ****   LCDPrintLogo();  // Print the Sparkfun Logo
 876:main.c        **** }
 877:main.c        **** 
 878:main.c        **** //
 879:main.c        **** // Timers
 880:main.c        **** //
 881:main.c        **** 
 882:main.c        **** // Initialize the UI Timer.
 883:main.c        **** //
 884:main.c        **** void initializeUITimer(void) {
 527              		.loc 1 884 0
 528              		@ Function supports interworking.
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 885:main.c        ****   T0PR = 300;     // Divide Clock by 300 for 40kHz PS
 532              		.loc 1 885 0
 533 02f0 2C209FE5 		ldr	r2, .L68
 534 02f4 4B3FA0E3 		mov	r3, #300
 535 02f8 0C3082E5 		str	r3, [r2, #12]
 886:main.c        ****   T0TCR |= 0X01;  // Enable the clock
 536              		.loc 1 886 0
 537 02fc 043092E5 		ldr	r3, [r2, #4]
 538 0300 013083E3 		orr	r3, r3, #1
 539 0304 043082E5 		str	r3, [r2, #4]
 887:main.c        ****   T0CTCR = 0;     // Timer Mode
 540              		.loc 1 887 0
 541 0308 0030A0E3 		mov	r3, #0
 542 030c 703082E5 		str	r3, [r2, #112]
 888:main.c        ****   T0MCR = 0x0003; // Interrupt and Reset Timer on Match
 543              		.loc 1 888 0
 544 0310 033083E2 		add	r3, r3, #3
 545 0314 143082E5 		str	r3, [r2, #20]
 889:main.c        ****   T0MR0 = 1000;   // Interrupt on 40Hz
 546              		.loc 1 889 0
 547 0318 FA3FA0E3 		mov	r3, #1000
 548 031c 183082E5 		str	r3, [r2, #24]
 890:main.c        **** }
 549              		.loc 1 890 0
 550 0320 1EFF2FE1 		bx	lr
 551              	.L69:
 552              		.align	2
 553              	.L68:
 554 0324 004000E0 		.word	-536854528
 555              	.LFE37:
 557              		.align	2
 558              		.global	initializeMP3Timer
 560              	initializeMP3Timer:
 561              	.LFB38:
 891:main.c        **** 
 892:main.c        **** // Initialize the MP3 Timer.
 893:main.c        **** //
 894:main.c        **** void initializeMP3Timer(void) {
 562              		.loc 1 894 0
 563              		@ Function supports interworking.
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 895:main.c        ****   T1PR = 200;     // Divide Clock by 200 for ??kHz PS
 567              		.loc 1 895 0
 568 0328 24209FE5 		ldr	r2, .L72
 569 032c C830A0E3 		mov	r3, #200
 570 0330 0C3082E5 		str	r3, [r2, #12]
 896:main.c        ****   T1TCR |= 0X01;  // Enable the clock
 571              		.loc 1 896 0
 572 0334 043092E5 		ldr	r3, [r2, #4]
 573 0338 013083E3 		orr	r3, r3, #1
 574 033c 043082E5 		str	r3, [r2, #4]
 897:main.c        ****   T1CTCR = 0;     // Timer Mode
 575              		.loc 1 897 0
 576 0340 0030A0E3 		mov	r3, #0
 577 0344 703082E5 		str	r3, [r2, #112]
 898:main.c        ****   T1CCR = 0x0A00; // Capture and interrupt on the rising edge of DREQ
 578              		.loc 1 898 0
 579 0348 0A3C83E2 		add	r3, r3, #2560
 580 034c 283082E5 		str	r3, [r2, #40]
 899:main.c        **** }
 581              		.loc 1 899 0
 582 0350 1EFF2FE1 		bx	lr
 583              	.L73:
 584              		.align	2
 585              	.L72:
 586 0354 008000E0 		.word	-536838144
 587              	.LFE38:
 589              		.align	2
 590              		.global	initializeInterrupts
 592              	initializeInterrupts:
 593              	.LFB39:
 900:main.c        **** 
 901:main.c        **** //
 902:main.c        **** // Interrupts
 903:main.c        **** //
 904:main.c        **** 
 905:main.c        **** // Initializes interrupts and timers.
 906:main.c        **** //
 907:main.c        **** void initializeInterrupts(void) {
 594              		.loc 1 907 0
 595              		@ Function supports interworking.
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 908:main.c        ****   VPBDIV = 1;                              // Set PCLK equal to the System Clock	
 599              		.loc 1 908 0
 600 0358 3C309FE5 		ldr	r3, .L76
 601 035c 0120A0E3 		mov	r2, #1
 602 0360 002183E5 		str	r2, [r3, #256]
 909:main.c        ****   VICIntSelect = ~0x30;                    // Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 603              		.loc 1 909 0
 604 0364 0010E0E3 		mvn	r1, #0
 605 0368 3030E0E3 		mvn	r3, #48
 606 036c F33F01E5 		str	r3, [r1, #-4083]
 607              	.LBB154:
 608              	.LBB155:
 910:main.c        ****   exclusiveUIInterrupt();                  // Enable Timer 0 Interrupts (Don't start sending song d
 911:main.c        ****   VICVectCntl0= 0x25;                      // Use slot 0 for timer 1 interrupt
 912:main.c        ****   VICVectAddr0 = (unsigned int) timer1ISR; // Set the address of ISR for slot 1		
 913:main.c        ****   VICVectCntl1 = 0x24;                     // Use slot 1 for timer 0 interrupt
 914:main.c        ****   VICVectAddr1 = (unsigned int) timer0ISR; // Set the address of ISR for slot 1
 915:main.c        **** }
 916:main.c        **** 
 917:main.c        **** // Stops all interrupts from triggering.
 918:main.c        **** //
 919:main.c        **** void stopAllInterrupts(void) {
 920:main.c        ****   VICIntEnClr = 0x30;
 921:main.c        **** }
 922:main.c        **** 
 923:main.c        **** // Enable the MP3 interrupt.
 924:main.c        **** //
 925:main.c        **** void enableMP3Interrupt(void) {
 926:main.c        ****   VICIntEnable |= 0x20;
 927:main.c        **** }
 928:main.c        **** 
 929:main.c        **** // Disable the MP3 interrupt.
 930:main.c        **** //
 931:main.c        **** void disableMP3Interrupt(void) {
 932:main.c        ****   VICIntEnClr = 0x20;
 933:main.c        **** }
 934:main.c        **** 
 935:main.c        **** // Start the interrupts again.
 936:main.c        **** //
 937:main.c        **** void enableUIInterrupt(void) {
 938:main.c        ****   VICIntEnable |= 0x10;
 939:main.c        **** }
 940:main.c        **** 
 941:main.c        **** // Stop the UI interrupt from triggering. (And stabilize/debounce for t miliseconds)
 942:main.c        **** //
 943:main.c        **** void disableUIInterrupt(int t) {
 944:main.c        ****   VICIntEnClr = 0x10;
 945:main.c        ****   delay_ms(t); // debounce
 946:main.c        **** }
 947:main.c        **** 
 948:main.c        **** // Exclusively listen to the UI interrupt.
 949:main.c        **** //
 950:main.c        **** void exclusiveUIInterrupt(void) {
 951:main.c        ****   VICIntEnable = 0x10;
 609              		.loc 1 951 0
 610 0370 413083E2 		add	r3, r3, #65
 611 0374 EF3F01E5 		str	r3, [r1, #-4079]
 612              	.LBE155:
 613              	.LBE154:
 614              		.loc 1 911 0
 615 0378 153083E2 		add	r3, r3, #21
 616 037c FF3D01E5 		str	r3, [r1, #-3583]
 617              		.loc 1 912 0
 618 0380 18309FE5 		ldr	r3, .L76+4
 619 0384 FF3E01E5 		str	r3, [r1, #-3839]
 620              		.loc 1 913 0
 621 0388 2430A0E3 		mov	r3, #36
 622 038c FB3D01E5 		str	r3, [r1, #-3579]
 623              		.loc 1 914 0
 624 0390 0C309FE5 		ldr	r3, .L76+8
 625 0394 FB3E01E5 		str	r3, [r1, #-3835]
 626              		.loc 1 915 0
 627 0398 1EFF2FE1 		bx	lr
 628              	.L77:
 629              		.align	2
 630              	.L76:
 631 039c 00C01FE0 		.word	-534790144
 632 03a0 00000000 		.word	timer1ISR
 633 03a4 00000000 		.word	timer0ISR
 634              	.LFE39:
 636              		.align	2
 637              		.global	stopAllInterrupts
 639              	stopAllInterrupts:
 640              	.LFB40:
 641              		.loc 1 919 0
 642              		@ Function supports interworking.
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              		.loc 1 920 0
 647 03a8 3020A0E3 		mov	r2, #48
 648 03ac 0030E0E3 		mvn	r3, #0
 649 03b0 EB2F03E5 		str	r2, [r3, #-4075]
 650              		.loc 1 921 0
 651 03b4 1EFF2FE1 		bx	lr
 652              	.LFE40:
 654              		.align	2
 655              		.global	enableMP3Interrupt
 657              	enableMP3Interrupt:
 658              	.LFB41:
 659              		.loc 1 925 0
 660              		@ Function supports interworking.
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664              		.loc 1 926 0
 665 03b8 0020E0E3 		mvn	r2, #0
 666 03bc EF3F12E5 		ldr	r3, [r2, #-4079]
 667 03c0 203083E3 		orr	r3, r3, #32
 668 03c4 EF3F02E5 		str	r3, [r2, #-4079]
 669              		.loc 1 927 0
 670 03c8 1EFF2FE1 		bx	lr
 671              	.LFE41:
 673              		.align	2
 674              		.global	disableMP3Interrupt
 676              	disableMP3Interrupt:
 677              	.LFB42:
 678              		.loc 1 931 0
 679              		@ Function supports interworking.
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683              		.loc 1 932 0
 684 03cc 2020A0E3 		mov	r2, #32
 685 03d0 0030E0E3 		mvn	r3, #0
 686 03d4 EB2F03E5 		str	r2, [r3, #-4075]
 687              		.loc 1 933 0
 688 03d8 1EFF2FE1 		bx	lr
 689              	.LFE42:
 691              		.align	2
 692              		.global	enableUIInterrupt
 694              	enableUIInterrupt:
 695              	.LFB43:
 696              		.loc 1 937 0
 697              		@ Function supports interworking.
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701              		.loc 1 938 0
 702 03dc 0020E0E3 		mvn	r2, #0
 703 03e0 EF3F12E5 		ldr	r3, [r2, #-4079]
 704 03e4 103083E3 		orr	r3, r3, #16
 705 03e8 EF3F02E5 		str	r3, [r2, #-4079]
 706              		.loc 1 939 0
 707 03ec 1EFF2FE1 		bx	lr
 708              	.LFE43:
 710              		.align	2
 711              		.global	disableUIInterrupt
 713              	disableUIInterrupt:
 714              	.LFB44:
 715              		.loc 1 943 0
 716              		@ Function supports interworking.
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720              	.LVL23:
 721              		.loc 1 944 0
 722 03f0 1030A0E3 		mov	r3, #16
 723 03f4 0020E0E3 		mvn	r2, #0
 724 03f8 EB3F02E5 		str	r3, [r2, #-4075]
 725              	.LBB156:
 726              	.LBB157:
 727              		.loc 1 250 0
 728 03fc 273C83E2 		add	r3, r3, #9984
 729 0400 930002E0 		mul	r2, r3, r0
 730              	.LVL24:
 731 0404 0030A0E3 		mov	r3, #0
 732              	.LVL25:
 733 0408 010000EA 		b	.L87
 734              	.L88:
 735              		.loc 1 251 0
 736              	@ 251 "main.c" 1
 737 040c 0000A0E1 		nop
 738              	@ 0 "" 2
 739 0410 013083E2 		add	r3, r3, #1
 740              	.L87:
 741 0414 020053E1 		cmp	r3, r2
 742 0418 FBFFFFBA 		blt	.L88
 743              	.LBE157:
 744              	.LBE156:
 745              		.loc 1 946 0
 746 041c 1EFF2FE1 		bx	lr
 747              	.LFE44:
 749              		.align	2
 750              		.global	exclusiveUIInterrupt
 752              	exclusiveUIInterrupt:
 753              	.LFB45:
 754              		.loc 1 950 0
 755              		@ Function supports interworking.
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              		.loc 1 951 0
 760 0420 1020A0E3 		mov	r2, #16
 761 0424 0030E0E3 		mvn	r3, #0
 762 0428 EF2F03E5 		str	r2, [r3, #-4079]
 952:main.c        **** }
 763              		.loc 1 952 0
 764 042c 1EFF2FE1 		bx	lr
 765              	.LFE45:
 767              		.align	2
 768              		.global	initializeLEDs
 770              	initializeLEDs:
 771              	.LFB46:
 953:main.c        **** 
 954:main.c        **** //
 955:main.c        **** // LEDs
 956:main.c        **** //
 957:main.c        **** 
 958:main.c        **** // Initializes the LEDs to an off state.
 959:main.c        **** //
 960:main.c        **** void initializeLEDs(void) {
 772              		.loc 1 960 0
 773              		@ Function supports interworking.
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 961:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);
 777              		.loc 1 961 0
 778 0430 24209FE5 		ldr	r2, .L94
 779 0434 083092E5 		ldr	r3, [r2, #8]
 780 0438 073283E3 		orr	r3, r3, #1879048192
 781 043c 083082E5 		str	r3, [r2, #8]
 962:main.c        ****   ledBlueOff();
 782              		.loc 1 962 0
 783 0440 0232A0E3 		mov	r3, #536870912
 784 0444 043082E5 		str	r3, [r2, #4]
 963:main.c        ****   ledRedOff();
 785              		.loc 1 963 0
 786 0448 033083E0 		add	r3, r3, r3
 787 044c 043082E5 		str	r3, [r2, #4]
 964:main.c        ****   ledGrnOff();
 788              		.loc 1 964 0
 789 0450 0D3283E2 		add	r3, r3, #-805306368
 790 0454 043082E5 		str	r3, [r2, #4]
 965:main.c        **** }
 791              		.loc 1 965 0
 792 0458 1EFF2FE1 		bx	lr
 793              	.L95:
 794              		.align	2
 795              	.L94:
 796 045c 008002E0 		.word	-536707072
 797              	.LFE46:
 799              		.section	.rodata.str1.1,"aMS",%progbits,1
 800              	.LC0:
 801 0000 256400   		.ascii	"%d\000"
 802              		.text
 803              		.align	2
 804              		.global	displayRadioMenu
 806              	displayRadioMenu:
 807              	.LFB47:
 966:main.c        **** 
 967:main.c        **** //
 968:main.c        **** // Menus
 969:main.c        **** //
 970:main.c        **** 
 971:main.c        **** // Displays the radio menu settings.
 972:main.c        **** //
 973:main.c        **** void displayRadioMenu(void) {
 808              		.loc 1 973 0
 809              		@ Function supports interworking.
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812 0460 10402DE9 		stmfd	sp!, {r4, lr}
 813              	.LCFI2:
 974:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 814              		.loc 1 974 0
 815 0464 54409FE5 		ldr	r4, .L98
 816 0468 002094E5 		ldr	r2, [r4, #0]
 817              		.loc 1 973 0
 818 046c 08D04DE2 		sub	sp, sp, #8
 819              	.LCFI3:
 820              		.loc 1 974 0
 821 0470 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 822 0474 0200A0E3 		mov	r0, #2
 823 0478 0010A0E3 		mov	r1, #0
 824 047c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 825 0480 FEFFFFEB 		bl	LCDSetRowColor
 975:main.c        ****   LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 826              		.loc 1 975 0
 827 0484 0030A0E3 		mov	r3, #0
 828 0488 00308DE5 		str	r3, [sp, #0]
 829 048c 30309FE5 		ldr	r3, .L98+4
 830 0490 001094E5 		ldr	r1, [r4, #0]
 831 0494 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 832 0498 28309FE5 		ldr	r3, .L98+8
 833 049c 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 834 04a0 24009FE5 		ldr	r0, .L98+12
 835 04a4 001093E5 		ldr	r1, [r3, #0]
 836 04a8 0230A0E3 		mov	r3, #2
 837 04ac 04C08DE5 		str	ip, [sp, #4]
 838 04b0 FEFFFFEB 		bl	LCDPrintString
 976:main.c        **** }...
 839              		.loc 1 976 0
 840 04b4 08D08DE2 		add	sp, sp, #8
 841 04b8 1040BDE8 		ldmfd	sp!, {r4, lr}
 842 04bc 1EFF2FE1 		bx	lr
 843              	.L99:
 844              		.align	2
 845              	.L98:
 846 04c0 7C040000 		.word	current_display
 847 04c4 00000000 		.word	white
 848 04c8 00000000 		.word	radio_channel
 849 04cc 00000000 		.word	.LC0
 850              	.LFE47:
 852              		.align	2
 853              		.global	quickClear
 855              	quickClear:
 856              	.LFB17:
 857              		.loc 1 632 0
 858              		@ Function supports interworking.
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              	.LVL26:
 862              	.LBB158:
 863              	.LBB159:
 864              		.loc 1 841 0
 865 04d0 B8209FE5 		ldr	r2, .L105
 866 04d4 003092E5 		ldr	r3, [r2, #0]
 867              	.LBE159:
 868              	.LBE158:
 869              		.loc 1 632 0
 870 04d8 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 871              	.LCFI4:
 872              	.LBB161:
 873              	.LBB160:
 874              		.loc 1 841 0
 875 04dc FF3DC3E3 		bic	r3, r3, #16320
 876 04e0 3030C3E3 		bic	r3, r3, #48
 877 04e4 003082E5 		str	r3, [r2, #0]
 878              	.LBE160:
 879              	.LBE161:
 880              		.loc 1 635 0
 881 04e8 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 882 04ec 00005EE3 		cmp	lr, #0
 883              		.loc 1 632 0
 884 04f0 08D04DE2 		sub	sp, sp, #8
 885              	.LCFI5:
 886              		.loc 1 632 0
 887 04f4 0050A0E1 		mov	r5, r0
 888              		.loc 1 635 0
 889 04f8 0700001A 		bne	.L101
 890              	.LVL27:
 891              		.loc 1 636 0
 892 04fc 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 893 0500 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 894 0504 0E10A0E1 		mov	r1, lr
 895 0508 7B0F80E2 		add	r0, r0, #492
 896 050c 0E30A0E1 		mov	r3, lr
 897 0510 04C08DE5 		str	ip, [sp, #4]
 898 0514 00E08DE5 		str	lr, [sp, #0]
 899 0518 FEFFFFEB 		bl	LCDPrintString
 900              	.LVL28:
 901              	.L101:
 902              		.loc 1 638 0
 903 051c 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 904 0520 0010A0E3 		mov	r1, #0
 905 0524 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 906 0528 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 907 052c FEFFFFEB 		bl	LCDSetRowColor
 908 0530 0040A0E3 		mov	r4, #0
 909              	.LVL29:
 910              	.LBB162:
 911              		.loc 1 641 0
 912 0534 58709FE5 		ldr	r7, .L105+4
 913              		.loc 1 640 0
 914 0538 0460A0E1 		mov	r6, r4
 915              	.L102:
 916 053c 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 917 0540 840285E0 		add	r0, r5, r4, asl #5
 918              	.LBE162:
 919              		.loc 1 638 0
 920 0544 014084E2 		add	r4, r4, #1
 921              	.LVL30:
 922              	.LBB163:
 923              		.loc 1 640 0
 924 0548 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 925 054c 0C0080E2 		add	r0, r0, #12
 926 0550 0610A0E1 		mov	r1, r6
 927 0554 0430A0E1 		mov	r3, r4
 928 0558 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 929 055c FEFFFFEB 		bl	LCDPrintString
 930              		.loc 1 641 0
 931 0560 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 932 0564 2C009FE5 		ldr	r0, .L105+8
 933 0568 0610A0E1 		mov	r1, r6
 934 056c 0430A0E1 		mov	r3, r4
 935 0570 00608DE5 		str	r6, [sp, #0]
 936 0574 04608DE5 		str	r6, [sp, #4]
 937 0578 FEFFFFEB 		bl	LCDPrintString
 938              		.loc 1 639 0
 939 057c 0F0054E3 		cmp	r4, #15
 940              	.LVL31:
 941 0580 EDFFFF1A 		bne	.L102
 942              	.LBE163:
 943              		.loc 1 643 0
 944 0584 08D08DE2 		add	sp, sp, #8
 945 0588 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 946 058c 1EFF2FE1 		bx	lr
 947              	.L106:
 948              		.align	2
 949              	.L105:
 950 0590 00C002E0 		.word	-536690688
 951 0594 00000000 		.word	black
 952 0598 00000000 		.word	newline
 953              	.LFE17:
 955              		.align	2
 956              		.global	printMenu
 958              	printMenu:
 959              	.LFB12:
 960              		.loc 1 449 0
 961              		@ Function supports interworking.
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              	.LVL32:
 965              	.LBB164:
 966              	.LBB165:
 967              		.loc 1 841 0
 968 059c C0209FE5 		ldr	r2, .L112
 969 05a0 003092E5 		ldr	r3, [r2, #0]
 970              	.LBE165:
 971              	.LBE164:
 972              		.loc 1 449 0
 973 05a4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 974              	.LCFI6:
 975              	.LBB167:
 976              	.LBB166:
 977              		.loc 1 841 0
 978 05a8 FF3DC3E3 		bic	r3, r3, #16320
 979 05ac 3030C3E3 		bic	r3, r3, #48
 980 05b0 003082E5 		str	r3, [r2, #0]
 981              	.LBE166:
 982              	.LBE167:
 983              		.loc 1 451 0
 984 05b4 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 985 05b8 00005EE3 		cmp	lr, #0
 986              		.loc 1 449 0
 987 05bc 08D04DE2 		sub	sp, sp, #8
 988              	.LCFI7:
 989              		.loc 1 449 0
 990 05c0 0050A0E1 		mov	r5, r0
 991              		.loc 1 451 0
 992 05c4 0700001A 		bne	.L108
 993              	.LVL33:
 994 05c8 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 995 05cc 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 996 05d0 0E10A0E1 		mov	r1, lr
 997 05d4 7B0F80E2 		add	r0, r0, #492
 998 05d8 0E30A0E1 		mov	r3, lr
 999 05dc 04C08DE5 		str	ip, [sp, #4]
 1000 05e0 00E08DE5 		str	lr, [sp, #0]
 1001 05e4 FEFFFFEB 		bl	LCDPrintString
 1002              	.LVL34:
 1003              	.L108:
 1004 05e8 0030A0E3 		mov	r3, #0
 1005              	.LVL35:
 1006              	.LBB168:
 1007              		.loc 1 453 0
 1008 05ec 0360A0E1 		mov	r6, r3
 1009              	.L109:
 1010 05f0 014083E2 		add	r4, r3, #1
 1011 05f4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1012 05f8 830285E0 		add	r0, r5, r3, asl #5
 1013 05fc 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1014 0600 0430A0E1 		mov	r3, r4
 1015              	.LVL36:
 1016 0604 0C0080E2 		add	r0, r0, #12
 1017 0608 0610A0E1 		mov	r1, r6
 1018 060c 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1019 0610 FEFFFFEB 		bl	LCDPrintString
 1020              		.loc 1 452 0
 1021 0614 0F0054E3 		cmp	r4, #15
 1022              	.LVL37:
 1023 0618 0430A0E1 		mov	r3, r4
 1024              	.LVL38:
 1025 061c F3FFFF1A 		bne	.L109
 1026              	.LBE168:
 1027              		.loc 1 455 0
 1028 0620 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1029 0624 0610A0E1 		mov	r1, r6
 1030 0628 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1031 062c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1032              	.LVL39:
 1033 0630 FEFFFFEB 		bl	LCDSetRowColor
 1034              		.loc 1 456 0
 1035 0634 080095E5 		ldr	r0, [r5, #8]
 1036 0638 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1037 063c 800285E0 		add	r0, r5, r0, asl #5
 1038 0640 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1039 0644 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1040 0648 0C0080E2 		add	r0, r0, #12
 1041 064c 0610A0E1 		mov	r1, r6
 1042 0650 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1043 0654 FEFFFFEB 		bl	LCDPrintString
 1044              		.loc 1 457 0
 1045 0658 08D08DE2 		add	sp, sp, #8
 1046 065c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1047 0660 1EFF2FE1 		bx	lr
 1048              	.L113:
 1049              		.align	2
 1050              	.L112:
 1051 0664 00C002E0 		.word	-536690688
 1052              	.LFE12:
 1054              		.align	2
 1055              		.global	highlightRow
 1057              	highlightRow:
 1058              	.LFB11:
 1059              		.loc 1 430 0
 1060              		@ Function supports interworking.
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL40:
 1064              	.LBB169:
 1065              	.LBB170:
 1066              		.loc 1 841 0
 1067 0668 D0209FE5 		ldr	r2, .L119
 1068 066c 003092E5 		ldr	r3, [r2, #0]
 1069              	.LBE170:
 1070              	.LBE169:
 1071              		.loc 1 430 0
 1072 0670 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1073              	.LCFI8:
 1074              	.LBB172:
 1075              	.LBB171:
 1076              		.loc 1 841 0
 1077 0674 FF3DC3E3 		bic	r3, r3, #16320
 1078 0678 3030C3E3 		bic	r3, r3, #48
 1079 067c 003082E5 		str	r3, [r2, #0]
 1080              	.LBE171:
 1081              	.LBE172:
 1082              		.loc 1 430 0
 1083 0680 0060A0E1 		mov	r6, r0
 1084 0684 08D04DE2 		sub	sp, sp, #8
 1085              	.LCFI9:
 1086              		.loc 1 432 0
 1087 0688 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1088 068c 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1089              		.loc 1 430 0
 1090 0690 0140A0E1 		mov	r4, r1
 1091              		.loc 1 432 0
 1092 0694 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 1093              	.LVL41:
 1094 0698 0010A0E3 		mov	r1, #0
 1095              	.LVL42:
 1096 069c FEFFFFEB 		bl	LCDSetRowColor
 1097              		.loc 1 433 0
 1098 06a0 080096E5 		ldr	r0, [r6, #8]
 1099 06a4 00C0A0E3 		mov	ip, #0
 1100 06a8 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 1101 06ac 800286E0 		add	r0, r6, r0, asl #5
 1102 06b0 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1103 06b4 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1104 06b8 0C10A0E1 		mov	r1, ip
 1105 06bc 0C0080E2 		add	r0, r0, #12
 1106 06c0 00C08DE5 		str	ip, [sp, #0]
 1107              		.loc 1 430 0
 1108 06c4 FF4004E2 		and	r4, r4, #255
 1109              	.LVL43:
 1110              		.loc 1 433 0
 1111 06c8 04508DE5 		str	r5, [sp, #4]
 1112 06cc FEFFFFEB 		bl	LCDPrintString
 1113 06d0 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1114              		.loc 1 434 0
 1115 06d4 010054E3 		cmp	r4, #1
 1116 06d8 082096E5 		ldr	r2, [r6, #8]
 1117              		.loc 1 435 0
 1118 06dc 01304302 		subeq	r3, r3, #1
 1119              		.loc 1 439 0
 1120 06e0 01308312 		addne	r3, r3, #1
 1121 06e4 0030C6E5 		strb	r3, [r6, #0]
 1122              		.loc 1 436 0
 1123 06e8 01204202 		subeq	r2, r2, #1
 1124              		.loc 1 440 0
 1125 06ec 01208212 		addne	r2, r2, #1
 1126 06f0 082086E5 		str	r2, [r6, #8]
 1127              		.loc 1 442 0
 1128 06f4 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 1129 06f8 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1130 06fc 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1131 0700 0010A0E3 		mov	r1, #0
 1132 0704 FEFFFFEB 		bl	LCDSetRowColor
 1133              		.loc 1 443 0
 1134 0708 080096E5 		ldr	r0, [r6, #8]
 1135 070c 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 1136              	.LVL44:
 1137 0710 00C0A0E3 		mov	ip, #0
 1138 0714 800286E0 		add	r0, r6, r0, asl #5
 1139 0718 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1140 071c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1141 0720 0C0080E2 		add	r0, r0, #12
 1142 0724 0C10A0E1 		mov	r1, ip
 1143 0728 04408DE5 		str	r4, [sp, #4]
 1144 072c 00C08DE5 		str	ip, [sp, #0]
 1145 0730 FEFFFFEB 		bl	LCDPrintString
 1146              		.loc 1 444 0
 1147 0734 08D08DE2 		add	sp, sp, #8
 1148 0738 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1149 073c 1EFF2FE1 		bx	lr
 1150              	.L120:
 1151              		.align	2
 1152              	.L119:
 1153 0740 00C002E0 		.word	-536690688
 1154              	.LFE11:
 1156              		.align	2
 1157              		.global	handleDownButton
 1159              	handleDownButton:
 1160              	.LFB15:
 1161              		.loc 1 514 0
 1162              		@ Function supports interworking.
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 1165              	.LVL45:
 1166 0744 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1167              	.LCFI10:
 1168              		.loc 1 515 0
 1169 0748 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1170 074c 0E0053E3 		cmp	r3, #14
 1171              		.loc 1 514 0
 1172 0750 0040A0E1 		mov	r4, r0
 1173 0754 0150A0E1 		mov	r5, r1
 1174              		.loc 1 515 0
 1175 0758 0200008A 		bhi	.L122
 1176              	.LVL46:
 1177              		.loc 1 516 0
 1178 075c 0010A0E3 		mov	r1, #0
 1179              		.loc 1 530 0
 1180 0760 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1181              		.loc 1 516 0
 1182 0764 FEFFFFEA 		b	highlightRow
 1183              	.LVL47:
 1184              	.L122:
 1185              		.loc 1 519 0
 1186 0768 0F0053E3 		cmp	r3, #15
 1187 076c 1000001A 		bne	.L124
 1188 0770 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 1189 0774 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 1190 0778 020053E1 		cmp	r3, r2
 1191 077c 0C00009A 		bls	.L124
 1192              	.LVL48:
 1193              		.loc 1 521 0
 1194 0780 013082E2 		add	r3, r2, #1
 1195 0784 0630C0E5 		strb	r3, [r0, #6]
 1196              		.loc 1 524 0
 1197 0788 FEFFFFEB 		bl	quickClear
 1198              	.LVL49:
 1199              		.loc 1 525 0
 1200 078c 0130A0E3 		mov	r3, #1
 1201 0790 0030C4E5 		strb	r3, [r4, #0]
 1202              		.loc 1 526 0
 1203 0794 0030A0E3 		mov	r3, #0
 1204 0798 083084E5 		str	r3, [r4, #8]
 1205              		.loc 1 527 0
 1206 079c 0510A0E1 		mov	r1, r5
 1207 07a0 14009FE5 		ldr	r0, .L125
 1208 07a4 FEFFFFEB 		bl	getNewFiles
 1209              		.loc 1 528 0
 1210 07a8 0400A0E1 		mov	r0, r4
 1211              		.loc 1 530 0
 1212 07ac 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1213              		.loc 1 528 0
 1214 07b0 FEFFFFEA 		b	printMenu
 1215              	.LVL50:
 1216              	.L124:
 1217              		.loc 1 530 0
 1218 07b4 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1219 07b8 1EFF2FE1 		bx	lr
 1220              	.L126:
 1221              		.align	2
 1222              	.L125:
 1223 07bc 74000000 		.word	file_manager
 1224              	.LFE15:
 1226              		.align	2
 1227              		.global	handleUpButton
 1229              	handleUpButton:
 1230              	.LFB14:
 1231              		.loc 1 490 0
 1232              		@ Function supports interworking.
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              	.LVL51:
 1236 07c0 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1237              	.LCFI11:
 1238              		.loc 1 491 0
 1239 07c4 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1240 07c8 010053E3 		cmp	r3, #1
 1241              		.loc 1 490 0
 1242 07cc 0040A0E1 		mov	r4, r0
 1243 07d0 0150A0E1 		mov	r5, r1
 1244              		.loc 1 491 0
 1245 07d4 0200009A 		bls	.L128
 1246              	.LVL52:
 1247              		.loc 1 492 0
 1248 07d8 0110A0E3 		mov	r1, #1
 1249              		.loc 1 506 0
 1250 07dc 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1251              		.loc 1 492 0
 1252 07e0 FEFFFFEA 		b	highlightRow
 1253              	.LVL53:
 1254              	.L128:
 1255              		.loc 1 495 0
 1256 07e4 0F00001A 		bne	.L130
 1257 07e8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1258 07ec 000053E3 		cmp	r3, #0
 1259 07f0 0C00000A 		beq	.L130
 1260              	.LVL54:
 1261              		.loc 1 497 0
 1262 07f4 013043E2 		sub	r3, r3, #1
 1263 07f8 0630C0E5 		strb	r3, [r0, #6]
 1264              		.loc 1 500 0
 1265 07fc FEFFFFEB 		bl	quickClear
 1266              	.LVL55:
 1267              		.loc 1 501 0
 1268 0800 0F30A0E3 		mov	r3, #15
 1269 0804 0030C4E5 		strb	r3, [r4, #0]
 1270              		.loc 1 502 0
 1271 0808 0E30A0E3 		mov	r3, #14
 1272 080c 083084E5 		str	r3, [r4, #8]
 1273              		.loc 1 503 0
 1274 0810 0510A0E1 		mov	r1, r5
 1275 0814 14009FE5 		ldr	r0, .L131
 1276 0818 FEFFFFEB 		bl	getNewFiles
 1277              		.loc 1 504 0
 1278 081c 0400A0E1 		mov	r0, r4
 1279              		.loc 1 506 0
 1280 0820 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1281              		.loc 1 504 0
 1282 0824 FEFFFFEA 		b	printMenu
 1283              	.LVL56:
 1284              	.L130:
 1285              		.loc 1 506 0
 1286 0828 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1287 082c 1EFF2FE1 		bx	lr
 1288              	.L132:
 1289              		.align	2
 1290              	.L131:
 1291 0830 74000000 		.word	file_manager
 1292              	.LFE14:
 1294              		.align	2
 1296              	timer0ISR:
 1297              	.LFB5:
 1298              		.loc 1 314 0
 1299              		@ Function supports interworking.
 1300              		@ args = 0, pretend = 0, frame = 0
 1301              		@ frame_needed = 0, uses_anonymous_args = 0
 1302              	.LBB173:
 1303              	.LBB174:
 1304              		.loc 1 348 0
 1305 0834 A8209FE5 		ldr	r2, .L144
 1306 0838 103092E5 		ldr	r3, [r2, #16]
 1307 083c 020513E3 		tst	r3, #8388608
 1308              	.LBE174:
 1309              	.LBE173:
 1310              		.loc 1 314 0
 1311 0840 04E02DE5 		str	lr, [sp, #-4]!
 1312              	.LCFI12:
 1313              	.LBB176:
 1314              	.LBB175:
 1315              		.loc 1 348 0
 1316 0844 0220A003 		moveq	r2, #2
 1317 0848 0700000A 		beq	.L135
 1318              		.loc 1 350 0
 1319 084c 103092E5 		ldr	r3, [r2, #16]
 1320 0850 020613E3 		tst	r3, #2097152
 1321 0854 0120A003 		moveq	r2, #1
 1322 0858 0300000A 		beq	.L135
 1323              		.loc 1 352 0
 1324 085c 103092E5 		ldr	r3, [r2, #16]
 1325 0860 010513E3 		tst	r3, #4194304
 1326 0864 0320A003 		moveq	r2, #3
 1327 0868 0020A013 		movne	r2, #0
 1328              	.L135:
 1329              	.LBE175:
 1330              	.LBE176:
 1331              		.loc 1 315 0
 1332 086c 74309FE5 		ldr	r3, .L144+4
 1333 0870 0020C3E5 		strb	r2, [r3, #0]
 1334              		.loc 1 316 0
 1335 0874 FEFFFFEB 		bl	MMA_get_y
 1336              		.loc 1 317 0
 1337 0878 6C309FE5 		ldr	r3, .L144+8
 1338 087c 002093E5 		ldr	r2, [r3, #0]
 1339              		.loc 1 316 0
 1340 0880 68309FE5 		ldr	r3, .L144+12
 1341              		.loc 1 317 0
 1342 0884 AF0F52E3 		cmp	r2, #700
 1343              		.loc 1 316 0
 1344 0888 000083E5 		str	r0, [r3, #0]
 1345              		.loc 1 317 0
 1346 088c 010000AA 		bge	.L138
 1347 0890 AF0F50E3 		cmp	r0, #700
 1348 0894 030000CA 		bgt	.L139
 1349              	.L138:
 1350 0898 AF0F52E3 		cmp	r2, #700
 1351 089c 030000DA 		ble	.L140
 1352 08a0 AF0F50E3 		cmp	r0, #700
 1353 08a4 010000AA 		bge	.L140
 1354              	.L139:
 1355              		.loc 1 318 0
 1356 08a8 0120A0E3 		mov	r2, #1
 1357 08ac 000000EA 		b	.L143
 1358              	.L140:
 1359              		.loc 1 320 0
 1360 08b0 0020A0E3 		mov	r2, #0
 1361              	.L143:
 1362 08b4 38309FE5 		ldr	r3, .L144+16
 1363 08b8 0020C3E5 		strb	r2, [r3, #0]
 1364              		.loc 1 324 0
 1365 08bc 34309FE5 		ldr	r3, .L144+20
 1366 08c0 FF20A0E3 		mov	r2, #255
 1367 08c4 002083E5 		str	r2, [r3, #0]
 1368              		.loc 1 322 0
 1369 08c8 1C309FE5 		ldr	r3, .L144+8
 1370              		.loc 1 325 0
 1371 08cc 0020A0E3 		mov	r2, #0
 1372              		.loc 1 322 0
 1373 08d0 000083E5 		str	r0, [r3, #0]
 1374              		.loc 1 325 0
 1375 08d4 0030E0E3 		mvn	r3, #0
 1376 08d8 CF2F03E5 		str	r2, [r3, #-4047]
 1377              		.loc 1 326 0
 1378 08dc 04E09DE4 		ldr	lr, [sp], #4
 1379 08e0 1EFF2FE1 		bx	lr
 1380              	.L145:
 1381              		.align	2
 1382              	.L144:
 1383 08e4 008002E0 		.word	-536707072
 1384 08e8 08000000 		.word	button_pressed
 1385 08ec 0C000000 		.word	prev_position
 1386 08f0 10000000 		.word	cur_position
 1387 08f4 09000000 		.word	update_screen
 1388 08f8 004000E0 		.word	-536854528
 1389              	.LFE5:
 1391              		.align	2
 1392              		.global	splashScreen
 1394              	splashScreen:
 1395              	.LFB36:
 1396              		.loc 1 872 0
 1397              		@ Function supports interworking.
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400 08fc 04E02DE5 		str	lr, [sp, #-4]!
 1401              	.LCFI13:
 1402              		.loc 1 873 0
 1403 0900 FEFFFFEB 		bl	LCDInit
 1404              		.loc 1 874 0
 1405 0904 10309FE5 		ldr	r3, .L148
 1406 0908 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1407 090c FEFFFFEB 		bl	LCDClear
 1408              		.loc 1 875 0
 1409 0910 FEFFFFEB 		bl	LCDPrintLogo
 1410              		.loc 1 876 0
 1411 0914 04E09DE4 		ldr	lr, [sp], #4
 1412 0918 1EFF2FE1 		bx	lr
 1413              	.L149:
 1414              		.align	2
 1415              	.L148:
 1416 091c 00000000 		.word	white
 1417              	.LFE36:
 1419              		.align	2
 1420              		.global	lowerVolume
 1422              	lowerVolume:
 1423              	.LFB29:
 1424              		.loc 1 808 0
 1425              		@ Function supports interworking.
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 0, uses_anonymous_args = 0
 1428              	.LVL57:
 1429 0920 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1430              	.LCFI14:
 1431 0924 0050A0E1 		mov	r5, r0
 1432 0928 08D04DE2 		sub	sp, sp, #8
 1433              	.LCFI15:
 1434              		.loc 1 808 0
 1435 092c 0040A0E3 		mov	r4, #0
 1436              	.LVL58:
 1437 0930 8C609FE5 		ldr	r6, .L155
 1438 0934 0A0000EA 		b	.L151
 1439              	.LVL59:
 1440              	.L153:
 1441              	.LBB177:
 1442              		.loc 1 810 0
 1443 0938 003096E5 		ldr	r3, [r6, #0]
 1444 093c 000053E3 		cmp	r3, #0
 1445              		.loc 1 811 0
 1446 0940 012043E2 		sub	r2, r3, #1
 1447              		.loc 1 810 0
 1448 0944 040000BA 		blt	.L152
 1449              		.loc 1 811 0
 1450 0948 002086E5 		str	r2, [r6, #0]
 1451              		.loc 1 812 0
 1452 094c FEFFFFEB 		bl	vs1002Config
 1453              		.loc 1 813 0
 1454 0950 3000A0E3 		mov	r0, #48
 1455 0954 FEFFFFEB 		bl	vs1002SetVolume
 1456              		.loc 1 814 0
 1457 0958 FEFFFFEB 		bl	vs1002Finish
 1458              	.LVL60:
 1459              	.L152:
 1460              		.loc 1 809 0
 1461 095c 013084E2 		add	r3, r4, #1
 1462 0960 FF4003E2 		and	r4, r3, #255
 1463              	.LVL61:
 1464              	.L151:
 1465 0964 050054E1 		cmp	r4, r5
 1466 0968 F2FFFFBA 		blt	.L153
 1467              	.LBE177:
 1468              		.loc 1 817 0
 1469 096c 54409FE5 		ldr	r4, .L155+4
 1470              	.LVL62:
 1471 0970 002094E5 		ldr	r2, [r4, #0]
 1472 0974 0200A0E3 		mov	r0, #2
 1473 0978 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1474 097c 0010A0E3 		mov	r1, #0
 1475 0980 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1476 0984 FEFFFFEB 		bl	LCDSetRowColor
 1477              		.loc 1 818 0
 1478 0988 0030A0E3 		mov	r3, #0
 1479 098c 00308DE5 		str	r3, [sp, #0]
 1480 0990 34309FE5 		ldr	r3, .L155+8
 1481 0994 001094E5 		ldr	r1, [r4, #0]
 1482 0998 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1483 099c 20309FE5 		ldr	r3, .L155
 1484 09a0 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1485 09a4 24009FE5 		ldr	r0, .L155+12
 1486 09a8 001093E5 		ldr	r1, [r3, #0]
 1487 09ac 0230A0E3 		mov	r3, #2
 1488 09b0 04C08DE5 		str	ip, [sp, #4]
 1489 09b4 FEFFFFEB 		bl	LCDPrintString
 1490              		.loc 1 819 0
 1491 09b8 08D08DE2 		add	sp, sp, #8
 1492 09bc 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1493 09c0 1EFF2FE1 		bx	lr
 1494              	.L156:
 1495              		.align	2
 1496              	.L155:
 1497 09c4 00000000 		.word	volume_setting
 1498 09c8 7C040000 		.word	current_display
 1499 09cc 00000000 		.word	white
 1500 09d0 00000000 		.word	.LC0
 1501              	.LFE29:
 1503              		.align	2
 1504              		.global	raiseVolume
 1506              	raiseVolume:
 1507              	.LFB28:
 1508              		.loc 1 793 0
 1509              		@ Function supports interworking.
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              	.LVL63:
 1513 09d4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1514              	.LCFI16:
 1515 09d8 0050A0E1 		mov	r5, r0
 1516 09dc 08D04DE2 		sub	sp, sp, #8
 1517              	.LCFI17:
 1518              		.loc 1 793 0
 1519 09e0 0040A0E3 		mov	r4, #0
 1520              	.LVL64:
 1521 09e4 88609FE5 		ldr	r6, .L162
 1522 09e8 0A0000EA 		b	.L158
 1523              	.LVL65:
 1524              	.L160:
 1525              	.LBB178:
 1526              		.loc 1 795 0
 1527 09ec 003096E5 		ldr	r3, [r6, #0]
 1528 09f0 1F0053E3 		cmp	r3, #31
 1529 09f4 050000CA 		bgt	.L159
 1530              		.loc 1 796 0
 1531 09f8 013083E2 		add	r3, r3, #1
 1532 09fc 003086E5 		str	r3, [r6, #0]
 1533              		.loc 1 797 0
 1534 0a00 FEFFFFEB 		bl	vs1002Config
 1535              		.loc 1 798 0
 1536 0a04 3100A0E3 		mov	r0, #49
 1537 0a08 FEFFFFEB 		bl	vs1002SetVolume
 1538              		.loc 1 799 0
 1539 0a0c FEFFFFEB 		bl	vs1002Finish
 1540              	.LVL66:
 1541              	.L159:
 1542              		.loc 1 794 0
 1543 0a10 013084E2 		add	r3, r4, #1
 1544 0a14 FF4003E2 		and	r4, r3, #255
 1545              	.LVL67:
 1546              	.L158:
 1547 0a18 050054E1 		cmp	r4, r5
 1548 0a1c F2FFFFBA 		blt	.L160
 1549              	.LBE178:
 1550              		.loc 1 802 0
 1551 0a20 50409FE5 		ldr	r4, .L162+4
 1552              	.LVL68:
 1553 0a24 002094E5 		ldr	r2, [r4, #0]
 1554 0a28 0200A0E3 		mov	r0, #2
 1555 0a2c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1556 0a30 0010A0E3 		mov	r1, #0
 1557 0a34 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1558 0a38 FEFFFFEB 		bl	LCDSetRowColor
 1559              		.loc 1 803 0
 1560 0a3c 001094E5 		ldr	r1, [r4, #0]
 1561 0a40 0030A0E3 		mov	r3, #0
 1562 0a44 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1563 0a48 00308DE5 		str	r3, [sp, #0]
 1564 0a4c 20309FE5 		ldr	r3, .L162
 1565 0a50 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1566 0a54 20009FE5 		ldr	r0, .L162+8
 1567 0a58 001093E5 		ldr	r1, [r3, #0]
 1568 0a5c 0230A0E3 		mov	r3, #2
 1569 0a60 04C08DE5 		str	ip, [sp, #4]
 1570 0a64 FEFFFFEB 		bl	LCDPrintString
 1571              		.loc 1 804 0
 1572 0a68 08D08DE2 		add	sp, sp, #8
 1573 0a6c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1574 0a70 1EFF2FE1 		bx	lr
 1575              	.L163:
 1576              		.align	2
 1577              	.L162:
 1578 0a74 00000000 		.word	volume_setting
 1579 0a78 7C040000 		.word	current_display
 1580 0a7c 00000000 		.word	.LC0
 1581              	.LFE28:
 1583              		.align	2
 1584              		.global	sendMP3Data
 1586              	sendMP3Data:
 1587              	.LFB26:
 1588              		.loc 1 756 0
 1589              		@ Function supports interworking.
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 1592 0a80 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1593              	.LCFI18:
 1594              		.loc 1 757 0
 1595 0a84 FEFFFFEB 		bl	vs1002Config
 1596              		.loc 1 758 0
 1597 0a88 54809FE5 		ldr	r8, .L170
 1598              		.loc 1 761 0
 1599 0a8c 54709FE5 		ldr	r7, .L170+4
 1600 0a90 54409FE5 		ldr	r4, .L170+8
 1601              		.loc 1 764 0
 1602 0a94 0060A0E3 		mov	r6, #0
 1603              		.loc 1 762 0
 1604 0a98 0150A0E3 		mov	r5, #1
 1605 0a9c 080000EA 		b	.L169
 1606              	.L167:
 1607              		.loc 1 759 0
 1608 0aa0 FEFFFFEB 		bl	vs1002SendMusic
 1609              		.loc 1 761 0
 1610 0aa4 340097E5 		ldr	r0, [r7, #52]
 1611 0aa8 40109FE5 		ldr	r1, .L170+12
 1612 0aac 2020A0E3 		mov	r2, #32
 1613 0ab0 FEFFFFEB 		bl	fat16_read_file
 1614 0ab4 0008A0E1 		mov	r0, r0, asl #16
 1615 0ab8 000050E3 		cmp	r0, #0
 1616              		.loc 1 762 0
 1617 0abc 0050C4D5 		strleb	r5, [r4, #0]
 1618              		.loc 1 764 0
 1619 0ac0 0060C4C5 		strgtb	r6, [r4, #0]
 1620              	.L169:
 1621              		.loc 1 758 0
 1622 0ac4 003098E5 		ldr	r3, [r8, #0]
 1623 0ac8 020613E3 		tst	r3, #2097152
 1624              		.loc 1 759 0
 1625 0acc 1C009FE5 		ldr	r0, .L170+12
 1626 0ad0 2010A0E3 		mov	r1, #32
 1627              		.loc 1 758 0
 1628 0ad4 F1FFFF1A 		bne	.L167
 1629              		.loc 1 767 0
 1630 0ad8 FEFFFFEB 		bl	vs1002Finish
 1631              		.loc 1 768 0
 1632 0adc F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1633 0ae0 1EFF2FE1 		bx	lr
 1634              	.L171:
 1635              		.align	2
 1636              	.L170:
 1637 0ae4 008002E0 		.word	-536707072
 1638 0ae8 14000000 		.word	current_song
 1639 0aec 02000000 		.word	song_is_over
 1640 0af0 51000000 		.word	current_song+61
 1641              	.LFE26:
 1643              		.align	2
 1645              	timer1ISR:
 1646              	.LFB6:
 1647              		.loc 1 335 0
 1648              		@ Function supports interworking.
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 1651 0af4 04E02DE5 		str	lr, [sp, #-4]!
 1652              	.LCFI19:
 1653              		.loc 1 336 0
 1654 0af8 FEFFFFEB 		bl	sendMP3Data
 1655              		.loc 1 338 0
 1656 0afc 18309FE5 		ldr	r3, .L174
 1657 0b00 FF20A0E3 		mov	r2, #255
 1658 0b04 002083E5 		str	r2, [r3, #0]
 1659              		.loc 1 339 0
 1660 0b08 0020A0E3 		mov	r2, #0
 1661 0b0c 0030E0E3 		mvn	r3, #0
 1662 0b10 CF2F03E5 		str	r2, [r3, #-4047]
 1663              		.loc 1 340 0
 1664 0b14 04E09DE4 		ldr	lr, [sp], #4
 1665 0b18 1EFF2FE1 		bx	lr
 1666              	.L175:
 1667              		.align	2
 1668              	.L174:
 1669 0b1c 008000E0 		.word	-536838144
 1670              	.LFE6:
 1672              		.align	2
 1673              		.global	startMP3Player
 1675              	startMP3Player:
 1676              	.LFB25:
 1677              		.loc 1 743 0
 1678              		@ Function supports interworking.
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 1681 0b20 10402DE9 		stmfd	sp!, {r4, lr}
 1682              	.LCFI20:
 1683              		.loc 1 744 0
 1684 0b24 FEFFFFEB 		bl	vs1002Config
 1685              		.loc 1 747 0
 1686 0b28 50409FE5 		ldr	r4, .L178
 1687              		.loc 1 745 0
 1688 0b2c 0000A0E3 		mov	r0, #0
 1689 0b30 021BA0E3 		mov	r1, #2048
 1690 0b34 FEFFFFEB 		bl	vs1002SCIWrite
 1691              		.loc 1 746 0
 1692 0b38 FEFFFFEB 		bl	vs1002Finish
 1693              		.loc 1 747 0
 1694 0b3c 0232A0E3 		mov	r3, #536870912
 1695 0b40 0C3084E5 		str	r3, [r4, #12]
 1696              		.loc 1 748 0
 1697 0b44 FEFFFFEB 		bl	sendMP3Data
 1698              		.loc 1 749 0
 1699 0b48 34209FE5 		ldr	r2, .L178+4
 1700 0b4c 043092E5 		ldr	r3, [r2, #4]
 1701 0b50 033B83E3 		orr	r3, r3, #3072
 1702 0b54 043082E5 		str	r3, [r2, #4]
 1703              	.LBB179:
 1704              	.LBB180:
 1705              		.loc 1 926 0
 1706 0b58 0020E0E3 		mvn	r2, #0
 1707 0b5c EF3F12E5 		ldr	r3, [r2, #-4079]
 1708 0b60 203083E3 		orr	r3, r3, #32
 1709 0b64 EF3F02E5 		str	r3, [r2, #-4079]
 1710              	.LBE180:
 1711              	.LBE179:
 1712              		.loc 1 751 0
 1713 0b68 083094E5 		ldr	r3, [r4, #8]
 1714 0b6c 033783E3 		orr	r3, r3, #786432
 1715 0b70 503083E3 		orr	r3, r3, #80
 1716 0b74 083084E5 		str	r3, [r4, #8]
 1717              		.loc 1 752 0
 1718 0b78 1040BDE8 		ldmfd	sp!, {r4, lr}
 1719 0b7c 1EFF2FE1 		bx	lr
 1720              	.L179:
 1721              		.align	2
 1722              	.L178:
 1723 0b80 008002E0 		.word	-536707072
 1724 0b84 00C002E0 		.word	-536690688
 1725              	.LFE25:
 1727              		.align	2
 1728              		.global	initializeMP3Player
 1730              	initializeMP3Player:
 1731              	.LFB24:
 1732              		.loc 1 733 0
 1733              		@ Function supports interworking.
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736 0b88 04E02DE5 		str	lr, [sp, #-4]!
 1737              	.LCFI21:
 1738              		.loc 1 734 0
 1739 0b8c FEFFFFEB 		bl	vs1002Config
 1740              		.loc 1 735 0
 1741 0b90 FEFFFFEB 		bl	vs1002Reset
 1742              		.loc 1 736 0
 1743 0b94 FEFFFFEB 		bl	vs1002Init
 1744              		.loc 1 737 0
 1745 0b98 0500A0E3 		mov	r0, #5
 1746 0b9c FEFFFFEB 		bl	lowerVolume
 1747              		.loc 1 738 0
 1748 0ba0 FEFFFFEB 		bl	vs1002Finish
 1749              		.loc 1 739 0
 1750 0ba4 04E09DE4 		ldr	lr, [sp], #4
 1751 0ba8 1EFF2FE1 		bx	lr
 1752              	.LFE24:
 1754              		.align	2
 1755              		.global	changeRadioFrequency
 1757              	changeRadioFrequency:
 1758              	.LFB23:
 1759              		.loc 1 719 0
 1760              		@ Function supports interworking.
 1761              		@ args = 0, pretend = 0, frame = 0
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763              	.LVL69:
 1764              		.loc 1 720 0
 1765 0bac 30109FE5 		ldr	r1, .L185
 1766 0bb0 002091E5 		ldr	r2, [r1, #0]
 1767 0bb4 DD3F42E2 		sub	r3, r2, #884
 1768 0bb8 023043E2 		sub	r3, r3, #2
 1769 0bbc BC0053E3 		cmp	r3, #188
 1770              		.loc 1 721 0
 1771 0bc0 02308090 		addls	r3, r0, r2
 1772 0bc4 00308195 		strls	r3, [r1, #0]
 1773              		.loc 1 719 0
 1774 0bc8 04E02DE5 		str	lr, [sp, #-4]!
 1775              	.LCFI22:
 1776              		.loc 1 723 0
 1777 0bcc FEFFFFEB 		bl	displayRadioMenu
 1778              	.LVL70:
 1779              		.loc 1 724 0
 1780 0bd0 0C309FE5 		ldr	r3, .L185
 1781 0bd4 000093E5 		ldr	r0, [r3, #0]
 1782 0bd8 FEFFFFEB 		bl	ns73SetChannel
 1783              		.loc 1 725 0
 1784 0bdc 04E09DE4 		ldr	lr, [sp], #4
 1785 0be0 1EFF2FE1 		bx	lr
 1786              	.L186:
 1787              		.align	2
 1788              	.L185:
 1789 0be4 00000000 		.word	radio_channel
 1790              	.LFE23:
 1792              		.align	2
 1793              		.global	setRadioFrequency
 1795              	setRadioFrequency:
 1796              	.LFB22:
 1797              		.loc 1 710 0
 1798              		@ Function supports interworking.
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              	.LVL71:
 1802              	.LBB181:
 1803              	.LBB183:
 1804              		.loc 1 846 0
 1805 0be8 4C209FE5 		ldr	r2, .L191
 1806 0bec 1C3092E5 		ldr	r3, [r2, #28]
 1807 0bf0 013283E3 		orr	r3, r3, #268435456
 1808 0bf4 1C3082E5 		str	r3, [r2, #28]
 1809              	.LBB184:
 1810              	.LBB185:
 1811              		.loc 1 251 0
 1812 0bf8 40209FE5 		ldr	r2, .L191+4
 1813              	.LBE185:
 1814              	.LBE184:
 1815              	.LBE183:
 1816              	.LBE181:
 1817              		.loc 1 710 0
 1818 0bfc 10402DE9 		stmfd	sp!, {r4, lr}
 1819              	.LCFI23:
 1820              	.LBB189:
 1821              	.LBB182:
 1822              		.loc 1 846 0
 1823 0c00 0030A0E3 		mov	r3, #0
 1824              	.LVL72:
 1825              	.LBE182:
 1826              	.LBE189:
 1827              		.loc 1 710 0
 1828 0c04 0040A0E1 		mov	r4, r0
 1829              	.LVL73:
 1830              	.L188:
 1831              	.LBB190:
 1832              	.LBB188:
 1833              	.LBB187:
 1834              	.LBB186:
 1835              		.loc 1 251 0
 1836              	@ 251 "main.c" 1
 1837 0c08 0000A0E1 		nop
 1838              	@ 0 "" 2
 1839 0c0c 013083E2 		add	r3, r3, #1
 1840 0c10 020053E1 		cmp	r3, r2
 1841 0c14 FBFFFF1A 		bne	.L188
 1842              	.LBE186:
 1843              	.LBE187:
 1844              	.LBE188:
 1845              	.LBE190:
 1846              		.loc 1 712 0
 1847 0c18 FEFFFFEB 		bl	ns73Config
 1848              	.LVL74:
 1849              		.loc 1 713 0
 1850 0c1c 0400A0E1 		mov	r0, r4
 1851 0c20 FEFFFFEB 		bl	ns73SetChannel
 1852              	.LBB191:
 1853              	.LBB192:
 1854              		.loc 1 853 0
 1855 0c24 10209FE5 		ldr	r2, .L191
 1856 0c28 143092E5 		ldr	r3, [r2, #20]
 1857 0c2c 013283E3 		orr	r3, r3, #268435456
 1858 0c30 143082E5 		str	r3, [r2, #20]
 1859              	.LBE192:
 1860              	.LBE191:
 1861              		.loc 1 715 0
 1862 0c34 1040BDE8 		ldmfd	sp!, {r4, lr}
 1863 0c38 1EFF2FE1 		bx	lr
 1864              	.L192:
 1865              		.align	2
 1866              	.L191:
 1867 0c3c 008002E0 		.word	-536707072
 1868 0c40 40420F00 		.word	1000000
 1869              	.LFE22:
 1871              		.section	.rodata.str1.1
 1872              	.LC1:
 1873 0003 4F666600 		.ascii	"Off\000"
 1874              		.text
 1875              		.align	2
 1876              		.global	disableRadio
 1878              	disableRadio:
 1879              	.LFB21:
 1880              		.loc 1 694 0
 1881              		@ Function supports interworking.
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884 0c44 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1885              	.LCFI24:
 1886              		.loc 1 695 0
 1887 0c48 98309FE5 		ldr	r3, .L197
 1888              		.loc 1 698 0
 1889 0c4c 98509FE5 		ldr	r5, .L197+4
 1890              		.loc 1 695 0
 1891 0c50 0040A0E3 		mov	r4, #0
 1892 0c54 0040C3E5 		strb	r4, [r3, #0]
 1893              		.loc 1 698 0
 1894 0c58 002095E5 		ldr	r2, [r5, #0]
 1895              		.loc 1 694 0
 1896 0c5c 08D04DE2 		sub	sp, sp, #8
 1897              	.LCFI25:
 1898              		.loc 1 698 0
 1899 0c60 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1900 0c64 0200A0E3 		mov	r0, #2
 1901 0c68 0410A0E1 		mov	r1, r4
 1902 0c6c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1903 0c70 FEFFFFEB 		bl	LCDSetRowColor
 1904              		.loc 1 699 0
 1905 0c74 003095E5 		ldr	r3, [r5, #0]
 1906 0c78 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1907 0c7c 00408DE5 		str	r4, [sp, #0]
 1908 0c80 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1909 0c84 64009FE5 		ldr	r0, .L197+8
 1910 0c88 0230A0E3 		mov	r3, #2
 1911 0c8c 0410A0E1 		mov	r1, r4
 1912 0c90 04C08DE5 		str	ip, [sp, #4]
 1913 0c94 FEFFFFEB 		bl	LCDPrintString
 1914              	.LBB193:
 1915              	.LBB194:
 1916              		.loc 1 846 0
 1917 0c98 54209FE5 		ldr	r2, .L197+12
 1918 0c9c 1C3092E5 		ldr	r3, [r2, #28]
 1919 0ca0 013283E3 		orr	r3, r3, #268435456
 1920 0ca4 1C3082E5 		str	r3, [r2, #28]
 1921              	.LBB195:
 1922              	.LBB196:
 1923              		.loc 1 251 0
 1924 0ca8 48309FE5 		ldr	r3, .L197+16
 1925              	.L194:
 1926              	@ 251 "main.c" 1
 1927 0cac 0000A0E1 		nop
 1928              	@ 0 "" 2
 1929 0cb0 014084E2 		add	r4, r4, #1
 1930              	.LVL75:
 1931 0cb4 030054E1 		cmp	r4, r3
 1932 0cb8 FBFFFF1A 		bne	.L194
 1933              	.LBE196:
 1934              	.LBE195:
 1935              	.LBE194:
 1936              	.LBE193:
 1937              		.loc 1 703 0
 1938 0cbc FEFFFFEB 		bl	ns73Config
 1939              		.loc 1 704 0
 1940 0cc0 0000A0E3 		mov	r0, #0
 1941 0cc4 0410A0E3 		mov	r1, #4
 1942 0cc8 FEFFFFEB 		bl	ns73Send
 1943              	.LBB197:
 1944              	.LBB198:
 1945              		.loc 1 853 0
 1946 0ccc 20209FE5 		ldr	r2, .L197+12
 1947 0cd0 143092E5 		ldr	r3, [r2, #20]
 1948 0cd4 013283E3 		orr	r3, r3, #268435456
 1949 0cd8 143082E5 		str	r3, [r2, #20]
 1950              	.LBE198:
 1951              	.LBE197:
 1952              		.loc 1 706 0
 1953 0cdc 08D08DE2 		add	sp, sp, #8
 1954 0ce0 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1955 0ce4 1EFF2FE1 		bx	lr
 1956              	.L198:
 1957              		.align	2
 1958              	.L197:
 1959 0ce8 00000000 		.word	radio_enable
 1960 0cec 7C040000 		.word	current_display
 1961 0cf0 03000000 		.word	.LC1
 1962 0cf4 008002E0 		.word	-536707072
 1963 0cf8 40420F00 		.word	1000000
 1964              	.LFE21:
 1966              		.section	.rodata.str1.1
 1967              	.LC2:
 1968 0007 4F6E00   		.ascii	"On\000"
 1969              		.text
 1970              		.align	2
 1971              		.global	enableRadio
 1973              	enableRadio:
 1974              	.LFB20:
 1975              		.loc 1 678 0
 1976              		@ Function supports interworking.
 1977              		@ args = 0, pretend = 0, frame = 0
 1978              		@ frame_needed = 0, uses_anonymous_args = 0
 1979 0cfc 10402DE9 		stmfd	sp!, {r4, lr}
 1980              	.LCFI26:
 1981              		.loc 1 679 0
 1982 0d00 9C309FE5 		ldr	r3, .L203
 1983              		.loc 1 682 0
 1984 0d04 9C409FE5 		ldr	r4, .L203+4
 1985              		.loc 1 679 0
 1986 0d08 0120A0E3 		mov	r2, #1
 1987 0d0c 0020C3E5 		strb	r2, [r3, #0]
 1988              		.loc 1 682 0
 1989 0d10 002094E5 		ldr	r2, [r4, #0]
 1990              		.loc 1 678 0
 1991 0d14 08D04DE2 		sub	sp, sp, #8
 1992              	.LCFI27:
 1993              		.loc 1 682 0
 1994 0d18 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1995 0d1c 0200A0E3 		mov	r0, #2
 1996 0d20 0010A0E3 		mov	r1, #0
 1997 0d24 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1998 0d28 FEFFFFEB 		bl	LCDSetRowColor
 1999              		.loc 1 683 0
 2000 0d2c 003094E5 		ldr	r3, [r4, #0]
 2001 0d30 0040A0E3 		mov	r4, #0
 2002 0d34 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2003 0d38 00408DE5 		str	r4, [sp, #0]
 2004 0d3c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2005 0d40 64009FE5 		ldr	r0, .L203+8
 2006 0d44 0230A0E3 		mov	r3, #2
 2007 0d48 0410A0E1 		mov	r1, r4
 2008 0d4c 04C08DE5 		str	ip, [sp, #4]
 2009 0d50 FEFFFFEB 		bl	LCDPrintString
 2010              	.LBB199:
 2011              	.LBB200:
 2012              		.loc 1 846 0
 2013 0d54 54209FE5 		ldr	r2, .L203+12
 2014 0d58 1C3092E5 		ldr	r3, [r2, #28]
 2015 0d5c 013283E3 		orr	r3, r3, #268435456
 2016 0d60 1C3082E5 		str	r3, [r2, #28]
 2017              	.LBB201:
 2018              	.LBB202:
 2019              		.loc 1 251 0
 2020 0d64 48309FE5 		ldr	r3, .L203+16
 2021              	.L200:
 2022              	@ 251 "main.c" 1
 2023 0d68 0000A0E1 		nop
 2024              	@ 0 "" 2
 2025 0d6c 014084E2 		add	r4, r4, #1
 2026              	.LVL76:
 2027 0d70 030054E1 		cmp	r4, r3
 2028 0d74 FBFFFF1A 		bne	.L200
 2029              	.LBE202:
 2030              	.LBE201:
 2031              	.LBE200:
 2032              	.LBE199:
 2033              		.loc 1 687 0
 2034 0d78 FEFFFFEB 		bl	ns73Config
 2035              		.loc 1 688 0
 2036 0d7c 0000A0E3 		mov	r0, #0
 2037 0d80 8110A0E3 		mov	r1, #129
 2038 0d84 FEFFFFEB 		bl	ns73Send
 2039              	.LBB203:
 2040              	.LBB204:
 2041              		.loc 1 853 0
 2042 0d88 20209FE5 		ldr	r2, .L203+12
 2043 0d8c 143092E5 		ldr	r3, [r2, #20]
 2044 0d90 013283E3 		orr	r3, r3, #268435456
 2045 0d94 143082E5 		str	r3, [r2, #20]
 2046              	.LBE204:
 2047              	.LBE203:
 2048              		.loc 1 690 0
 2049 0d98 08D08DE2 		add	sp, sp, #8
 2050 0d9c 1040BDE8 		ldmfd	sp!, {r4, lr}
 2051 0da0 1EFF2FE1 		bx	lr
 2052              	.L204:
 2053              		.align	2
 2054              	.L203:
 2055 0da4 00000000 		.word	radio_enable
 2056 0da8 7C040000 		.word	current_display
 2057 0dac 07000000 		.word	.LC2
 2058 0db0 008002E0 		.word	-536707072
 2059 0db4 40420F00 		.word	1000000
 2060              	.LFE20:
 2062              		.align	2
 2063              		.global	initializeRadio
 2065              	initializeRadio:
 2066              	.LFB19:
 2067              		.loc 1 664 0
 2068              		@ Function supports interworking.
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              	.LVL77:
 2072              	.LBB205:
 2073              	.LBB207:
 2074              		.loc 1 846 0
 2075 0db8 68209FE5 		ldr	r2, .L211
 2076 0dbc 1C3092E5 		ldr	r3, [r2, #28]
 2077 0dc0 013283E3 		orr	r3, r3, #268435456
 2078 0dc4 1C3082E5 		str	r3, [r2, #28]
 2079              	.LBB208:
 2080              	.LBB209:
 2081              		.loc 1 251 0
 2082 0dc8 5C209FE5 		ldr	r2, .L211+4
 2083              	.LBE209:
 2084              	.LBE208:
 2085              	.LBE207:
 2086              	.LBE205:
 2087              		.loc 1 664 0
 2088 0dcc 10402DE9 		stmfd	sp!, {r4, lr}
 2089              	.LCFI28:
 2090              	.LBB213:
 2091              	.LBB206:
 2092              		.loc 1 846 0
 2093 0dd0 0030A0E3 		mov	r3, #0
 2094              	.LVL78:
 2095              	.LBE206:
 2096              	.LBE213:
 2097              		.loc 1 664 0
 2098 0dd4 0040A0E1 		mov	r4, r0
 2099              	.LVL79:
 2100              	.L206:
 2101              	.LBB214:
 2102              	.LBB212:
 2103              	.LBB211:
 2104              	.LBB210:
 2105              		.loc 1 251 0
 2106              	@ 251 "main.c" 1
 2107 0dd8 0000A0E1 		nop
 2108              	@ 0 "" 2
 2109 0ddc 013083E2 		add	r3, r3, #1
 2110 0de0 020053E1 		cmp	r3, r2
 2111 0de4 FBFFFF1A 		bne	.L206
 2112              	.LBE210:
 2113              	.LBE211:
 2114              	.LBE212:
 2115              	.LBE214:
 2116              		.loc 1 668 0
 2117 0de8 FEFFFFEB 		bl	ns73Config
 2118              	.LVL80:
 2119              		.loc 1 669 0
 2120 0dec FEFFFFEB 		bl	ns73Init
 2121              		.loc 1 670 0
 2122 0df0 0400A0E1 		mov	r0, r4
 2123 0df4 FEFFFFEB 		bl	ns73SetChannel
 2124              	.LBB215:
 2125              	.LBB216:
 2126              		.loc 1 853 0
 2127 0df8 28209FE5 		ldr	r2, .L211
 2128 0dfc 143092E5 		ldr	r3, [r2, #20]
 2129 0e00 013283E3 		orr	r3, r3, #268435456
 2130 0e04 143082E5 		str	r3, [r2, #20]
 2131              	.LBE216:
 2132              	.LBE215:
 2133              	.LBB218:
 2134              	.LBB219:
 2135              		.loc 1 251 0
 2136 0e08 1C209FE5 		ldr	r2, .L211+4
 2137              	.LBE219:
 2138              	.LBE218:
 2139              	.LBB221:
 2140              	.LBB217:
 2141              		.loc 1 853 0
 2142 0e0c 0030A0E3 		mov	r3, #0
 2143              	.LVL81:
 2144              	.L207:
 2145              	.LBE217:
 2146              	.LBE221:
 2147              	.LBB222:
 2148              	.LBB220:
 2149              		.loc 1 251 0
 2150              	@ 251 "main.c" 1
 2151 0e10 0000A0E1 		nop
 2152              	@ 0 "" 2
 2153 0e14 013083E2 		add	r3, r3, #1
 2154 0e18 020053E1 		cmp	r3, r2
 2155 0e1c FBFFFF1A 		bne	.L207
 2156              	.LBE220:
 2157              	.LBE222:
 2158              		.loc 1 674 0
 2159 0e20 1040BDE8 		ldmfd	sp!, {r4, lr}
 2160 0e24 1EFF2FE1 		bx	lr
 2161              	.L212:
 2162              		.align	2
 2163              	.L211:
 2164 0e28 008002E0 		.word	-536707072
 2165 0e2c 40420F00 		.word	1000000
 2166              	.LFE19:
 2168              		.align	2
 2169              		.global	closeSong
 2171              	closeSong:
 2172              	.LFB10:
 2173              		.loc 1 420 0
 2174              		@ Function supports interworking.
 2175              		@ args = 0, pretend = 0, frame = 0
 2176              		@ frame_needed = 0, uses_anonymous_args = 0
 2177              	.LVL82:
 2178 0e30 10402DE9 		stmfd	sp!, {r4, lr}
 2179              	.LCFI29:
 2180              	.LBB223:
 2181              	.LBB224:
 2182              		.loc 1 835 0
 2183 0e34 28409FE5 		ldr	r4, .L215
 2184 0e38 003094E5 		ldr	r3, [r4, #0]
 2185 0e3c 153C83E3 		orr	r3, r3, #5376
 2186 0e40 003084E5 		str	r3, [r4, #0]
 2187              	.LBE224:
 2188              	.LBE223:
 2189              		.loc 1 422 0
 2190 0e44 340090E5 		ldr	r0, [r0, #52]
 2191              	.LVL83:
 2192 0e48 FEFFFFEB 		bl	fat16_close_file
 2193              	.LBB225:
 2194              	.LBB226:
 2195              		.loc 1 841 0
 2196 0e4c 003094E5 		ldr	r3, [r4, #0]
 2197 0e50 FF3DC3E3 		bic	r3, r3, #16320
 2198 0e54 3030C3E3 		bic	r3, r3, #48
 2199 0e58 003084E5 		str	r3, [r4, #0]
 2200              	.LBE226:
 2201              	.LBE225:
 2202              		.loc 1 424 0
 2203 0e5c 1040BDE8 		ldmfd	sp!, {r4, lr}
 2204 0e60 1EFF2FE1 		bx	lr
 2205              	.L216:
 2206              		.align	2
 2207              	.L215:
 2208 0e64 00C002E0 		.word	-536690688
 2209              	.LFE10:
 2211              		.align	2
 2212              		.global	stopMP3Player
 2214              	stopMP3Player:
 2215              	.LFB27:
 2216              		.loc 1 772 0
 2217              		@ Function supports interworking.
 2218              		@ args = 0, pretend = 0, frame = 0
 2219              		@ frame_needed = 0, uses_anonymous_args = 0
 2220              	.LBB227:
 2221              	.LBB228:
 2222              		.loc 1 932 0
 2223 0e68 2020A0E3 		mov	r2, #32
 2224 0e6c 0030E0E3 		mvn	r3, #0
 2225 0e70 EB2F03E5 		str	r2, [r3, #-4075]
 2226              	.LBE228:
 2227              	.LBE227:
 2228              		.loc 1 775 0
 2229 0e74 74309FE5 		ldr	r3, .L221
 2230 0e78 0222A0E3 		mov	r2, #536870912
 2231              		.loc 1 772 0
 2232 0e7c 10402DE9 		stmfd	sp!, {r4, lr}
 2233              	.LCFI30:
 2234              		.loc 1 775 0
 2235 0e80 042083E5 		str	r2, [r3, #4]
 2236              		.loc 1 776 0
 2237 0e84 FEFFFFEB 		bl	vs1002Config
 2238              		.loc 1 777 0
 2239 0e88 0000A0E3 		mov	r0, #0
 2240 0e8c 0810A0E3 		mov	r1, #8
 2241 0e90 FEFFFFEB 		bl	vs1002SCIWrite
 2242 0e94 0040A0E3 		mov	r4, #0
 2243              	.LVL84:
 2244              	.L218:
 2245              	.LBB229:
 2246              		.loc 1 778 0
 2247 0e98 0000A0E3 		mov	r0, #0
 2248 0e9c 014084E2 		add	r4, r4, #1
 2249 0ea0 0010A0E1 		mov	r1, r0
 2250 0ea4 FEFFFFEB 		bl	vs1002SCIWrite
 2251 0ea8 960054E3 		cmp	r4, #150
 2252 0eac F9FFFF1A 		bne	.L218
 2253              	.LBE229:
 2254              		.loc 1 779 0
 2255 0eb0 FEFFFFEB 		bl	vs1002Finish
 2256              		.loc 1 780 0
 2257 0eb4 34209FE5 		ldr	r2, .L221
 2258 0eb8 083092E5 		ldr	r3, [r2, #8]
 2259 0ebc 033783E3 		orr	r3, r3, #786432
 2260 0ec0 503083E3 		orr	r3, r3, #80
 2261 0ec4 083082E5 		str	r3, [r2, #8]
 2262              		.loc 1 781 0
 2263 0ec8 24009FE5 		ldr	r0, .L221+4
 2264 0ecc FEFFFFEB 		bl	closeSong
 2265              		.loc 1 782 0
 2266 0ed0 20309FE5 		ldr	r3, .L221+8
 2267 0ed4 0020A0E3 		mov	r2, #0
 2268 0ed8 0020C3E5 		strb	r2, [r3, #0]
 2269              	.LBB230:
 2270              	.LBB231:
 2271              		.loc 1 951 0
 2272 0edc 102082E2 		add	r2, r2, #16
 2273 0ee0 0030E0E3 		mvn	r3, #0
 2274 0ee4 EF2F03E5 		str	r2, [r3, #-4079]
 2275              	.LBE231:
 2276              	.LBE230:
 2277              		.loc 1 785 0
 2278 0ee8 1040BDE8 		ldmfd	sp!, {r4, lr}
 2279 0eec 1EFF2FE1 		bx	lr
 2280              	.L222:
 2281              		.align	2
 2282              	.L221:
 2283 0ef0 008002E0 		.word	-536707072
 2284 0ef4 14000000 		.word	current_song
 2285 0ef8 01000000 		.word	file_is_open
 2286              	.LFE27:
 2288              		.align	2
 2289              		.global	loadSongInfo
 2291              	loadSongInfo:
 2292              	.LFB9:
 2293              		.loc 1 385 0
 2294              		@ Function supports interworking.
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              	.LVL85:
 2298 0efc 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2299              	.LCFI31:
 2300              		.loc 1 385 0
 2301 0f00 0020A0E3 		mov	r2, #0
 2302              	.LVL86:
 2303 0f04 0040A0E1 		mov	r4, r0
 2304              	.LVL87:
 2305              	.L224:
 2306              	.LBB232:
 2307              		.loc 1 388 0
 2308 0f08 083091E5 		ldr	r3, [r1, #8]
 2309 0f0c 833281E0 		add	r3, r1, r3, asl #5
 2310 0f10 023083E0 		add	r3, r3, r2
 2311 0f14 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2312              		.loc 1 387 0
 2313 0f18 012082E2 		add	r2, r2, #1
 2314 0f1c 1E0052E3 		cmp	r2, #30
 2315              		.loc 1 388 0
 2316 0f20 1630C0E5 		strb	r3, [r0, #22]
 2317              		.loc 1 387 0
 2318 0f24 010080E2 		add	r0, r0, #1
 2319 0f28 F6FFFF1A 		bne	.L224
 2320 0f2c 0020A0E3 		mov	r2, #0
 2321              	.LVL88:
 2322              	.LBE232:
 2323              	.LBB233:
 2324              		.loc 1 393 0
 2325 0f30 0210A0E1 		mov	r1, r2
 2326              	.LVL89:
 2327              	.L227:
 2328              		.loc 1 392 0
 2329 0f34 023084E0 		add	r3, r4, r2
 2330 0f38 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2331 0f3c 150052E3 		cmp	r2, #21
 2332 0f40 2E005313 		cmpne	r3, #46
 2333              		.loc 1 393 0
 2334 0f44 0210C407 		streqb	r1, [r4, r2]
 2335 0f48 1620A003 		moveq	r2, #22
 2336              		.loc 1 396 0
 2337 0f4c 0230C417 		strneb	r3, [r4, r2]
 2338              		.loc 1 391 0
 2339 0f50 012082E2 		add	r2, r2, #1
 2340 0f54 150052E3 		cmp	r2, #21
 2341 0f58 F5FFFFDA 		ble	.L227
 2342              	.LBE233:
 2343              	.LBB234:
 2344              	.LBB236:
 2345              		.loc 1 835 0
 2346 0f5c 6C609FE5 		ldr	r6, .L233
 2347 0f60 003096E5 		ldr	r3, [r6, #0]
 2348              	.LBE236:
 2349              	.LBE234:
 2350              		.loc 1 403 0
 2351 0f64 165084E2 		add	r5, r4, #22
 2352              	.LBB238:
 2353              	.LBB235:
 2354              		.loc 1 835 0
 2355 0f68 153C83E3 		orr	r3, r3, #5376
 2356              	.LBE235:
 2357              	.LBE238:
 2358              		.loc 1 403 0
 2359 0f6c 0500A0E1 		mov	r0, r5
 2360              	.LBB239:
 2361              	.LBB237:
 2362              		.loc 1 835 0
 2363 0f70 003086E5 		str	r3, [r6, #0]
 2364              	.LBE237:
 2365              	.LBE239:
 2366              		.loc 1 403 0
 2367 0f74 FEFFFFEB 		bl	root_file_exists
 2368              	.LVL90:
 2369 0f78 000050E3 		cmp	r0, #0
 2370              	.LBB240:
 2371              	.LBB241:
 2372              		.loc 1 841 0
 2373 0f7c 00309605 		ldreq	r3, [r6, #0]
 2374 0f80 FF3DC303 		biceq	r3, r3, #16320
 2375 0f84 3030C303 		biceq	r3, r3, #48
 2376 0f88 00308605 		streq	r3, [r6, #0]
 2377 0f8c 0D00000A 		beq	.L229
 2378              	.L228:
 2379              	.LBE241:
 2380              	.LBE240:
 2381              		.loc 1 408 0
 2382 0f90 0500A0E1 		mov	r0, r5
 2383 0f94 FEFFFFEB 		bl	root_open
 2384 0f98 340084E5 		str	r0, [r4, #52]
 2385              		.loc 1 409 0
 2386 0f9c FEFFFFEB 		bl	fat16_file_size
 2387              		.loc 1 410 0
 2388 0fa0 3D1084E2 		add	r1, r4, #61
 2389              		.loc 1 409 0
 2390 0fa4 380084E5 		str	r0, [r4, #56]
 2391              		.loc 1 410 0
 2392 0fa8 2020A0E3 		mov	r2, #32
 2393 0fac 340094E5 		ldr	r0, [r4, #52]
 2394 0fb0 FEFFFFEB 		bl	fat16_read_file
 2395              	.LBB242:
 2396              	.LBB243:
 2397              		.loc 1 841 0
 2398 0fb4 003096E5 		ldr	r3, [r6, #0]
 2399 0fb8 FF3DC3E3 		bic	r3, r3, #16320
 2400 0fbc 3030C3E3 		bic	r3, r3, #48
 2401 0fc0 003086E5 		str	r3, [r6, #0]
 2402 0fc4 0100A0E3 		mov	r0, #1
 2403              	.L229:
 2404              	.LBE243:
 2405              	.LBE242:
 2406              		.loc 1 415 0
 2407 0fc8 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2408 0fcc 1EFF2FE1 		bx	lr
 2409              	.L234:
 2410              		.align	2
 2411              	.L233:
 2412 0fd0 00C002E0 		.word	-536690688
 2413              	.LFE9:
 2415              		.align	2
 2416              		.global	handleMiddleButton
 2418              	handleMiddleButton:
 2419              	.LFB16:
 2420              		.loc 1 540 0
 2421              		@ Function supports interworking.
 2422              		@ args = 0, pretend = 0, frame = 0
 2423              		@ frame_needed = 0, uses_anonymous_args = 0
 2424 0fd4 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 2425              	.LCFI32:
 2426              	.LBB244:
 2427              	.LBB245:
 2428              		.loc 1 944 0
 2429 0fd8 1020A0E3 		mov	r2, #16
 2430 0fdc 0030E0E3 		mvn	r3, #0
 2431 0fe0 EB2F03E5 		str	r2, [r3, #-4075]
 2432              	.LBB246:
 2433              	.LBB247:
 2434              		.loc 1 251 0
 2435 0fe4 50239FE5 		ldr	r2, .L268
 2436              	.LBE247:
 2437              	.LBE246:
 2438              	.LBE245:
 2439              	.LBE244:
 2440              		.loc 1 540 0
 2441 0fe8 08D04DE2 		sub	sp, sp, #8
 2442              	.LCFI33:
 2443              	.LBB251:
 2444              	.LBB250:
 2445              		.loc 1 944 0
 2446 0fec 013083E2 		add	r3, r3, #1
 2447              	.LVL91:
 2448              	.L236:
 2449              	.LBB249:
 2450              	.LBB248:
 2451              		.loc 1 251 0
 2452              	@ 251 "main.c" 1
 2453 0ff0 0000A0E1 		nop
 2454              	@ 0 "" 2
 2455 0ff4 013083E2 		add	r3, r3, #1
 2456 0ff8 020053E1 		cmp	r3, r2
 2457 0ffc FBFFFF1A 		bne	.L236
 2458              	.LBE248:
 2459              	.LBE249:
 2460              	.LBE250:
 2461              	.LBE251:
 2462              		.loc 1 544 0
 2463 1000 38639FE5 		ldr	r6, .L268+4
 2464 1004 38339FE5 		ldr	r3, .L268+8
 2465              	.LVL92:
 2466 1008 000096E5 		ldr	r0, [r6, #0]
 2467 100c 030050E1 		cmp	r0, r3
 2468 1010 30539FE5 		ldr	r5, .L268+12
 2469 1014 2500001A 		bne	.L237
 2470              		.loc 1 545 0
 2471 1018 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2472 101c 000053E3 		cmp	r3, #0
 2473 1020 2000001A 		bne	.L238
 2474              		.loc 1 546 0
 2475 1024 0010A0E1 		mov	r1, r0
 2476 1028 1C039FE5 		ldr	r0, .L268+16
 2477 102c FEFFFFEB 		bl	loadSongInfo
 2478              		.loc 1 547 0
 2479 1030 000050E3 		cmp	r0, #0
 2480              		.loc 1 546 0
 2481 1034 0040A0E1 		mov	r4, r0
 2482 1038 0000C5E5 		strb	r0, [r5, #0]
 2483              		.loc 1 547 0
 2484 103c 1700001A 		bne	.L239
 2485              		.loc 1 548 0
 2486 1040 08339FE5 		ldr	r3, .L268+20
 2487 1044 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2488 1048 FEFFFFEB 		bl	LCDClear
 2489              		.loc 1 549 0
 2490 104c 00408DE5 		str	r4, [sp, #0]
 2491 1050 001096E5 		ldr	r1, [r6, #0]
 2492 1054 F8329FE5 		ldr	r3, .L268+24
 2493 1058 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2494 105c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2495 1060 F0029FE5 		ldr	r0, .L268+28
 2496 1064 0130A0E3 		mov	r3, #1
 2497 1068 0410A0E1 		mov	r1, r4
 2498 106c 04C08DE5 		str	ip, [sp, #4]
 2499 1070 FEFFFFEB 		bl	LCDPrintString
 2500              	.LBB252:
 2501              	.LBB253:
 2502              		.loc 1 251 0
 2503 1074 E0329FE5 		ldr	r3, .L268+32
 2504              	.LBE253:
 2505              	.LBE252:
 2506              		.loc 1 549 0
 2507 1078 0400A0E1 		mov	r0, r4
 2508              	.LVL93:
 2509              	.L240:
 2510              	.LBB255:
 2511              	.LBB254:
 2512              		.loc 1 251 0
 2513              	@ 251 "main.c" 1
 2514 107c 0000A0E1 		nop
 2515              	@ 0 "" 2
 2516 1080 010080E2 		add	r0, r0, #1
 2517 1084 030050E1 		cmp	r0, r3
 2518 1088 FBFFFF1A 		bne	.L240
 2519              	.LBE254:
 2520              	.LBE255:
 2521              		.loc 1 551 0
 2522 108c C0329FE5 		ldr	r3, .L268+24
 2523 1090 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2524              	.LVL94:
 2525 1094 FEFFFFEB 		bl	LCDClear
 2526              		.loc 1 552 0
 2527 1098 A4029FE5 		ldr	r0, .L268+8
 2528 109c 9E0000EA 		b	.L267
 2529              	.L239:
 2530              		.loc 1 554 0
 2531 10a0 FEFFFFEB 		bl	startMP3Player
 2532 10a4 9D0000EA 		b	.L241
 2533              	.L238:
 2534              		.loc 1 557 0
 2535 10a8 FEFFFFEB 		bl	stopMP3Player
 2536 10ac 9B0000EA 		b	.L241
 2537              	.L237:
 2538              		.loc 1 560 0
 2539 10b0 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2540 10b4 000053E3 		cmp	r3, #0
 2541 10b8 0100000A 		beq	.L242
 2542              		.loc 1 561 0
 2543 10bc FEFFFFEB 		bl	quickClear
 2544 10c0 020000EA 		b	.L243
 2545              	.L242:
 2546              		.loc 1 563 0
 2547 10c4 94329FE5 		ldr	r3, .L268+36
 2548 10c8 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2549 10cc FEFFFFEB 		bl	LCDClear
 2550              	.L243:
 2551              		.loc 1 565 0
 2552 10d0 68729FE5 		ldr	r7, .L268+4
 2553 10d4 003097E5 		ldr	r3, [r7, #0]
 2554 10d8 0060A0E3 		mov	r6, #0
 2555 10dc 080093E5 		ldr	r0, [r3, #8]
 2556 10e0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2557 10e4 00608DE5 		str	r6, [sp, #0]
 2558 10e8 800283E0 		add	r0, r3, r0, asl #5
 2559 10ec 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2560              	.LBB256:
 2561              	.LBB257:
 2562              		.loc 1 938 0
 2563 10f0 0050E0E3 		mvn	r5, #0
 2564              	.LBE257:
 2565              	.LBE256:
 2566              		.loc 1 565 0
 2567 10f4 0130A0E3 		mov	r3, #1
 2568 10f8 0C0080E2 		add	r0, r0, #12
 2569 10fc 0610A0E1 		mov	r1, r6
 2570 1100 04C08DE5 		str	ip, [sp, #4]
 2571 1104 FEFFFFEB 		bl	LCDPrintString
 2572              	.LBB259:
 2573              	.LBB258:
 2574              		.loc 1 938 0
 2575 1108 EF3F15E5 		ldr	r3, [r5, #-4079]
 2576 110c 103083E3 		orr	r3, r3, #16
 2577 1110 EF3F05E5 		str	r3, [r5, #-4079]
 2578              	.LBE258:
 2579              	.LBE259:
 2580              		.loc 1 567 0
 2581 1114 002097E5 		ldr	r2, [r7, #0]
 2582 1118 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 2583 111c 010054E3 		cmp	r4, #1
 2584 1120 2B00001A 		bne	.L244
 2585              	.LBB260:
 2586              	.LBB261:
 2587              		.loc 1 938 0
 2588 1124 EF3F15E5 		ldr	r3, [r5, #-4079]
 2589 1128 103083E3 		orr	r3, r3, #16
 2590 112c EF3F05E5 		str	r3, [r5, #-4079]
 2591              	.LBE261:
 2592              	.LBE260:
 2593              		.loc 1 569 0
 2594 1130 0610A0E1 		mov	r1, r6
 2595 1134 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2596 1138 0200A0E3 		mov	r0, #2
 2597 113c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2598 1140 FEFFFFEB 		bl	LCDSetRowColor
 2599              		.loc 1 570 0
 2600 1144 00608DE5 		str	r6, [sp, #0]
 2601 1148 00329FE5 		ldr	r3, .L268+20
 2602 114c 001097E5 		ldr	r1, [r7, #0]
 2603 1150 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2604 1154 08329FE5 		ldr	r3, .L268+40
 2605 1158 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2606 115c 04029FE5 		ldr	r0, .L268+44
 2607 1160 001093E5 		ldr	r1, [r3, #0]
 2608 1164 0230A0E3 		mov	r3, #2
 2609 1168 04C08DE5 		str	ip, [sp, #4]
 2610              	.LBB262:
 2611              	.LBB263:
 2612              		.loc 1 944 0
 2613 116c 0540A0E1 		mov	r4, r5
 2614              	.LBE263:
 2615              	.LBE262:
 2616              		.loc 1 570 0
 2617 1170 FEFFFFEB 		bl	LCDPrintString
 2618              		.loc 1 571 0
 2619 1174 F0719FE5 		ldr	r7, .L268+48
 2620              	.LBB269:
 2621              	.LBB268:
 2622              		.loc 1 944 0
 2623 1178 106086E2 		add	r6, r6, #16
 2624              	.LBB264:
 2625              	.LBB265:
 2626              		.loc 1 251 0
 2627 117c B8519FE5 		ldr	r5, .L268
 2628 1180 0F0000EA 		b	.L245
 2629              	.L249:
 2630              	.LBE265:
 2631              	.LBE264:
 2632              		.loc 1 944 0
 2633 1184 EB6F04E5 		str	r6, [r4, #-4075]
 2634 1188 0030A0E3 		mov	r3, #0
 2635              	.LVL95:
 2636              	.L246:
 2637              	.LBB267:
 2638              	.LBB266:
 2639              		.loc 1 251 0
 2640              	@ 251 "main.c" 1
 2641 118c 0000A0E1 		nop
 2642              	@ 0 "" 2
 2643 1190 013083E2 		add	r3, r3, #1
 2644 1194 050053E1 		cmp	r3, r5
 2645 1198 FBFFFF1A 		bne	.L246
 2646              	.LBE266:
 2647              	.LBE267:
 2648              	.LBE268:
 2649              	.LBE269:
 2650              		.loc 1 573 0
 2651 119c 020050E3 		cmp	r0, #2
 2652 11a0 0200001A 		bne	.L247
 2653              		.loc 1 574 0
 2654 11a4 0100A0E3 		mov	r0, #1
 2655 11a8 FEFFFFEB 		bl	raiseVolume
 2656              	.LVL96:
 2657 11ac 010000EA 		b	.L248
 2658              	.LVL97:
 2659              	.L247:
 2660              		.loc 1 575 0
 2661 11b0 010050E3 		cmp	r0, #1
 2662              		.loc 1 576 0
 2663 11b4 FEFFFF0B 		bleq	lowerVolume
 2664              	.LVL98:
 2665              	.L248:
 2666              	.LBB270:
 2667              	.LBB271:
 2668              		.loc 1 938 0
 2669 11b8 EF3F14E5 		ldr	r3, [r4, #-4079]
 2670              	.LVL99:
 2671 11bc 103083E3 		orr	r3, r3, #16
 2672 11c0 EF3F04E5 		str	r3, [r4, #-4079]
 2673              	.L245:
 2674              	.LBE271:
 2675              	.LBE270:
 2676              		.loc 1 571 0
 2677 11c4 0000D7E5 		ldrb	r0, [r7, #0]	@ zero_extendqisi2
 2678 11c8 020050E3 		cmp	r0, #2
 2679 11cc ECFFFF9A 		bls	.L249
 2680 11d0 440000EA 		b	.L250
 2681              	.L244:
 2682              		.loc 1 581 0
 2683 11d4 030054E3 		cmp	r4, #3
 2684 11d8 1300001A 		bne	.L251
 2685              		.loc 1 582 0
 2686 11dc FEFFFFEB 		bl	displayRadioMenu
 2687              	.LBB272:
 2688              	.LBB274:
 2689              		.loc 1 938 0
 2690 11e0 EF3F15E5 		ldr	r3, [r5, #-4079]
 2691              	.LBE274:
 2692              	.LBE272:
 2693              		.loc 1 583 0
 2694 11e4 80219FE5 		ldr	r2, .L268+48
 2695              	.LBB276:
 2696              	.LBB273:
 2697              		.loc 1 938 0
 2698 11e8 103083E3 		orr	r3, r3, #16
 2699              	.LBE273:
 2700              	.LBE276:
 2701              		.loc 1 583 0
 2702 11ec 0060C2E5 		strb	r6, [r2, #0]
 2703              	.LBB277:
 2704              	.LBB279:
 2705              		.loc 1 944 0
 2706 11f0 1000A0E3 		mov	r0, #16
 2707              	.LBE279:
 2708              	.LBE277:
 2709              	.LBB283:
 2710              	.LBB275:
 2711              		.loc 1 938 0
 2712 11f4 EF3F05E5 		str	r3, [r5, #-4079]
 2713              	.LBE275:
 2714              	.LBE283:
 2715              	.LBB284:
 2716              	.LBB278:
 2717              		.loc 1 944 0
 2718 11f8 0520A0E1 		mov	r2, r5
 2719              	.LBB280:
 2720              	.LBB281:
 2721              		.loc 1 251 0
 2722 11fc 38119FE5 		ldr	r1, .L268
 2723 1200 060000EA 		b	.L252
 2724              	.LVL100:
 2725              	.L253:
 2726              	@ 251 "main.c" 1
 2727 1204 0000A0E1 		nop
 2728              	@ 0 "" 2
 2729 1208 013083E2 		add	r3, r3, #1
 2730 120c 010053E1 		cmp	r3, r1
 2731 1210 FBFFFF1A 		bne	.L253
 2732              	.LBE281:
 2733              	.LBE280:
 2734              	.LBE278:
 2735              	.LBE284:
 2736              	.LBB285:
 2737              	.LBB286:
 2738              		.loc 1 938 0
 2739 1214 EF3F12E5 		ldr	r3, [r2, #-4079]
 2740              	.LVL101:
 2741 1218 103083E3 		orr	r3, r3, #16
 2742 121c EF3F02E5 		str	r3, [r2, #-4079]
 2743              	.L252:
 2744              	.LBE286:
 2745              	.LBE285:
 2746              	.LBB287:
 2747              	.LBB282:
 2748              		.loc 1 944 0
 2749 1220 EB0F02E5 		str	r0, [r2, #-4075]
 2750 1224 0030A0E3 		mov	r3, #0
 2751              	.LVL102:
 2752 1228 F5FFFFEA 		b	.L253
 2753              	.LVL103:
 2754              	.L251:
 2755              	.LBE282:
 2756              	.LBE287:
 2757              		.loc 1 595 0
 2758 122c 020054E3 		cmp	r4, #2
 2759 1230 2C00001A 		bne	.L250
 2760              		.loc 1 596 0
 2761 1234 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2762 1238 0610A0E1 		mov	r1, r6
 2763 123c 0400A0E1 		mov	r0, r4
 2764 1240 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2765 1244 FEFFFFEB 		bl	LCDSetRowColor
 2766              		.loc 1 597 0
 2767 1248 20319FE5 		ldr	r3, .L268+52
 2768 124c 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2769 1250 000051E3 		cmp	r1, #0
 2770 1254 0700000A 		beq	.L254
 2771              		.loc 1 598 0
 2772 1258 003097E5 		ldr	r3, [r7, #0]
 2773 125c 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2774 1260 00608DE5 		str	r6, [sp, #0]
 2775 1264 0610A0E1 		mov	r1, r6
 2776 1268 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2777 126c 00019FE5 		ldr	r0, .L268+56
 2778 1270 0430A0E1 		mov	r3, r4
 2779 1274 050000EA 		b	.L266
 2780              	.L254:
 2781              		.loc 1 600 0
 2782 1278 003097E5 		ldr	r3, [r7, #0]
 2783 127c 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2784 1280 00108DE5 		str	r1, [sp, #0]
 2785 1284 EC009FE5 		ldr	r0, .L268+60
 2786 1288 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2787 128c 0430A0E1 		mov	r3, r4
 2788              	.L266:
 2789 1290 04C08DE5 		str	ip, [sp, #4]
 2790 1294 FEFFFFEB 		bl	LCDPrintString
 2791              	.LBB288:
 2792              	.LBB290:
 2793              		.loc 1 938 0
 2794 1298 0010E0E3 		mvn	r1, #0
 2795 129c EF2F11E5 		ldr	r2, [r1, #-4079]
 2796              	.LBE290:
 2797              	.LBE288:
 2798              		.loc 1 602 0
 2799 12a0 C4309FE5 		ldr	r3, .L268+48
 2800              	.LBB292:
 2801              	.LBB289:
 2802              		.loc 1 938 0
 2803 12a4 102082E3 		orr	r2, r2, #16
 2804              	.LBE289:
 2805              	.LBE292:
 2806              		.loc 1 602 0
 2807 12a8 0000A0E3 		mov	r0, #0
 2808 12ac 0000C3E5 		strb	r0, [r3, #0]
 2809              	.LBB293:
 2810              	.LBB291:
 2811              		.loc 1 938 0
 2812 12b0 EF2F01E5 		str	r2, [r1, #-4079]
 2813              	.LBE291:
 2814              	.LBE293:
 2815              	.LBB294:
 2816              	.LBB295:
 2817              		.loc 1 944 0
 2818 12b4 100080E2 		add	r0, r0, #16
 2819              	.LBB296:
 2820              	.LBB297:
 2821              		.loc 1 251 0
 2822 12b8 7C209FE5 		ldr	r2, .L268
 2823 12bc 060000EA 		b	.L256
 2824              	.LVL104:
 2825              	.L257:
 2826              	@ 251 "main.c" 1
 2827 12c0 0000A0E1 		nop
 2828              	@ 0 "" 2
 2829 12c4 013083E2 		add	r3, r3, #1
 2830 12c8 020053E1 		cmp	r3, r2
 2831 12cc FBFFFF1A 		bne	.L257
 2832              	.LBE297:
 2833              	.LBE296:
 2834              	.LBE295:
 2835              	.LBE294:
 2836              	.LBB299:
 2837              	.LBB300:
 2838              		.loc 1 938 0
 2839 12d0 EF3F11E5 		ldr	r3, [r1, #-4079]
 2840              	.LVL105:
 2841 12d4 103083E3 		orr	r3, r3, #16
 2842 12d8 EF3F01E5 		str	r3, [r1, #-4079]
 2843              	.L256:
 2844              	.LBE300:
 2845              	.LBE299:
 2846              	.LBB301:
 2847              	.LBB298:
 2848              		.loc 1 944 0
 2849 12dc EB0F01E5 		str	r0, [r1, #-4075]
 2850 12e0 0030A0E3 		mov	r3, #0
 2851              	.LVL106:
 2852 12e4 F5FFFFEA 		b	.L257
 2853              	.LVL107:
 2854              	.L250:
 2855              	.LBE298:
 2856              	.LBE301:
 2857              		.loc 1 614 0
 2858 12e8 58309FE5 		ldr	r3, .L268+12
 2859 12ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2860 12f0 000053E3 		cmp	r3, #0
 2861 12f4 44009FE5 		ldr	r0, .L268+4
 2862 12f8 0200000A 		beq	.L258
 2863              		.loc 1 615 0
 2864 12fc 000090E5 		ldr	r0, [r0, #0]
 2865 1300 FEFFFFEB 		bl	quickClear
 2866 1304 020000EA 		b	.L259
 2867              	.L258:
 2868              		.loc 1 617 0
 2869 1308 003090E5 		ldr	r3, [r0, #0]
 2870 130c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2871 1310 FEFFFFEB 		bl	LCDClear
 2872              	.L259:
 2873              		.loc 1 619 0
 2874 1314 24309FE5 		ldr	r3, .L268+4
 2875 1318 000093E5 		ldr	r0, [r3, #0]
 2876              	.L267:
 2877 131c FEFFFFEB 		bl	printMenu
 2878              	.L241:
 2879              	.LBB302:
 2880              	.LBB303:
 2881              		.loc 1 938 0
 2882 1320 0020E0E3 		mvn	r2, #0
 2883 1324 EF3F12E5 		ldr	r3, [r2, #-4079]
 2884 1328 103083E3 		orr	r3, r3, #16
 2885 132c EF3F02E5 		str	r3, [r2, #-4079]
 2886              	.LBE303:
 2887              	.LBE302:
 2888              		.loc 1 622 0
 2889 1330 08D08DE2 		add	sp, sp, #8
 2890 1334 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 2891 1338 1EFF2FE1 		bx	lr
 2892              	.L269:
 2893              		.align	2
 2894              	.L268:
 2895 133c 40420F00 		.word	1000000
 2896 1340 7C040000 		.word	current_display
 2897 1344 74000000 		.word	file_manager
 2898 1348 01000000 		.word	file_is_open
 2899 134c 14000000 		.word	current_song
 2900 1350 00000000 		.word	white
 2901 1354 00000000 		.word	black
 2902 1358 00000000 		.word	NotFound
 2903 135c 80969800 		.word	10000000
 2904 1360 78020000 		.word	settings_menu
 2905 1364 00000000 		.word	volume_setting
 2906 1368 00000000 		.word	.LC0
 2907 136c 08000000 		.word	button_pressed
 2908 1370 00000000 		.word	radio_enable
 2909 1374 07000000 		.word	.LC2
 2910 1378 03000000 		.word	.LC1
 2911              	.LFE16:
 2913              		.section	.rodata.str1.1
 2914              	.LC3:
 2915 000a 53442049 		.ascii	"SD Init Error\012\000"
 2915      6E697420 
 2915      4572726F 
 2915      720A00
 2916              	.LC4:
 2917 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 2917      70656E52 
 2917      6F6F7420 
 2917      4572726F 
 2917      720A00
 2918              		.text
 2919              		.align	2
 2920              		.global	bootUp
 2922              	bootUp:
 2923              	.LFB4:
 2924              		.loc 1 258 0
 2925              		@ Function supports interworking.
 2926              		@ args = 0, pretend = 0, frame = 0
 2927              		@ frame_needed = 0, uses_anonymous_args = 0
 2928 137c 04E02DE5 		str	lr, [sp, #-4]!
 2929              	.LCFI34:
 2930              		.loc 1 259 0
 2931 1380 90019FE5 		ldr	r0, .L276
 2932 1384 FEFFFFEB 		bl	rprintf_devopen
 2933              	.LBB304:
 2934              	.LBB305:
 2935              		.loc 1 251 0
 2936 1388 8C219FE5 		ldr	r2, .L276+4
 2937              	.LBE305:
 2938              	.LBE304:
 2939              		.loc 1 259 0
 2940 138c 0030A0E3 		mov	r3, #0
 2941              	.LVL108:
 2942              	.L271:
 2943              	.LBB307:
 2944              	.LBB306:
 2945              		.loc 1 251 0
 2946              	@ 251 "main.c" 1
 2947 1390 0000A0E1 		nop
 2948              	@ 0 "" 2
 2949 1394 013083E2 		add	r3, r3, #1
 2950 1398 020053E1 		cmp	r3, r2
 2951 139c FBFFFF1A 		bne	.L271
 2952              	.LBE306:
 2953              	.LBE307:
 2954              		.loc 1 263 0
 2955 13a0 FEFFFFEB 		bl	sd_raw_init
 2956              	.LVL109:
 2957 13a4 000050E3 		cmp	r0, #0
 2958              		.loc 1 265 0
 2959 13a8 70019F05 		ldreq	r0, .L276+8
 2960 13ac FEFFFF0B 		bleq	rprintf
 2961              	.L272:
 2962              		.loc 1 267 0
 2963 13b0 FEFFFFEB 		bl	openroot
 2964 13b4 000050E3 		cmp	r0, #0
 2965              		.loc 1 269 0
 2966 13b8 64019F15 		ldrne	r0, .L276+12
 2967 13bc FEFFFF1B 		blne	rprintf
 2968              	.L273:
 2969              		.loc 1 274 0
 2970 13c0 60219FE5 		ldr	r2, .L276+16
 2971 13c4 083092E5 		ldr	r3, [r2, #8]
 2972 13c8 013683E3 		orr	r3, r3, #1048576
 2973 13cc 083082E5 		str	r3, [r2, #8]
 2974              		.loc 1 275 0
 2975 13d0 083092E5 		ldr	r3, [r2, #8]
 2976 13d4 0236C3E3 		bic	r3, r3, #2097152
 2977 13d8 083082E5 		str	r3, [r2, #8]
 2978              		.loc 1 276 0
 2979 13dc 48119FE5 		ldr	r1, .L276+20
 2980 13e0 043091E5 		ldr	r3, [r1, #4]
 2981 13e4 033B83E3 		orr	r3, r3, #3072
 2982 13e8 043081E5 		str	r3, [r1, #4]
 2983              		.loc 1 277 0
 2984 13ec 183092E5 		ldr	r3, [r2, #24]
 2985 13f0 013483E3 		orr	r3, r3, #16777216
 2986 13f4 033883E3 		orr	r3, r3, #196608
 2987 13f8 183082E5 		str	r3, [r2, #24]
 2988              		.loc 1 280 0
 2989 13fc 183092E5 		ldr	r3, [r2, #24]
 2990 1400 023483E3 		orr	r3, r3, #33554432
 2991 1404 183082E5 		str	r3, [r2, #24]
 2992              		.loc 1 281 0
 2993 1408 183092E5 		ldr	r3, [r2, #24]
 2994 140c 013283E3 		orr	r3, r3, #268435456
 2995 1410 183082E5 		str	r3, [r2, #24]
 2996              		.loc 1 284 0
 2997 1414 083092E5 		ldr	r3, [r2, #8]
 2998 1418 803083E3 		orr	r3, r3, #128
 2999 141c 083082E5 		str	r3, [r2, #8]
 3000              		.loc 1 287 0
 3001 1420 083092E5 		ldr	r3, [r2, #8]
 3002 1424 033B83E3 		orr	r3, r3, #3072
 3003 1428 083082E5 		str	r3, [r2, #8]
 3004              		.loc 1 288 0
 3005 142c 003091E5 		ldr	r3, [r1, #0]
 3006 1430 CF3483E3 		orr	r3, r3, #-822083584
 3007 1434 003081E5 		str	r3, [r1, #0]
 3008              		.loc 1 289 0
 3009 1438 033BA0E3 		mov	r3, #3072
 3010 143c 0C3082E5 		str	r3, [r2, #12]
 3011              		.loc 1 292 0
 3012 1440 083092E5 		ldr	r3, [r2, #8]
 3013 1444 033783E3 		orr	r3, r3, #786432
 3014 1448 083082E5 		str	r3, [r2, #8]
 3015              	.LBB308:
 3016              	.LBB309:
 3017              		.loc 1 961 0
 3018 144c 083092E5 		ldr	r3, [r2, #8]
 3019 1450 073283E3 		orr	r3, r3, #1879048192
 3020 1454 083082E5 		str	r3, [r2, #8]
 3021              		.loc 1 962 0
 3022 1458 0232A0E3 		mov	r3, #536870912
 3023 145c 043082E5 		str	r3, [r2, #4]
 3024              		.loc 1 963 0
 3025 1460 033083E0 		add	r3, r3, r3
 3026 1464 043082E5 		str	r3, [r2, #4]
 3027              		.loc 1 964 0
 3028 1468 0D3283E2 		add	r3, r3, #-805306368
 3029 146c 043082E5 		str	r3, [r2, #4]
 3030              	.LBE309:
 3031              	.LBE308:
 3032              		.loc 1 297 0
 3033 1470 183092E5 		ldr	r3, [r2, #24]
 3034 1474 0E36C3E3 		bic	r3, r3, #14680064
 3035 1478 183082E5 		str	r3, [r2, #24]
 3036              		.loc 1 299 0
 3037 147c 083092E5 		ldr	r3, [r2, #8]
 3038 1480 0235C3E3 		bic	r3, r3, #8388608
 3039 1484 083082E5 		str	r3, [r2, #8]
 3040              	.LBB310:
 3041              	.LBB311:
 3042              		.loc 1 908 0
 3043 1488 A0309FE5 		ldr	r3, .L276+24
 3044 148c 0120A0E3 		mov	r2, #1
 3045              		.loc 1 909 0
 3046 1490 0010E0E3 		mvn	r1, #0
 3047              		.loc 1 908 0
 3048 1494 002183E5 		str	r2, [r3, #256]
 3049              		.loc 1 909 0
 3050 1498 3030E0E3 		mvn	r3, #48
 3051 149c F33F01E5 		str	r3, [r1, #-4083]
 3052              	.LBB312:
 3053              	.LBB313:
 3054              		.loc 1 951 0
 3055 14a0 413083E2 		add	r3, r3, #65
 3056 14a4 EF3F01E5 		str	r3, [r1, #-4079]
 3057              	.LBE313:
 3058              	.LBE312:
 3059              		.loc 1 911 0
 3060 14a8 153083E2 		add	r3, r3, #21
 3061 14ac FF3D01E5 		str	r3, [r1, #-3583]
 3062              		.loc 1 912 0
 3063 14b0 7C309FE5 		ldr	r3, .L276+28
 3064 14b4 FF3E01E5 		str	r3, [r1, #-3839]
 3065              		.loc 1 913 0
 3066 14b8 2430A0E3 		mov	r3, #36
 3067 14bc FB3D01E5 		str	r3, [r1, #-3579]
 3068              		.loc 1 914 0
 3069 14c0 70309FE5 		ldr	r3, .L276+32
 3070              	.LBE311:
 3071              	.LBE310:
 3072              	.LBB315:
 3073              	.LBB316:
 3074              		.loc 1 885 0
 3075 14c4 70009FE5 		ldr	r0, .L276+36
 3076              	.LBE316:
 3077              	.LBE315:
 3078              	.LBB318:
 3079              	.LBB314:
 3080              		.loc 1 914 0
 3081 14c8 FB3E01E5 		str	r3, [r1, #-3835]
 3082              	.LBE314:
 3083              	.LBE318:
 3084              	.LBB319:
 3085              	.LBB317:
 3086              		.loc 1 885 0
 3087 14cc 4B3FA0E3 		mov	r3, #300
 3088 14d0 0C3080E5 		str	r3, [r0, #12]
 3089              		.loc 1 886 0
 3090 14d4 043090E5 		ldr	r3, [r0, #4]
 3091 14d8 023083E1 		orr	r3, r3, r2
 3092 14dc 043080E5 		str	r3, [r0, #4]
 3093              		.loc 1 887 0
 3094 14e0 0030A0E3 		mov	r3, #0
 3095 14e4 703080E5 		str	r3, [r0, #112]
 3096              		.loc 1 888 0
 3097 14e8 033083E2 		add	r3, r3, #3
 3098 14ec 143080E5 		str	r3, [r0, #20]
 3099              		.loc 1 889 0
 3100 14f0 FA3FA0E3 		mov	r3, #1000
 3101 14f4 183080E5 		str	r3, [r0, #24]
 3102              	.LBE317:
 3103              	.LBE319:
 3104              		.loc 1 303 0
 3105 14f8 FEFFFFEB 		bl	initializeMP3Player
 3106              	.LBB320:
 3107              	.LBB321:
 3108              		.loc 1 828 0
 3109 14fc 3C209FE5 		ldr	r2, .L276+40
 3110 1500 4030A0E3 		mov	r3, #64
 3111 1504 0C3082E5 		str	r3, [r2, #12]
 3112              		.loc 1 829 0
 3113 1508 2030A0E3 		mov	r3, #32
 3114 150c 003082E5 		str	r3, [r2, #0]
 3115              	.LBE321:
 3116              	.LBE320:
 3117              		.loc 1 306 0
 3118 1510 04E09DE4 		ldr	lr, [sp], #4
 3119 1514 1EFF2FE1 		bx	lr
 3120              	.L277:
 3121              		.align	2
 3122              	.L276:
 3123 1518 00000000 		.word	putc_serial0
 3124 151c A0860100 		.word	100000
 3125 1520 0A000000 		.word	.LC3
 3126 1524 19000000 		.word	.LC4
 3127 1528 008002E0 		.word	-536707072
 3128 152c 00C002E0 		.word	-536690688
 3129 1530 00C01FE0 		.word	-534790144
 3130 1534 00000000 		.word	timer1ISR
 3131 1538 00000000 		.word	timer0ISR
 3132 153c 004000E0 		.word	-536854528
 3133 1540 000002E0 		.word	-536739840
 3134              	.LFE4:
 3136              		.global	__divsi3
 3137              		.global	__modsi3
 3138              		.section	.rodata.str1.1
 3139              	.LC5:
 3140 002c 474F2047 		.ascii	"GO GO MP3!\000"
 3140      4F204D50 
 3140      332100
 3141              		.text
 3142              		.align	2
 3143              		.global	main
 3145              	main:
 3146              	.LFB2:
 3147              		.loc 1 94 0
 3148              		@ Function supports interworking.
 3149              		@ args = 0, pretend = 0, frame = 0
 3150              		@ frame_needed = 1, uses_anonymous_args = 0
 3151 1544 0DC0A0E1 		mov	ip, sp
 3152              	.LCFI35:
 3153 1548 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 3154              	.LCFI36:
 3155 154c 04B04CE2 		sub	fp, ip, #4
 3156              	.LCFI37:
 3157 1550 08D04DE2 		sub	sp, sp, #8
 3158              	.LCFI38:
 3159              		.loc 1 104 0
 3160 1554 FEFFFFEB 		bl	bootUp
 3161              		.loc 1 105 0
 3162 1558 FEFFFFEB 		bl	initializeMP3Player
 3163              		.loc 1 106 0
 3164 155c FEFFFFEB 		bl	splashScreen
 3165              		.loc 1 107 0
 3166 1560 08359FE5 		ldr	r3, .L314
 3167 1564 000093E5 		ldr	r0, [r3, #0]
 3168 1568 FEFFFFEB 		bl	initializeRadio
 3169              	.LBB322:
 3170              	.LBB323:
 3171              		.loc 1 835 0
 3172 156c 00259FE5 		ldr	r2, .L314+4
 3173 1570 003092E5 		ldr	r3, [r2, #0]
 3174 1574 153C83E3 		orr	r3, r3, #5376
 3175 1578 003082E5 		str	r3, [r2, #0]
 3176 157c 0050A0E3 		mov	r5, #0
 3177              	.LVL110:
 3178              	.L279:
 3179              	.LBE323:
 3180              	.LBE322:
 3181              		.loc 1 114 0
 3182 1580 0000A0E3 		mov	r0, #0
 3183 1584 FEFFFFEB 		bl	rootDirectory_files_stream
 3184 1588 006050E2 		subs	r6, r0, #0
 3185              		.loc 1 113 0
 3186 158c 015085E2 		add	r5, r5, #1
 3187              		.loc 1 114 0
 3188 1590 FAFFFF1A 		bne	.L279
 3189              		.loc 1 115 0
 3190 1594 063085E2 		add	r3, r5, #6
 3191 1598 0330C3E3 		bic	r3, r3, #3
 3192 159c 0DD063E0 		rsb	sp, r3, sp
 3193 15a0 08708DE2 		add	r7, sp, #8
 3194              		.loc 1 116 0
 3195 15a4 0700A0E1 		mov	r0, r7
 3196 15a8 011085E2 		add	r1, r5, #1
 3197 15ac FEFFFFEB 		bl	rootDirectory_files
 3198              		.loc 1 117 0
 3199 15b0 8032A0E1 		mov	r3, r0, asl #5
 3200 15b4 043083E2 		add	r3, r3, #4
 3201 15b8 0DD063E0 		rsb	sp, r3, sp
 3202              		.loc 1 116 0
 3203 15bc B4349FE5 		ldr	r3, .L314+8
 3204 15c0 0040A0E1 		mov	r4, r0
 3205              	.LBB324:
 3206              		.loc 1 121 0
 3207 15c4 0600A0E1 		mov	r0, r6
 3208              	.LVL111:
 3209              	.LBE324:
 3210              		.loc 1 116 0
 3211 15c8 004083E5 		str	r4, [r3, #0]
 3212              		.loc 1 117 0
 3213 15cc 08608DE2 		add	r6, sp, #8
 3214              	.LBB326:
 3215              		.loc 1 121 0
 3216 15d0 00E0A0E1 		mov	lr, r0
 3217              	.LVL112:
 3218 15d4 0080A0E1 		mov	r8, r0
 3219              	.LVL113:
 3220 15d8 100000EA 		b	.L280
 3221              	.LVL114:
 3222              	.L286:
 3223 15dc 0030A0E3 		mov	r3, #0
 3224              	.LBB325:
 3225              		.loc 1 131 0
 3226 15e0 8EC2A0E1 		mov	ip, lr, asl #5
 3227              	.L285:
 3228              		.loc 1 123 0
 3229 15e4 050050E1 		cmp	r0, r5
 3230              		.loc 1 131 0
 3231 15e8 03208CE0 		add	r2, ip, r3
 3232 15ec 0280C687 		strhib	r8, [r6, r2]
 3233              		.loc 1 123 0
 3234 15f0 0600008A 		bhi	.L284
 3235              	.LVL115:
 3236              		.loc 1 124 0
 3237 15f4 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 3238 15f8 2C0051E3 		cmp	r1, #44
 3239              		.loc 1 125 0
 3240 15fc 0230A001 		moveq	r3, r2
 3241              		.loc 1 128 0
 3242 1600 0210C617 		strneb	r1, [r6, r2]
 3243              		.loc 1 125 0
 3244 1604 0380C607 		streqb	r8, [r6, r3]
 3245              		.loc 1 129 0
 3246 1608 010080E2 		add	r0, r0, #1
 3247              		.loc 1 125 0
 3248 160c 1F30A003 		moveq	r3, #31
 3249              	.LVL116:
 3250              	.L284:
 3251              		.loc 1 122 0
 3252 1610 013083E2 		add	r3, r3, #1
 3253 1614 200053E3 		cmp	r3, #32
 3254 1618 F1FFFF1A 		bne	.L285
 3255              	.LBE325:
 3256              		.loc 1 121 0
 3257 161c 01E08EE2 		add	lr, lr, #1
 3258              	.LVL117:
 3259              	.L280:
 3260 1620 04005EE1 		cmp	lr, r4
 3261 1624 ECFFFFBA 		blt	.L286
 3262              	.LBE326:
 3263              		.loc 1 137 0
 3264 1628 0400A0E1 		mov	r0, r4
 3265              	.LVL118:
 3266 162c 0F10A0E3 		mov	r1, #15
 3267 1630 FEFFFFEB 		bl	__divsi3
 3268              	.LVL119:
 3269              		.loc 1 138 0
 3270 1634 3C349FE5 		ldr	r3, .L314+8
 3271              		.loc 1 137 0
 3272 1638 FF4000E2 		and	r4, r0, #255
 3273 163c 38549FE5 		ldr	r5, .L314+12
 3274              	.LVL120:
 3275              		.loc 1 138 0
 3276 1640 000093E5 		ldr	r0, [r3, #0]
 3277              		.loc 1 137 0
 3278 1644 013044E2 		sub	r3, r4, #1
 3279 1648 0530C5E5 		strb	r3, [r5, #5]
 3280              		.loc 1 138 0
 3281 164c 0F10A0E3 		mov	r1, #15
 3282 1650 FEFFFFEB 		bl	__modsi3
 3283              		.loc 1 141 0
 3284 1654 24349FE5 		ldr	r3, .L314+16
 3285 1658 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3286              		.loc 1 142 0
 3287 165c 20349FE5 		ldr	r3, .L314+20
 3288              		.loc 1 138 0
 3289 1660 000050E3 		cmp	r0, #0
 3290 1664 0540C515 		strneb	r4, [r5, #5]
 3291              		.loc 1 142 0
 3292 1668 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3293              		.loc 1 140 0
 3294 166c 08449FE5 		ldr	r4, .L314+12
 3295 1670 0050A0E3 		mov	r5, #0
 3296              		.loc 1 142 0
 3297 1674 0430C4E5 		strb	r3, [r4, #4]
 3298              		.loc 1 145 0
 3299 1678 0130A0E3 		mov	r3, #1
 3300              		.loc 1 141 0
 3301 167c 0320C4E5 		strb	r2, [r4, #3]
 3302              		.loc 1 147 0
 3303 1680 0400A0E1 		mov	r0, r4
 3304 1684 0610A0E1 		mov	r1, r6
 3305              		.loc 1 145 0
 3306 1688 0030C4E5 		strb	r3, [r4, #0]
 3307              		.loc 1 140 0
 3308 168c 0250C4E5 		strb	r5, [r4, #2]
 3309              		.loc 1 144 0
 3310 1690 0650C4E5 		strb	r5, [r4, #6]
 3311              		.loc 1 146 0
 3312 1694 085084E5 		str	r5, [r4, #8]
 3313              		.loc 1 147 0
 3314 1698 FEFFFFEB 		bl	getNewFiles
 3315              	.LBB327:
 3316              		.loc 1 149 0
 3317 169c E4239FE5 		ldr	r2, .L314+24
 3318              	.L288:
 3319 16a0 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 3320              	.LVL121:
 3321              		.loc 1 148 0
 3322 16a4 015085E2 		add	r5, r5, #1
 3323 16a8 160055E3 		cmp	r5, #22
 3324              		.loc 1 149 0
 3325 16ac EC31C4E5 		strb	r3, [r4, #492]
 3326              		.loc 1 148 0
 3327 16b0 014084E2 		add	r4, r4, #1
 3328 16b4 F9FFFF1A 		bne	.L288
 3329              	.LBE327:
 3330              		.loc 1 153 0
 3331 16b8 CC039FE5 		ldr	r0, .L314+28
 3332 16bc FEFFFFEB 		bl	fillSettings
 3333              	.LBB328:
 3334              	.LBB330:
 3335              		.loc 1 841 0
 3336 16c0 AC139FE5 		ldr	r1, .L314+4
 3337 16c4 003091E5 		ldr	r3, [r1, #0]
 3338              	.LBE330:
 3339              	.LBE328:
 3340              		.loc 1 156 0
 3341 16c8 AC239FE5 		ldr	r2, .L314+12
 3342 16cc BC439FE5 		ldr	r4, .L314+32
 3343              	.LBB332:
 3344              	.LBB329:
 3345              		.loc 1 841 0
 3346 16d0 FF3DC3E3 		bic	r3, r3, #16320
 3347 16d4 3030C3E3 		bic	r3, r3, #48
 3348              	.LBE329:
 3349              	.LBE332:
 3350              		.loc 1 158 0
 3351 16d8 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 3352              		.loc 1 156 0
 3353 16dc 002084E5 		str	r2, [r4, #0]
 3354              	.LBB333:
 3355              	.LBB331:
 3356              		.loc 1 841 0
 3357 16e0 003081E5 		str	r3, [r1, #0]
 3358              	.LBE331:
 3359              	.LBE333:
 3360              		.loc 1 158 0
 3361 16e4 FEFFFFEB 		bl	LCDClear
 3362              		.loc 1 159 0
 3363 16e8 000094E5 		ldr	r0, [r4, #0]
 3364 16ec FEFFFFEB 		bl	printMenu
 3365              		.loc 1 162 0
 3366 16f0 003094E5 		ldr	r3, [r4, #0]
 3367 16f4 0010A0E3 		mov	r1, #0
 3368 16f8 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 3369 16fc 00108DE5 		str	r1, [sp, #0]
 3370 1700 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3371 1704 88039FE5 		ldr	r0, .L314+36
 3372 1708 0230A0E3 		mov	r3, #2
 3373 170c 04C08DE5 		str	ip, [sp, #4]
 3374 1710 FEFFFFEB 		bl	LCDPrintString
 3375              	.LBB334:
 3376              	.LBB335:
 3377              		.loc 1 863 0
 3378 1714 7C739FE5 		ldr	r7, .L314+40
 3379              	.LBE335:
 3380              	.LBE334:
 3381              		.loc 1 167 0
 3382 1718 60939FE5 		ldr	r9, .L314+16
 3383              		.loc 1 177 0
 3384 171c 78839FE5 		ldr	r8, .L314+44
 3385              	.LVL122:
 3386              	.LBB337:
 3387              	.LBB338:
 3388              	.LBB339:
 3389              	.LBB340:
 3390              		.loc 1 251 0
 3391 1720 78A39FE5 		ldr	sl, .L314+48
 3392              	.L306:
 3393              	.LBE340:
 3394              	.LBE339:
 3395              	.LBE338:
 3396              	.LBE337:
 3397              	.LBB344:
 3398              	.LBB336:
 3399              		.loc 1 863 0
 3400 1724 003097E5 		ldr	r3, [r7, #0]
 3401              	.LBE336:
 3402              	.LBE344:
 3403              		.loc 1 166 0
 3404 1728 020513E3 		tst	r3, #8388608
 3405 172c 2100000A 		beq	.L289
 3406              		.loc 1 167 0
 3407 1730 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 3408 1734 FEFFFFEB 		bl	LCDClear
 3409              		.loc 1 168 0
 3410 1738 0430A0E3 		mov	r3, #4
 3411 173c 00308DE5 		str	r3, [sp, #0]
 3412 1740 003094E5 		ldr	r3, [r4, #0]
 3413 1744 38139FE5 		ldr	r1, .L314+20
 3414 1748 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3415 174c 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3416 1750 0730A0E3 		mov	r3, #7
 3417 1754 48039FE5 		ldr	r0, .L314+52
 3418 1758 0010A0E3 		mov	r1, #0
 3419 175c 04C08DE5 		str	ip, [sp, #4]
 3420 1760 FEFFFFEB 		bl	LCDPrintString
 3421 1764 0030A0E3 		mov	r3, #0
 3422              	.LVL123:
 3423              	.L290:
 3424              	.LBB345:
 3425              	.LBB346:
 3426              		.loc 1 251 0
 3427              	@ 251 "main.c" 1
 3428 1768 0000A0E1 		nop
 3429              	@ 0 "" 2
 3430 176c 34239FE5 		ldr	r2, .L314+56
 3431 1770 013083E2 		add	r3, r3, #1
 3432 1774 020053E1 		cmp	r3, r2
 3433 1778 FAFFFF1A 		bne	.L290
 3434              	.LBE346:
 3435              	.LBE345:
 3436              	.LBB347:
 3437              	.LBB348:
 3438              		.loc 1 920 0
 3439 177c 3020A0E3 		mov	r2, #48
 3440 1780 0030E0E3 		mvn	r3, #0
 3441              	.LVL124:
 3442 1784 EB2F03E5 		str	r2, [r3, #-4075]
 3443              	.LBE348:
 3444              	.LBE347:
 3445              		.loc 1 171 0
 3446 1788 FEFFFFEB 		bl	main_msc
 3447              	.LBB349:
 3448              	.LBB350:
 3449              		.loc 1 648 0
 3450 178c 0E22A0E3 		mov	r2, #-536870912
 3451 1790 003092E5 		ldr	r3, [r2, #0]
 3452 1794 033083E3 		orr	r3, r3, #3
 3453 1798 003082E5 		str	r3, [r2, #0]
 3454              		.loc 1 649 0
 3455 179c AA10A0E3 		mov	r1, #170
 3456              		.loc 1 650 0
 3457 17a0 5530A0E3 		mov	r3, #85
 3458              		.loc 1 649 0
 3459 17a4 081082E5 		str	r1, [r2, #8]
 3460              		.loc 1 650 0
 3461 17a8 083082E5 		str	r3, [r2, #8]
 3462              		.loc 1 652 0
 3463 17ac 0030A0E3 		mov	r3, #0
 3464              		.loc 1 651 0
 3465 17b0 081082E5 		str	r1, [r2, #8]
 3466              		.loc 1 652 0
 3467 17b4 083082E5 		str	r3, [r2, #8]
 3468              	.L289:
 3469              	.LBE350:
 3470              	.LBE349:
 3471              		.loc 1 177 0
 3472 17b8 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3473 17bc 000053E3 		cmp	r3, #0
 3474 17c0 4300001A 		bne	.L291
 3475 17c4 E0329FE5 		ldr	r3, .L314+60
 3476 17c8 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 3477              	.LVL125:
 3478 17cc 000055E3 		cmp	r5, #0
 3479 17d0 3F00001A 		bne	.L291
 3480              		.loc 1 179 0
 3481 17d4 D4329FE5 		ldr	r3, .L314+64
 3482 17d8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3483 17dc 000053E3 		cmp	r3, #0
 3484 17e0 3B00000A 		beq	.L291
 3485              	.LBB351:
 3486              	.LBB352:
 3487              		.loc 1 932 0
 3488 17e4 2020A0E3 		mov	r2, #32
 3489 17e8 0030E0E3 		mvn	r3, #0
 3490 17ec EB2F03E5 		str	r2, [r3, #-4075]
 3491              	.LBE352:
 3492              	.LBE351:
 3493              		.loc 1 181 0
 3494 17f0 BC029FE5 		ldr	r0, .L314+68
 3495 17f4 FEFFFFEB 		bl	closeSong
 3496              		.loc 1 185 0
 3497 17f8 7C129FE5 		ldr	r1, .L314+12
 3498              		.loc 1 182 0
 3499 17fc B4329FE5 		ldr	r3, .L314+72
 3500              		.loc 1 185 0
 3501 1800 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3502              		.loc 1 182 0
 3503 1804 0050C3E5 		strb	r5, [r3, #0]
 3504              		.loc 1 185 0
 3505 1808 0E0052E3 		cmp	r2, #14
 3506              		.loc 1 183 0
 3507 180c 0232A0E3 		mov	r3, #536870912
 3508 1810 043087E5 		str	r3, [r7, #4]
 3509              		.loc 1 186 0
 3510 1814 01208292 		addls	r2, r2, #1
 3511              		.loc 1 187 0
 3512 1818 08309195 		ldrls	r3, [r1, #8]
 3513              		.loc 1 186 0
 3514 181c 0020C195 		strlsb	r2, [r1, #0]
 3515              		.loc 1 190 0
 3516 1820 54C29FE5 		ldr	ip, .L314+12
 3517              		.loc 1 187 0
 3518 1824 01308392 		addls	r3, r3, #1
 3519 1828 08308195 		strls	r3, [r1, #8]
 3520              		.loc 1 190 0
 3521 182c 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 3522 1830 0F0053E3 		cmp	r3, #15
 3523 1834 0C00001A 		bne	.L293
 3524 1838 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 3525 183c 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 3526 1840 020053E1 		cmp	r3, r2
 3527 1844 0800009A 		bls	.L293
 3528              		.loc 1 193 0
 3529 1848 013082E2 		add	r3, r2, #1
 3530              		.loc 1 191 0
 3531 184c 0120A0E3 		mov	r2, #1
 3532 1850 0020CCE5 		strb	r2, [ip, #0]
 3533              		.loc 1 192 0
 3534 1854 0020A0E3 		mov	r2, #0
 3535              		.loc 1 194 0
 3536 1858 0C00A0E1 		mov	r0, ip
 3537 185c 0610A0E1 		mov	r1, r6
 3538              		.loc 1 192 0
 3539 1860 08208CE5 		str	r2, [ip, #8]
 3540              		.loc 1 193 0
 3541 1864 0630CCE5 		strb	r3, [ip, #6]
 3542              		.loc 1 194 0
 3543 1868 FEFFFFEB 		bl	getNewFiles
 3544              	.L293:
 3545              		.loc 1 197 0
 3546 186c 08529FE5 		ldr	r5, .L314+12
 3547 1870 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 3548 1874 833285E0 		add	r3, r5, r3, asl #5
 3549 1878 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3550 187c 000053E3 		cmp	r3, #0
 3551 1880 1300000A 		beq	.L291
 3552              		.loc 1 198 0
 3553 1884 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 3554 1888 FEFFFFEB 		bl	LCDClear
 3555              		.loc 1 199 0
 3556 188c 0500A0E1 		mov	r0, r5
 3557 1890 FEFFFFEB 		bl	printMenu
 3558              		.loc 1 200 0
 3559 1894 0510A0E1 		mov	r1, r5
 3560 1898 14029FE5 		ldr	r0, .L314+68
 3561 189c FEFFFFEB 		bl	loadSongInfo
 3562 18a0 10329FE5 		ldr	r3, .L314+72
 3563 18a4 0000C3E5 		strb	r0, [r3, #0]
 3564              		.loc 1 201 0
 3565 18a8 FEFFFFEB 		bl	vs1002Config
 3566              		.loc 1 202 0
 3567 18ac 0000A0E3 		mov	r0, #0
 3568 18b0 021BA0E3 		mov	r1, #2048
 3569 18b4 FEFFFFEB 		bl	vs1002SCIWrite
 3570              		.loc 1 203 0
 3571 18b8 FEFFFFEB 		bl	vs1002Finish
 3572              		.loc 1 204 0
 3573 18bc 0232A0E3 		mov	r3, #536870912
 3574 18c0 0C3087E5 		str	r3, [r7, #12]
 3575              	.LBB353:
 3576              	.LBB354:
 3577              		.loc 1 926 0
 3578 18c4 0020E0E3 		mvn	r2, #0
 3579 18c8 EF3F12E5 		ldr	r3, [r2, #-4079]
 3580 18cc 203083E3 		orr	r3, r3, #32
 3581 18d0 EF3F02E5 		str	r3, [r2, #-4079]
 3582              	.LVL126:
 3583              	.L291:
 3584              	.LBE354:
 3585              	.LBE353:
 3586              		.loc 1 210 0
 3587 18d4 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3588 18d8 020053E3 		cmp	r3, #2
 3589 18dc 0300001A 		bne	.L294
 3590 18e0 000094E5 		ldr	r0, [r4, #0]
 3591 18e4 0610A0E1 		mov	r1, r6
 3592 18e8 FEFFFFEB 		bl	handleUpButton
 3593 18ec 580000EA 		b	.L295
 3594              	.L294:
 3595              		.loc 1 211 0
 3596 18f0 010053E3 		cmp	r3, #1
 3597 18f4 0300001A 		bne	.L296
 3598 18f8 000094E5 		ldr	r0, [r4, #0]
 3599 18fc 0610A0E1 		mov	r1, r6
 3600 1900 FEFFFFEB 		bl	handleDownButton
 3601 1904 520000EA 		b	.L295
 3602              	.L296:
 3603              		.loc 1 212 0
 3604 1908 030053E3 		cmp	r3, #3
 3605 190c 0100001A 		bne	.L297
 3606 1910 FEFFFFEB 		bl	handleMiddleButton
 3607 1914 4E0000EA 		b	.L295
 3608              	.L297:
 3609              		.loc 1 214 0
 3610 1918 8C319FE5 		ldr	r3, .L314+60
 3611 191c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3612 1920 000053E3 		cmp	r3, #0
 3613 1924 4A00000A 		beq	.L295
 3614              	.LBB355:
 3615              	.LBB343:
 3616              		.loc 1 944 0
 3617 1928 0030E0E3 		mvn	r3, #0
 3618 192c 1020A0E3 		mov	r2, #16
 3619 1930 EB2F03E5 		str	r2, [r3, #-4075]
 3620 1934 013083E2 		add	r3, r3, #1
 3621              	.LVL127:
 3622              	.L298:
 3623              	.LBB342:
 3624              	.LBB341:
 3625              		.loc 1 251 0
 3626              	@ 251 "main.c" 1
 3627 1938 0000A0E1 		nop
 3628              	@ 0 "" 2
 3629 193c 013083E2 		add	r3, r3, #1
 3630 1940 0A0053E1 		cmp	r3, sl
 3631 1944 FBFFFF1A 		bne	.L298
 3632              	.LBE341:
 3633              	.LBE342:
 3634              	.LBE343:
 3635              	.LBE355:
 3636              		.loc 1 216 0
 3637 1948 FEFFFFEB 		bl	MMA_get_y
 3638              	.LVL128:
 3639 194c AF0F50E3 		cmp	r0, #700
 3640 1950 190000DA 		ble	.L299
 3641 1954 60319FE5 		ldr	r3, .L314+76
 3642 1958 003093E5 		ldr	r3, [r3, #0]
 3643 195c AF0F53E3 		cmp	r3, #700
 3644 1960 150000DA 		ble	.L299
 3645              		.loc 1 217 0
 3646 1964 4C319FE5 		ldr	r3, .L314+72
 3647 1968 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3648 196c 000053E3 		cmp	r3, #0
 3649 1970 0200000A 		beq	.L300
 3650 1974 000094E5 		ldr	r0, [r4, #0]
 3651 1978 FEFFFFEB 		bl	quickClear
 3652 197c 020000EA 		b	.L301
 3653              	.L300:
 3654              		.loc 1 218 0
 3655 1980 003094E5 		ldr	r3, [r4, #0]
 3656 1984 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3657 1988 FEFFFFEB 		bl	LCDClear
 3658              	.L301:
 3659              		.loc 1 222 0
 3660 198c 24319FE5 		ldr	r3, .L314+72
 3661 1990 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3662              		.loc 1 219 0
 3663 1994 F0209FE5 		ldr	r2, .L314+28
 3664              		.loc 1 222 0
 3665 1998 000053E3 		cmp	r3, #0
 3666              		.loc 1 220 0
 3667 199c 0130A0E3 		mov	r3, #1
 3668 19a0 0230C2E5 		strb	r3, [r2, #2]
 3669              		.loc 1 221 0
 3670 19a4 0232A0E3 		mov	r3, #536870912
 3671 19a8 043087E5 		str	r3, [r7, #4]
 3672              		.loc 1 219 0
 3673 19ac 002084E5 		str	r2, [r4, #0]
 3674              		.loc 1 222 0
 3675 19b0 0F328312 		addne	r3, r3, #-268435456
 3676              		.loc 1 223 0
 3677 19b4 0131A003 		moveq	r3, #1073741824
 3678 19b8 1E0000EA 		b	.L313
 3679              	.L299:
 3680              		.loc 1 225 0
 3681 19bc FEFFFFEB 		bl	MMA_get_y
 3682 19c0 F8209FE5 		ldr	r2, .L314+80
 3683 19c4 020050E1 		cmp	r0, r2
 3684 19c8 1B0000CA 		bgt	.L303
 3685 19cc E8309FE5 		ldr	r3, .L314+76
 3686 19d0 003093E5 		ldr	r3, [r3, #0]
 3687 19d4 020053E1 		cmp	r3, r2
 3688 19d8 170000CA 		bgt	.L303
 3689              		.loc 1 226 0
 3690 19dc D4309FE5 		ldr	r3, .L314+72
 3691 19e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3692 19e4 000053E3 		cmp	r3, #0
 3693 19e8 0200000A 		beq	.L304
 3694 19ec 000094E5 		ldr	r0, [r4, #0]
 3695 19f0 FEFFFFEB 		bl	quickClear
 3696 19f4 020000EA 		b	.L305
 3697              	.L304:
 3698              		.loc 1 227 0
 3699 19f8 003094E5 		ldr	r3, [r4, #0]
 3700 19fc 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3701 1a00 FEFFFFEB 		bl	LCDClear
 3702              	.L305:
 3703              		.loc 1 232 0
 3704 1a04 AC309FE5 		ldr	r3, .L314+72
 3705 1a08 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3706              		.loc 1 228 0
 3707 1a0c 68209FE5 		ldr	r2, .L314+12
 3708              		.loc 1 232 0
 3709 1a10 000053E3 		cmp	r3, #0
 3710              		.loc 1 229 0
 3711 1a14 0030A0E3 		mov	r3, #0
 3712 1a18 0230C2E5 		strb	r3, [r2, #2]
 3713              		.loc 1 230 0
 3714 1a1c 013283E2 		add	r3, r3, #268435456
 3715 1a20 043087E5 		str	r3, [r7, #4]
 3716              		.loc 1 231 0
 3717 1a24 033283E2 		add	r3, r3, #805306368
 3718 1a28 043087E5 		str	r3, [r7, #4]
 3719              		.loc 1 228 0
 3720 1a2c 002084E5 		str	r2, [r4, #0]
 3721              		.loc 1 232 0
 3722 1a30 0100000A 		beq	.L303
 3723 1a34 0E3283E2 		add	r3, r3, #-536870912
 3724              	.L313:
 3725 1a38 0C3087E5 		str	r3, [r7, #12]
 3726              	.L303:
 3727              		.loc 1 234 0
 3728 1a3c 000094E5 		ldr	r0, [r4, #0]
 3729 1a40 FEFFFFEB 		bl	printMenu
 3730              	.LBB356:
 3731              	.LBB357:
 3732              		.loc 1 938 0
 3733 1a44 0020E0E3 		mvn	r2, #0
 3734 1a48 EF3F12E5 		ldr	r3, [r2, #-4079]
 3735 1a4c 103083E3 		orr	r3, r3, #16
 3736 1a50 EF3F02E5 		str	r3, [r2, #-4079]
 3737              	.L295:
 3738              	.LBE357:
 3739              	.LBE356:
 3740              	.LBB358:
 3741              	.LBB359:
 3742 1a54 0030E0E3 		mvn	r3, #0
 3743 1a58 EF2F13E5 		ldr	r2, [r3, #-4079]
 3744 1a5c 102082E3 		orr	r2, r2, #16
 3745 1a60 EF2F03E5 		str	r2, [r3, #-4079]
 3746              	.LBE359:
 3747              	.LBE358:
 3748              		.loc 1 237 0
 3749 1a64 013083E2 		add	r3, r3, #1
 3750 1a68 0030C8E5 		strb	r3, [r8, #0]
 3751 1a6c 2CFFFFEA 		b	.L306
 3752              	.L315:
 3753              		.align	2
 3754              	.L314:
 3755 1a70 00000000 		.word	radio_channel
 3756 1a74 00C002E0 		.word	-536690688
 3757 1a78 04000000 		.word	NUMBEROFFILES
 3758 1a7c 74000000 		.word	file_manager
 3759 1a80 00000000 		.word	white
 3760 1a84 00000000 		.word	black
 3761 1a88 00000000 		.word	welcome
 3762 1a8c 78020000 		.word	settings_menu
 3763 1a90 7C040000 		.word	current_display
 3764 1a94 2C000000 		.word	.LC5
 3765 1a98 008002E0 		.word	-536707072
 3766 1a9c 08000000 		.word	button_pressed
 3767 1aa0 C0C62D00 		.word	3000000
 3768 1aa4 00000000 		.word	USB
 3769 1aa8 80969800 		.word	10000000
 3770 1aac 09000000 		.word	update_screen
 3771 1ab0 02000000 		.word	song_is_over
 3772 1ab4 14000000 		.word	current_song
 3773 1ab8 01000000 		.word	file_is_open
 3774 1abc 0C000000 		.word	prev_position
 3775 1ac0 BB020000 		.word	699
 3776              	.LFE2:
 3778              		.global	volume_setting
 3779              		.data
 3780              		.align	2
 3783              	volume_setting:
 3784 0000 10000000 		.word	16
 3785              		.global	radio_channel
 3786              		.align	2
 3789              	radio_channel:
 3790 0004 E8030000 		.word	1000
 3791              		.global	radio_enable
 3792              		.bss
 3795              	radio_enable:
 3796 0000 00       		.space	1
 3797              		.global	welcome
 3798              		.section	.rodata
 3801              	welcome:
 3802 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 3802      204C6973 
 3802      743A0A0D 
 3802      00
 3803 000d 00000000 		.space	9
 3803      00000000 
 3803      00
 3804              		.global	NotFound
 3807              	NotFound:
 3808 0016 46696C65 		.ascii	"File Not Found!"
 3808      204E6F74 
 3808      20466F75 
 3808      6E6421
 3809              		.global	USB
 3812              	USB:
 3813 0025 55534220 		.ascii	"USB Connected!"
 3813      436F6E6E 
 3813      65637465 
 3813      6421
 3814              		.global	newline
 3817              	newline:
 3818 0033 0A00     		.ascii	"\012\000"
 3819              		.global	volume
 3822              	volume:
 3823 0035 566F6C75 		.ascii	"Volume\000"
 3823      6D6500
 3824              		.global	contrast
 3827              	contrast:
 3828 003c 436F6E74 		.ascii	"Contrast\000"
 3828      72617374 
 3828      00
 3829              		.global	radio_power
 3832              	radio_power:
 3833 0045 52616469 		.ascii	"Radio Power"
 3833      6F20506F 
 3833      776572
 3834              		.global	radio_channel_menu
 3837              	radio_channel_menu:
 3838 0050 52616469 		.ascii	"Radio Channel"
 3838      6F204368 
 3838      616E6E65 
 3838      6C
 3839              		.global	settings
 3842              	settings:
 3843 005d 53657474 		.ascii	"Settings:\000"
 3843      696E6773 
 3843      3A00
 3844              		.bss
 3845              	file_is_open:
 3846 0001 00       		.space	1
 3847              	song_is_over:
 3848 0002 00       		.space	1
 3849 0003 00       		.align	2
 3850              	NUMBEROFFILES:
 3851 0004 00000000 		.space	4
 3852              	button_pressed:
 3853 0008 00       		.space	1
 3854              	update_screen:
 3855 0009 00       		.space	1
 3856 000a 0000     		.align	2
 3857              	prev_position:
 3858 000c 00000000 		.space	4
 3859              		.align	2
 3860              	cur_position:
 3861 0010 00000000 		.space	4
 3862              		.align	2
 3863              	current_song:
 3864 0014 00000000 		.space	96
 3864      00000000 
 3864      00000000 
 3864      00000000 
 3864      00000000 
 3865              		.align	2
 3866              	file_manager:
 3867 0074 00000000 		.space	516
 3867      00000000 
 3867      00000000 
 3867      00000000 
 3867      00000000 
 3868              		.align	2
 3869              	settings_menu:
 3870 0278 00000000 		.space	516
 3870      00000000 
 3870      00000000 
 3870      00000000 
 3870      00000000 
 3871              		.align	2
 3872              	current_display:
 3873 047c 00000000 		.space	4
 4581              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3850   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3822   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3832   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3837   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3842   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:363    .text:00000240 initializeSPI
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:382    .text:00000258 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:388    .text:0000025c selectSD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:396    .text:0000025c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:405    .text:00000270 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:411    .text:00000274 selectLCD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:419    .text:00000274 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:429    .text:0000028c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:435    .text:00000290 selectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:443    .text:00000290 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:473    .text:000002bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:480    .text:000002c4 deselectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:488    .text:000002c4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:497    .text:000002d8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:503    .text:000002dc isUSBConnected
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:511    .text:000002dc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:519    .text:000002ec $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:525    .text:000002f0 initializeUITimer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:533    .text:000002f0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:554    .text:00000324 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:560    .text:00000328 initializeMP3Timer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:568    .text:00000328 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:586    .text:00000354 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:592    .text:00000358 initializeInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:600    .text:00000358 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:631    .text:0000039c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1645   .text:00000af4 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1296   .text:00000834 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:639    .text:000003a8 stopAllInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:647    .text:000003a8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:657    .text:000003b8 enableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:676    .text:000003cc disableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:694    .text:000003dc enableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:713    .text:000003f0 disableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:752    .text:00000420 exclusiveUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:770    .text:00000430 initializeLEDs
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:796    .text:0000045c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:806    .text:00000460 displayRadioMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:812    .text:00000460 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:846    .text:000004c0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3872   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3789   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:855    .text:000004d0 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:865    .text:000004d0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:950    .text:00000590 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3817   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:958    .text:0000059c printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:968    .text:0000059c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1051   .text:00000664 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1057   .text:00000668 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1067   .text:00000668 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1153   .text:00000740 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1159   .text:00000744 handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1166   .text:00000744 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1223   .text:000007bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3866   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1229   .text:000007c0 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1236   .text:000007c0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1291   .text:00000830 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1305   .text:00000834 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1383   .text:000008e4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3852   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3857   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3860   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3854   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1394   .text:000008fc splashScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1400   .text:000008fc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1416   .text:0000091c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1422   .text:00000920 lowerVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1429   .text:00000920 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1497   .text:000009c4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3783   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1506   .text:000009d4 raiseVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1513   .text:000009d4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1578   .text:00000a74 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1586   .text:00000a80 sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1592   .text:00000a80 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1637   .text:00000ae4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3863   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3847   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1651   .text:00000af4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1669   .text:00000b1c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1675   .text:00000b20 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1681   .text:00000b20 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1723   .text:00000b80 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1730   .text:00000b88 initializeMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1736   .text:00000b88 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1757   .text:00000bac changeRadioFrequency
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1789   .text:00000be4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1795   .text:00000be8 setRadioFrequency
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1805   .text:00000be8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1867   .text:00000c3c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1878   .text:00000c44 disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1884   .text:00000c44 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1959   .text:00000ce8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3795   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1973   .text:00000cfc enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:1979   .text:00000cfc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2055   .text:00000da4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2065   .text:00000db8 initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2075   .text:00000db8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2164   .text:00000e28 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2171   .text:00000e30 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2178   .text:00000e30 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2208   .text:00000e64 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2214   .text:00000e68 stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2223   .text:00000e68 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2283   .text:00000ef0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3845   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2291   .text:00000efc loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2298   .text:00000efc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2412   .text:00000fd0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2418   .text:00000fd4 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2424   .text:00000fd4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2895   .text:0000133c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3807   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3869   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2922   .text:0000137c bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:2928   .text:0000137c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3123   .text:00001518 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3145   .text:00001544 main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3151   .text:00001544 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3755   .text:00001a70 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3801   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3812   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3784   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3827   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccEbjcKJ.s:3798   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
LCDSetRowColor
LCDPrintString
MMA_get_y
LCDInit
LCDClear
LCDPrintLogo
vs1002Config
vs1002SetVolume
vs1002Finish
vs1002SendMusic
fat16_read_file
vs1002SCIWrite
vs1002Reset
vs1002Init
ns73SetChannel
ns73Config
ns73Send
ns73Init
fat16_close_file
root_file_exists
root_open
fat16_file_size
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
__divsi3
__modsi3
rootDirectory_files_stream
rootDirectory_files
main_msc
