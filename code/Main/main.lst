   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting = 16, radio_channel = 1000;
  78:main.c        **** char radio_enable = OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void) {
  94:main.c        ****   //*******************************************************
  95:main.c        ****   //					Local Variables
  96:main.c        ****   //*******************************************************
  97:main.c        ****   unsigned long int numberOfChars = 0;
  98:main.c        ****   
  99:main.c        ****   //*******************************************************
 100:main.c        ****   //					Main Code
 101:main.c        ****   //*******************************************************
 102:main.c        ****   
 103:main.c        ****   // Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   
 106:main.c        ****   initializeMP3Player();
 107:main.c        ****   
 108:main.c        ****   splashScreen();
 109:main.c        ****   
 110:main.c        ****   initializeRadio(radio_channel);
 111:main.c        ****   
 112:main.c        ****   // Find Out how many files are on the SD card
 113:main.c        ****   selectSD();	//Make sure SPI is selected for reading the card
 114:main.c        ****   do {
 115:main.c        ****     numberOfChars++;
 116:main.c        ****   } while(rootDirectory_files_stream(0) != '\0'); // Get the total number of characters in the file
 117:main.c        ****   char tempNames[numberOfChars];   // This is one array that contains all of the filenames in the S
 118:main.c        ****   NUMBEROFFILES = rootDirectory_files(tempNames, numberOfChars + 1);
 119:main.c        ****   FileStruct Files[NUMBEROFFILES]; // Dynamically create an array for all of the filenames
 120:main.c        ****   
 121:main.c        ****   // Get all of the filenames into a Global Array
 122:main.c        ****   int chartracker=0;	
 123:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 124:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 125:main.c        ****   		if(chartracker <= numberOfChars){
 126:main.c        ****   			if(tempNames[chartracker]==','){
 127:main.c        ****   				Files[j].file_name[i] = '\0';
 128:main.c        ****   				i=MAXFILENAMELEN+1;
 129:main.c        ****   			}
 130:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 131:main.c        ****   			chartracker++;
 132:main.c        ****   		}
 133:main.c        ****   		else Files[j].file_name[i] ='\0';
 134:main.c        ****   	}	
 135:main.c        ****   }
 136:main.c        **** 	
 137:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 138:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 139:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 140:main.c        **** 	
 141:main.c        **** 	file_manager.orientation =ORIENTUP;
 142:main.c        **** 	file_manager.text_color=white;
 143:main.c        **** 	file_manager.back_color=black;
 144:main.c        **** 	
 145:main.c        **** 	file_manager.current_page=0;
 146:main.c        **** 	file_manager.current_row=1;
 147:main.c        **** 	file_manager.current_index=0;	
 148:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 149:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++) {
 150:main.c        **** 	  file_manager.title[i] = welcome[i];
 151:main.c        ****   }
 152:main.c        **** 	
 153:main.c        **** 	//Generate the settings menu and fill in default settings values
 154:main.c        **** 	fillSettings(&settings_menu);
 155:main.c        **** 	
 156:main.c        ****   // Setup the menu
 157:main.c        ****   current_display = &file_manager;
 158:main.c        ****   selectLCD();
 159:main.c        ****   LCDClear(current_display->back_color);
 160:main.c        ****   
 161:main.c        ****   // TODO Floere remove
 162:main.c        ****   LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 163:main.c        ****   delay_ms(500);
 164:main.c        ****   //
 165:main.c        ****   
 166:main.c        ****   printMenu(current_display);
 167:main.c        **** 	while(1){
 168:main.c        **** 	  // USB connected!
 169:main.c        **** 		if (isUSBConnected()) {
 170:main.c        **** 			LCDClear(white);
 171:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 172:main.c        ****       delay_ms(1000);
 173:main.c        ****       stopAllInterrupts(); // To allow USB communication
 174:main.c        **** 			main_msc();
 175:main.c        **** 			reset();
 176:main.c        **** 		}
 177:main.c        **** 	
 178:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 179:main.c        **** 		//while(!button_pressed && !update_screen){
 180:main.c        **** 		if (!button_pressed && !update_screen) {
 181:main.c        ****       // If the current song is done playing, start playing the next song if it's available.
 182:main.c        ****       if (song_is_over) {
 183:main.c        ****         disableMP3Interrupt();
 184:main.c        ****         closeSong(&current_song); // Close the current song
 185:main.c        ****         file_is_open = 0;         //change master flag
 186:main.c        ****         ledBlueOff();
 187:main.c        ****         // Get the next song on the page by changing rows
 188:main.c        **** 				if(file_manager.current_row < NUMROWS){
 189:main.c        **** 					file_manager.current_row++;
 190:main.c        **** 					file_manager.current_index++;
 191:main.c        **** 				}
 192:main.c        **** 				//Go to the next page of songs if necessary
 193:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 194:main.c        **** 					file_manager.current_row=1;
 195:main.c        **** 					file_manager.current_index=0;
 196:main.c        **** 					file_manager.current_page++;
 197:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 198:main.c        **** 				}
 199:main.c        **** 				//If there is another song in the list, get it and play it!
 200:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 201:main.c        **** 					LCDClear(file_manager.back_color);
 202:main.c        **** 					printMenu(&file_manager);									// Print the menu with the next song!
 203:main.c        **** 					file_is_open = loadSongInfo(&current_song, &file_manager);	// Get the current song info.					
 204:main.c        **** 					vs1002Config();												// Enable the MP3 Comm. Lines
 205:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						// Make sure the MP3 player is in the right mode. TO
 206:main.c        **** 					vs1002Finish();												// Disable the MP3 Comm. Lines
 207:main.c        **** 					ledBlueOn();
 208:main.c        **** 					enableMP3Interrupt();
 209:main.c        **** 				}	
 210:main.c        **** 			}
 211:main.c        **** 		}
 212:main.c        **** 
 213:main.c        **** 		if (button_pressed == UP_BUT) {
 214:main.c        **** 		  handleUpButton(current_display, &Files[0]);
 215:main.c        **** 	  } else if (button_pressed == DWN_BUT) {
 216:main.c        **** 	    handleDownButton(current_display, &Files[0]);
 217:main.c        ****     } else if (button_pressed == MID_BUT) {
 218:main.c        ****       handleMiddleButton();
 219:main.c        ****     } else if (update_screen) {
 220:main.c        ****       handleAccelerometer();
 221:main.c        ****     }
 222:main.c        ****     button_pressed = NO_BUT;
 223:main.c        ****     enableUIInterrupt();
 224:main.c        ****   } // while (1)
 225:main.c        ****   
 226:main.c        ****   // main
 227:main.c        ****   return 0;
 228:main.c        **** }
 229:main.c        **** 
 230:main.c        **** 
 231:main.c        **** // Usage: delay_ms(1000);
 232:main.c        **** // Inputs: int count: Number of milliseconds to delay
 233:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 234:main.c        **** void delay_ms(int count)
 235:main.c        **** {
  16              		.loc 1 235 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 236:main.c        ****   int i;
 237:main.c        ****   count *= 10000;
  22              		.loc 1 237 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 238:main.c        ****   for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 238 0
  31              	@ 238 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 239:main.c        **** }
  38              		.loc 1 239 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 240:main.c        **** 
 241:main.c        **** // Usage: bootUp();
 242:main.c        **** // Inputs: None
 243:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 244:main.c        **** void bootUp(void)
 245:main.c        **** {
 246:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 247:main.c        ****     delay_ms(10); //Delay for power to stablize
 248:main.c        **** 
 249:main.c        ****     //Bring up SD and FAT
 250:main.c        ****     if(!sd_raw_init())
 251:main.c        ****     {
 252:main.c        ****         rprintf("SD Init Error\n");
 253:main.c        ****     }
 254:main.c        ****     if(openroot())
 255:main.c        ****     {
 256:main.c        ****         rprintf("SD OpenRoot Error\n");
 257:main.c        ****     }
 258:main.c        ****      
 259:main.c        ****   //Initialize I/O Ports and Peripherals
 260:main.c        ****   //Setup the MP3 I/O Lines
 261:main.c        ****   IODIR0 |= MP3_XCS;
 262:main.c        ****   IODIR0 &= ~MP3_DREQ;
 263:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 264:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 265:main.c        ****   
 266:main.c        ****   //Setupt the FM Trans. Lines
 267:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 268:main.c        ****   IODIR1 |= FM_CS;
 269:main.c        ****   
 270:main.c        ****   //Setup the SD Card I/O Lines
 271:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 272:main.c        ****   
 273:main.c        ****   //Setup the Accelerometer I/O Lines
 274:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 275:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 276:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 277:main.c        ****   
 278:main.c        ****   //Setup the LCD I/O Lines
 279:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 280:main.c        ****   
 281:main.c        ****   initializeLEDs();
 282:main.c        ****   
 283:main.c        ****   //Setup the Buttons
 284:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 285:main.c        ****   
 286:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 287:main.c        ****   
 288:main.c        ****   initializeInterrupts();
 289:main.c        ****   initializeUITimer();
 290:main.c        ****   initializeMP3Player();
 291:main.c        ****   
 292:main.c        ****   initializeSPI();
 293:main.c        **** }
 294:main.c        **** 
 295:main.c        **** //Usage: None (Automatically Called by FW)
 296:main.c        **** //Inputs: None
 297:main.c        **** //This function is a global interrupt called by a match on the Timer 0 match.  The interrupt
 298:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 299:main.c        **** // and setting the appropriate global flag if either has occured.
 300:main.c        **** static void timer0ISR(void)
 301:main.c        **** {
 302:main.c        ****   button_pressed = getButton(); // Find out if a button has been pressed, and which one
 303:main.c        ****   cur_position = MMA_get_y();   // Get the current position of the screen
 304:main.c        ****   if((prev_position<700 && cur_position>700) || (prev_position>700 && cur_position<700)) {
 305:main.c        ****     update_screen = 1;
 306:main.c        ****   } else {
 307:main.c        ****     update_screen = 0; // Determine if the accelerometer has been rotated
 308:main.c        ****   }
 309:main.c        ****   prev_position = cur_position; // Save the position value for later reference
 310:main.c        ****   
 311:main.c        ****   T0IR = 0xFF;                  // Clear the timer interrupt
 312:main.c        ****   VICVectAddr = 0;              // Update the VIC priorities
 313:main.c        **** }
 314:main.c        **** 
 315:main.c        **** //  Usage: None (Automatically Called by FW)
 316:main.c        **** //  Inputs: None
 317:main.c        **** //  This function is a global interrupt called by a match on the Timer 1 match.
 318:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 319:main.c        **** //  WARNING: Altering the Timer 1 Prescale register or Timer 1 Match value will put proper MP3 play
 320:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 321:main.c        **** //
 322:main.c        **** static void timer1ISR(void) {
 323:main.c        ****   sendMP3Data();
 324:main.c        ****   
 325:main.c        ****   T1IR = 0xFF;      // Clear the timer 1 interrupt
 326:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 327:main.c        **** }
 328:main.c        **** 
 329:main.c        **** // Usage: button_value = getButton();
 330:main.c        **** // Inputs:  None
 331:main.c        **** // Outputs: None
 332:main.c        **** // Function returns the value of the button that is currently being pressed.
 333:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 334:main.c        **** char getButton(void){
  51              		.loc 1 334 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 335:main.c        ****   if (!(IOPIN1 & SW_UP)) {
  56              		.loc 1 335 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 336:main.c        ****     return UP_BUT;
 337:main.c        ****   } else if (!(IOPIN1 & SW_DWN)) {
  62              		.loc 1 337 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 338:main.c        ****     return DWN_BUT;
 339:main.c        ****   } else if (!(IOPIN1 & SW_MID)) {
  67              		.loc 1 339 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 340:main.c        ****     return MID_BUT;
 341:main.c        ****   }
 342:main.c        ****   return NO_BUT;
 343:main.c        **** }
  72              		.loc 1 343 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 344:main.c        **** 
 345:main.c        **** 
 346:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 346 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 347:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 347 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 346 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 347 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB138:
 103              	.LBB139:
 348:main.c        ****     for(int i =0; i<NUMROWS; i++){
 349:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 350:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 350 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE139:
 107              	.LBE138:
 108              		.loc 1 347 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB141:
 351:main.c        ****       }
 352:main.c        ****     }
 353:main.c        ****   }
 354:main.c        ****   else{
 355:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 355 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB143:
 356:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 357:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 357 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE143:
 125              	.LBE141:
 126              	.LBB144:
 127              	.LBB140:
 128              		.loc 1 350 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 349 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 350 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 349 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE140:
 141              		.loc 1 348 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE144:
 154              	.LBB145:
 155              	.LBB142:
 156              		.loc 1 357 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 356 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 357 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 356 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE142:
 169              		.loc 1 355 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE145:
 181              	.LBB146:
 358:main.c        ****       }
 359:main.c        ****     }
 360:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 360 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE146:
 188              	.LBB147:
 189              		.loc 1 355 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE147:
 198              	.LBB148:
 199              		.loc 1 360 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE148:
 361:main.c        ****   }
 362:main.c        **** }
 209              		.loc 1 362 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 363:main.c        **** 
 364:main.c        **** // Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 365:main.c        **** // Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 366:main.c        **** // DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 367:main.c        **** //
 368:main.c        **** // The function takes the currently selected file name from the selected_song structure and loads
 369:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 370:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 371:main.c        **** //
 372:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 373:main.c        ****   // Get the selected songs file name
 374:main.c        ****   for(int i=0; i < MAXFILENAMELEN; i++) {
 375:main.c        ****     song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 376:main.c        ****   }
 377:main.c        ****   // Get the selected songs display name
 378:main.c        ****   for(int i=0; i<MAXDISPLEN; i++){
 379:main.c        ****     if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 380:main.c        ****       song->name[i] = '\0';
 381:main.c        ****       i = MAXDISPLEN;
 382:main.c        ****     } else {
 383:main.c        ****       song->name[i]=song->file_name[i];
 384:main.c        ****     }
 385:main.c        ****   }
 386:main.c        ****   
 387:main.c        ****   selectSD(); // Make sure SPI is selected for reading the card
 388:main.c        ****   
 389:main.c        ****   // Check to see if the selected song is valid
 390:main.c        ****   if(!root_file_exists(song->file_name)) {
 391:main.c        ****     selectLCD();
 392:main.c        ****     return 0;
 393:main.c        ****   } else {
 394:main.c        ****     // open the selected song
 395:main.c        ****     song->handle = root_open(song->file_name);
 396:main.c        ****     song->size = fat16_file_size(song->handle);
 397:main.c        ****     fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 398:main.c        ****   }
 399:main.c        ****   
 400:main.c        ****   selectLCD();
 401:main.c        ****   return 1;
 402:main.c        **** }
 403:main.c        **** 
 404:main.c        **** // Usage: CloseSong(&current_song);
 405:main.c        **** // Inputs: SongStruct *song: Pointer to a song structure to be closed
 406:main.c        **** // Function closes a song that is currently open.
 407:main.c        **** void closeSong(SongStruct *song){
 408:main.c        ****   selectSD(); // Open SPI line for the SD Card.
 409:main.c        ****   fat16_close_file(song->handle);
 410:main.c        ****   selectLCD(); // Return SPI line to LCD.
 411:main.c        **** }
 412:main.c        **** 
 413:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 414:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 415:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 416:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 417:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 418:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 419:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 420:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 421:main.c        **** 	if(direction == PREVIOUS){
 422:main.c        **** 		display->current_row--;
 423:main.c        **** 		display->current_index--;
 424:main.c        **** 	}
 425:main.c        **** 	else{
 426:main.c        **** 		display->current_row++;
 427:main.c        **** 		display->current_index++;		
 428:main.c        **** 	}
 429:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 430:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 431:main.c        **** }
 432:main.c        **** 
 433:main.c        **** // Usage: printMenu(&settings_menu);
 434:main.c        **** // Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 435:main.c        **** // This function writes the title, along with all of the file names in the display struct to the sc
 436:main.c        **** //
 437:main.c        **** void printMenu(DisplayStruct *display){
 438:main.c        ****   selectLCD(); // Hand over SPI lines to LCD talk
 439:main.c        ****   if (display->current_page == 0) {
 440:main.c        ****     LCDPrintString(display->title,0, display->text_color, 0,0,display->orientation);
 441:main.c        ****   }
 442:main.c        ****   for (int j = 0; j < NUMROWS; j++){
 443:main.c        ****     LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 444:main.c        ****   }
 445:main.c        ****   LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 446:main.c        ****   LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->c
 447:main.c        **** }
 448:main.c        **** 
 449:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 450:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 451:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 452:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 453:main.c        **** //also loads the default display values along with the default settings values. 
 454:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 454 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB149:
 455:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 456:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 456 0
 233 014c A4909FE5 		ldr	r9, .L36
 457:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 457 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 458:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 458 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 459:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 459 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE149:
 241              		.loc 1 454 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB150:
 249              		.loc 1 456 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 457 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 458 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 459 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 455 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 456 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 457 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 458 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 459 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 455 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE150:
 275              	.LBB151:
 460:main.c        **** 	}
 461:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 462:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 462 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 461 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 462 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 461 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE151:
 463:main.c        **** 	}
 464:main.c        **** 	menu->text_color=white;
 289              		.loc 1 464 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 465:main.c        **** 	menu->back_color=black;
 294              		.loc 1 465 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 466:main.c        **** 	menu->current_row=1;
 297              		.loc 1 466 0
 298 01d0 0130A0E3 		mov	r3, #1
 467:main.c        **** 	menu->current_column=0;
 468:main.c        **** 	menu->current_index=0;
 469:main.c        **** 	menu->orientation = ORIENTLEFT;
 470:main.c        **** 	menu->current_page=0;
 471:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 471 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 465 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 469 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 466 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 467 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 468 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 470 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 472:main.c        **** }
 313              		.loc 1 472 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 473:main.c        **** 
 474:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 475:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 476:main.c        **** //			FileStruct *Files: List of files on the SD card
 477:main.c        **** //Outputs: None
 478:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 479:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 480:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 481:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 482:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 483:main.c        **** 	}
 484:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 485:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 486:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 487:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 488:main.c        **** 		//if(file_is_open)quickClear(display);
 489:main.c        **** 		//else LCDClear(display->back_color);
 490:main.c        **** 		quickClear(display);
 491:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 492:main.c        **** 		display->current_index=14;					//
 493:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 494:main.c        **** 		printMenu(display);							//	display previous page
 495:main.c        **** 	}
 496:main.c        **** }
 497:main.c        **** 
 498:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 499:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 500:main.c        **** //			FileStruct *Files: List of files on the SD card
 501:main.c        **** //Outputs: None
 502:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 503:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 504:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 505:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 506:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 507:main.c        **** 	}
 508:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 509:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 510:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 511:main.c        **** 		display->current_page+=1;		
 512:main.c        **** 		//if(file_is_open)quickClear(display);
 513:main.c        **** 		//else LCDClear(display->back_color);
 514:main.c        **** 		quickClear(display);
 515:main.c        **** 		display->current_row=1;
 516:main.c        **** 		display->current_index=0;
 517:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 518:main.c        **** 		printMenu(display);				
 519:main.c        **** 	}
 520:main.c        **** }
 521:main.c        **** 
 522:main.c        **** //Usage: handleMiddleButton();
 523:main.c        **** //Inputs: None
 524:main.c        **** //Outputs: None
 525:main.c        **** //Description: This function is called when the middle button is pressed.
 526:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 527:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 528:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 529:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 530:main.c        **** void handleMiddleButton(void){
 531:main.c        ****   disableUIInterrupt(DEBOUNCE_SWITCH); // was 250
 532:main.c        ****   
 533:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 534:main.c        ****   if (current_display == &file_manager) {
 535:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 536:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 537:main.c        ****       if (!file_is_open) { // Make sure this is a valid file
 538:main.c        ****         LCDClear(white);
 539:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 540:main.c        ****         delay_ms(1000);
 541:main.c        ****         LCDClear(black);
 542:main.c        ****         printMenu(&file_manager);
 543:main.c        ****       } else {
 544:main.c        ****         startMP3Player();
 545:main.c        ****       }
 546:main.c        ****     } else { // If a file is already open then this acts like a stop button
 547:main.c        ****       stopMP3Player();
 548:main.c        ****     }
 549:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 550:main.c        ****     clearScreen();
 551:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 552:main.c        **** 		enableUIInterrupt();
 553:main.c        **** 		if (current_display->current_row == VOLUMEMENU) {
 554:main.c        **** 			enableUIInterrupt();
 555:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 556:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 557:main.c        **** 			while(button_pressed < MID_BUT){
 558:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 150
 559:main.c        ****         if (button_pressed==UP_BUT) {
 560:main.c        ****           raiseVolume(1);
 561:main.c        ****         } else if (button_pressed==DWN_BUT) {
 562:main.c        ****           lowerVolume(1);
 563:main.c        ****         }
 564:main.c        ****         enableUIInterrupt();
 565:main.c        **** 			}
 566:main.c        **** 		}	
 567:main.c        ****     else if (current_display->current_row == RADIOCMENU) {
 568:main.c        ****       displayRadioMenu();
 569:main.c        ****       button_pressed = NO_BUT;
 570:main.c        ****       enableUIInterrupt();
 571:main.c        ****       while (button_pressed < MID_BUT) {
 572:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 100
 573:main.c        ****         if (button_pressed == UP_BUT) {
 574:main.c        ****           changeRadioFrequency(2);
 575:main.c        ****         } else if (button_pressed == DWN_BUT) {
 576:main.c        ****           changeRadioFrequency(-2);
 577:main.c        ****         }
 578:main.c        ****         enableUIInterrupt();
 579:main.c        ****       }
 580:main.c        ****       setRadioFrequency(radio_channel); // TODO Not really necessary, is it?
 581:main.c        ****     } else if (current_display->current_row == RADIOPMENU) {
 582:main.c        ****       LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 583:main.c        ****       if (radio_enable) {
 584:main.c        ****         LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 585:main.c        ****       } else {
 586:main.c        ****         LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 587:main.c        ****       }
 588:main.c        ****       button_pressed = NO_BUT;
 589:main.c        ****       enableUIInterrupt();
 590:main.c        ****       while (button_pressed < MID_BUT) {
 591:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 100
 592:main.c        ****         if (button_pressed == UP_BUT) {
 593:main.c        ****           enableRadio();
 594:main.c        ****         } else if (button_pressed == DWN_BUT) {
 595:main.c        ****           disableRadio();
 596:main.c        ****         }
 597:main.c        ****         enableUIInterrupt();
 598:main.c        ****       }
 599:main.c        ****     }
 600:main.c        ****     clearScreen();
 601:main.c        ****     printMenu(current_display);
 602:main.c        ****   }
 603:main.c        ****   enableUIInterrupt();
 604:main.c        **** }
 605:main.c        **** 
 606:main.c        **** //  Usage: quickClear(currentDisplay);
 607:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 608:main.c        **** //  Outputs: None
 609:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 610:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 611:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 612:main.c        **** //               good to use while an MP3 is playing.
 613:main.c        **** //
 614:main.c        **** void quickClear(DisplayStruct *display){
 615:main.c        ****   selectLCD();		//Hand over SPI lines to LCD talk
 616:main.c        ****   // If we're on the first page of the menu, we also need to clear the title.
 617:main.c        ****   if (display->current_page == 0) {
 618:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 619:main.c        ****   }
 620:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 621:main.c        ****   for (int j = 0; j < NUMROWS; j++) {
 622:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 623:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 624:main.c        ****   }
 625:main.c        **** }
 626:main.c        **** 
 627:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 628:main.c        **** //
 629:main.c        **** void reset(void) {
 332              		.loc 1 629 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 630:main.c        ****   WDMOD |= 3;
 337              		.loc 1 630 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 631:main.c        ****   WDFEED = 0xAA;
 342              		.loc 1 631 0
 343 0220 AA10A0E3 		mov	r1, #170
 632:main.c        ****   WDFEED = 0x55;
 344              		.loc 1 632 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 631 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 632 0
 349 022c 083082E5 		str	r3, [r2, #8]
 633:main.c        ****   WDFEED = 0xAA;
 634:main.c        ****   WDFEED = 0x00;
 350              		.loc 1 634 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 633 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 634 0
 355 0238 083082E5 		str	r3, [r2, #8]
 635:main.c        **** }
 356              		.loc 1 635 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	initializeSPI
 363              	initializeSPI:
 364              	.LFB30:
 636:main.c        **** 
 637:main.c        **** // Flöre refactors here!
 638:main.c        **** 
 639:main.c        **** //
 640:main.c        **** // RADIO
 641:main.c        **** //
 642:main.c        **** 
 643:main.c        **** // initializes the FM transmitter to a given frequency.
 644:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 645:main.c        **** //
 646:main.c        **** void initializeRadio(int frequency) {
 647:main.c        ****   selectRadio();        // Select SPI for FM Transmitter
 648:main.c        ****   
 649:main.c        ****   // TODO use setRadioFrequency here?
 650:main.c        ****   ns73Config();         // Configure the FM Trans. I/O
 651:main.c        ****   ns73Init();           // Setup the Default Register Values
 652:main.c        ****   ns73SetChannel(frequency); // Transmit
 653:main.c        ****   
 654:main.c        ****   deselectRadio();      // Remove FM Transmitter from SPI bus
 655:main.c        ****   delay_ms(100);
 656:main.c        **** }
 657:main.c        **** 
 658:main.c        **** // Enables the radio.
 659:main.c        **** //
 660:main.c        **** void enableRadio(void) {
 661:main.c        ****   radio_enable = ON;
 662:main.c        ****   
 663:main.c        ****   // graphics
 664:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 665:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 666:main.c        ****   
 667:main.c        ****   // send data
 668:main.c        ****   selectRadio();          //Select the FM transmitter
 669:main.c        ****   ns73Config();           // Configure the FM Trans. I/O
 670:main.c        ****   ns73Send(R0, PE | AG);  // Power up the radio
 671:main.c        ****   deselectRadio();        // Unselect the FM transmitter
 672:main.c        **** }
 673:main.c        **** 
 674:main.c        **** // Disables the radio.
 675:main.c        **** //
 676:main.c        **** void disableRadio(void) {
 677:main.c        ****   radio_enable = OFF;
 678:main.c        ****   
 679:main.c        ****   // graphics
 680:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 681:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 682:main.c        ****   
 683:main.c        ****   // send data
 684:main.c        ****   selectRadio();      //Select the FM transmitter
 685:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 686:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 687:main.c        ****   deselectRadio();      //Unselect the FM transmitter
 688:main.c        **** }
 689:main.c        **** 
 690:main.c        **** // Set the radio frequency to f where f is i.e. 1000 for 100.0 Mhz.
 691:main.c        **** //
 692:main.c        **** void setRadioFrequency(int f) {
 693:main.c        ****   selectRadio();     // Select the FM transmitter
 694:main.c        ****   ns73Config();      // Configure the FM Trans. I/O
 695:main.c        ****   ns73SetChannel(f); // Set the channel	
 696:main.c        ****   deselectRadio();   // Unselect the FM transmitter
 697:main.c        **** }
 698:main.c        **** 
 699:main.c        **** // Change the radio frequency by f where change is 0.1 times f Mhz.
 700:main.c        **** //
 701:main.c        **** void changeRadioFrequency(int f) {
 702:main.c        ****   if ((885 < radio_channel) && (radio_channel < 1075)) {
 703:main.c        ****     radio_channel += f;
 704:main.c        ****   }
 705:main.c        ****   displayRadioMenu();
 706:main.c        ****   ns73SetChannel(radio_channel); // TODO or setRadioFrequency?
 707:main.c        **** }
 708:main.c        **** 
 709:main.c        **** //
 710:main.c        **** // MP3
 711:main.c        **** //
 712:main.c        **** 
 713:main.c        **** // Initialize the MP3 player with double clock speed and lower volume.
 714:main.c        **** //
 715:main.c        **** void initializeMP3Player(void) {
 716:main.c        ****   vs1002Config(); // Configure MP3 I/O
 717:main.c        ****   vs1002Reset();  // Reset MP3 Player
 718:main.c        ****   vs1002Init();   // Double the clock speed and set to "New" mode
 719:main.c        ****   lowerVolume(5); // Lower the Volume a bit
 720:main.c        ****   vs1002Finish(); // Restore the SPI I/O lines
 721:main.c        **** }
 722:main.c        **** 
 723:main.c        **** // Start playing.
 724:main.c        **** //
 725:main.c        **** void startMP3Player(void) {
 726:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 727:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 728:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 729:main.c        ****   ledBlueOn();
 730:main.c        ****   sendMP3Data();                        // Send first song data
 731:main.c        ****   PINSEL1 |= 0x00000C00;
 732:main.c        ****   enableMP3Interrupt();
 733:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 734:main.c        **** }
 735:main.c        **** 
 736:main.c        **** // Sends a piece of mp3 data from the current song.
 737:main.c        **** //
 738:main.c        **** void sendMP3Data(void) {
 739:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 740:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 741:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 742:main.c        ****     // Buffer more data if available
 743:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) {
 744:main.c        ****       song_is_over = 1;
 745:main.c        ****     } else {
 746:main.c        ****       song_is_over = 0; // If there's no more data available, set the flag, else leave it alone
 747:main.c        ****     }
 748:main.c        ****   }
 749:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 750:main.c        **** }
 751:main.c        **** 
 752:main.c        **** // Stop playing.
 753:main.c        **** //
 754:main.c        **** void stopMP3Player(void) {
 755:main.c        ****   disableMP3Interrupt();
 756:main.c        ****   
 757:main.c        ****   ledBlueOff();
 758:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 759:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 760:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 761:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 762:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 763:main.c        ****   closeSong(&current_song);                               // Close the current song
 764:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 765:main.c        ****   
 766:main.c        ****   exclusiveUIInterrupt();
 767:main.c        **** }
 768:main.c        **** 
 769:main.c        **** //
 770:main.c        **** // VOLUME
 771:main.c        **** //
 772:main.c        **** 
 773:main.c        **** // Raises the Volume by n.
 774:main.c        **** //
 775:main.c        **** void raiseVolume(int n) {
 776:main.c        ****   for(char i = 0; i < n; i++) {
 777:main.c        ****     if(volume_setting < 32){
 778:main.c        ****       volume_setting += 1;
 779:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 780:main.c        ****       vs1002SetVolume(INCREASE);  // Raise the volume
 781:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 782:main.c        ****     }
 783:main.c        ****   }
 784:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 785:main.c        ****   LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientat
 786:main.c        **** }
 787:main.c        **** 
 788:main.c        **** // Lowers the volume by n.
 789:main.c        **** //
 790:main.c        **** void lowerVolume(int n) {
 791:main.c        ****   for(char i = 0; i < n; i++) {
 792:main.c        ****     if(volume_setting >= 0){
 793:main.c        ****       volume_setting--;
 794:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 795:main.c        ****       vs1002SetVolume(DECREASE);  // Lower the volume
 796:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 797:main.c        ****     }
 798:main.c        ****   }
 799:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 800:main.c        ****   LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 801:main.c        **** }
 802:main.c        **** 
 803:main.c        **** //
 804:main.c        **** // SPI
 805:main.c        **** //
 806:main.c        **** 
 807:main.c        **** // Initialize the SPI port.
 808:main.c        **** //
 809:main.c        **** void initializeSPI(void) {
 365              		.loc 1 809 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 810:main.c        ****   S0SPCCR = 64;   // SCK = 1 MHz, counter > 8 and even
 370              		.loc 1 810 0
 371 0240 10309FE5 		ldr	r3, .L42
 372 0244 4020A0E3 		mov	r2, #64
 373 0248 0C2083E5 		str	r2, [r3, #12]
 811:main.c        ****   S0SPCR  = 0x20; // Master, no interrupt enable, 8 bits
 374              		.loc 1 811 0
 375 024c 2020A0E3 		mov	r2, #32
 376 0250 002083E5 		str	r2, [r3, #0]
 812:main.c        **** }
 377              		.loc 1 812 0
 378 0254 1EFF2FE1 		bx	lr
 379              	.L43:
 380              		.align	2
 381              	.L42:
 382 0258 000002E0 		.word	-536739840
 383              	.LFE30:
 385              		.align	2
 386              		.global	selectSD
 388              	selectSD:
 389              	.LFB31:
 813:main.c        **** 
 814:main.c        **** // Hand over SPI lines to SD talk.
 815:main.c        **** //
 816:main.c        **** void selectSD(void) {
 390              		.loc 1 816 0
 391              		@ Function supports interworking.
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 817:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 395              		.loc 1 817 0
 396 025c 0C209FE5 		ldr	r2, .L46
 397 0260 003092E5 		ldr	r3, [r2, #0]
 398 0264 153C83E3 		orr	r3, r3, #5376
 399 0268 003082E5 		str	r3, [r2, #0]
 818:main.c        **** }
 400              		.loc 1 818 0
 401 026c 1EFF2FE1 		bx	lr
 402              	.L47:
 403              		.align	2
 404              	.L46:
 405 0270 00C002E0 		.word	-536690688
 406              	.LFE31:
 408              		.align	2
 409              		.global	selectLCD
 411              	selectLCD:
 412              	.LFB32:
 819:main.c        **** 
 820:main.c        **** // Hand over SPI lines to LCD talk.
 821:main.c        **** //
 822:main.c        **** void selectLCD(void) {
 413              		.loc 1 822 0
 414              		@ Function supports interworking.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 823:main.c        ****   PINSEL0 &= 0xFFFFC00F;
 418              		.loc 1 823 0
 419 0274 10209FE5 		ldr	r2, .L50
 420 0278 003092E5 		ldr	r3, [r2, #0]
 421 027c FF3DC3E3 		bic	r3, r3, #16320
 422 0280 3030C3E3 		bic	r3, r3, #48
 423 0284 003082E5 		str	r3, [r2, #0]
 824:main.c        **** }
 424              		.loc 1 824 0
 425 0288 1EFF2FE1 		bx	lr
 426              	.L51:
 427              		.align	2
 428              	.L50:
 429 028c 00C002E0 		.word	-536690688
 430              	.LFE32:
 432              		.align	2
 433              		.global	selectRadio
 435              	selectRadio:
 436              	.LFB33:
 825:main.c        **** 
 826:main.c        **** // Hand over SPI lines to radio talk.
 827:main.c        **** void selectRadio(void) {
 437              		.loc 1 827 0
 438              		@ Function supports interworking.
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 828:main.c        ****   IOCLR1 |= FM_CS;
 442              		.loc 1 828 0
 443 0290 24209FE5 		ldr	r2, .L56
 444 0294 1C3092E5 		ldr	r3, [r2, #28]
 445 0298 013283E3 		orr	r3, r3, #268435456
 446 029c 1C3082E5 		str	r3, [r2, #28]
 447              	.LBB152:
 448              	.LBB153:
 449              		.loc 1 238 0
 450 02a0 18209FE5 		ldr	r2, .L56+4
 451              	.LBE153:
 452              	.LBE152:
 453              		.loc 1 828 0
 454 02a4 0030A0E3 		mov	r3, #0
 455              	.LVL22:
 456              	.L53:
 457              	.LBB155:
 458              	.LBB154:
 459              		.loc 1 238 0
 460              	@ 238 "main.c" 1
 461 02a8 0000A0E1 		nop
 462              	@ 0 "" 2
 463 02ac 013083E2 		add	r3, r3, #1
 464 02b0 020053E1 		cmp	r3, r2
 465 02b4 FBFFFF1A 		bne	.L53
 466              	.LBE154:
 467              	.LBE155:
 829:main.c        ****   delay_ms(100);
 830:main.c        ****   // In enableRadio: delay_ms(900); // TODO Does this really need to be 900?
 831:main.c        **** }
 468              		.loc 1 831 0
 469 02b8 1EFF2FE1 		bx	lr
 470              	.L57:
 471              		.align	2
 472              	.L56:
 473 02bc 008002E0 		.word	-536707072
 474 02c0 40420F00 		.word	1000000
 475              	.LFE33:
 477              		.align	2
 478              		.global	deselectRadio
 480              	deselectRadio:
 481              	.LFB34:
 832:main.c        **** 
 833:main.c        **** // Hand off SPI lines from radio talk.
 834:main.c        **** void deselectRadio(void) {
 482              		.loc 1 834 0
 483              		@ Function supports interworking.
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 835:main.c        ****   IOSET1 |= FM_CS;
 487              		.loc 1 835 0
 488 02c4 0C209FE5 		ldr	r2, .L60
 489 02c8 143092E5 		ldr	r3, [r2, #20]
 490 02cc 013283E3 		orr	r3, r3, #268435456
 491 02d0 143082E5 		str	r3, [r2, #20]
 836:main.c        **** }
 492              		.loc 1 836 0
 493 02d4 1EFF2FE1 		bx	lr
 494              	.L61:
 495              		.align	2
 496              	.L60:
 497 02d8 008002E0 		.word	-536707072
 498              	.LFE34:
 500              		.align	2
 501              		.global	isUSBConnected
 503              	isUSBConnected:
 504              	.LFB35:
 837:main.c        **** 
 838:main.c        **** //
 839:main.c        **** // USB
 840:main.c        **** //
 841:main.c        **** 
 842:main.c        **** // Returns if the USB is connected.
 843:main.c        **** //
 844:main.c        **** int isUSBConnected(void) {
 505              		.loc 1 844 0
 506              		@ Function supports interworking.
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 845:main.c        ****   return IOPIN0 & (1<<23);
 510              		.loc 1 845 0
 511 02dc 08309FE5 		ldr	r3, .L64
 512 02e0 000093E5 		ldr	r0, [r3, #0]
 846:main.c        **** }
 513              		.loc 1 846 0
 514 02e4 020500E2 		and	r0, r0, #8388608
 515 02e8 1EFF2FE1 		bx	lr
 516              	.L65:
 517              		.align	2
 518              	.L64:
 519 02ec 008002E0 		.word	-536707072
 520              	.LFE35:
 522              		.align	2
 523              		.global	initializeUITimer
 525              	initializeUITimer:
 526              	.LFB38:
 847:main.c        **** 
 848:main.c        **** //
 849:main.c        **** // LCD
 850:main.c        **** //
 851:main.c        **** 
 852:main.c        **** // Show the splash-screen (Sparkfun Logo)
 853:main.c        **** //
 854:main.c        **** void splashScreen(void) {
 855:main.c        ****   LCDInit();       // Initialize the LCD
 856:main.c        ****   LCDClear(white); // Clear the screen with white
 857:main.c        ****   LCDPrintLogo();  // Print the Sparkfun Logo
 858:main.c        **** }
 859:main.c        **** 
 860:main.c        **** // Clear the screen, cheap if possible.
 861:main.c        **** //
 862:main.c        **** void clearScreen(void) {
 863:main.c        ****   if (file_is_open) {
 864:main.c        ****     quickClear(current_display);
 865:main.c        ****   } else {
 866:main.c        ****     LCDClear(current_display->back_color);
 867:main.c        ****   }
 868:main.c        **** }
 869:main.c        **** 
 870:main.c        **** //
 871:main.c        **** // Timers
 872:main.c        **** //
 873:main.c        **** 
 874:main.c        **** // Initialize the UI Timer.
 875:main.c        **** //
 876:main.c        **** void initializeUITimer(void) {
 527              		.loc 1 876 0
 528              		@ Function supports interworking.
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 877:main.c        ****   T0PR = 300;     // Divide Clock by 300 for 40kHz PS
 532              		.loc 1 877 0
 533 02f0 2C209FE5 		ldr	r2, .L68
 534 02f4 4B3FA0E3 		mov	r3, #300
 535 02f8 0C3082E5 		str	r3, [r2, #12]
 878:main.c        ****   T0TCR |= 0X01;  // Enable the clock
 536              		.loc 1 878 0
 537 02fc 043092E5 		ldr	r3, [r2, #4]
 538 0300 013083E3 		orr	r3, r3, #1
 539 0304 043082E5 		str	r3, [r2, #4]
 879:main.c        ****   T0CTCR = 0;     // Timer Mode
 540              		.loc 1 879 0
 541 0308 0030A0E3 		mov	r3, #0
 542 030c 703082E5 		str	r3, [r2, #112]
 880:main.c        ****   T0MCR = 0x0003; // Interrupt and Reset Timer on Match
 543              		.loc 1 880 0
 544 0310 033083E2 		add	r3, r3, #3
 545 0314 143082E5 		str	r3, [r2, #20]
 881:main.c        ****   T0MR0 = 1000;   // Interrupt on 40Hz
 546              		.loc 1 881 0
 547 0318 FA3FA0E3 		mov	r3, #1000
 548 031c 183082E5 		str	r3, [r2, #24]
 882:main.c        **** }
 549              		.loc 1 882 0
 550 0320 1EFF2FE1 		bx	lr
 551              	.L69:
 552              		.align	2
 553              	.L68:
 554 0324 004000E0 		.word	-536854528
 555              	.LFE38:
 557              		.align	2
 558              		.global	initializeMP3Timer
 560              	initializeMP3Timer:
 561              	.LFB39:
 883:main.c        **** 
 884:main.c        **** // Initialize the MP3 Timer.
 885:main.c        **** //
 886:main.c        **** void initializeMP3Timer(void) {
 562              		.loc 1 886 0
 563              		@ Function supports interworking.
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 887:main.c        ****   T1PR = 200;     // Divide Clock by 200 for ??kHz PS
 567              		.loc 1 887 0
 568 0328 24209FE5 		ldr	r2, .L72
 569 032c C830A0E3 		mov	r3, #200
 570 0330 0C3082E5 		str	r3, [r2, #12]
 888:main.c        ****   T1TCR |= 0X01;  // Enable the clock
 571              		.loc 1 888 0
 572 0334 043092E5 		ldr	r3, [r2, #4]
 573 0338 013083E3 		orr	r3, r3, #1
 574 033c 043082E5 		str	r3, [r2, #4]
 889:main.c        ****   T1CTCR = 0;     // Timer Mode
 575              		.loc 1 889 0
 576 0340 0030A0E3 		mov	r3, #0
 577 0344 703082E5 		str	r3, [r2, #112]
 890:main.c        ****   T1CCR = 0x0A00; // Capture and interrupt on the rising edge of DREQ
 578              		.loc 1 890 0
 579 0348 0A3C83E2 		add	r3, r3, #2560
 580 034c 283082E5 		str	r3, [r2, #40]
 891:main.c        **** }
 581              		.loc 1 891 0
 582 0350 1EFF2FE1 		bx	lr
 583              	.L73:
 584              		.align	2
 585              	.L72:
 586 0354 008000E0 		.word	-536838144
 587              	.LFE39:
 589              		.align	2
 590              		.global	initializeInterrupts
 592              	initializeInterrupts:
 593              	.LFB40:
 892:main.c        **** 
 893:main.c        **** //
 894:main.c        **** // Interrupts
 895:main.c        **** //
 896:main.c        **** 
 897:main.c        **** // Initializes interrupts and timers.
 898:main.c        **** //
 899:main.c        **** void initializeInterrupts(void) {
 594              		.loc 1 899 0
 595              		@ Function supports interworking.
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 900:main.c        ****   VPBDIV = 1;                              // Set PCLK equal to the System Clock	
 599              		.loc 1 900 0
 600 0358 3C309FE5 		ldr	r3, .L76
 601 035c 0120A0E3 		mov	r2, #1
 602 0360 002183E5 		str	r2, [r3, #256]
 901:main.c        ****   VICIntSelect = ~0x30;                    // Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 603              		.loc 1 901 0
 604 0364 0010E0E3 		mvn	r1, #0
 605 0368 3030E0E3 		mvn	r3, #48
 606 036c F33F01E5 		str	r3, [r1, #-4083]
 607              	.LBB156:
 608              	.LBB157:
 902:main.c        ****   exclusiveUIInterrupt();                  // Enable Timer 0 Interrupts (Don't start sending song d
 903:main.c        ****   VICVectCntl0= 0x25;                      // Use slot 0 for timer 1 interrupt
 904:main.c        ****   VICVectAddr0 = (unsigned int) timer1ISR; // Set the address of ISR for slot 1		
 905:main.c        ****   VICVectCntl1 = 0x24;                     // Use slot 1 for timer 0 interrupt
 906:main.c        ****   VICVectAddr1 = (unsigned int) timer0ISR; // Set the address of ISR for slot 1
 907:main.c        **** }
 908:main.c        **** 
 909:main.c        **** // Stops all interrupts from triggering.
 910:main.c        **** //
 911:main.c        **** void stopAllInterrupts(void) {
 912:main.c        ****   VICIntEnClr = 0x30;
 913:main.c        **** }
 914:main.c        **** 
 915:main.c        **** // Enable the MP3 interrupt.
 916:main.c        **** //
 917:main.c        **** void enableMP3Interrupt(void) {
 918:main.c        ****   VICIntEnable |= 0x20;
 919:main.c        **** }
 920:main.c        **** 
 921:main.c        **** // Disable the MP3 interrupt.
 922:main.c        **** //
 923:main.c        **** void disableMP3Interrupt(void) {
 924:main.c        ****   VICIntEnClr = 0x20;
 925:main.c        **** }
 926:main.c        **** 
 927:main.c        **** // Start the interrupts again.
 928:main.c        **** //
 929:main.c        **** void enableUIInterrupt(void) {
 930:main.c        ****   VICIntEnable |= 0x10;
 931:main.c        **** }
 932:main.c        **** 
 933:main.c        **** // Stop the UI interrupt from triggering. (And stabilize/debounce for t miliseconds)
 934:main.c        **** //
 935:main.c        **** void disableUIInterrupt(int t) {
 936:main.c        ****   VICIntEnClr = 0x10;
 937:main.c        ****   delay_ms(t); // debounce
 938:main.c        **** }
 939:main.c        **** 
 940:main.c        **** // Exclusively listen to the UI interrupt.
 941:main.c        **** //
 942:main.c        **** void exclusiveUIInterrupt(void) {
 943:main.c        ****   VICIntEnable = 0x10;
 609              		.loc 1 943 0
 610 0370 413083E2 		add	r3, r3, #65
 611 0374 EF3F01E5 		str	r3, [r1, #-4079]
 612              	.LBE157:
 613              	.LBE156:
 614              		.loc 1 903 0
 615 0378 153083E2 		add	r3, r3, #21
 616 037c FF3D01E5 		str	r3, [r1, #-3583]
 617              		.loc 1 904 0
 618 0380 18309FE5 		ldr	r3, .L76+4
 619 0384 FF3E01E5 		str	r3, [r1, #-3839]
 620              		.loc 1 905 0
 621 0388 2430A0E3 		mov	r3, #36
 622 038c FB3D01E5 		str	r3, [r1, #-3579]
 623              		.loc 1 906 0
 624 0390 0C309FE5 		ldr	r3, .L76+8
 625 0394 FB3E01E5 		str	r3, [r1, #-3835]
 626              		.loc 1 907 0
 627 0398 1EFF2FE1 		bx	lr
 628              	.L77:
 629              		.align	2
 630              	.L76:
 631 039c 00C01FE0 		.word	-534790144
 632 03a0 00000000 		.word	timer1ISR
 633 03a4 00000000 		.word	timer0ISR
 634              	.LFE40:
 636              		.align	2
 637              		.global	stopAllInterrupts
 639              	stopAllInterrupts:
 640              	.LFB41:
 641              		.loc 1 911 0
 642              		@ Function supports interworking.
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              		.loc 1 912 0
 647 03a8 3020A0E3 		mov	r2, #48
 648 03ac 0030E0E3 		mvn	r3, #0
 649 03b0 EB2F03E5 		str	r2, [r3, #-4075]
 650              		.loc 1 913 0
 651 03b4 1EFF2FE1 		bx	lr
 652              	.LFE41:
 654              		.align	2
 655              		.global	enableMP3Interrupt
 657              	enableMP3Interrupt:
 658              	.LFB42:
 659              		.loc 1 917 0
 660              		@ Function supports interworking.
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664              		.loc 1 918 0
 665 03b8 0020E0E3 		mvn	r2, #0
 666 03bc EF3F12E5 		ldr	r3, [r2, #-4079]
 667 03c0 203083E3 		orr	r3, r3, #32
 668 03c4 EF3F02E5 		str	r3, [r2, #-4079]
 669              		.loc 1 919 0
 670 03c8 1EFF2FE1 		bx	lr
 671              	.LFE42:
 673              		.align	2
 674              		.global	disableMP3Interrupt
 676              	disableMP3Interrupt:
 677              	.LFB43:
 678              		.loc 1 923 0
 679              		@ Function supports interworking.
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683              		.loc 1 924 0
 684 03cc 2020A0E3 		mov	r2, #32
 685 03d0 0030E0E3 		mvn	r3, #0
 686 03d4 EB2F03E5 		str	r2, [r3, #-4075]
 687              		.loc 1 925 0
 688 03d8 1EFF2FE1 		bx	lr
 689              	.LFE43:
 691              		.align	2
 692              		.global	enableUIInterrupt
 694              	enableUIInterrupt:
 695              	.LFB44:
 696              		.loc 1 929 0
 697              		@ Function supports interworking.
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701              		.loc 1 930 0
 702 03dc 0020E0E3 		mvn	r2, #0
 703 03e0 EF3F12E5 		ldr	r3, [r2, #-4079]
 704 03e4 103083E3 		orr	r3, r3, #16
 705 03e8 EF3F02E5 		str	r3, [r2, #-4079]
 706              		.loc 1 931 0
 707 03ec 1EFF2FE1 		bx	lr
 708              	.LFE44:
 710              		.align	2
 711              		.global	disableUIInterrupt
 713              	disableUIInterrupt:
 714              	.LFB45:
 715              		.loc 1 935 0
 716              		@ Function supports interworking.
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720              	.LVL23:
 721              		.loc 1 936 0
 722 03f0 1030A0E3 		mov	r3, #16
 723 03f4 0020E0E3 		mvn	r2, #0
 724 03f8 EB3F02E5 		str	r3, [r2, #-4075]
 725              	.LBB158:
 726              	.LBB159:
 727              		.loc 1 237 0
 728 03fc 273C83E2 		add	r3, r3, #9984
 729 0400 930002E0 		mul	r2, r3, r0
 730              	.LVL24:
 731 0404 0030A0E3 		mov	r3, #0
 732              	.LVL25:
 733 0408 010000EA 		b	.L87
 734              	.L88:
 735              		.loc 1 238 0
 736              	@ 238 "main.c" 1
 737 040c 0000A0E1 		nop
 738              	@ 0 "" 2
 739 0410 013083E2 		add	r3, r3, #1
 740              	.L87:
 741 0414 020053E1 		cmp	r3, r2
 742 0418 FBFFFFBA 		blt	.L88
 743              	.LBE159:
 744              	.LBE158:
 745              		.loc 1 938 0
 746 041c 1EFF2FE1 		bx	lr
 747              	.LFE45:
 749              		.align	2
 750              		.global	exclusiveUIInterrupt
 752              	exclusiveUIInterrupt:
 753              	.LFB46:
 754              		.loc 1 942 0
 755              		@ Function supports interworking.
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              		.loc 1 943 0
 760 0420 1020A0E3 		mov	r2, #16
 761 0424 0030E0E3 		mvn	r3, #0
 762 0428 EF2F03E5 		str	r2, [r3, #-4079]
 944:main.c        **** }
 763              		.loc 1 944 0
 764 042c 1EFF2FE1 		bx	lr
 765              	.LFE46:
 767              		.align	2
 768              		.global	initializeLEDs
 770              	initializeLEDs:
 771              	.LFB47:
 945:main.c        **** 
 946:main.c        **** //
 947:main.c        **** // LEDs
 948:main.c        **** //
 949:main.c        **** 
 950:main.c        **** // Initializes the LEDs to an off state.
 951:main.c        **** //
 952:main.c        **** void initializeLEDs(void) {
 772              		.loc 1 952 0
 773              		@ Function supports interworking.
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 953:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);
 777              		.loc 1 953 0
 778 0430 24209FE5 		ldr	r2, .L94
 779 0434 083092E5 		ldr	r3, [r2, #8]
 780 0438 073283E3 		orr	r3, r3, #1879048192
 781 043c 083082E5 		str	r3, [r2, #8]
 954:main.c        ****   ledBlueOff();
 782              		.loc 1 954 0
 783 0440 0232A0E3 		mov	r3, #536870912
 784 0444 043082E5 		str	r3, [r2, #4]
 955:main.c        ****   ledRedOff();
 785              		.loc 1 955 0
 786 0448 033083E0 		add	r3, r3, r3
 787 044c 043082E5 		str	r3, [r2, #4]
 956:main.c        ****   ledGrnOff();
 788              		.loc 1 956 0
 789 0450 0D3283E2 		add	r3, r3, #-805306368
 790 0454 043082E5 		str	r3, [r2, #4]
 957:main.c        **** }
 791              		.loc 1 957 0
 792 0458 1EFF2FE1 		bx	lr
 793              	.L95:
 794              		.align	2
 795              	.L94:
 796 045c 008002E0 		.word	-536707072
 797              	.LFE47:
 799              		.align	2
 800              		.global	wishesFileManager
 802              	wishesFileManager:
 803              	.LFB51:
 958:main.c        **** 
 959:main.c        **** //
 960:main.c        **** // Menus
 961:main.c        **** //
 962:main.c        **** 
 963:main.c        **** // Displays the radio menu settings.
 964:main.c        **** //
 965:main.c        **** void displayRadioMenu(void) {
 966:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 967:main.c        ****   LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 968:main.c        **** }
 969:main.c        **** 
 970:main.c        **** //
 971:main.c        **** // Accelerometer
 972:main.c        **** //
 973:main.c        **** 
 974:main.c        **** // 
 975:main.c        **** //
 976:main.c        **** void handleAccelerometer(void) {
 977:main.c        ****   // Disable UI interrupts
 978:main.c        ****   disableUIInterrupt(DEBOUNCE_ACCELEROMETER);
 979:main.c        ****   // Get new accelerometer value; make sure position is correct.
 980:main.c        ****   if (wishesSettings()) {
 981:main.c        ****     clearScreen();
 982:main.c        ****     current_display = &settings_menu;
 983:main.c        ****     current_display->orientation = ORIENTLEFT;
 984:main.c        ****     ledBlueOff();
 985:main.c        ****     if (file_is_open) {
 986:main.c        ****       ledGrnOn();
 987:main.c        ****     } else {
 988:main.c        ****       ledRedOn();
 989:main.c        ****     }
 990:main.c        ****   } else if (wishesFileManager()) {
 991:main.c        ****     clearScreen();
 992:main.c        ****     current_display = &file_manager;
 993:main.c        ****     current_display->orientation = ORIENTUP;
 994:main.c        ****     ledGrnOff();
 995:main.c        ****     ledRedOff();
 996:main.c        ****     if (file_is_open) {
 997:main.c        ****       ledBlueOn();
 998:main.c        ****     }
 999:main.c        ****   }
1000:main.c        ****   // If the screen has changed, show the new menu
1001:main.c        ****   printMenu(current_display);
1002:main.c        ****   // Reenable UI interrupts
1003:main.c        ****   enableUIInterrupt();
1004:main.c        **** }
1005:main.c        **** 
1006:main.c        **** int wishesSettings(void) {
1007:main.c        ****   return (MMA_get_y() > 700 && prev_position > 700);
1008:main.c        **** }
1009:main.c        **** 
1010:main.c        **** int wishesFileManager(void) {
 804              		.loc 1 1010 0
 805              		@ Function supports interworking.
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808 0460 04E02DE5 		str	lr, [sp, #-4]!
 809              	.LCFI2:
1011:main.c        ****   return (MMA_get_y() < 700 && prev_position < 700);
 810              		.loc 1 1011 0
 811 0464 FEFFFFEB 		bl	MMA_get_y
 812 0468 24209FE5 		ldr	r2, .L100
 813 046c 020050E1 		cmp	r0, r2
 814 0470 0000A0C3 		movgt	r0, #0
 815 0474 040000CA 		bgt	.L98
 816 0478 18309FE5 		ldr	r3, .L100+4
 817 047c 003093E5 		ldr	r3, [r3, #0]
 818 0480 020053E1 		cmp	r3, r2
 819 0484 0000A0C3 		movgt	r0, #0
 820 0488 0100A0D3 		movle	r0, #1
 821              	.L98:
1012:main.c        **** }...
 822              		.loc 1 1012 0
 823 048c 04E09DE4 		ldr	lr, [sp], #4
 824 0490 1EFF2FE1 		bx	lr
 825              	.L101:
 826              		.align	2
 827              	.L100:
 828 0494 BB020000 		.word	699
 829 0498 0C000000 		.word	prev_position
 830              	.LFE51:
 832              		.align	2
 833              		.global	wishesSettings
 835              	wishesSettings:
 836              	.LFB50:
 837              		.loc 1 1006 0
 838              		@ Function supports interworking.
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841 049c 04E02DE5 		str	lr, [sp, #-4]!
 842              	.LCFI3:
 843              		.loc 1 1007 0
 844 04a0 FEFFFFEB 		bl	MMA_get_y
 845 04a4 AF0F50E3 		cmp	r0, #700
 846 04a8 0000A0D3 		movle	r0, #0
 847 04ac 040000DA 		ble	.L104
 848 04b0 14309FE5 		ldr	r3, .L106
 849 04b4 003093E5 		ldr	r3, [r3, #0]
 850 04b8 AF0F53E3 		cmp	r3, #700
 851 04bc 0000A0D3 		movle	r0, #0
 852 04c0 0100A0C3 		movgt	r0, #1
 853              	.L104:
 854              		.loc 1 1008 0
 855 04c4 04E09DE4 		ldr	lr, [sp], #4
 856 04c8 1EFF2FE1 		bx	lr
 857              	.L107:
 858              		.align	2
 859              	.L106:
 860 04cc 0C000000 		.word	prev_position
 861              	.LFE50:
 863              		.align	2
 865              	timer0ISR:
 866              	.LFB5:
 867              		.loc 1 301 0
 868              		@ Function supports interworking.
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              	.LBB160:
 872              	.LBB161:
 873              		.loc 1 335 0
 874 04d0 A8209FE5 		ldr	r2, .L119
 875 04d4 103092E5 		ldr	r3, [r2, #16]
 876 04d8 020513E3 		tst	r3, #8388608
 877              	.LBE161:
 878              	.LBE160:
 879              		.loc 1 301 0
 880 04dc 04E02DE5 		str	lr, [sp, #-4]!
 881              	.LCFI4:
 882              	.LBB163:
 883              	.LBB162:
 884              		.loc 1 335 0
 885 04e0 0220A003 		moveq	r2, #2
 886 04e4 0700000A 		beq	.L110
 887              		.loc 1 337 0
 888 04e8 103092E5 		ldr	r3, [r2, #16]
 889 04ec 020613E3 		tst	r3, #2097152
 890 04f0 0120A003 		moveq	r2, #1
 891 04f4 0300000A 		beq	.L110
 892              		.loc 1 339 0
 893 04f8 103092E5 		ldr	r3, [r2, #16]
 894 04fc 010513E3 		tst	r3, #4194304
 895 0500 0320A003 		moveq	r2, #3
 896 0504 0020A013 		movne	r2, #0
 897              	.L110:
 898              	.LBE162:
 899              	.LBE163:
 900              		.loc 1 302 0
 901 0508 74309FE5 		ldr	r3, .L119+4
 902 050c 0020C3E5 		strb	r2, [r3, #0]
 903              		.loc 1 303 0
 904 0510 FEFFFFEB 		bl	MMA_get_y
 905              		.loc 1 304 0
 906 0514 6C309FE5 		ldr	r3, .L119+8
 907 0518 002093E5 		ldr	r2, [r3, #0]
 908              		.loc 1 303 0
 909 051c 68309FE5 		ldr	r3, .L119+12
 910              		.loc 1 304 0
 911 0520 AF0F52E3 		cmp	r2, #700
 912              		.loc 1 303 0
 913 0524 000083E5 		str	r0, [r3, #0]
 914              		.loc 1 304 0
 915 0528 010000AA 		bge	.L113
 916 052c AF0F50E3 		cmp	r0, #700
 917 0530 030000CA 		bgt	.L114
 918              	.L113:
 919 0534 AF0F52E3 		cmp	r2, #700
 920 0538 030000DA 		ble	.L115
 921 053c AF0F50E3 		cmp	r0, #700
 922 0540 010000AA 		bge	.L115
 923              	.L114:
 924              		.loc 1 305 0
 925 0544 0120A0E3 		mov	r2, #1
 926 0548 000000EA 		b	.L118
 927              	.L115:
 928              		.loc 1 307 0
 929 054c 0020A0E3 		mov	r2, #0
 930              	.L118:
 931 0550 38309FE5 		ldr	r3, .L119+16
 932 0554 0020C3E5 		strb	r2, [r3, #0]
 933              		.loc 1 311 0
 934 0558 34309FE5 		ldr	r3, .L119+20
 935 055c FF20A0E3 		mov	r2, #255
 936 0560 002083E5 		str	r2, [r3, #0]
 937              		.loc 1 309 0
 938 0564 1C309FE5 		ldr	r3, .L119+8
 939              		.loc 1 312 0
 940 0568 0020A0E3 		mov	r2, #0
 941              		.loc 1 309 0
 942 056c 000083E5 		str	r0, [r3, #0]
 943              		.loc 1 312 0
 944 0570 0030E0E3 		mvn	r3, #0
 945 0574 CF2F03E5 		str	r2, [r3, #-4047]
 946              		.loc 1 313 0
 947 0578 04E09DE4 		ldr	lr, [sp], #4
 948 057c 1EFF2FE1 		bx	lr
 949              	.L120:
 950              		.align	2
 951              	.L119:
 952 0580 008002E0 		.word	-536707072
 953 0584 08000000 		.word	button_pressed
 954 0588 0C000000 		.word	prev_position
 955 058c 10000000 		.word	cur_position
 956 0590 09000000 		.word	update_screen
 957 0594 004000E0 		.word	-536854528
 958              	.LFE5:
 960              		.section	.rodata.str1.1,"aMS",%progbits,1
 961              	.LC0:
 962 0000 256400   		.ascii	"%d\000"
 963              		.text
 964              		.align	2
 965              		.global	displayRadioMenu
 967              	displayRadioMenu:
 968              	.LFB48:
 969              		.loc 1 965 0
 970              		@ Function supports interworking.
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973 0598 10402DE9 		stmfd	sp!, {r4, lr}
 974              	.LCFI5:
 975              		.loc 1 966 0
 976 059c 54409FE5 		ldr	r4, .L123
 977 05a0 002094E5 		ldr	r2, [r4, #0]
 978              		.loc 1 965 0
 979 05a4 08D04DE2 		sub	sp, sp, #8
 980              	.LCFI6:
 981              		.loc 1 966 0
 982 05a8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 983 05ac 0200A0E3 		mov	r0, #2
 984 05b0 0010A0E3 		mov	r1, #0
 985 05b4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 986 05b8 FEFFFFEB 		bl	LCDSetRowColor
 987              		.loc 1 967 0
 988 05bc 0030A0E3 		mov	r3, #0
 989 05c0 00308DE5 		str	r3, [sp, #0]
 990 05c4 30309FE5 		ldr	r3, .L123+4
 991 05c8 001094E5 		ldr	r1, [r4, #0]
 992 05cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 993 05d0 28309FE5 		ldr	r3, .L123+8
 994 05d4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 995 05d8 24009FE5 		ldr	r0, .L123+12
 996 05dc 001093E5 		ldr	r1, [r3, #0]
 997 05e0 0230A0E3 		mov	r3, #2
 998 05e4 04C08DE5 		str	ip, [sp, #4]
 999 05e8 FEFFFFEB 		bl	LCDPrintString
 1000              		.loc 1 968 0
 1001 05ec 08D08DE2 		add	sp, sp, #8
 1002 05f0 1040BDE8 		ldmfd	sp!, {r4, lr}
 1003 05f4 1EFF2FE1 		bx	lr
 1004              	.L124:
 1005              		.align	2
 1006              	.L123:
 1007 05f8 7C040000 		.word	current_display
 1008 05fc 00000000 		.word	white
 1009 0600 00000000 		.word	radio_channel
 1010 0604 00000000 		.word	.LC0
 1011              	.LFE48:
 1013              		.align	2
 1014              		.global	quickClear
 1016              	quickClear:
 1017              	.LFB17:
 1018              		.loc 1 614 0
 1019              		@ Function supports interworking.
 1020              		@ args = 0, pretend = 0, frame = 0
 1021              		@ frame_needed = 0, uses_anonymous_args = 0
 1022              	.LVL26:
 1023              	.LBB164:
 1024              	.LBB165:
 1025              		.loc 1 823 0
 1026 0608 B8209FE5 		ldr	r2, .L130
 1027 060c 003092E5 		ldr	r3, [r2, #0]
 1028              	.LBE165:
 1029              	.LBE164:
 1030              		.loc 1 614 0
 1031 0610 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 1032              	.LCFI7:
 1033              	.LBB167:
 1034              	.LBB166:
 1035              		.loc 1 823 0
 1036 0614 FF3DC3E3 		bic	r3, r3, #16320
 1037 0618 3030C3E3 		bic	r3, r3, #48
 1038 061c 003082E5 		str	r3, [r2, #0]
 1039              	.LBE166:
 1040              	.LBE167:
 1041              		.loc 1 617 0
 1042 0620 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 1043 0624 00005EE3 		cmp	lr, #0
 1044              		.loc 1 614 0
 1045 0628 08D04DE2 		sub	sp, sp, #8
 1046              	.LCFI8:
 1047              		.loc 1 614 0
 1048 062c 0050A0E1 		mov	r5, r0
 1049              		.loc 1 617 0
 1050 0630 0700001A 		bne	.L126
 1051              	.LVL27:
 1052              		.loc 1 618 0
 1053 0634 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 1054 0638 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 1055 063c 0E10A0E1 		mov	r1, lr
 1056 0640 7B0F80E2 		add	r0, r0, #492
 1057 0644 0E30A0E1 		mov	r3, lr
 1058 0648 04C08DE5 		str	ip, [sp, #4]
 1059 064c 00E08DE5 		str	lr, [sp, #0]
 1060 0650 FEFFFFEB 		bl	LCDPrintString
 1061              	.LVL28:
 1062              	.L126:
 1063              		.loc 1 620 0
 1064 0654 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1065 0658 0010A0E3 		mov	r1, #0
 1066 065c 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1067 0660 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1068 0664 FEFFFFEB 		bl	LCDSetRowColor
 1069 0668 0040A0E3 		mov	r4, #0
 1070              	.LVL29:
 1071              	.LBB168:
 1072              		.loc 1 623 0
 1073 066c 58709FE5 		ldr	r7, .L130+4
 1074              		.loc 1 622 0
 1075 0670 0460A0E1 		mov	r6, r4
 1076              	.L127:
 1077 0674 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1078 0678 840285E0 		add	r0, r5, r4, asl #5
 1079              	.LBE168:
 1080              		.loc 1 620 0
 1081 067c 014084E2 		add	r4, r4, #1
 1082              	.LVL30:
 1083              	.LBB169:
 1084              		.loc 1 622 0
 1085 0680 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1086 0684 0C0080E2 		add	r0, r0, #12
 1087 0688 0610A0E1 		mov	r1, r6
 1088 068c 0430A0E1 		mov	r3, r4
 1089 0690 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1090 0694 FEFFFFEB 		bl	LCDPrintString
 1091              		.loc 1 623 0
 1092 0698 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 1093 069c 2C009FE5 		ldr	r0, .L130+8
 1094 06a0 0610A0E1 		mov	r1, r6
 1095 06a4 0430A0E1 		mov	r3, r4
 1096 06a8 00608DE5 		str	r6, [sp, #0]
 1097 06ac 04608DE5 		str	r6, [sp, #4]
 1098 06b0 FEFFFFEB 		bl	LCDPrintString
 1099              		.loc 1 621 0
 1100 06b4 0F0054E3 		cmp	r4, #15
 1101              	.LVL31:
 1102 06b8 EDFFFF1A 		bne	.L127
 1103              	.LBE169:
 1104              		.loc 1 625 0
 1105 06bc 08D08DE2 		add	sp, sp, #8
 1106 06c0 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 1107 06c4 1EFF2FE1 		bx	lr
 1108              	.L131:
 1109              		.align	2
 1110              	.L130:
 1111 06c8 00C002E0 		.word	-536690688
 1112 06cc 00000000 		.word	black
 1113 06d0 00000000 		.word	newline
 1114              	.LFE17:
 1116              		.align	2
 1117              		.global	printMenu
 1119              	printMenu:
 1120              	.LFB12:
 1121              		.loc 1 437 0
 1122              		@ Function supports interworking.
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              	.LVL32:
 1126              	.LBB170:
 1127              	.LBB171:
 1128              		.loc 1 823 0
 1129 06d4 C0209FE5 		ldr	r2, .L137
 1130 06d8 003092E5 		ldr	r3, [r2, #0]
 1131              	.LBE171:
 1132              	.LBE170:
 1133              		.loc 1 437 0
 1134 06dc 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1135              	.LCFI9:
 1136              	.LBB173:
 1137              	.LBB172:
 1138              		.loc 1 823 0
 1139 06e0 FF3DC3E3 		bic	r3, r3, #16320
 1140 06e4 3030C3E3 		bic	r3, r3, #48
 1141 06e8 003082E5 		str	r3, [r2, #0]
 1142              	.LBE172:
 1143              	.LBE173:
 1144              		.loc 1 439 0
 1145 06ec 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 1146 06f0 00005EE3 		cmp	lr, #0
 1147              		.loc 1 437 0
 1148 06f4 08D04DE2 		sub	sp, sp, #8
 1149              	.LCFI10:
 1150              		.loc 1 437 0
 1151 06f8 0050A0E1 		mov	r5, r0
 1152              		.loc 1 439 0
 1153 06fc 0700001A 		bne	.L133
 1154              	.LVL33:
 1155              		.loc 1 440 0
 1156 0700 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 1157 0704 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 1158 0708 0E10A0E1 		mov	r1, lr
 1159 070c 7B0F80E2 		add	r0, r0, #492
 1160 0710 0E30A0E1 		mov	r3, lr
 1161 0714 04C08DE5 		str	ip, [sp, #4]
 1162 0718 00E08DE5 		str	lr, [sp, #0]
 1163 071c FEFFFFEB 		bl	LCDPrintString
 1164              	.LVL34:
 1165              	.L133:
 1166 0720 0030A0E3 		mov	r3, #0
 1167              	.LVL35:
 1168              	.LBB174:
 1169              		.loc 1 443 0
 1170 0724 0360A0E1 		mov	r6, r3
 1171              	.L134:
 1172 0728 014083E2 		add	r4, r3, #1
 1173 072c 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1174 0730 830285E0 		add	r0, r5, r3, asl #5
 1175 0734 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1176 0738 0430A0E1 		mov	r3, r4
 1177              	.LVL36:
 1178 073c 0C0080E2 		add	r0, r0, #12
 1179 0740 0610A0E1 		mov	r1, r6
 1180 0744 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1181 0748 FEFFFFEB 		bl	LCDPrintString
 1182              		.loc 1 442 0
 1183 074c 0F0054E3 		cmp	r4, #15
 1184              	.LVL37:
 1185 0750 0430A0E1 		mov	r3, r4
 1186              	.LVL38:
 1187 0754 F3FFFF1A 		bne	.L134
 1188              	.LBE174:
 1189              		.loc 1 445 0
 1190 0758 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1191 075c 0610A0E1 		mov	r1, r6
 1192 0760 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1193 0764 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1194              	.LVL39:
 1195 0768 FEFFFFEB 		bl	LCDSetRowColor
 1196              		.loc 1 446 0
 1197 076c 080095E5 		ldr	r0, [r5, #8]
 1198 0770 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1199 0774 800285E0 		add	r0, r5, r0, asl #5
 1200 0778 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1201 077c 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1202 0780 0C0080E2 		add	r0, r0, #12
 1203 0784 0610A0E1 		mov	r1, r6
 1204 0788 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1205 078c FEFFFFEB 		bl	LCDPrintString
 1206              		.loc 1 447 0
 1207 0790 08D08DE2 		add	sp, sp, #8
 1208 0794 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1209 0798 1EFF2FE1 		bx	lr
 1210              	.L138:
 1211              		.align	2
 1212              	.L137:
 1213 079c 00C002E0 		.word	-536690688
 1214              	.LFE12:
 1216              		.align	2
 1217              		.global	highlightRow
 1219              	highlightRow:
 1220              	.LFB11:
 1221              		.loc 1 417 0
 1222              		@ Function supports interworking.
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225              	.LVL40:
 1226              	.LBB175:
 1227              	.LBB176:
 1228              		.loc 1 823 0
 1229 07a0 D0209FE5 		ldr	r2, .L144
 1230 07a4 003092E5 		ldr	r3, [r2, #0]
 1231              	.LBE176:
 1232              	.LBE175:
 1233              		.loc 1 417 0
 1234 07a8 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1235              	.LCFI11:
 1236              	.LBB178:
 1237              	.LBB177:
 1238              		.loc 1 823 0
 1239 07ac FF3DC3E3 		bic	r3, r3, #16320
 1240 07b0 3030C3E3 		bic	r3, r3, #48
 1241 07b4 003082E5 		str	r3, [r2, #0]
 1242              	.LBE177:
 1243              	.LBE178:
 1244              		.loc 1 417 0
 1245 07b8 0060A0E1 		mov	r6, r0
 1246 07bc 08D04DE2 		sub	sp, sp, #8
 1247              	.LCFI12:
 1248              		.loc 1 419 0
 1249 07c0 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1250 07c4 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1251              		.loc 1 417 0
 1252 07c8 0140A0E1 		mov	r4, r1
 1253              		.loc 1 419 0
 1254 07cc 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 1255              	.LVL41:
 1256 07d0 0010A0E3 		mov	r1, #0
 1257              	.LVL42:
 1258 07d4 FEFFFFEB 		bl	LCDSetRowColor
 1259              		.loc 1 420 0
 1260 07d8 080096E5 		ldr	r0, [r6, #8]
 1261 07dc 00C0A0E3 		mov	ip, #0
 1262 07e0 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 1263 07e4 800286E0 		add	r0, r6, r0, asl #5
 1264 07e8 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1265 07ec 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1266 07f0 0C10A0E1 		mov	r1, ip
 1267 07f4 0C0080E2 		add	r0, r0, #12
 1268 07f8 00C08DE5 		str	ip, [sp, #0]
 1269              		.loc 1 417 0
 1270 07fc FF4004E2 		and	r4, r4, #255
 1271              	.LVL43:
 1272              		.loc 1 420 0
 1273 0800 04508DE5 		str	r5, [sp, #4]
 1274 0804 FEFFFFEB 		bl	LCDPrintString
 1275 0808 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1276              		.loc 1 421 0
 1277 080c 010054E3 		cmp	r4, #1
 1278 0810 082096E5 		ldr	r2, [r6, #8]
 1279              		.loc 1 422 0
 1280 0814 01304302 		subeq	r3, r3, #1
 1281              		.loc 1 426 0
 1282 0818 01308312 		addne	r3, r3, #1
 1283 081c 0030C6E5 		strb	r3, [r6, #0]
 1284              		.loc 1 423 0
 1285 0820 01204202 		subeq	r2, r2, #1
 1286              		.loc 1 427 0
 1287 0824 01208212 		addne	r2, r2, #1
 1288 0828 082086E5 		str	r2, [r6, #8]
 1289              		.loc 1 429 0
 1290 082c 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 1291 0830 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1292 0834 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1293 0838 0010A0E3 		mov	r1, #0
 1294 083c FEFFFFEB 		bl	LCDSetRowColor
 1295              		.loc 1 430 0
 1296 0840 080096E5 		ldr	r0, [r6, #8]
 1297 0844 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 1298              	.LVL44:
 1299 0848 00C0A0E3 		mov	ip, #0
 1300 084c 800286E0 		add	r0, r6, r0, asl #5
 1301 0850 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1302 0854 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1303 0858 0C0080E2 		add	r0, r0, #12
 1304 085c 0C10A0E1 		mov	r1, ip
 1305 0860 04408DE5 		str	r4, [sp, #4]
 1306 0864 00C08DE5 		str	ip, [sp, #0]
 1307 0868 FEFFFFEB 		bl	LCDPrintString
 1308              		.loc 1 431 0
 1309 086c 08D08DE2 		add	sp, sp, #8
 1310 0870 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1311 0874 1EFF2FE1 		bx	lr
 1312              	.L145:
 1313              		.align	2
 1314              	.L144:
 1315 0878 00C002E0 		.word	-536690688
 1316              	.LFE11:
 1318              		.align	2
 1319              		.global	handleDownButton
 1321              	handleDownButton:
 1322              	.LFB15:
 1323              		.loc 1 504 0
 1324              		@ Function supports interworking.
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327              	.LVL45:
 1328 087c 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1329              	.LCFI13:
 1330              		.loc 1 505 0
 1331 0880 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1332 0884 0E0053E3 		cmp	r3, #14
 1333              		.loc 1 504 0
 1334 0888 0040A0E1 		mov	r4, r0
 1335 088c 0150A0E1 		mov	r5, r1
 1336              		.loc 1 505 0
 1337 0890 0200008A 		bhi	.L147
 1338              	.LVL46:
 1339              		.loc 1 506 0
 1340 0894 0010A0E3 		mov	r1, #0
 1341              		.loc 1 520 0
 1342 0898 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1343              		.loc 1 506 0
 1344 089c FEFFFFEA 		b	highlightRow
 1345              	.LVL47:
 1346              	.L147:
 1347              		.loc 1 509 0
 1348 08a0 0F0053E3 		cmp	r3, #15
 1349 08a4 1000001A 		bne	.L149
 1350 08a8 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 1351 08ac 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 1352 08b0 020053E1 		cmp	r3, r2
 1353 08b4 0C00009A 		bls	.L149
 1354              	.LVL48:
 1355              		.loc 1 511 0
 1356 08b8 013082E2 		add	r3, r2, #1
 1357 08bc 0630C0E5 		strb	r3, [r0, #6]
 1358              		.loc 1 514 0
 1359 08c0 FEFFFFEB 		bl	quickClear
 1360              	.LVL49:
 1361              		.loc 1 515 0
 1362 08c4 0130A0E3 		mov	r3, #1
 1363 08c8 0030C4E5 		strb	r3, [r4, #0]
 1364              		.loc 1 516 0
 1365 08cc 0030A0E3 		mov	r3, #0
 1366 08d0 083084E5 		str	r3, [r4, #8]
 1367              		.loc 1 517 0
 1368 08d4 0510A0E1 		mov	r1, r5
 1369 08d8 14009FE5 		ldr	r0, .L150
 1370 08dc FEFFFFEB 		bl	getNewFiles
 1371              		.loc 1 518 0
 1372 08e0 0400A0E1 		mov	r0, r4
 1373              		.loc 1 520 0
 1374 08e4 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1375              		.loc 1 518 0
 1376 08e8 FEFFFFEA 		b	printMenu
 1377              	.LVL50:
 1378              	.L149:
 1379              		.loc 1 520 0
 1380 08ec 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1381 08f0 1EFF2FE1 		bx	lr
 1382              	.L151:
 1383              		.align	2
 1384              	.L150:
 1385 08f4 74000000 		.word	file_manager
 1386              	.LFE15:
 1388              		.align	2
 1389              		.global	handleUpButton
 1391              	handleUpButton:
 1392              	.LFB14:
 1393              		.loc 1 480 0
 1394              		@ Function supports interworking.
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397              	.LVL51:
 1398 08f8 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1399              	.LCFI14:
 1400              		.loc 1 481 0
 1401 08fc 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1402 0900 010053E3 		cmp	r3, #1
 1403              		.loc 1 480 0
 1404 0904 0040A0E1 		mov	r4, r0
 1405 0908 0150A0E1 		mov	r5, r1
 1406              		.loc 1 481 0
 1407 090c 0200009A 		bls	.L153
 1408              	.LVL52:
 1409              		.loc 1 482 0
 1410 0910 0110A0E3 		mov	r1, #1
 1411              		.loc 1 496 0
 1412 0914 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1413              		.loc 1 482 0
 1414 0918 FEFFFFEA 		b	highlightRow
 1415              	.LVL53:
 1416              	.L153:
 1417              		.loc 1 485 0
 1418 091c 0F00001A 		bne	.L155
 1419 0920 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1420 0924 000053E3 		cmp	r3, #0
 1421 0928 0C00000A 		beq	.L155
 1422              	.LVL54:
 1423              		.loc 1 487 0
 1424 092c 013043E2 		sub	r3, r3, #1
 1425 0930 0630C0E5 		strb	r3, [r0, #6]
 1426              		.loc 1 490 0
 1427 0934 FEFFFFEB 		bl	quickClear
 1428              	.LVL55:
 1429              		.loc 1 491 0
 1430 0938 0F30A0E3 		mov	r3, #15
 1431 093c 0030C4E5 		strb	r3, [r4, #0]
 1432              		.loc 1 492 0
 1433 0940 0E30A0E3 		mov	r3, #14
 1434 0944 083084E5 		str	r3, [r4, #8]
 1435              		.loc 1 493 0
 1436 0948 0510A0E1 		mov	r1, r5
 1437 094c 14009FE5 		ldr	r0, .L156
 1438 0950 FEFFFFEB 		bl	getNewFiles
 1439              		.loc 1 494 0
 1440 0954 0400A0E1 		mov	r0, r4
 1441              		.loc 1 496 0
 1442 0958 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1443              		.loc 1 494 0
 1444 095c FEFFFFEA 		b	printMenu
 1445              	.LVL56:
 1446              	.L155:
 1447              		.loc 1 496 0
 1448 0960 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1449 0964 1EFF2FE1 		bx	lr
 1450              	.L157:
 1451              		.align	2
 1452              	.L156:
 1453 0968 74000000 		.word	file_manager
 1454              	.LFE14:
 1456              		.align	2
 1457              		.global	clearScreen
 1459              	clearScreen:
 1460              	.LFB37:
 1461              		.loc 1 862 0
 1462              		@ Function supports interworking.
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465 096c 04E02DE5 		str	lr, [sp, #-4]!
 1466              	.LCFI15:
 1467              		.loc 1 863 0
 1468 0970 2C309FE5 		ldr	r3, .L161
 1469 0974 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1470 0978 000053E3 		cmp	r3, #0
 1471 097c 24009FE5 		ldr	r0, .L161+4
 1472 0980 0200000A 		beq	.L159
 1473              		.loc 1 864 0
 1474 0984 000090E5 		ldr	r0, [r0, #0]
 1475              		.loc 1 868 0
 1476 0988 04E09DE4 		ldr	lr, [sp], #4
 1477              		.loc 1 864 0
 1478 098c FEFFFFEA 		b	quickClear
 1479              	.L159:
 1480              		.loc 1 866 0
 1481 0990 003090E5 		ldr	r3, [r0, #0]
 1482 0994 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1483 0998 FEFFFFEB 		bl	LCDClear
 1484              		.loc 1 868 0
 1485 099c 04E09DE4 		ldr	lr, [sp], #4
 1486 09a0 1EFF2FE1 		bx	lr
 1487              	.L162:
 1488              		.align	2
 1489              	.L161:
 1490 09a4 01000000 		.word	file_is_open
 1491 09a8 7C040000 		.word	current_display
 1492              	.LFE37:
 1494              		.align	2
 1495              		.global	handleAccelerometer
 1497              	handleAccelerometer:
 1498              	.LFB49:
 1499              		.loc 1 976 0
 1500              		@ Function supports interworking.
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503 09ac 10402DE9 		stmfd	sp!, {r4, lr}
 1504              	.LCFI16:
 1505              	.LBB179:
 1506              	.LBB180:
 1507              		.loc 1 936 0
 1508 09b0 1020A0E3 		mov	r2, #16
 1509 09b4 0030E0E3 		mvn	r3, #0
 1510 09b8 EB2F03E5 		str	r2, [r3, #-4075]
 1511              	.LBB181:
 1512              	.LBB182:
 1513              		.loc 1 238 0
 1514 09bc C8209FE5 		ldr	r2, .L171
 1515              	.LBE182:
 1516              	.LBE181:
 1517              		.loc 1 936 0
 1518 09c0 013083E2 		add	r3, r3, #1
 1519              	.LVL57:
 1520              	.L164:
 1521              	.LBB184:
 1522              	.LBB183:
 1523              		.loc 1 238 0
 1524              	@ 238 "main.c" 1
 1525 09c4 0000A0E1 		nop
 1526              	@ 0 "" 2
 1527 09c8 013083E2 		add	r3, r3, #1
 1528 09cc 020053E1 		cmp	r3, r2
 1529 09d0 FBFFFF1A 		bne	.L164
 1530              	.LBE183:
 1531              	.LBE184:
 1532              	.LBE180:
 1533              	.LBE179:
 1534              		.loc 1 980 0
 1535 09d4 FEFFFFEB 		bl	wishesSettings
 1536              	.LVL58:
 1537 09d8 004050E2 		subs	r4, r0, #0
 1538 09dc 0E00000A 		beq	.L165
 1539              		.loc 1 981 0
 1540 09e0 FEFFFFEB 		bl	clearScreen
 1541              		.loc 1 985 0
 1542 09e4 A4309FE5 		ldr	r3, .L171+4
 1543 09e8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1544              		.loc 1 982 0
 1545 09ec A0209FE5 		ldr	r2, .L171+8
 1546              		.loc 1 985 0
 1547 09f0 000053E3 		cmp	r3, #0
 1548              		.loc 1 983 0
 1549 09f4 0130A0E3 		mov	r3, #1
 1550 09f8 0230C2E5 		strb	r3, [r2, #2]
 1551              		.loc 1 982 0
 1552 09fc 94309FE5 		ldr	r3, .L171+12
 1553              		.loc 1 984 0
 1554 0a00 94109FE5 		ldr	r1, .L171+16
 1555              		.loc 1 982 0
 1556 0a04 002083E5 		str	r2, [r3, #0]
 1557              		.loc 1 984 0
 1558 0a08 0232A0E3 		mov	r3, #536870912
 1559 0a0c 043081E5 		str	r3, [r1, #4]
 1560              		.loc 1 986 0
 1561 0a10 0F328312 		addne	r3, r3, #-268435456
 1562              		.loc 1 988 0
 1563 0a14 0131A003 		moveq	r3, #1073741824
 1564 0a18 110000EA 		b	.L170
 1565              	.L165:
 1566              		.loc 1 990 0
 1567 0a1c FEFFFFEB 		bl	wishesFileManager
 1568 0a20 000050E3 		cmp	r0, #0
 1569 0a24 0F00000A 		beq	.L167
 1570              		.loc 1 991 0
 1571 0a28 FEFFFFEB 		bl	clearScreen
 1572              		.loc 1 996 0
 1573 0a2c 5C309FE5 		ldr	r3, .L171+4
 1574 0a30 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1575              		.loc 1 992 0
 1576 0a34 64209FE5 		ldr	r2, .L171+20
 1577              		.loc 1 994 0
 1578 0a38 5C109FE5 		ldr	r1, .L171+16
 1579              		.loc 1 996 0
 1580 0a3c 000053E3 		cmp	r3, #0
 1581              		.loc 1 994 0
 1582 0a40 0132A0E3 		mov	r3, #268435456
 1583              		.loc 1 993 0
 1584 0a44 0240C2E5 		strb	r4, [r2, #2]
 1585              		.loc 1 994 0
 1586 0a48 043081E5 		str	r3, [r1, #4]
 1587              		.loc 1 992 0
 1588 0a4c 44309FE5 		ldr	r3, .L171+12
 1589 0a50 002083E5 		str	r2, [r3, #0]
 1590              		.loc 1 995 0
 1591 0a54 0131A0E3 		mov	r3, #1073741824
 1592 0a58 043081E5 		str	r3, [r1, #4]
 1593              		.loc 1 996 0
 1594 0a5c 0100000A 		beq	.L167
 1595              		.loc 1 997 0
 1596 0a60 0E3283E2 		add	r3, r3, #-536870912
 1597              	.L170:
 1598 0a64 0C3081E5 		str	r3, [r1, #12]
 1599              	.L167:
 1600              		.loc 1 1001 0
 1601 0a68 28309FE5 		ldr	r3, .L171+12
 1602 0a6c 000093E5 		ldr	r0, [r3, #0]
 1603 0a70 FEFFFFEB 		bl	printMenu
 1604              	.LBB185:
 1605              	.LBB186:
 1606              		.loc 1 930 0
 1607 0a74 0020E0E3 		mvn	r2, #0
 1608 0a78 EF3F12E5 		ldr	r3, [r2, #-4079]
 1609 0a7c 103083E3 		orr	r3, r3, #16
 1610 0a80 EF3F02E5 		str	r3, [r2, #-4079]
 1611              	.LBE186:
 1612              	.LBE185:
 1613              		.loc 1 1004 0
 1614 0a84 1040BDE8 		ldmfd	sp!, {r4, lr}
 1615 0a88 1EFF2FE1 		bx	lr
 1616              	.L172:
 1617              		.align	2
 1618              	.L171:
 1619 0a8c C0C62D00 		.word	3000000
 1620 0a90 01000000 		.word	file_is_open
 1621 0a94 78020000 		.word	settings_menu
 1622 0a98 7C040000 		.word	current_display
 1623 0a9c 008002E0 		.word	-536707072
 1624 0aa0 74000000 		.word	file_manager
 1625              	.LFE49:
 1627              		.align	2
 1628              		.global	splashScreen
 1630              	splashScreen:
 1631              	.LFB36:
 1632              		.loc 1 854 0
 1633              		@ Function supports interworking.
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636 0aa4 04E02DE5 		str	lr, [sp, #-4]!
 1637              	.LCFI17:
 1638              		.loc 1 855 0
 1639 0aa8 FEFFFFEB 		bl	LCDInit
 1640              		.loc 1 856 0
 1641 0aac 10309FE5 		ldr	r3, .L175
 1642 0ab0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1643 0ab4 FEFFFFEB 		bl	LCDClear
 1644              		.loc 1 857 0
 1645 0ab8 FEFFFFEB 		bl	LCDPrintLogo
 1646              		.loc 1 858 0
 1647 0abc 04E09DE4 		ldr	lr, [sp], #4
 1648 0ac0 1EFF2FE1 		bx	lr
 1649              	.L176:
 1650              		.align	2
 1651              	.L175:
 1652 0ac4 00000000 		.word	white
 1653              	.LFE36:
 1655              		.align	2
 1656              		.global	lowerVolume
 1658              	lowerVolume:
 1659              	.LFB29:
 1660              		.loc 1 790 0
 1661              		@ Function supports interworking.
 1662              		@ args = 0, pretend = 0, frame = 0
 1663              		@ frame_needed = 0, uses_anonymous_args = 0
 1664              	.LVL59:
 1665 0ac8 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1666              	.LCFI18:
 1667 0acc 0050A0E1 		mov	r5, r0
 1668 0ad0 08D04DE2 		sub	sp, sp, #8
 1669              	.LCFI19:
 1670              		.loc 1 790 0
 1671 0ad4 0040A0E3 		mov	r4, #0
 1672              	.LVL60:
 1673 0ad8 8C609FE5 		ldr	r6, .L182
 1674 0adc 0A0000EA 		b	.L178
 1675              	.LVL61:
 1676              	.L180:
 1677              	.LBB187:
 1678              		.loc 1 792 0
 1679 0ae0 003096E5 		ldr	r3, [r6, #0]
 1680 0ae4 000053E3 		cmp	r3, #0
 1681              		.loc 1 793 0
 1682 0ae8 012043E2 		sub	r2, r3, #1
 1683              		.loc 1 792 0
 1684 0aec 040000BA 		blt	.L179
 1685              		.loc 1 793 0
 1686 0af0 002086E5 		str	r2, [r6, #0]
 1687              		.loc 1 794 0
 1688 0af4 FEFFFFEB 		bl	vs1002Config
 1689              		.loc 1 795 0
 1690 0af8 3000A0E3 		mov	r0, #48
 1691 0afc FEFFFFEB 		bl	vs1002SetVolume
 1692              		.loc 1 796 0
 1693 0b00 FEFFFFEB 		bl	vs1002Finish
 1694              	.LVL62:
 1695              	.L179:
 1696              		.loc 1 791 0
 1697 0b04 013084E2 		add	r3, r4, #1
 1698 0b08 FF4003E2 		and	r4, r3, #255
 1699              	.LVL63:
 1700              	.L178:
 1701 0b0c 050054E1 		cmp	r4, r5
 1702 0b10 F2FFFFBA 		blt	.L180
 1703              	.LBE187:
 1704              		.loc 1 799 0
 1705 0b14 54409FE5 		ldr	r4, .L182+4
 1706              	.LVL64:
 1707 0b18 002094E5 		ldr	r2, [r4, #0]
 1708 0b1c 0200A0E3 		mov	r0, #2
 1709 0b20 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1710 0b24 0010A0E3 		mov	r1, #0
 1711 0b28 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1712 0b2c FEFFFFEB 		bl	LCDSetRowColor
 1713              		.loc 1 800 0
 1714 0b30 0030A0E3 		mov	r3, #0
 1715 0b34 00308DE5 		str	r3, [sp, #0]
 1716 0b38 34309FE5 		ldr	r3, .L182+8
 1717 0b3c 001094E5 		ldr	r1, [r4, #0]
 1718 0b40 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1719 0b44 20309FE5 		ldr	r3, .L182
 1720 0b48 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1721 0b4c 24009FE5 		ldr	r0, .L182+12
 1722 0b50 001093E5 		ldr	r1, [r3, #0]
 1723 0b54 0230A0E3 		mov	r3, #2
 1724 0b58 04C08DE5 		str	ip, [sp, #4]
 1725 0b5c FEFFFFEB 		bl	LCDPrintString
 1726              		.loc 1 801 0
 1727 0b60 08D08DE2 		add	sp, sp, #8
 1728 0b64 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1729 0b68 1EFF2FE1 		bx	lr
 1730              	.L183:
 1731              		.align	2
 1732              	.L182:
 1733 0b6c 00000000 		.word	volume_setting
 1734 0b70 7C040000 		.word	current_display
 1735 0b74 00000000 		.word	white
 1736 0b78 00000000 		.word	.LC0
 1737              	.LFE29:
 1739              		.align	2
 1740              		.global	raiseVolume
 1742              	raiseVolume:
 1743              	.LFB28:
 1744              		.loc 1 775 0
 1745              		@ Function supports interworking.
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              	.LVL65:
 1749 0b7c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1750              	.LCFI20:
 1751 0b80 0050A0E1 		mov	r5, r0
 1752 0b84 08D04DE2 		sub	sp, sp, #8
 1753              	.LCFI21:
 1754              		.loc 1 775 0
 1755 0b88 0040A0E3 		mov	r4, #0
 1756              	.LVL66:
 1757 0b8c 88609FE5 		ldr	r6, .L189
 1758 0b90 0A0000EA 		b	.L185
 1759              	.LVL67:
 1760              	.L187:
 1761              	.LBB188:
 1762              		.loc 1 777 0
 1763 0b94 003096E5 		ldr	r3, [r6, #0]
 1764 0b98 1F0053E3 		cmp	r3, #31
 1765 0b9c 050000CA 		bgt	.L186
 1766              		.loc 1 778 0
 1767 0ba0 013083E2 		add	r3, r3, #1
 1768 0ba4 003086E5 		str	r3, [r6, #0]
 1769              		.loc 1 779 0
 1770 0ba8 FEFFFFEB 		bl	vs1002Config
 1771              		.loc 1 780 0
 1772 0bac 3100A0E3 		mov	r0, #49
 1773 0bb0 FEFFFFEB 		bl	vs1002SetVolume
 1774              		.loc 1 781 0
 1775 0bb4 FEFFFFEB 		bl	vs1002Finish
 1776              	.LVL68:
 1777              	.L186:
 1778              		.loc 1 776 0
 1779 0bb8 013084E2 		add	r3, r4, #1
 1780 0bbc FF4003E2 		and	r4, r3, #255
 1781              	.LVL69:
 1782              	.L185:
 1783 0bc0 050054E1 		cmp	r4, r5
 1784 0bc4 F2FFFFBA 		blt	.L187
 1785              	.LBE188:
 1786              		.loc 1 784 0
 1787 0bc8 50409FE5 		ldr	r4, .L189+4
 1788              	.LVL70:
 1789 0bcc 002094E5 		ldr	r2, [r4, #0]
 1790 0bd0 0200A0E3 		mov	r0, #2
 1791 0bd4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1792 0bd8 0010A0E3 		mov	r1, #0
 1793 0bdc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1794 0be0 FEFFFFEB 		bl	LCDSetRowColor
 1795              		.loc 1 785 0
 1796 0be4 001094E5 		ldr	r1, [r4, #0]
 1797 0be8 0030A0E3 		mov	r3, #0
 1798 0bec 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1799 0bf0 00308DE5 		str	r3, [sp, #0]
 1800 0bf4 20309FE5 		ldr	r3, .L189
 1801 0bf8 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1802 0bfc 20009FE5 		ldr	r0, .L189+8
 1803 0c00 001093E5 		ldr	r1, [r3, #0]
 1804 0c04 0230A0E3 		mov	r3, #2
 1805 0c08 04C08DE5 		str	ip, [sp, #4]
 1806 0c0c FEFFFFEB 		bl	LCDPrintString
 1807              		.loc 1 786 0
 1808 0c10 08D08DE2 		add	sp, sp, #8
 1809 0c14 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1810 0c18 1EFF2FE1 		bx	lr
 1811              	.L190:
 1812              		.align	2
 1813              	.L189:
 1814 0c1c 00000000 		.word	volume_setting
 1815 0c20 7C040000 		.word	current_display
 1816 0c24 00000000 		.word	.LC0
 1817              	.LFE28:
 1819              		.align	2
 1820              		.global	sendMP3Data
 1822              	sendMP3Data:
 1823              	.LFB26:
 1824              		.loc 1 738 0
 1825              		@ Function supports interworking.
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828 0c28 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1829              	.LCFI22:
 1830              		.loc 1 739 0
 1831 0c2c FEFFFFEB 		bl	vs1002Config
 1832              		.loc 1 740 0
 1833 0c30 54809FE5 		ldr	r8, .L197
 1834              		.loc 1 743 0
 1835 0c34 54709FE5 		ldr	r7, .L197+4
 1836 0c38 54409FE5 		ldr	r4, .L197+8
 1837              		.loc 1 746 0
 1838 0c3c 0060A0E3 		mov	r6, #0
 1839              		.loc 1 744 0
 1840 0c40 0150A0E3 		mov	r5, #1
 1841 0c44 080000EA 		b	.L196
 1842              	.L194:
 1843              		.loc 1 741 0
 1844 0c48 FEFFFFEB 		bl	vs1002SendMusic
 1845              		.loc 1 743 0
 1846 0c4c 340097E5 		ldr	r0, [r7, #52]
 1847 0c50 40109FE5 		ldr	r1, .L197+12
 1848 0c54 2020A0E3 		mov	r2, #32
 1849 0c58 FEFFFFEB 		bl	fat16_read_file
 1850 0c5c 0008A0E1 		mov	r0, r0, asl #16
 1851 0c60 000050E3 		cmp	r0, #0
 1852              		.loc 1 744 0
 1853 0c64 0050C4D5 		strleb	r5, [r4, #0]
 1854              		.loc 1 746 0
 1855 0c68 0060C4C5 		strgtb	r6, [r4, #0]
 1856              	.L196:
 1857              		.loc 1 740 0
 1858 0c6c 003098E5 		ldr	r3, [r8, #0]
 1859 0c70 020613E3 		tst	r3, #2097152
 1860              		.loc 1 741 0
 1861 0c74 1C009FE5 		ldr	r0, .L197+12
 1862 0c78 2010A0E3 		mov	r1, #32
 1863              		.loc 1 740 0
 1864 0c7c F1FFFF1A 		bne	.L194
 1865              		.loc 1 749 0
 1866 0c80 FEFFFFEB 		bl	vs1002Finish
 1867              		.loc 1 750 0
 1868 0c84 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1869 0c88 1EFF2FE1 		bx	lr
 1870              	.L198:
 1871              		.align	2
 1872              	.L197:
 1873 0c8c 008002E0 		.word	-536707072
 1874 0c90 14000000 		.word	current_song
 1875 0c94 02000000 		.word	song_is_over
 1876 0c98 51000000 		.word	current_song+61
 1877              	.LFE26:
 1879              		.align	2
 1881              	timer1ISR:
 1882              	.LFB6:
 1883              		.loc 1 322 0
 1884              		@ Function supports interworking.
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 1887 0c9c 04E02DE5 		str	lr, [sp, #-4]!
 1888              	.LCFI23:
 1889              		.loc 1 323 0
 1890 0ca0 FEFFFFEB 		bl	sendMP3Data
 1891              		.loc 1 325 0
 1892 0ca4 18309FE5 		ldr	r3, .L201
 1893 0ca8 FF20A0E3 		mov	r2, #255
 1894 0cac 002083E5 		str	r2, [r3, #0]
 1895              		.loc 1 326 0
 1896 0cb0 0020A0E3 		mov	r2, #0
 1897 0cb4 0030E0E3 		mvn	r3, #0
 1898 0cb8 CF2F03E5 		str	r2, [r3, #-4047]
 1899              		.loc 1 327 0
 1900 0cbc 04E09DE4 		ldr	lr, [sp], #4
 1901 0cc0 1EFF2FE1 		bx	lr
 1902              	.L202:
 1903              		.align	2
 1904              	.L201:
 1905 0cc4 008000E0 		.word	-536838144
 1906              	.LFE6:
 1908              		.align	2
 1909              		.global	startMP3Player
 1911              	startMP3Player:
 1912              	.LFB25:
 1913              		.loc 1 725 0
 1914              		@ Function supports interworking.
 1915              		@ args = 0, pretend = 0, frame = 0
 1916              		@ frame_needed = 0, uses_anonymous_args = 0
 1917 0cc8 10402DE9 		stmfd	sp!, {r4, lr}
 1918              	.LCFI24:
 1919              		.loc 1 726 0
 1920 0ccc FEFFFFEB 		bl	vs1002Config
 1921              		.loc 1 729 0
 1922 0cd0 50409FE5 		ldr	r4, .L205
 1923              		.loc 1 727 0
 1924 0cd4 0000A0E3 		mov	r0, #0
 1925 0cd8 021BA0E3 		mov	r1, #2048
 1926 0cdc FEFFFFEB 		bl	vs1002SCIWrite
 1927              		.loc 1 728 0
 1928 0ce0 FEFFFFEB 		bl	vs1002Finish
 1929              		.loc 1 729 0
 1930 0ce4 0232A0E3 		mov	r3, #536870912
 1931 0ce8 0C3084E5 		str	r3, [r4, #12]
 1932              		.loc 1 730 0
 1933 0cec FEFFFFEB 		bl	sendMP3Data
 1934              		.loc 1 731 0
 1935 0cf0 34209FE5 		ldr	r2, .L205+4
 1936 0cf4 043092E5 		ldr	r3, [r2, #4]
 1937 0cf8 033B83E3 		orr	r3, r3, #3072
 1938 0cfc 043082E5 		str	r3, [r2, #4]
 1939              	.LBB189:
 1940              	.LBB190:
 1941              		.loc 1 918 0
 1942 0d00 0020E0E3 		mvn	r2, #0
 1943 0d04 EF3F12E5 		ldr	r3, [r2, #-4079]
 1944 0d08 203083E3 		orr	r3, r3, #32
 1945 0d0c EF3F02E5 		str	r3, [r2, #-4079]
 1946              	.LBE190:
 1947              	.LBE189:
 1948              		.loc 1 733 0
 1949 0d10 083094E5 		ldr	r3, [r4, #8]
 1950 0d14 033783E3 		orr	r3, r3, #786432
 1951 0d18 503083E3 		orr	r3, r3, #80
 1952 0d1c 083084E5 		str	r3, [r4, #8]
 1953              		.loc 1 734 0
 1954 0d20 1040BDE8 		ldmfd	sp!, {r4, lr}
 1955 0d24 1EFF2FE1 		bx	lr
 1956              	.L206:
 1957              		.align	2
 1958              	.L205:
 1959 0d28 008002E0 		.word	-536707072
 1960 0d2c 00C002E0 		.word	-536690688
 1961              	.LFE25:
 1963              		.align	2
 1964              		.global	initializeMP3Player
 1966              	initializeMP3Player:
 1967              	.LFB24:
 1968              		.loc 1 715 0
 1969              		@ Function supports interworking.
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 0, uses_anonymous_args = 0
 1972 0d30 04E02DE5 		str	lr, [sp, #-4]!
 1973              	.LCFI25:
 1974              		.loc 1 716 0
 1975 0d34 FEFFFFEB 		bl	vs1002Config
 1976              		.loc 1 717 0
 1977 0d38 FEFFFFEB 		bl	vs1002Reset
 1978              		.loc 1 718 0
 1979 0d3c FEFFFFEB 		bl	vs1002Init
 1980              		.loc 1 719 0
 1981 0d40 0500A0E3 		mov	r0, #5
 1982 0d44 FEFFFFEB 		bl	lowerVolume
 1983              		.loc 1 720 0
 1984 0d48 FEFFFFEB 		bl	vs1002Finish
 1985              		.loc 1 721 0
 1986 0d4c 04E09DE4 		ldr	lr, [sp], #4
 1987 0d50 1EFF2FE1 		bx	lr
 1988              	.LFE24:
 1990              		.align	2
 1991              		.global	changeRadioFrequency
 1993              	changeRadioFrequency:
 1994              	.LFB23:
 1995              		.loc 1 701 0
 1996              		@ Function supports interworking.
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              	.LVL71:
 2000              		.loc 1 702 0
 2001 0d54 30109FE5 		ldr	r1, .L212
 2002 0d58 002091E5 		ldr	r2, [r1, #0]
 2003 0d5c DD3F42E2 		sub	r3, r2, #884
 2004 0d60 023043E2 		sub	r3, r3, #2
 2005 0d64 BC0053E3 		cmp	r3, #188
 2006              		.loc 1 703 0
 2007 0d68 02308090 		addls	r3, r0, r2
 2008 0d6c 00308195 		strls	r3, [r1, #0]
 2009              		.loc 1 701 0
 2010 0d70 04E02DE5 		str	lr, [sp, #-4]!
 2011              	.LCFI26:
 2012              		.loc 1 705 0
 2013 0d74 FEFFFFEB 		bl	displayRadioMenu
 2014              	.LVL72:
 2015              		.loc 1 706 0
 2016 0d78 0C309FE5 		ldr	r3, .L212
 2017 0d7c 000093E5 		ldr	r0, [r3, #0]
 2018 0d80 FEFFFFEB 		bl	ns73SetChannel
 2019              		.loc 1 707 0
 2020 0d84 04E09DE4 		ldr	lr, [sp], #4
 2021 0d88 1EFF2FE1 		bx	lr
 2022              	.L213:
 2023              		.align	2
 2024              	.L212:
 2025 0d8c 00000000 		.word	radio_channel
 2026              	.LFE23:
 2028              		.align	2
 2029              		.global	setRadioFrequency
 2031              	setRadioFrequency:
 2032              	.LFB22:
 2033              		.loc 1 692 0
 2034              		@ Function supports interworking.
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037              	.LVL73:
 2038              	.LBB191:
 2039              	.LBB193:
 2040              		.loc 1 828 0
 2041 0d90 4C209FE5 		ldr	r2, .L218
 2042 0d94 1C3092E5 		ldr	r3, [r2, #28]
 2043 0d98 013283E3 		orr	r3, r3, #268435456
 2044 0d9c 1C3082E5 		str	r3, [r2, #28]
 2045              	.LBB194:
 2046              	.LBB195:
 2047              		.loc 1 238 0
 2048 0da0 40209FE5 		ldr	r2, .L218+4
 2049              	.LBE195:
 2050              	.LBE194:
 2051              	.LBE193:
 2052              	.LBE191:
 2053              		.loc 1 692 0
 2054 0da4 10402DE9 		stmfd	sp!, {r4, lr}
 2055              	.LCFI27:
 2056              	.LBB199:
 2057              	.LBB192:
 2058              		.loc 1 828 0
 2059 0da8 0030A0E3 		mov	r3, #0
 2060              	.LVL74:
 2061              	.LBE192:
 2062              	.LBE199:
 2063              		.loc 1 692 0
 2064 0dac 0040A0E1 		mov	r4, r0
 2065              	.LVL75:
 2066              	.L215:
 2067              	.LBB200:
 2068              	.LBB198:
 2069              	.LBB197:
 2070              	.LBB196:
 2071              		.loc 1 238 0
 2072              	@ 238 "main.c" 1
 2073 0db0 0000A0E1 		nop
 2074              	@ 0 "" 2
 2075 0db4 013083E2 		add	r3, r3, #1
 2076 0db8 020053E1 		cmp	r3, r2
 2077 0dbc FBFFFF1A 		bne	.L215
 2078              	.LBE196:
 2079              	.LBE197:
 2080              	.LBE198:
 2081              	.LBE200:
 2082              		.loc 1 694 0
 2083 0dc0 FEFFFFEB 		bl	ns73Config
 2084              	.LVL76:
 2085              		.loc 1 695 0
 2086 0dc4 0400A0E1 		mov	r0, r4
 2087 0dc8 FEFFFFEB 		bl	ns73SetChannel
 2088              	.LBB201:
 2089              	.LBB202:
 2090              		.loc 1 835 0
 2091 0dcc 10209FE5 		ldr	r2, .L218
 2092 0dd0 143092E5 		ldr	r3, [r2, #20]
 2093 0dd4 013283E3 		orr	r3, r3, #268435456
 2094 0dd8 143082E5 		str	r3, [r2, #20]
 2095              	.LBE202:
 2096              	.LBE201:
 2097              		.loc 1 697 0
 2098 0ddc 1040BDE8 		ldmfd	sp!, {r4, lr}
 2099 0de0 1EFF2FE1 		bx	lr
 2100              	.L219:
 2101              		.align	2
 2102              	.L218:
 2103 0de4 008002E0 		.word	-536707072
 2104 0de8 40420F00 		.word	1000000
 2105              	.LFE22:
 2107              		.section	.rodata.str1.1
 2108              	.LC1:
 2109 0003 4F666600 		.ascii	"Off\000"
 2110              		.text
 2111              		.align	2
 2112              		.global	disableRadio
 2114              	disableRadio:
 2115              	.LFB21:
 2116              		.loc 1 676 0
 2117              		@ Function supports interworking.
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 0, uses_anonymous_args = 0
 2120 0dec 30402DE9 		stmfd	sp!, {r4, r5, lr}
 2121              	.LCFI28:
 2122              		.loc 1 677 0
 2123 0df0 98309FE5 		ldr	r3, .L224
 2124              		.loc 1 680 0
 2125 0df4 98509FE5 		ldr	r5, .L224+4
 2126              		.loc 1 677 0
 2127 0df8 0040A0E3 		mov	r4, #0
 2128 0dfc 0040C3E5 		strb	r4, [r3, #0]
 2129              		.loc 1 680 0
 2130 0e00 002095E5 		ldr	r2, [r5, #0]
 2131              		.loc 1 676 0
 2132 0e04 08D04DE2 		sub	sp, sp, #8
 2133              	.LCFI29:
 2134              		.loc 1 680 0
 2135 0e08 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2136 0e0c 0200A0E3 		mov	r0, #2
 2137 0e10 0410A0E1 		mov	r1, r4
 2138 0e14 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2139 0e18 FEFFFFEB 		bl	LCDSetRowColor
 2140              		.loc 1 681 0
 2141 0e1c 003095E5 		ldr	r3, [r5, #0]
 2142 0e20 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2143 0e24 00408DE5 		str	r4, [sp, #0]
 2144 0e28 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2145 0e2c 64009FE5 		ldr	r0, .L224+8
 2146 0e30 0230A0E3 		mov	r3, #2
 2147 0e34 0410A0E1 		mov	r1, r4
 2148 0e38 04C08DE5 		str	ip, [sp, #4]
 2149 0e3c FEFFFFEB 		bl	LCDPrintString
 2150              	.LBB203:
 2151              	.LBB204:
 2152              		.loc 1 828 0
 2153 0e40 54209FE5 		ldr	r2, .L224+12
 2154 0e44 1C3092E5 		ldr	r3, [r2, #28]
 2155 0e48 013283E3 		orr	r3, r3, #268435456
 2156 0e4c 1C3082E5 		str	r3, [r2, #28]
 2157              	.LBB205:
 2158              	.LBB206:
 2159              		.loc 1 238 0
 2160 0e50 48309FE5 		ldr	r3, .L224+16
 2161              	.L221:
 2162              	@ 238 "main.c" 1
 2163 0e54 0000A0E1 		nop
 2164              	@ 0 "" 2
 2165 0e58 014084E2 		add	r4, r4, #1
 2166              	.LVL77:
 2167 0e5c 030054E1 		cmp	r4, r3
 2168 0e60 FBFFFF1A 		bne	.L221
 2169              	.LBE206:
 2170              	.LBE205:
 2171              	.LBE204:
 2172              	.LBE203:
 2173              		.loc 1 685 0
 2174 0e64 FEFFFFEB 		bl	ns73Config
 2175              		.loc 1 686 0
 2176 0e68 0000A0E3 		mov	r0, #0
 2177 0e6c 0410A0E3 		mov	r1, #4
 2178 0e70 FEFFFFEB 		bl	ns73Send
 2179              	.LBB207:
 2180              	.LBB208:
 2181              		.loc 1 835 0
 2182 0e74 20209FE5 		ldr	r2, .L224+12
 2183 0e78 143092E5 		ldr	r3, [r2, #20]
 2184 0e7c 013283E3 		orr	r3, r3, #268435456
 2185 0e80 143082E5 		str	r3, [r2, #20]
 2186              	.LBE208:
 2187              	.LBE207:
 2188              		.loc 1 688 0
 2189 0e84 08D08DE2 		add	sp, sp, #8
 2190 0e88 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 2191 0e8c 1EFF2FE1 		bx	lr
 2192              	.L225:
 2193              		.align	2
 2194              	.L224:
 2195 0e90 00000000 		.word	radio_enable
 2196 0e94 7C040000 		.word	current_display
 2197 0e98 03000000 		.word	.LC1
 2198 0e9c 008002E0 		.word	-536707072
 2199 0ea0 40420F00 		.word	1000000
 2200              	.LFE21:
 2202              		.section	.rodata.str1.1
 2203              	.LC2:
 2204 0007 4F6E00   		.ascii	"On\000"
 2205              		.text
 2206              		.align	2
 2207              		.global	enableRadio
 2209              	enableRadio:
 2210              	.LFB20:
 2211              		.loc 1 660 0
 2212              		@ Function supports interworking.
 2213              		@ args = 0, pretend = 0, frame = 0
 2214              		@ frame_needed = 0, uses_anonymous_args = 0
 2215 0ea4 10402DE9 		stmfd	sp!, {r4, lr}
 2216              	.LCFI30:
 2217              		.loc 1 661 0
 2218 0ea8 9C309FE5 		ldr	r3, .L230
 2219              		.loc 1 664 0
 2220 0eac 9C409FE5 		ldr	r4, .L230+4
 2221              		.loc 1 661 0
 2222 0eb0 0120A0E3 		mov	r2, #1
 2223 0eb4 0020C3E5 		strb	r2, [r3, #0]
 2224              		.loc 1 664 0
 2225 0eb8 002094E5 		ldr	r2, [r4, #0]
 2226              		.loc 1 660 0
 2227 0ebc 08D04DE2 		sub	sp, sp, #8
 2228              	.LCFI31:
 2229              		.loc 1 664 0
 2230 0ec0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2231 0ec4 0200A0E3 		mov	r0, #2
 2232 0ec8 0010A0E3 		mov	r1, #0
 2233 0ecc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2234 0ed0 FEFFFFEB 		bl	LCDSetRowColor
 2235              		.loc 1 665 0
 2236 0ed4 003094E5 		ldr	r3, [r4, #0]
 2237 0ed8 0040A0E3 		mov	r4, #0
 2238 0edc 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2239 0ee0 00408DE5 		str	r4, [sp, #0]
 2240 0ee4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2241 0ee8 64009FE5 		ldr	r0, .L230+8
 2242 0eec 0230A0E3 		mov	r3, #2
 2243 0ef0 0410A0E1 		mov	r1, r4
 2244 0ef4 04C08DE5 		str	ip, [sp, #4]
 2245 0ef8 FEFFFFEB 		bl	LCDPrintString
 2246              	.LBB209:
 2247              	.LBB210:
 2248              		.loc 1 828 0
 2249 0efc 54209FE5 		ldr	r2, .L230+12
 2250 0f00 1C3092E5 		ldr	r3, [r2, #28]
 2251 0f04 013283E3 		orr	r3, r3, #268435456
 2252 0f08 1C3082E5 		str	r3, [r2, #28]
 2253              	.LBB211:
 2254              	.LBB212:
 2255              		.loc 1 238 0
 2256 0f0c 48309FE5 		ldr	r3, .L230+16
 2257              	.L227:
 2258              	@ 238 "main.c" 1
 2259 0f10 0000A0E1 		nop
 2260              	@ 0 "" 2
 2261 0f14 014084E2 		add	r4, r4, #1
 2262              	.LVL78:
 2263 0f18 030054E1 		cmp	r4, r3
 2264 0f1c FBFFFF1A 		bne	.L227
 2265              	.LBE212:
 2266              	.LBE211:
 2267              	.LBE210:
 2268              	.LBE209:
 2269              		.loc 1 669 0
 2270 0f20 FEFFFFEB 		bl	ns73Config
 2271              		.loc 1 670 0
 2272 0f24 0000A0E3 		mov	r0, #0
 2273 0f28 8110A0E3 		mov	r1, #129
 2274 0f2c FEFFFFEB 		bl	ns73Send
 2275              	.LBB213:
 2276              	.LBB214:
 2277              		.loc 1 835 0
 2278 0f30 20209FE5 		ldr	r2, .L230+12
 2279 0f34 143092E5 		ldr	r3, [r2, #20]
 2280 0f38 013283E3 		orr	r3, r3, #268435456
 2281 0f3c 143082E5 		str	r3, [r2, #20]
 2282              	.LBE214:
 2283              	.LBE213:
 2284              		.loc 1 672 0
 2285 0f40 08D08DE2 		add	sp, sp, #8
 2286 0f44 1040BDE8 		ldmfd	sp!, {r4, lr}
 2287 0f48 1EFF2FE1 		bx	lr
 2288              	.L231:
 2289              		.align	2
 2290              	.L230:
 2291 0f4c 00000000 		.word	radio_enable
 2292 0f50 7C040000 		.word	current_display
 2293 0f54 07000000 		.word	.LC2
 2294 0f58 008002E0 		.word	-536707072
 2295 0f5c 40420F00 		.word	1000000
 2296              	.LFE20:
 2298              		.align	2
 2299              		.global	initializeRadio
 2301              	initializeRadio:
 2302              	.LFB19:
 2303              		.loc 1 646 0
 2304              		@ Function supports interworking.
 2305              		@ args = 0, pretend = 0, frame = 0
 2306              		@ frame_needed = 0, uses_anonymous_args = 0
 2307              	.LVL79:
 2308              	.LBB215:
 2309              	.LBB217:
 2310              		.loc 1 828 0
 2311 0f60 68209FE5 		ldr	r2, .L238
 2312 0f64 1C3092E5 		ldr	r3, [r2, #28]
 2313 0f68 013283E3 		orr	r3, r3, #268435456
 2314 0f6c 1C3082E5 		str	r3, [r2, #28]
 2315              	.LBB218:
 2316              	.LBB219:
 2317              		.loc 1 238 0
 2318 0f70 5C209FE5 		ldr	r2, .L238+4
 2319              	.LBE219:
 2320              	.LBE218:
 2321              	.LBE217:
 2322              	.LBE215:
 2323              		.loc 1 646 0
 2324 0f74 10402DE9 		stmfd	sp!, {r4, lr}
 2325              	.LCFI32:
 2326              	.LBB223:
 2327              	.LBB216:
 2328              		.loc 1 828 0
 2329 0f78 0030A0E3 		mov	r3, #0
 2330              	.LVL80:
 2331              	.LBE216:
 2332              	.LBE223:
 2333              		.loc 1 646 0
 2334 0f7c 0040A0E1 		mov	r4, r0
 2335              	.LVL81:
 2336              	.L233:
 2337              	.LBB224:
 2338              	.LBB222:
 2339              	.LBB221:
 2340              	.LBB220:
 2341              		.loc 1 238 0
 2342              	@ 238 "main.c" 1
 2343 0f80 0000A0E1 		nop
 2344              	@ 0 "" 2
 2345 0f84 013083E2 		add	r3, r3, #1
 2346 0f88 020053E1 		cmp	r3, r2
 2347 0f8c FBFFFF1A 		bne	.L233
 2348              	.LBE220:
 2349              	.LBE221:
 2350              	.LBE222:
 2351              	.LBE224:
 2352              		.loc 1 650 0
 2353 0f90 FEFFFFEB 		bl	ns73Config
 2354              	.LVL82:
 2355              		.loc 1 651 0
 2356 0f94 FEFFFFEB 		bl	ns73Init
 2357              		.loc 1 652 0
 2358 0f98 0400A0E1 		mov	r0, r4
 2359 0f9c FEFFFFEB 		bl	ns73SetChannel
 2360              	.LBB225:
 2361              	.LBB226:
 2362              		.loc 1 835 0
 2363 0fa0 28209FE5 		ldr	r2, .L238
 2364 0fa4 143092E5 		ldr	r3, [r2, #20]
 2365 0fa8 013283E3 		orr	r3, r3, #268435456
 2366 0fac 143082E5 		str	r3, [r2, #20]
 2367              	.LBE226:
 2368              	.LBE225:
 2369              	.LBB228:
 2370              	.LBB229:
 2371              		.loc 1 238 0
 2372 0fb0 1C209FE5 		ldr	r2, .L238+4
 2373              	.LBE229:
 2374              	.LBE228:
 2375              	.LBB231:
 2376              	.LBB227:
 2377              		.loc 1 835 0
 2378 0fb4 0030A0E3 		mov	r3, #0
 2379              	.LVL83:
 2380              	.L234:
 2381              	.LBE227:
 2382              	.LBE231:
 2383              	.LBB232:
 2384              	.LBB230:
 2385              		.loc 1 238 0
 2386              	@ 238 "main.c" 1
 2387 0fb8 0000A0E1 		nop
 2388              	@ 0 "" 2
 2389 0fbc 013083E2 		add	r3, r3, #1
 2390 0fc0 020053E1 		cmp	r3, r2
 2391 0fc4 FBFFFF1A 		bne	.L234
 2392              	.LBE230:
 2393              	.LBE232:
 2394              		.loc 1 656 0
 2395 0fc8 1040BDE8 		ldmfd	sp!, {r4, lr}
 2396 0fcc 1EFF2FE1 		bx	lr
 2397              	.L239:
 2398              		.align	2
 2399              	.L238:
 2400 0fd0 008002E0 		.word	-536707072
 2401 0fd4 40420F00 		.word	1000000
 2402              	.LFE19:
 2404              		.align	2
 2405              		.global	closeSong
 2407              	closeSong:
 2408              	.LFB10:
 2409              		.loc 1 407 0
 2410              		@ Function supports interworking.
 2411              		@ args = 0, pretend = 0, frame = 0
 2412              		@ frame_needed = 0, uses_anonymous_args = 0
 2413              	.LVL84:
 2414 0fd8 10402DE9 		stmfd	sp!, {r4, lr}
 2415              	.LCFI33:
 2416              	.LBB233:
 2417              	.LBB234:
 2418              		.loc 1 817 0
 2419 0fdc 28409FE5 		ldr	r4, .L242
 2420 0fe0 003094E5 		ldr	r3, [r4, #0]
 2421 0fe4 153C83E3 		orr	r3, r3, #5376
 2422 0fe8 003084E5 		str	r3, [r4, #0]
 2423              	.LBE234:
 2424              	.LBE233:
 2425              		.loc 1 409 0
 2426 0fec 340090E5 		ldr	r0, [r0, #52]
 2427              	.LVL85:
 2428 0ff0 FEFFFFEB 		bl	fat16_close_file
 2429              	.LBB235:
 2430              	.LBB236:
 2431              		.loc 1 823 0
 2432 0ff4 003094E5 		ldr	r3, [r4, #0]
 2433 0ff8 FF3DC3E3 		bic	r3, r3, #16320
 2434 0ffc 3030C3E3 		bic	r3, r3, #48
 2435 1000 003084E5 		str	r3, [r4, #0]
 2436              	.LBE236:
 2437              	.LBE235:
 2438              		.loc 1 411 0
 2439 1004 1040BDE8 		ldmfd	sp!, {r4, lr}
 2440 1008 1EFF2FE1 		bx	lr
 2441              	.L243:
 2442              		.align	2
 2443              	.L242:
 2444 100c 00C002E0 		.word	-536690688
 2445              	.LFE10:
 2447              		.align	2
 2448              		.global	stopMP3Player
 2450              	stopMP3Player:
 2451              	.LFB27:
 2452              		.loc 1 754 0
 2453              		@ Function supports interworking.
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 2456              	.LBB237:
 2457              	.LBB238:
 2458              		.loc 1 924 0
 2459 1010 2020A0E3 		mov	r2, #32
 2460 1014 0030E0E3 		mvn	r3, #0
 2461 1018 EB2F03E5 		str	r2, [r3, #-4075]
 2462              	.LBE238:
 2463              	.LBE237:
 2464              		.loc 1 757 0
 2465 101c 74309FE5 		ldr	r3, .L248
 2466 1020 0222A0E3 		mov	r2, #536870912
 2467              		.loc 1 754 0
 2468 1024 10402DE9 		stmfd	sp!, {r4, lr}
 2469              	.LCFI34:
 2470              		.loc 1 757 0
 2471 1028 042083E5 		str	r2, [r3, #4]
 2472              		.loc 1 758 0
 2473 102c FEFFFFEB 		bl	vs1002Config
 2474              		.loc 1 759 0
 2475 1030 0000A0E3 		mov	r0, #0
 2476 1034 0810A0E3 		mov	r1, #8
 2477 1038 FEFFFFEB 		bl	vs1002SCIWrite
 2478 103c 0040A0E3 		mov	r4, #0
 2479              	.LVL86:
 2480              	.L245:
 2481              	.LBB239:
 2482              		.loc 1 760 0
 2483 1040 0000A0E3 		mov	r0, #0
 2484 1044 014084E2 		add	r4, r4, #1
 2485 1048 0010A0E1 		mov	r1, r0
 2486 104c FEFFFFEB 		bl	vs1002SCIWrite
 2487 1050 960054E3 		cmp	r4, #150
 2488 1054 F9FFFF1A 		bne	.L245
 2489              	.LBE239:
 2490              		.loc 1 761 0
 2491 1058 FEFFFFEB 		bl	vs1002Finish
 2492              		.loc 1 762 0
 2493 105c 34209FE5 		ldr	r2, .L248
 2494 1060 083092E5 		ldr	r3, [r2, #8]
 2495 1064 033783E3 		orr	r3, r3, #786432
 2496 1068 503083E3 		orr	r3, r3, #80
 2497 106c 083082E5 		str	r3, [r2, #8]
 2498              		.loc 1 763 0
 2499 1070 24009FE5 		ldr	r0, .L248+4
 2500 1074 FEFFFFEB 		bl	closeSong
 2501              		.loc 1 764 0
 2502 1078 20309FE5 		ldr	r3, .L248+8
 2503 107c 0020A0E3 		mov	r2, #0
 2504 1080 0020C3E5 		strb	r2, [r3, #0]
 2505              	.LBB240:
 2506              	.LBB241:
 2507              		.loc 1 943 0
 2508 1084 102082E2 		add	r2, r2, #16
 2509 1088 0030E0E3 		mvn	r3, #0
 2510 108c EF2F03E5 		str	r2, [r3, #-4079]
 2511              	.LBE241:
 2512              	.LBE240:
 2513              		.loc 1 767 0
 2514 1090 1040BDE8 		ldmfd	sp!, {r4, lr}
 2515 1094 1EFF2FE1 		bx	lr
 2516              	.L249:
 2517              		.align	2
 2518              	.L248:
 2519 1098 008002E0 		.word	-536707072
 2520 109c 14000000 		.word	current_song
 2521 10a0 01000000 		.word	file_is_open
 2522              	.LFE27:
 2524              		.align	2
 2525              		.global	loadSongInfo
 2527              	loadSongInfo:
 2528              	.LFB9:
 2529              		.loc 1 372 0
 2530              		@ Function supports interworking.
 2531              		@ args = 0, pretend = 0, frame = 0
 2532              		@ frame_needed = 0, uses_anonymous_args = 0
 2533              	.LVL87:
 2534 10a4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2535              	.LCFI35:
 2536              		.loc 1 372 0
 2537 10a8 0020A0E3 		mov	r2, #0
 2538              	.LVL88:
 2539 10ac 0040A0E1 		mov	r4, r0
 2540              	.LVL89:
 2541              	.L251:
 2542              	.LBB242:
 2543              		.loc 1 375 0
 2544 10b0 083091E5 		ldr	r3, [r1, #8]
 2545 10b4 833281E0 		add	r3, r1, r3, asl #5
 2546 10b8 023083E0 		add	r3, r3, r2
 2547 10bc 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2548              		.loc 1 374 0
 2549 10c0 012082E2 		add	r2, r2, #1
 2550 10c4 1E0052E3 		cmp	r2, #30
 2551              		.loc 1 375 0
 2552 10c8 1630C0E5 		strb	r3, [r0, #22]
 2553              		.loc 1 374 0
 2554 10cc 010080E2 		add	r0, r0, #1
 2555 10d0 F6FFFF1A 		bne	.L251
 2556 10d4 0020A0E3 		mov	r2, #0
 2557              	.LVL90:
 2558              	.LBE242:
 2559              	.LBB243:
 2560              		.loc 1 380 0
 2561 10d8 0210A0E1 		mov	r1, r2
 2562              	.LVL91:
 2563              	.L254:
 2564              		.loc 1 379 0
 2565 10dc 023084E0 		add	r3, r4, r2
 2566 10e0 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2567 10e4 150052E3 		cmp	r2, #21
 2568 10e8 2E005313 		cmpne	r3, #46
 2569              		.loc 1 380 0
 2570 10ec 0210C407 		streqb	r1, [r4, r2]
 2571 10f0 1620A003 		moveq	r2, #22
 2572              		.loc 1 383 0
 2573 10f4 0230C417 		strneb	r3, [r4, r2]
 2574              		.loc 1 378 0
 2575 10f8 012082E2 		add	r2, r2, #1
 2576 10fc 150052E3 		cmp	r2, #21
 2577 1100 F5FFFFDA 		ble	.L254
 2578              	.LBE243:
 2579              	.LBB244:
 2580              	.LBB246:
 2581              		.loc 1 817 0
 2582 1104 6C609FE5 		ldr	r6, .L260
 2583 1108 003096E5 		ldr	r3, [r6, #0]
 2584              	.LBE246:
 2585              	.LBE244:
 2586              		.loc 1 390 0
 2587 110c 165084E2 		add	r5, r4, #22
 2588              	.LBB248:
 2589              	.LBB245:
 2590              		.loc 1 817 0
 2591 1110 153C83E3 		orr	r3, r3, #5376
 2592              	.LBE245:
 2593              	.LBE248:
 2594              		.loc 1 390 0
 2595 1114 0500A0E1 		mov	r0, r5
 2596              	.LBB249:
 2597              	.LBB247:
 2598              		.loc 1 817 0
 2599 1118 003086E5 		str	r3, [r6, #0]
 2600              	.LBE247:
 2601              	.LBE249:
 2602              		.loc 1 390 0
 2603 111c FEFFFFEB 		bl	root_file_exists
 2604              	.LVL92:
 2605 1120 000050E3 		cmp	r0, #0
 2606              	.LBB250:
 2607              	.LBB251:
 2608              		.loc 1 823 0
 2609 1124 00309605 		ldreq	r3, [r6, #0]
 2610 1128 FF3DC303 		biceq	r3, r3, #16320
 2611 112c 3030C303 		biceq	r3, r3, #48
 2612 1130 00308605 		streq	r3, [r6, #0]
 2613 1134 0D00000A 		beq	.L256
 2614              	.L255:
 2615              	.LBE251:
 2616              	.LBE250:
 2617              		.loc 1 395 0
 2618 1138 0500A0E1 		mov	r0, r5
 2619 113c FEFFFFEB 		bl	root_open
 2620 1140 340084E5 		str	r0, [r4, #52]
 2621              		.loc 1 396 0
 2622 1144 FEFFFFEB 		bl	fat16_file_size
 2623              		.loc 1 397 0
 2624 1148 3D1084E2 		add	r1, r4, #61
 2625              		.loc 1 396 0
 2626 114c 380084E5 		str	r0, [r4, #56]
 2627              		.loc 1 397 0
 2628 1150 2020A0E3 		mov	r2, #32
 2629 1154 340094E5 		ldr	r0, [r4, #52]
 2630 1158 FEFFFFEB 		bl	fat16_read_file
 2631              	.LBB252:
 2632              	.LBB253:
 2633              		.loc 1 823 0
 2634 115c 003096E5 		ldr	r3, [r6, #0]
 2635 1160 FF3DC3E3 		bic	r3, r3, #16320
 2636 1164 3030C3E3 		bic	r3, r3, #48
 2637 1168 003086E5 		str	r3, [r6, #0]
 2638 116c 0100A0E3 		mov	r0, #1
 2639              	.L256:
 2640              	.LBE253:
 2641              	.LBE252:
 2642              		.loc 1 402 0
 2643 1170 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2644 1174 1EFF2FE1 		bx	lr
 2645              	.L261:
 2646              		.align	2
 2647              	.L260:
 2648 1178 00C002E0 		.word	-536690688
 2649              	.LFE9:
 2651              		.align	2
 2652              		.global	handleMiddleButton
 2654              	handleMiddleButton:
 2655              	.LFB16:
 2656              		.loc 1 530 0
 2657              		@ Function supports interworking.
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 2660 117c F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 2661              	.LCFI36:
 2662              	.LBB254:
 2663              	.LBB255:
 2664              		.loc 1 936 0
 2665 1180 1020A0E3 		mov	r2, #16
 2666 1184 0030E0E3 		mvn	r3, #0
 2667 1188 EB2F03E5 		str	r2, [r3, #-4075]
 2668              	.LBB256:
 2669              	.LBB257:
 2670              		.loc 1 238 0
 2671 118c 04239FE5 		ldr	r2, .L291
 2672              	.LBE257:
 2673              	.LBE256:
 2674              	.LBE255:
 2675              	.LBE254:
 2676              		.loc 1 530 0
 2677 1190 08D04DE2 		sub	sp, sp, #8
 2678              	.LCFI37:
 2679              	.LBB261:
 2680              	.LBB260:
 2681              		.loc 1 936 0
 2682 1194 013083E2 		add	r3, r3, #1
 2683              	.LVL93:
 2684              	.L263:
 2685              	.LBB259:
 2686              	.LBB258:
 2687              		.loc 1 238 0
 2688              	@ 238 "main.c" 1
 2689 1198 0000A0E1 		nop
 2690              	@ 0 "" 2
 2691 119c 013083E2 		add	r3, r3, #1
 2692 11a0 020053E1 		cmp	r3, r2
 2693 11a4 FBFFFF1A 		bne	.L263
 2694              	.LBE258:
 2695              	.LBE259:
 2696              	.LBE260:
 2697              	.LBE261:
 2698              		.loc 1 534 0
 2699 11a8 EC729FE5 		ldr	r7, .L291+4
 2700 11ac EC329FE5 		ldr	r3, .L291+8
 2701              	.LVL94:
 2702 11b0 001097E5 		ldr	r1, [r7, #0]
 2703 11b4 030051E1 		cmp	r1, r3
 2704 11b8 2500001A 		bne	.L264
 2705              		.loc 1 535 0
 2706 11bc E0529FE5 		ldr	r5, .L291+12
 2707 11c0 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2708 11c4 000053E3 		cmp	r3, #0
 2709 11c8 1F00001A 		bne	.L265
 2710              		.loc 1 536 0
 2711 11cc D4029FE5 		ldr	r0, .L291+16
 2712 11d0 FEFFFFEB 		bl	loadSongInfo
 2713              		.loc 1 537 0
 2714 11d4 000050E3 		cmp	r0, #0
 2715              		.loc 1 536 0
 2716 11d8 0040A0E1 		mov	r4, r0
 2717 11dc 0000C5E5 		strb	r0, [r5, #0]
 2718              		.loc 1 537 0
 2719 11e0 1700001A 		bne	.L266
 2720              		.loc 1 538 0
 2721 11e4 C0329FE5 		ldr	r3, .L291+20
 2722 11e8 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2723 11ec FEFFFFEB 		bl	LCDClear
 2724              		.loc 1 539 0
 2725 11f0 00408DE5 		str	r4, [sp, #0]
 2726 11f4 001097E5 		ldr	r1, [r7, #0]
 2727 11f8 B0329FE5 		ldr	r3, .L291+24
 2728 11fc 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2729 1200 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2730 1204 A8029FE5 		ldr	r0, .L291+28
 2731 1208 0130A0E3 		mov	r3, #1
 2732 120c 0410A0E1 		mov	r1, r4
 2733 1210 04C08DE5 		str	ip, [sp, #4]
 2734 1214 FEFFFFEB 		bl	LCDPrintString
 2735              	.LBB262:
 2736              	.LBB263:
 2737              		.loc 1 238 0
 2738 1218 98329FE5 		ldr	r3, .L291+32
 2739              	.LBE263:
 2740              	.LBE262:
 2741              		.loc 1 539 0
 2742 121c 0400A0E1 		mov	r0, r4
 2743              	.LVL95:
 2744              	.L267:
 2745              	.LBB265:
 2746              	.LBB264:
 2747              		.loc 1 238 0
 2748              	@ 238 "main.c" 1
 2749 1220 0000A0E1 		nop
 2750              	@ 0 "" 2
 2751 1224 010080E2 		add	r0, r0, #1
 2752 1228 030050E1 		cmp	r0, r3
 2753 122c FBFFFF1A 		bne	.L267
 2754              	.LBE264:
 2755              	.LBE265:
 2756              		.loc 1 541 0
 2757 1230 78329FE5 		ldr	r3, .L291+24
 2758 1234 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2759              	.LVL96:
 2760 1238 FEFFFFEB 		bl	LCDClear
 2761              		.loc 1 542 0
 2762 123c 5C029FE5 		ldr	r0, .L291+8
 2763 1240 8C0000EA 		b	.L290
 2764              	.L266:
 2765              		.loc 1 544 0
 2766 1244 FEFFFFEB 		bl	startMP3Player
 2767 1248 8B0000EA 		b	.L268
 2768              	.L265:
 2769              		.loc 1 547 0
 2770 124c FEFFFFEB 		bl	stopMP3Player
 2771 1250 890000EA 		b	.L268
 2772              	.L264:
 2773              		.loc 1 550 0
 2774 1254 FEFFFFEB 		bl	clearScreen
 2775              		.loc 1 551 0
 2776 1258 003097E5 		ldr	r3, [r7, #0]
 2777 125c 0060A0E3 		mov	r6, #0
 2778 1260 080093E5 		ldr	r0, [r3, #8]
 2779 1264 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2780 1268 00608DE5 		str	r6, [sp, #0]
 2781 126c 800283E0 		add	r0, r3, r0, asl #5
 2782 1270 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2783              	.LBB266:
 2784              	.LBB267:
 2785              		.loc 1 930 0
 2786 1274 0050E0E3 		mvn	r5, #0
 2787              	.LBE267:
 2788              	.LBE266:
 2789              		.loc 1 551 0
 2790 1278 0130A0E3 		mov	r3, #1
 2791 127c 0C0080E2 		add	r0, r0, #12
 2792 1280 0610A0E1 		mov	r1, r6
 2793 1284 04C08DE5 		str	ip, [sp, #4]
 2794 1288 FEFFFFEB 		bl	LCDPrintString
 2795              	.LBB269:
 2796              	.LBB268:
 2797              		.loc 1 930 0
 2798 128c EF3F15E5 		ldr	r3, [r5, #-4079]
 2799 1290 103083E3 		orr	r3, r3, #16
 2800 1294 EF3F05E5 		str	r3, [r5, #-4079]
 2801              	.LBE268:
 2802              	.LBE269:
 2803              		.loc 1 553 0
 2804 1298 002097E5 		ldr	r2, [r7, #0]
 2805 129c 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 2806 12a0 010054E3 		cmp	r4, #1
 2807 12a4 2B00001A 		bne	.L269
 2808              	.LBB270:
 2809              	.LBB271:
 2810              		.loc 1 930 0
 2811 12a8 EF3F15E5 		ldr	r3, [r5, #-4079]
 2812 12ac 103083E3 		orr	r3, r3, #16
 2813 12b0 EF3F05E5 		str	r3, [r5, #-4079]
 2814              	.LBE271:
 2815              	.LBE270:
 2816              		.loc 1 555 0
 2817 12b4 0610A0E1 		mov	r1, r6
 2818 12b8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2819 12bc 0200A0E3 		mov	r0, #2
 2820 12c0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2821 12c4 FEFFFFEB 		bl	LCDSetRowColor
 2822              		.loc 1 556 0
 2823 12c8 00608DE5 		str	r6, [sp, #0]
 2824 12cc D8319FE5 		ldr	r3, .L291+20
 2825 12d0 001097E5 		ldr	r1, [r7, #0]
 2826 12d4 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2827 12d8 DC319FE5 		ldr	r3, .L291+36
 2828 12dc 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2829 12e0 D8019FE5 		ldr	r0, .L291+40
 2830 12e4 001093E5 		ldr	r1, [r3, #0]
 2831 12e8 0230A0E3 		mov	r3, #2
 2832 12ec 04C08DE5 		str	ip, [sp, #4]
 2833              	.LBB272:
 2834              	.LBB273:
 2835              		.loc 1 936 0
 2836 12f0 0540A0E1 		mov	r4, r5
 2837              	.LBE273:
 2838              	.LBE272:
 2839              		.loc 1 556 0
 2840 12f4 FEFFFFEB 		bl	LCDPrintString
 2841              		.loc 1 557 0
 2842 12f8 C4719FE5 		ldr	r7, .L291+44
 2843              	.LBB279:
 2844              	.LBB278:
 2845              		.loc 1 936 0
 2846 12fc 106086E2 		add	r6, r6, #16
 2847              	.LBB274:
 2848              	.LBB275:
 2849              		.loc 1 238 0
 2850 1300 90519FE5 		ldr	r5, .L291
 2851 1304 0F0000EA 		b	.L270
 2852              	.L274:
 2853              	.LBE275:
 2854              	.LBE274:
 2855              		.loc 1 936 0
 2856 1308 EB6F04E5 		str	r6, [r4, #-4075]
 2857 130c 0030A0E3 		mov	r3, #0
 2858              	.LVL97:
 2859              	.L271:
 2860              	.LBB277:
 2861              	.LBB276:
 2862              		.loc 1 238 0
 2863              	@ 238 "main.c" 1
 2864 1310 0000A0E1 		nop
 2865              	@ 0 "" 2
 2866 1314 013083E2 		add	r3, r3, #1
 2867 1318 050053E1 		cmp	r3, r5
 2868 131c FBFFFF1A 		bne	.L271
 2869              	.LBE276:
 2870              	.LBE277:
 2871              	.LBE278:
 2872              	.LBE279:
 2873              		.loc 1 559 0
 2874 1320 020050E3 		cmp	r0, #2
 2875 1324 0200001A 		bne	.L272
 2876              		.loc 1 560 0
 2877 1328 0100A0E3 		mov	r0, #1
 2878 132c FEFFFFEB 		bl	raiseVolume
 2879              	.LVL98:
 2880 1330 010000EA 		b	.L273
 2881              	.LVL99:
 2882              	.L272:
 2883              		.loc 1 561 0
 2884 1334 010050E3 		cmp	r0, #1
 2885              		.loc 1 562 0
 2886 1338 FEFFFF0B 		bleq	lowerVolume
 2887              	.LVL100:
 2888              	.L273:
 2889              	.LBB280:
 2890              	.LBB281:
 2891              		.loc 1 930 0
 2892 133c EF3F14E5 		ldr	r3, [r4, #-4079]
 2893              	.LVL101:
 2894 1340 103083E3 		orr	r3, r3, #16
 2895 1344 EF3F04E5 		str	r3, [r4, #-4079]
 2896              	.L270:
 2897              	.LBE281:
 2898              	.LBE280:
 2899              		.loc 1 557 0
 2900 1348 0000D7E5 		ldrb	r0, [r7, #0]	@ zero_extendqisi2
 2901 134c 020050E3 		cmp	r0, #2
 2902 1350 ECFFFF9A 		bls	.L274
 2903 1354 440000EA 		b	.L275
 2904              	.L269:
 2905              		.loc 1 567 0
 2906 1358 030054E3 		cmp	r4, #3
 2907 135c 1300001A 		bne	.L276
 2908              		.loc 1 568 0
 2909 1360 FEFFFFEB 		bl	displayRadioMenu
 2910              	.LBB282:
 2911              	.LBB284:
 2912              		.loc 1 930 0
 2913 1364 EF3F15E5 		ldr	r3, [r5, #-4079]
 2914              	.LBE284:
 2915              	.LBE282:
 2916              		.loc 1 569 0
 2917 1368 54219FE5 		ldr	r2, .L291+44
 2918              	.LBB286:
 2919              	.LBB283:
 2920              		.loc 1 930 0
 2921 136c 103083E3 		orr	r3, r3, #16
 2922              	.LBE283:
 2923              	.LBE286:
 2924              		.loc 1 569 0
 2925 1370 0060C2E5 		strb	r6, [r2, #0]
 2926              	.LBB287:
 2927              	.LBB289:
 2928              		.loc 1 936 0
 2929 1374 1000A0E3 		mov	r0, #16
 2930              	.LBE289:
 2931              	.LBE287:
 2932              	.LBB293:
 2933              	.LBB285:
 2934              		.loc 1 930 0
 2935 1378 EF3F05E5 		str	r3, [r5, #-4079]
 2936              	.LBE285:
 2937              	.LBE293:
 2938              	.LBB294:
 2939              	.LBB288:
 2940              		.loc 1 936 0
 2941 137c 0520A0E1 		mov	r2, r5
 2942              	.LBB290:
 2943              	.LBB291:
 2944              		.loc 1 238 0
 2945 1380 10119FE5 		ldr	r1, .L291
 2946 1384 060000EA 		b	.L277
 2947              	.LVL102:
 2948              	.L278:
 2949              	@ 238 "main.c" 1
 2950 1388 0000A0E1 		nop
 2951              	@ 0 "" 2
 2952 138c 013083E2 		add	r3, r3, #1
 2953 1390 010053E1 		cmp	r3, r1
 2954 1394 FBFFFF1A 		bne	.L278
 2955              	.LBE291:
 2956              	.LBE290:
 2957              	.LBE288:
 2958              	.LBE294:
 2959              	.LBB295:
 2960              	.LBB296:
 2961              		.loc 1 930 0
 2962 1398 EF3F12E5 		ldr	r3, [r2, #-4079]
 2963              	.LVL103:
 2964 139c 103083E3 		orr	r3, r3, #16
 2965 13a0 EF3F02E5 		str	r3, [r2, #-4079]
 2966              	.L277:
 2967              	.LBE296:
 2968              	.LBE295:
 2969              	.LBB297:
 2970              	.LBB292:
 2971              		.loc 1 936 0
 2972 13a4 EB0F02E5 		str	r0, [r2, #-4075]
 2973 13a8 0030A0E3 		mov	r3, #0
 2974              	.LVL104:
 2975 13ac F5FFFFEA 		b	.L278
 2976              	.LVL105:
 2977              	.L276:
 2978              	.LBE292:
 2979              	.LBE297:
 2980              		.loc 1 581 0
 2981 13b0 020054E3 		cmp	r4, #2
 2982 13b4 2C00001A 		bne	.L275
 2983              		.loc 1 582 0
 2984 13b8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2985 13bc 0610A0E1 		mov	r1, r6
 2986 13c0 0400A0E1 		mov	r0, r4
 2987 13c4 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2988 13c8 FEFFFFEB 		bl	LCDSetRowColor
 2989              		.loc 1 583 0
 2990 13cc F4309FE5 		ldr	r3, .L291+48
 2991 13d0 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2992 13d4 000051E3 		cmp	r1, #0
 2993 13d8 0700000A 		beq	.L279
 2994              		.loc 1 584 0
 2995 13dc 003097E5 		ldr	r3, [r7, #0]
 2996 13e0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2997 13e4 00608DE5 		str	r6, [sp, #0]
 2998 13e8 0610A0E1 		mov	r1, r6
 2999 13ec 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3000 13f0 D4009FE5 		ldr	r0, .L291+52
 3001 13f4 0430A0E1 		mov	r3, r4
 3002 13f8 050000EA 		b	.L289
 3003              	.L279:
 3004              		.loc 1 586 0
 3005 13fc 003097E5 		ldr	r3, [r7, #0]
 3006 1400 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 3007 1404 00108DE5 		str	r1, [sp, #0]
 3008 1408 C0009FE5 		ldr	r0, .L291+56
 3009 140c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3010 1410 0430A0E1 		mov	r3, r4
 3011              	.L289:
 3012 1414 04C08DE5 		str	ip, [sp, #4]
 3013 1418 FEFFFFEB 		bl	LCDPrintString
 3014              	.LBB298:
 3015              	.LBB300:
 3016              		.loc 1 930 0
 3017 141c 0010E0E3 		mvn	r1, #0
 3018 1420 EF2F11E5 		ldr	r2, [r1, #-4079]
 3019              	.LBE300:
 3020              	.LBE298:
 3021              		.loc 1 588 0
 3022 1424 98309FE5 		ldr	r3, .L291+44
 3023              	.LBB302:
 3024              	.LBB299:
 3025              		.loc 1 930 0
 3026 1428 102082E3 		orr	r2, r2, #16
 3027              	.LBE299:
 3028              	.LBE302:
 3029              		.loc 1 588 0
 3030 142c 0000A0E3 		mov	r0, #0
 3031 1430 0000C3E5 		strb	r0, [r3, #0]
 3032              	.LBB303:
 3033              	.LBB301:
 3034              		.loc 1 930 0
 3035 1434 EF2F01E5 		str	r2, [r1, #-4079]
 3036              	.LBE301:
 3037              	.LBE303:
 3038              	.LBB304:
 3039              	.LBB305:
 3040              		.loc 1 936 0
 3041 1438 100080E2 		add	r0, r0, #16
 3042              	.LBB306:
 3043              	.LBB307:
 3044              		.loc 1 238 0
 3045 143c 54209FE5 		ldr	r2, .L291
 3046 1440 060000EA 		b	.L281
 3047              	.LVL106:
 3048              	.L282:
 3049              	@ 238 "main.c" 1
 3050 1444 0000A0E1 		nop
 3051              	@ 0 "" 2
 3052 1448 013083E2 		add	r3, r3, #1
 3053 144c 020053E1 		cmp	r3, r2
 3054 1450 FBFFFF1A 		bne	.L282
 3055              	.LBE307:
 3056              	.LBE306:
 3057              	.LBE305:
 3058              	.LBE304:
 3059              	.LBB309:
 3060              	.LBB310:
 3061              		.loc 1 930 0
 3062 1454 EF3F11E5 		ldr	r3, [r1, #-4079]
 3063              	.LVL107:
 3064 1458 103083E3 		orr	r3, r3, #16
 3065 145c EF3F01E5 		str	r3, [r1, #-4079]
 3066              	.L281:
 3067              	.LBE310:
 3068              	.LBE309:
 3069              	.LBB311:
 3070              	.LBB308:
 3071              		.loc 1 936 0
 3072 1460 EB0F01E5 		str	r0, [r1, #-4075]
 3073 1464 0030A0E3 		mov	r3, #0
 3074              	.LVL108:
 3075 1468 F5FFFFEA 		b	.L282
 3076              	.LVL109:
 3077              	.L275:
 3078              	.LBE308:
 3079              	.LBE311:
 3080              		.loc 1 600 0
 3081 146c FEFFFFEB 		bl	clearScreen
 3082              		.loc 1 601 0
 3083 1470 24309FE5 		ldr	r3, .L291+4
 3084 1474 000093E5 		ldr	r0, [r3, #0]
 3085              	.L290:
 3086 1478 FEFFFFEB 		bl	printMenu
 3087              	.L268:
 3088              	.LBB312:
 3089              	.LBB313:
 3090              		.loc 1 930 0
 3091 147c 0020E0E3 		mvn	r2, #0
 3092 1480 EF3F12E5 		ldr	r3, [r2, #-4079]
 3093 1484 103083E3 		orr	r3, r3, #16
 3094 1488 EF3F02E5 		str	r3, [r2, #-4079]
 3095              	.LBE313:
 3096              	.LBE312:
 3097              		.loc 1 604 0
 3098 148c 08D08DE2 		add	sp, sp, #8
 3099 1490 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 3100 1494 1EFF2FE1 		bx	lr
 3101              	.L292:
 3102              		.align	2
 3103              	.L291:
 3104 1498 40420F00 		.word	1000000
 3105 149c 7C040000 		.word	current_display
 3106 14a0 74000000 		.word	file_manager
 3107 14a4 01000000 		.word	file_is_open
 3108 14a8 14000000 		.word	current_song
 3109 14ac 00000000 		.word	white
 3110 14b0 00000000 		.word	black
 3111 14b4 00000000 		.word	NotFound
 3112 14b8 80969800 		.word	10000000
 3113 14bc 00000000 		.word	volume_setting
 3114 14c0 00000000 		.word	.LC0
 3115 14c4 08000000 		.word	button_pressed
 3116 14c8 00000000 		.word	radio_enable
 3117 14cc 07000000 		.word	.LC2
 3118 14d0 03000000 		.word	.LC1
 3119              	.LFE16:
 3121              		.section	.rodata.str1.1
 3122              	.LC3:
 3123 000a 53442049 		.ascii	"SD Init Error\012\000"
 3123      6E697420 
 3123      4572726F 
 3123      720A00
 3124              	.LC4:
 3125 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 3125      70656E52 
 3125      6F6F7420 
 3125      4572726F 
 3125      720A00
 3126              		.text
 3127              		.align	2
 3128              		.global	bootUp
 3130              	bootUp:
 3131              	.LFB4:
 3132              		.loc 1 245 0
 3133              		@ Function supports interworking.
 3134              		@ args = 0, pretend = 0, frame = 0
 3135              		@ frame_needed = 0, uses_anonymous_args = 0
 3136 14d4 04E02DE5 		str	lr, [sp, #-4]!
 3137              	.LCFI38:
 3138              		.loc 1 246 0
 3139 14d8 90019FE5 		ldr	r0, .L299
 3140 14dc FEFFFFEB 		bl	rprintf_devopen
 3141              	.LBB314:
 3142              	.LBB315:
 3143              		.loc 1 238 0
 3144 14e0 8C219FE5 		ldr	r2, .L299+4
 3145              	.LBE315:
 3146              	.LBE314:
 3147              		.loc 1 246 0
 3148 14e4 0030A0E3 		mov	r3, #0
 3149              	.LVL110:
 3150              	.L294:
 3151              	.LBB317:
 3152              	.LBB316:
 3153              		.loc 1 238 0
 3154              	@ 238 "main.c" 1
 3155 14e8 0000A0E1 		nop
 3156              	@ 0 "" 2
 3157 14ec 013083E2 		add	r3, r3, #1
 3158 14f0 020053E1 		cmp	r3, r2
 3159 14f4 FBFFFF1A 		bne	.L294
 3160              	.LBE316:
 3161              	.LBE317:
 3162              		.loc 1 250 0
 3163 14f8 FEFFFFEB 		bl	sd_raw_init
 3164              	.LVL111:
 3165 14fc 000050E3 		cmp	r0, #0
 3166              		.loc 1 252 0
 3167 1500 70019F05 		ldreq	r0, .L299+8
 3168 1504 FEFFFF0B 		bleq	rprintf
 3169              	.L295:
 3170              		.loc 1 254 0
 3171 1508 FEFFFFEB 		bl	openroot
 3172 150c 000050E3 		cmp	r0, #0
 3173              		.loc 1 256 0
 3174 1510 64019F15 		ldrne	r0, .L299+12
 3175 1514 FEFFFF1B 		blne	rprintf
 3176              	.L296:
 3177              		.loc 1 261 0
 3178 1518 60219FE5 		ldr	r2, .L299+16
 3179 151c 083092E5 		ldr	r3, [r2, #8]
 3180 1520 013683E3 		orr	r3, r3, #1048576
 3181 1524 083082E5 		str	r3, [r2, #8]
 3182              		.loc 1 262 0
 3183 1528 083092E5 		ldr	r3, [r2, #8]
 3184 152c 0236C3E3 		bic	r3, r3, #2097152
 3185 1530 083082E5 		str	r3, [r2, #8]
 3186              		.loc 1 263 0
 3187 1534 48119FE5 		ldr	r1, .L299+20
 3188 1538 043091E5 		ldr	r3, [r1, #4]
 3189 153c 033B83E3 		orr	r3, r3, #3072
 3190 1540 043081E5 		str	r3, [r1, #4]
 3191              		.loc 1 264 0
 3192 1544 183092E5 		ldr	r3, [r2, #24]
 3193 1548 013483E3 		orr	r3, r3, #16777216
 3194 154c 033883E3 		orr	r3, r3, #196608
 3195 1550 183082E5 		str	r3, [r2, #24]
 3196              		.loc 1 267 0
 3197 1554 183092E5 		ldr	r3, [r2, #24]
 3198 1558 023483E3 		orr	r3, r3, #33554432
 3199 155c 183082E5 		str	r3, [r2, #24]
 3200              		.loc 1 268 0
 3201 1560 183092E5 		ldr	r3, [r2, #24]
 3202 1564 013283E3 		orr	r3, r3, #268435456
 3203 1568 183082E5 		str	r3, [r2, #24]
 3204              		.loc 1 271 0
 3205 156c 083092E5 		ldr	r3, [r2, #8]
 3206 1570 803083E3 		orr	r3, r3, #128
 3207 1574 083082E5 		str	r3, [r2, #8]
 3208              		.loc 1 274 0
 3209 1578 083092E5 		ldr	r3, [r2, #8]
 3210 157c 033B83E3 		orr	r3, r3, #3072
 3211 1580 083082E5 		str	r3, [r2, #8]
 3212              		.loc 1 275 0
 3213 1584 003091E5 		ldr	r3, [r1, #0]
 3214 1588 CF3483E3 		orr	r3, r3, #-822083584
 3215 158c 003081E5 		str	r3, [r1, #0]
 3216              		.loc 1 276 0
 3217 1590 033BA0E3 		mov	r3, #3072
 3218 1594 0C3082E5 		str	r3, [r2, #12]
 3219              		.loc 1 279 0
 3220 1598 083092E5 		ldr	r3, [r2, #8]
 3221 159c 033783E3 		orr	r3, r3, #786432
 3222 15a0 083082E5 		str	r3, [r2, #8]
 3223              	.LBB318:
 3224              	.LBB319:
 3225              		.loc 1 953 0
 3226 15a4 083092E5 		ldr	r3, [r2, #8]
 3227 15a8 073283E3 		orr	r3, r3, #1879048192
 3228 15ac 083082E5 		str	r3, [r2, #8]
 3229              		.loc 1 954 0
 3230 15b0 0232A0E3 		mov	r3, #536870912
 3231 15b4 043082E5 		str	r3, [r2, #4]
 3232              		.loc 1 955 0
 3233 15b8 033083E0 		add	r3, r3, r3
 3234 15bc 043082E5 		str	r3, [r2, #4]
 3235              		.loc 1 956 0
 3236 15c0 0D3283E2 		add	r3, r3, #-805306368
 3237 15c4 043082E5 		str	r3, [r2, #4]
 3238              	.LBE319:
 3239              	.LBE318:
 3240              		.loc 1 284 0
 3241 15c8 183092E5 		ldr	r3, [r2, #24]
 3242 15cc 0E36C3E3 		bic	r3, r3, #14680064
 3243 15d0 183082E5 		str	r3, [r2, #24]
 3244              		.loc 1 286 0
 3245 15d4 083092E5 		ldr	r3, [r2, #8]
 3246 15d8 0235C3E3 		bic	r3, r3, #8388608
 3247 15dc 083082E5 		str	r3, [r2, #8]
 3248              	.LBB320:
 3249              	.LBB321:
 3250              		.loc 1 900 0
 3251 15e0 A0309FE5 		ldr	r3, .L299+24
 3252 15e4 0120A0E3 		mov	r2, #1
 3253              		.loc 1 901 0
 3254 15e8 0010E0E3 		mvn	r1, #0
 3255              		.loc 1 900 0
 3256 15ec 002183E5 		str	r2, [r3, #256]
 3257              		.loc 1 901 0
 3258 15f0 3030E0E3 		mvn	r3, #48
 3259 15f4 F33F01E5 		str	r3, [r1, #-4083]
 3260              	.LBB322:
 3261              	.LBB323:
 3262              		.loc 1 943 0
 3263 15f8 413083E2 		add	r3, r3, #65
 3264 15fc EF3F01E5 		str	r3, [r1, #-4079]
 3265              	.LBE323:
 3266              	.LBE322:
 3267              		.loc 1 903 0
 3268 1600 153083E2 		add	r3, r3, #21
 3269 1604 FF3D01E5 		str	r3, [r1, #-3583]
 3270              		.loc 1 904 0
 3271 1608 7C309FE5 		ldr	r3, .L299+28
 3272 160c FF3E01E5 		str	r3, [r1, #-3839]
 3273              		.loc 1 905 0
 3274 1610 2430A0E3 		mov	r3, #36
 3275 1614 FB3D01E5 		str	r3, [r1, #-3579]
 3276              		.loc 1 906 0
 3277 1618 70309FE5 		ldr	r3, .L299+32
 3278              	.LBE321:
 3279              	.LBE320:
 3280              	.LBB325:
 3281              	.LBB326:
 3282              		.loc 1 877 0
 3283 161c 70009FE5 		ldr	r0, .L299+36
 3284              	.LBE326:
 3285              	.LBE325:
 3286              	.LBB328:
 3287              	.LBB324:
 3288              		.loc 1 906 0
 3289 1620 FB3E01E5 		str	r3, [r1, #-3835]
 3290              	.LBE324:
 3291              	.LBE328:
 3292              	.LBB329:
 3293              	.LBB327:
 3294              		.loc 1 877 0
 3295 1624 4B3FA0E3 		mov	r3, #300
 3296 1628 0C3080E5 		str	r3, [r0, #12]
 3297              		.loc 1 878 0
 3298 162c 043090E5 		ldr	r3, [r0, #4]
 3299 1630 023083E1 		orr	r3, r3, r2
 3300 1634 043080E5 		str	r3, [r0, #4]
 3301              		.loc 1 879 0
 3302 1638 0030A0E3 		mov	r3, #0
 3303 163c 703080E5 		str	r3, [r0, #112]
 3304              		.loc 1 880 0
 3305 1640 033083E2 		add	r3, r3, #3
 3306 1644 143080E5 		str	r3, [r0, #20]
 3307              		.loc 1 881 0
 3308 1648 FA3FA0E3 		mov	r3, #1000
 3309 164c 183080E5 		str	r3, [r0, #24]
 3310              	.LBE327:
 3311              	.LBE329:
 3312              		.loc 1 290 0
 3313 1650 FEFFFFEB 		bl	initializeMP3Player
 3314              	.LBB330:
 3315              	.LBB331:
 3316              		.loc 1 810 0
 3317 1654 3C209FE5 		ldr	r2, .L299+40
 3318 1658 4030A0E3 		mov	r3, #64
 3319 165c 0C3082E5 		str	r3, [r2, #12]
 3320              		.loc 1 811 0
 3321 1660 2030A0E3 		mov	r3, #32
 3322 1664 003082E5 		str	r3, [r2, #0]
 3323              	.LBE331:
 3324              	.LBE330:
 3325              		.loc 1 293 0
 3326 1668 04E09DE4 		ldr	lr, [sp], #4
 3327 166c 1EFF2FE1 		bx	lr
 3328              	.L300:
 3329              		.align	2
 3330              	.L299:
 3331 1670 00000000 		.word	putc_serial0
 3332 1674 A0860100 		.word	100000
 3333 1678 0A000000 		.word	.LC3
 3334 167c 19000000 		.word	.LC4
 3335 1680 008002E0 		.word	-536707072
 3336 1684 00C002E0 		.word	-536690688
 3337 1688 00C01FE0 		.word	-534790144
 3338 168c 00000000 		.word	timer1ISR
 3339 1690 00000000 		.word	timer0ISR
 3340 1694 004000E0 		.word	-536854528
 3341 1698 000002E0 		.word	-536739840
 3342              	.LFE4:
 3344              		.global	__divsi3
 3345              		.global	__modsi3
 3346              		.section	.rodata.str1.1
 3347              	.LC5:
 3348 002c 474F2047 		.ascii	"GO GO MP3!\000"
 3348      4F204D50 
 3348      332100
 3349              		.text
 3350              		.align	2
 3351              		.global	main
 3353              	main:
 3354              	.LFB2:
 3355              		.loc 1 93 0
 3356              		@ Function supports interworking.
 3357              		@ args = 0, pretend = 0, frame = 0
 3358              		@ frame_needed = 1, uses_anonymous_args = 0
 3359 169c 0DC0A0E1 		mov	ip, sp
 3360              	.LCFI39:
 3361 16a0 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 3362              	.LCFI40:
 3363 16a4 04B04CE2 		sub	fp, ip, #4
 3364              	.LCFI41:
 3365 16a8 08D04DE2 		sub	sp, sp, #8
 3366              	.LCFI42:
 3367              		.loc 1 104 0
 3368 16ac FEFFFFEB 		bl	bootUp
 3369              		.loc 1 106 0
 3370 16b0 FEFFFFEB 		bl	initializeMP3Player
 3371              		.loc 1 108 0
 3372 16b4 FEFFFFEB 		bl	splashScreen
 3373              		.loc 1 110 0
 3374 16b8 E8339FE5 		ldr	r3, .L329
 3375 16bc 000093E5 		ldr	r0, [r3, #0]
 3376 16c0 FEFFFFEB 		bl	initializeRadio
 3377              	.LBB332:
 3378              	.LBB333:
 3379              		.loc 1 817 0
 3380 16c4 E0239FE5 		ldr	r2, .L329+4
 3381 16c8 003092E5 		ldr	r3, [r2, #0]
 3382 16cc 153C83E3 		orr	r3, r3, #5376
 3383 16d0 003082E5 		str	r3, [r2, #0]
 3384 16d4 0040A0E3 		mov	r4, #0
 3385              	.LVL112:
 3386              	.L302:
 3387              	.LBE333:
 3388              	.LBE332:
 3389              		.loc 1 116 0
 3390 16d8 0000A0E3 		mov	r0, #0
 3391 16dc FEFFFFEB 		bl	rootDirectory_files_stream
 3392 16e0 006050E2 		subs	r6, r0, #0
 3393              		.loc 1 115 0
 3394 16e4 014084E2 		add	r4, r4, #1
 3395              		.loc 1 116 0
 3396 16e8 FAFFFF1A 		bne	.L302
 3397              		.loc 1 117 0
 3398 16ec 063084E2 		add	r3, r4, #6
 3399 16f0 0330C3E3 		bic	r3, r3, #3
 3400 16f4 0DD063E0 		rsb	sp, r3, sp
 3401 16f8 08808DE2 		add	r8, sp, #8
 3402              		.loc 1 118 0
 3403 16fc 0800A0E1 		mov	r0, r8
 3404 1700 011084E2 		add	r1, r4, #1
 3405 1704 FEFFFFEB 		bl	rootDirectory_files
 3406              		.loc 1 119 0
 3407 1708 8032A0E1 		mov	r3, r0, asl #5
 3408 170c 043083E2 		add	r3, r3, #4
 3409 1710 0DD063E0 		rsb	sp, r3, sp
 3410              		.loc 1 118 0
 3411 1714 94339FE5 		ldr	r3, .L329+8
 3412 1718 0050A0E1 		mov	r5, r0
 3413 171c 005083E5 		str	r5, [r3, #0]
 3414              	.LBB334:
 3415              		.loc 1 123 0
 3416 1720 0600A0E1 		mov	r0, r6
 3417              	.LVL113:
 3418              	.LBE334:
 3419              		.loc 1 119 0
 3420 1724 08708DE2 		add	r7, sp, #8
 3421              	.LBB336:
 3422              		.loc 1 123 0
 3423 1728 06E0A0E1 		mov	lr, r6
 3424              	.LVL114:
 3425 172c 100000EA 		b	.L303
 3426              	.LVL115:
 3427              	.L309:
 3428 1730 0030A0E3 		mov	r3, #0
 3429              	.LBB335:
 3430              		.loc 1 133 0
 3431 1734 8EC2A0E1 		mov	ip, lr, asl #5
 3432              	.L308:
 3433              		.loc 1 125 0
 3434 1738 040050E1 		cmp	r0, r4
 3435              		.loc 1 133 0
 3436 173c 03208CE0 		add	r2, ip, r3
 3437 1740 0260C787 		strhib	r6, [r7, r2]
 3438              		.loc 1 125 0
 3439 1744 0600008A 		bhi	.L307
 3440              	.LVL116:
 3441              		.loc 1 126 0
 3442 1748 0010D8E7 		ldrb	r1, [r8, r0]	@ zero_extendqisi2
 3443 174c 2C0051E3 		cmp	r1, #44
 3444              		.loc 1 127 0
 3445 1750 0230A001 		moveq	r3, r2
 3446              		.loc 1 130 0
 3447 1754 0210C717 		strneb	r1, [r7, r2]
 3448              		.loc 1 127 0
 3449 1758 0360C707 		streqb	r6, [r7, r3]
 3450              		.loc 1 131 0
 3451 175c 010080E2 		add	r0, r0, #1
 3452              		.loc 1 127 0
 3453 1760 1F30A003 		moveq	r3, #31
 3454              	.LVL117:
 3455              	.L307:
 3456              		.loc 1 124 0
 3457 1764 013083E2 		add	r3, r3, #1
 3458 1768 200053E3 		cmp	r3, #32
 3459 176c F1FFFF1A 		bne	.L308
 3460              	.LBE335:
 3461              		.loc 1 123 0
 3462 1770 01E08EE2 		add	lr, lr, #1
 3463              	.L303:
 3464 1774 05005EE1 		cmp	lr, r5
 3465 1778 ECFFFFBA 		blt	.L309
 3466              	.LBE336:
 3467              		.loc 1 138 0
 3468 177c 0F10A0E3 		mov	r1, #15
 3469 1780 0500A0E1 		mov	r0, r5
 3470              	.LVL118:
 3471 1784 FEFFFFEB 		bl	__divsi3
 3472              	.LVL119:
 3473 1788 24639FE5 		ldr	r6, .L329+12
 3474              	.LVL120:
 3475 178c FF4000E2 		and	r4, r0, #255
 3476              	.LVL121:
 3477 1790 013044E2 		sub	r3, r4, #1
 3478              		.loc 1 139 0
 3479 1794 0500A0E1 		mov	r0, r5
 3480 1798 0F10A0E3 		mov	r1, #15
 3481              		.loc 1 138 0
 3482 179c 0530C6E5 		strb	r3, [r6, #5]
 3483              		.loc 1 139 0
 3484 17a0 FEFFFFEB 		bl	__modsi3
 3485              		.loc 1 142 0
 3486 17a4 0C339FE5 		ldr	r3, .L329+16
 3487 17a8 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3488              		.loc 1 143 0
 3489 17ac 08339FE5 		ldr	r3, .L329+20
 3490              		.loc 1 139 0
 3491 17b0 000050E3 		cmp	r0, #0
 3492              		.loc 1 143 0
 3493 17b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3494              		.loc 1 139 0
 3495 17b8 0540C615 		strneb	r4, [r6, #5]
 3496              		.loc 1 141 0
 3497 17bc F0429FE5 		ldr	r4, .L329+12
 3498 17c0 0050A0E3 		mov	r5, #0
 3499              		.loc 1 143 0
 3500 17c4 0430C4E5 		strb	r3, [r4, #4]
 3501              		.loc 1 146 0
 3502 17c8 0130A0E3 		mov	r3, #1
 3503              		.loc 1 142 0
 3504 17cc 0320C4E5 		strb	r2, [r4, #3]
 3505              		.loc 1 148 0
 3506 17d0 0400A0E1 		mov	r0, r4
 3507 17d4 0710A0E1 		mov	r1, r7
 3508              		.loc 1 146 0
 3509 17d8 0030C4E5 		strb	r3, [r4, #0]
 3510              		.loc 1 141 0
 3511 17dc 0250C4E5 		strb	r5, [r4, #2]
 3512              		.loc 1 145 0
 3513 17e0 0650C4E5 		strb	r5, [r4, #6]
 3514              		.loc 1 147 0
 3515 17e4 085084E5 		str	r5, [r4, #8]
 3516              		.loc 1 148 0
 3517 17e8 FEFFFFEB 		bl	getNewFiles
 3518              	.LBB337:
 3519              		.loc 1 150 0
 3520 17ec CC229FE5 		ldr	r2, .L329+24
 3521              	.L311:
 3522 17f0 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 3523              	.LVL122:
 3524              		.loc 1 149 0
 3525 17f4 015085E2 		add	r5, r5, #1
 3526 17f8 160055E3 		cmp	r5, #22
 3527              		.loc 1 150 0
 3528 17fc EC31C4E5 		strb	r3, [r4, #492]
 3529              		.loc 1 149 0
 3530 1800 014084E2 		add	r4, r4, #1
 3531 1804 F9FFFF1A 		bne	.L311
 3532              	.LBE337:
 3533              		.loc 1 154 0
 3534 1808 B4029FE5 		ldr	r0, .L329+28
 3535 180c FEFFFFEB 		bl	fillSettings
 3536              	.LBB338:
 3537              	.LBB340:
 3538              		.loc 1 823 0
 3539 1810 94129FE5 		ldr	r1, .L329+4
 3540 1814 003091E5 		ldr	r3, [r1, #0]
 3541              	.LBE340:
 3542              	.LBE338:
 3543              		.loc 1 157 0
 3544 1818 94229FE5 		ldr	r2, .L329+12
 3545 181c A4429FE5 		ldr	r4, .L329+32
 3546              	.LBB342:
 3547              	.LBB339:
 3548              		.loc 1 823 0
 3549 1820 FF3DC3E3 		bic	r3, r3, #16320
 3550 1824 3030C3E3 		bic	r3, r3, #48
 3551              	.LBE339:
 3552              	.LBE342:
 3553              		.loc 1 159 0
 3554 1828 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 3555              		.loc 1 157 0
 3556 182c 002084E5 		str	r2, [r4, #0]
 3557              	.LBB343:
 3558              	.LBB341:
 3559              		.loc 1 823 0
 3560 1830 003081E5 		str	r3, [r1, #0]
 3561              	.LBE341:
 3562              	.LBE343:
 3563              		.loc 1 159 0
 3564 1834 FEFFFFEB 		bl	LCDClear
 3565              		.loc 1 162 0
 3566 1838 003094E5 		ldr	r3, [r4, #0]
 3567 183c 0040A0E3 		mov	r4, #0
 3568 1840 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 3569 1844 00408DE5 		str	r4, [sp, #0]
 3570 1848 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3571 184c 78029FE5 		ldr	r0, .L329+36
 3572 1850 0230A0E3 		mov	r3, #2
 3573 1854 0410A0E1 		mov	r1, r4
 3574 1858 04C08DE5 		str	ip, [sp, #4]
 3575 185c FEFFFFEB 		bl	LCDPrintString
 3576              	.LBB344:
 3577              	.LBB345:
 3578              		.loc 1 238 0
 3579 1860 68329FE5 		ldr	r3, .L329+40
 3580              	.L312:
 3581              	@ 238 "main.c" 1
 3582 1864 0000A0E1 		nop
 3583              	@ 0 "" 2
 3584 1868 014084E2 		add	r4, r4, #1
 3585              	.LVL123:
 3586 186c 030054E1 		cmp	r4, r3
 3587 1870 FBFFFF1A 		bne	.L312
 3588              	.LBE345:
 3589              	.LBE344:
 3590              		.loc 1 166 0
 3591 1874 4C429FE5 		ldr	r4, .L329+32
 3592              	.LVL124:
 3593 1878 000094E5 		ldr	r0, [r4, #0]
 3594 187c FEFFFFEB 		bl	printMenu
 3595              	.LBB346:
 3596              	.LBB347:
 3597              		.loc 1 845 0
 3598 1880 4C829FE5 		ldr	r8, .L329+44
 3599              	.LBE347:
 3600              	.LBE346:
 3601              		.loc 1 180 0
 3602 1884 4C629FE5 		ldr	r6, .L329+48
 3603 1888 4CA29FE5 		ldr	sl, .L329+52
 3604              		.loc 1 182 0
 3605 188c 4C929FE5 		ldr	r9, .L329+56
 3606              	.L322:
 3607              	.LBB349:
 3608              	.LBB348:
 3609              		.loc 1 845 0
 3610 1890 003098E5 		ldr	r3, [r8, #0]
 3611              	.LBE348:
 3612              	.LBE349:
 3613              		.loc 1 169 0
 3614 1894 020513E3 		tst	r3, #8388608
 3615 1898 2200000A 		beq	.L313
 3616              		.loc 1 170 0
 3617 189c 14129FE5 		ldr	r1, .L329+16
 3618 18a0 0000D1E5 		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 3619 18a4 FEFFFFEB 		bl	LCDClear
 3620              		.loc 1 171 0
 3621 18a8 0430A0E3 		mov	r3, #4
 3622 18ac 00308DE5 		str	r3, [sp, #0]
 3623 18b0 003094E5 		ldr	r3, [r4, #0]
 3624 18b4 00129FE5 		ldr	r1, .L329+20
 3625 18b8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3626 18bc 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3627 18c0 0730A0E3 		mov	r3, #7
 3628 18c4 18029FE5 		ldr	r0, .L329+60
 3629 18c8 0010A0E3 		mov	r1, #0
 3630 18cc 04C08DE5 		str	ip, [sp, #4]
 3631 18d0 FEFFFFEB 		bl	LCDPrintString
 3632 18d4 0030A0E3 		mov	r3, #0
 3633              	.LVL125:
 3634              	.L314:
 3635              	.LBB350:
 3636              	.LBB351:
 3637              		.loc 1 238 0
 3638              	@ 238 "main.c" 1
 3639 18d8 0000A0E1 		nop
 3640              	@ 0 "" 2
 3641 18dc 04229FE5 		ldr	r2, .L329+64
 3642 18e0 013083E2 		add	r3, r3, #1
 3643 18e4 020053E1 		cmp	r3, r2
 3644 18e8 FAFFFF1A 		bne	.L314
 3645              	.LBE351:
 3646              	.LBE350:
 3647              	.LBB352:
 3648              	.LBB353:
 3649              		.loc 1 912 0
 3650 18ec 3020A0E3 		mov	r2, #48
 3651 18f0 0030E0E3 		mvn	r3, #0
 3652              	.LVL126:
 3653 18f4 EB2F03E5 		str	r2, [r3, #-4075]
 3654              	.LBE353:
 3655              	.LBE352:
 3656              		.loc 1 174 0
 3657 18f8 FEFFFFEB 		bl	main_msc
 3658              	.LBB354:
 3659              	.LBB355:
 3660              		.loc 1 630 0
 3661 18fc 0E22A0E3 		mov	r2, #-536870912
 3662 1900 003092E5 		ldr	r3, [r2, #0]
 3663 1904 033083E3 		orr	r3, r3, #3
 3664 1908 003082E5 		str	r3, [r2, #0]
 3665              		.loc 1 631 0
 3666 190c AA10A0E3 		mov	r1, #170
 3667              		.loc 1 632 0
 3668 1910 5530A0E3 		mov	r3, #85
 3669              		.loc 1 631 0
 3670 1914 081082E5 		str	r1, [r2, #8]
 3671              		.loc 1 632 0
 3672 1918 083082E5 		str	r3, [r2, #8]
 3673              		.loc 1 634 0
 3674 191c 0030A0E3 		mov	r3, #0
 3675              		.loc 1 633 0
 3676 1920 081082E5 		str	r1, [r2, #8]
 3677              		.loc 1 634 0
 3678 1924 083082E5 		str	r3, [r2, #8]
 3679              	.L313:
 3680              	.LBE355:
 3681              	.LBE354:
 3682              		.loc 1 180 0
 3683 1928 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 3684 192c 000053E3 		cmp	r3, #0
 3685 1930 4100001A 		bne	.L315
 3686 1934 0050DAE5 		ldrb	r5, [sl, #0]	@ zero_extendqisi2
 3687              	.LVL127:
 3688 1938 000055E3 		cmp	r5, #0
 3689 193c 3E00001A 		bne	.L315
 3690              		.loc 1 182 0
 3691 1940 0030D9E5 		ldrb	r3, [r9, #0]	@ zero_extendqisi2
 3692 1944 000053E3 		cmp	r3, #0
 3693 1948 3B00000A 		beq	.L315
 3694              	.LBB356:
 3695              	.LBB357:
 3696              		.loc 1 924 0
 3697 194c 2020A0E3 		mov	r2, #32
 3698 1950 0030E0E3 		mvn	r3, #0
 3699 1954 EB2F03E5 		str	r2, [r3, #-4075]
 3700              	.LBE357:
 3701              	.LBE356:
 3702              		.loc 1 184 0
 3703 1958 8C019FE5 		ldr	r0, .L329+68
 3704 195c FEFFFFEB 		bl	closeSong
 3705              		.loc 1 188 0
 3706 1960 4C119FE5 		ldr	r1, .L329+12
 3707              		.loc 1 185 0
 3708 1964 84319FE5 		ldr	r3, .L329+72
 3709              		.loc 1 188 0
 3710 1968 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3711              		.loc 1 185 0
 3712 196c 0050C3E5 		strb	r5, [r3, #0]
 3713              		.loc 1 188 0
 3714 1970 0E0052E3 		cmp	r2, #14
 3715              		.loc 1 186 0
 3716 1974 0232A0E3 		mov	r3, #536870912
 3717 1978 043088E5 		str	r3, [r8, #4]
 3718              		.loc 1 189 0
 3719 197c 01208292 		addls	r2, r2, #1
 3720              		.loc 1 190 0
 3721 1980 08309195 		ldrls	r3, [r1, #8]
 3722              		.loc 1 189 0
 3723 1984 0020C195 		strlsb	r2, [r1, #0]
 3724              		.loc 1 193 0
 3725 1988 24C19FE5 		ldr	ip, .L329+12
 3726              		.loc 1 190 0
 3727 198c 01308392 		addls	r3, r3, #1
 3728 1990 08308195 		strls	r3, [r1, #8]
 3729              		.loc 1 193 0
 3730 1994 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 3731 1998 0F0053E3 		cmp	r3, #15
 3732 199c 0C00001A 		bne	.L317
 3733 19a0 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 3734 19a4 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 3735 19a8 020053E1 		cmp	r3, r2
 3736 19ac 0800009A 		bls	.L317
 3737              		.loc 1 196 0
 3738 19b0 013082E2 		add	r3, r2, #1
 3739              		.loc 1 194 0
 3740 19b4 0120A0E3 		mov	r2, #1
 3741 19b8 0020CCE5 		strb	r2, [ip, #0]
 3742              		.loc 1 195 0
 3743 19bc 0020A0E3 		mov	r2, #0
 3744              		.loc 1 197 0
 3745 19c0 0C00A0E1 		mov	r0, ip
 3746 19c4 0710A0E1 		mov	r1, r7
 3747              		.loc 1 195 0
 3748 19c8 08208CE5 		str	r2, [ip, #8]
 3749              		.loc 1 196 0
 3750 19cc 0630CCE5 		strb	r3, [ip, #6]
 3751              		.loc 1 197 0
 3752 19d0 FEFFFFEB 		bl	getNewFiles
 3753              	.L317:
 3754              		.loc 1 200 0
 3755 19d4 D8509FE5 		ldr	r5, .L329+12
 3756 19d8 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 3757 19dc 833285E0 		add	r3, r5, r3, asl #5
 3758 19e0 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3759 19e4 000053E3 		cmp	r3, #0
 3760 19e8 1300000A 		beq	.L315
 3761              		.loc 1 201 0
 3762 19ec 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 3763 19f0 FEFFFFEB 		bl	LCDClear
 3764              		.loc 1 202 0
 3765 19f4 0500A0E1 		mov	r0, r5
 3766 19f8 FEFFFFEB 		bl	printMenu
 3767              		.loc 1 203 0
 3768 19fc 0510A0E1 		mov	r1, r5
 3769 1a00 E4009FE5 		ldr	r0, .L329+68
 3770 1a04 FEFFFFEB 		bl	loadSongInfo
 3771 1a08 E0309FE5 		ldr	r3, .L329+72
 3772 1a0c 0000C3E5 		strb	r0, [r3, #0]
 3773              		.loc 1 204 0
 3774 1a10 FEFFFFEB 		bl	vs1002Config
 3775              		.loc 1 205 0
 3776 1a14 0000A0E3 		mov	r0, #0
 3777 1a18 021BA0E3 		mov	r1, #2048
 3778 1a1c FEFFFFEB 		bl	vs1002SCIWrite
 3779              		.loc 1 206 0
 3780 1a20 FEFFFFEB 		bl	vs1002Finish
 3781              		.loc 1 207 0
 3782 1a24 0232A0E3 		mov	r3, #536870912
 3783 1a28 0C3088E5 		str	r3, [r8, #12]
 3784              	.LBB358:
 3785              	.LBB359:
 3786              		.loc 1 918 0
 3787 1a2c 0020E0E3 		mvn	r2, #0
 3788 1a30 EF3F12E5 		ldr	r3, [r2, #-4079]
 3789 1a34 203083E3 		orr	r3, r3, #32
 3790 1a38 EF3F02E5 		str	r3, [r2, #-4079]
 3791              	.LVL128:
 3792              	.L315:
 3793              	.LBE359:
 3794              	.LBE358:
 3795              		.loc 1 213 0
 3796 1a3c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 3797 1a40 020053E3 		cmp	r3, #2
 3798 1a44 0300001A 		bne	.L318
 3799              		.loc 1 214 0
 3800 1a48 000094E5 		ldr	r0, [r4, #0]
 3801 1a4c 0710A0E1 		mov	r1, r7
 3802 1a50 FEFFFFEB 		bl	handleUpButton
 3803 1a54 0C0000EA 		b	.L319
 3804              	.L318:
 3805              		.loc 1 215 0
 3806 1a58 010053E3 		cmp	r3, #1
 3807 1a5c 0300001A 		bne	.L320
 3808              		.loc 1 216 0
 3809 1a60 000094E5 		ldr	r0, [r4, #0]
 3810 1a64 0710A0E1 		mov	r1, r7
 3811 1a68 FEFFFFEB 		bl	handleDownButton
 3812 1a6c 060000EA 		b	.L319
 3813              	.L320:
 3814              		.loc 1 217 0
 3815 1a70 030053E3 		cmp	r3, #3
 3816 1a74 0100001A 		bne	.L321
 3817              		.loc 1 218 0
 3818 1a78 FEFFFFEB 		bl	handleMiddleButton
 3819 1a7c 020000EA 		b	.L319
 3820              	.L321:
 3821              		.loc 1 219 0
 3822 1a80 0030DAE5 		ldrb	r3, [sl, #0]	@ zero_extendqisi2
 3823 1a84 000053E3 		cmp	r3, #0
 3824              		.loc 1 220 0
 3825 1a88 FEFFFF1B 		blne	handleAccelerometer
 3826              	.L319:
 3827              	.LBB360:
 3828              	.LBB361:
 3829              		.loc 1 930 0
 3830 1a8c 0030E0E3 		mvn	r3, #0
 3831 1a90 EF2F13E5 		ldr	r2, [r3, #-4079]
 3832 1a94 102082E3 		orr	r2, r2, #16
 3833 1a98 EF2F03E5 		str	r2, [r3, #-4079]
 3834              	.LBE361:
 3835              	.LBE360:
 3836              		.loc 1 222 0
 3837 1a9c 013083E2 		add	r3, r3, #1
 3838 1aa0 0030C6E5 		strb	r3, [r6, #0]
 3839 1aa4 79FFFFEA 		b	.L322
 3840              	.L330:
 3841              		.align	2
 3842              	.L329:
 3843 1aa8 00000000 		.word	radio_channel
 3844 1aac 00C002E0 		.word	-536690688
 3845 1ab0 04000000 		.word	NUMBEROFFILES
 3846 1ab4 74000000 		.word	file_manager
 3847 1ab8 00000000 		.word	white
 3848 1abc 00000000 		.word	black
 3849 1ac0 00000000 		.word	welcome
 3850 1ac4 78020000 		.word	settings_menu
 3851 1ac8 7C040000 		.word	current_display
 3852 1acc 2C000000 		.word	.LC5
 3853 1ad0 404B4C00 		.word	5000000
 3854 1ad4 008002E0 		.word	-536707072
 3855 1ad8 08000000 		.word	button_pressed
 3856 1adc 09000000 		.word	update_screen
 3857 1ae0 02000000 		.word	song_is_over
 3858 1ae4 00000000 		.word	USB
 3859 1ae8 80969800 		.word	10000000
 3860 1aec 14000000 		.word	current_song
 3861 1af0 01000000 		.word	file_is_open
 3862              	.LFE2:
 3864              		.global	volume_setting
 3865              		.data
 3866              		.align	2
 3869              	volume_setting:
 3870 0000 10000000 		.word	16
 3871              		.global	radio_channel
 3872              		.align	2
 3875              	radio_channel:
 3876 0004 E8030000 		.word	1000
 3877              		.global	radio_enable
 3878              		.bss
 3881              	radio_enable:
 3882 0000 00       		.space	1
 3883              		.global	welcome
 3884              		.section	.rodata
 3887              	welcome:
 3888 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 3888      204C6973 
 3888      743A0A0D 
 3888      00
 3889 000d 00000000 		.space	9
 3889      00000000 
 3889      00
 3890              		.global	NotFound
 3893              	NotFound:
 3894 0016 46696C65 		.ascii	"File Not Found!"
 3894      204E6F74 
 3894      20466F75 
 3894      6E6421
 3895              		.global	USB
 3898              	USB:
 3899 0025 55534220 		.ascii	"USB Connected!"
 3899      436F6E6E 
 3899      65637465 
 3899      6421
 3900              		.global	newline
 3903              	newline:
 3904 0033 0A00     		.ascii	"\012\000"
 3905              		.global	volume
 3908              	volume:
 3909 0035 566F6C75 		.ascii	"Volume\000"
 3909      6D6500
 3910              		.global	contrast
 3913              	contrast:
 3914 003c 436F6E74 		.ascii	"Contrast\000"
 3914      72617374 
 3914      00
 3915              		.global	radio_power
 3918              	radio_power:
 3919 0045 52616469 		.ascii	"Radio Power"
 3919      6F20506F 
 3919      776572
 3920              		.global	radio_channel_menu
 3923              	radio_channel_menu:
 3924 0050 52616469 		.ascii	"Radio Channel"
 3924      6F204368 
 3924      616E6E65 
 3924      6C
 3925              		.global	settings
 3928              	settings:
 3929 005d 53657474 		.ascii	"Settings:\000"
 3929      696E6773 
 3929      3A00
 3930              		.bss
 3931              	file_is_open:
 3932 0001 00       		.space	1
 3933              	song_is_over:
 3934 0002 00       		.space	1
 3935 0003 00       		.align	2
 3936              	NUMBEROFFILES:
 3937 0004 00000000 		.space	4
 3938              	button_pressed:
 3939 0008 00       		.space	1
 3940              	update_screen:
 3941 0009 00       		.space	1
 3942 000a 0000     		.align	2
 3943              	prev_position:
 3944 000c 00000000 		.space	4
 3945              		.align	2
 3946              	cur_position:
 3947 0010 00000000 		.space	4
 3948              		.align	2
 3949              	current_song:
 3950 0014 00000000 		.space	96
 3950      00000000 
 3950      00000000 
 3950      00000000 
 3950      00000000 
 3951              		.align	2
 3952              	file_manager:
 3953 0074 00000000 		.space	516
 3953      00000000 
 3953      00000000 
 3953      00000000 
 3953      00000000 
 3954              		.align	2
 3955              	settings_menu:
 3956 0278 00000000 		.space	516
 3956      00000000 
 3956      00000000 
 3956      00000000 
 3956      00000000 
 3957              		.align	2
 3958              	current_display:
 3959 047c 00000000 		.space	4
 4725              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3936   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3908   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3918   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3923   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3928   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:363    .text:00000240 initializeSPI
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:382    .text:00000258 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:388    .text:0000025c selectSD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:396    .text:0000025c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:405    .text:00000270 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:411    .text:00000274 selectLCD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:419    .text:00000274 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:429    .text:0000028c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:435    .text:00000290 selectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:443    .text:00000290 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:473    .text:000002bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:480    .text:000002c4 deselectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:488    .text:000002c4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:497    .text:000002d8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:503    .text:000002dc isUSBConnected
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:511    .text:000002dc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:519    .text:000002ec $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:525    .text:000002f0 initializeUITimer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:533    .text:000002f0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:554    .text:00000324 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:560    .text:00000328 initializeMP3Timer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:568    .text:00000328 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:586    .text:00000354 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:592    .text:00000358 initializeInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:600    .text:00000358 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:631    .text:0000039c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1881   .text:00000c9c timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:865    .text:000004d0 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:639    .text:000003a8 stopAllInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:647    .text:000003a8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:657    .text:000003b8 enableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:676    .text:000003cc disableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:694    .text:000003dc enableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:713    .text:000003f0 disableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:752    .text:00000420 exclusiveUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:770    .text:00000430 initializeLEDs
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:796    .text:0000045c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:802    .text:00000460 wishesFileManager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:808    .text:00000460 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:828    .text:00000494 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3943   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:835    .text:0000049c wishesSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:841    .text:0000049c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:860    .text:000004cc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:874    .text:000004d0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:952    .text:00000580 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3938   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3946   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3940   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:967    .text:00000598 displayRadioMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:973    .text:00000598 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1007   .text:000005f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3958   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3875   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1016   .text:00000608 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1026   .text:00000608 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1111   .text:000006c8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3903   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1119   .text:000006d4 printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1129   .text:000006d4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1213   .text:0000079c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1219   .text:000007a0 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1229   .text:000007a0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1315   .text:00000878 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1321   .text:0000087c handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1328   .text:0000087c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1385   .text:000008f4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3952   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1391   .text:000008f8 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1398   .text:000008f8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1453   .text:00000968 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1459   .text:0000096c clearScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1465   .text:0000096c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1490   .text:000009a4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3931   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1497   .text:000009ac handleAccelerometer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1503   .text:000009ac $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1619   .text:00000a8c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3955   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1630   .text:00000aa4 splashScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1636   .text:00000aa4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1652   .text:00000ac4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1658   .text:00000ac8 lowerVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1665   .text:00000ac8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1733   .text:00000b6c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3869   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1742   .text:00000b7c raiseVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1749   .text:00000b7c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1814   .text:00000c1c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1822   .text:00000c28 sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1828   .text:00000c28 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1873   .text:00000c8c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3949   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3933   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1887   .text:00000c9c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1905   .text:00000cc4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1911   .text:00000cc8 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1917   .text:00000cc8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1959   .text:00000d28 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1966   .text:00000d30 initializeMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1972   .text:00000d30 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:1993   .text:00000d54 changeRadioFrequency
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2025   .text:00000d8c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2031   .text:00000d90 setRadioFrequency
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2041   .text:00000d90 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2103   .text:00000de4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2114   .text:00000dec disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2120   .text:00000dec $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2195   .text:00000e90 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3881   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2209   .text:00000ea4 enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2215   .text:00000ea4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2291   .text:00000f4c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2301   .text:00000f60 initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2311   .text:00000f60 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2400   .text:00000fd0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2407   .text:00000fd8 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2414   .text:00000fd8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2444   .text:0000100c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2450   .text:00001010 stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2459   .text:00001010 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2519   .text:00001098 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2527   .text:000010a4 loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2534   .text:000010a4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2648   .text:00001178 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2654   .text:0000117c handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:2660   .text:0000117c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3104   .text:00001498 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3893   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3130   .text:000014d4 bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3136   .text:000014d4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3331   .text:00001670 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3353   .text:0000169c main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3359   .text:0000169c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3843   .text:00001aa8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3887   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3898   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3870   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3913   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//ccMAPPYD.s:3884   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
MMA_get_y
LCDSetRowColor
LCDPrintString
LCDClear
LCDInit
LCDPrintLogo
vs1002Config
vs1002SetVolume
vs1002Finish
vs1002SendMusic
fat16_read_file
vs1002SCIWrite
vs1002Reset
vs1002Init
ns73SetChannel
ns73Config
ns73Send
ns73Init
fat16_close_file
root_file_exists
root_open
fat16_file_size
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
__divsi3
__modsi3
rootDirectory_files_stream
rootDirectory_files
main_msc
