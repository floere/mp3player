   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * So, basically we have two timers:
   3:main.c        ****  * 1. A timer that shoves data into the mp3 buffer (32 bytes) of the chip.
   4:main.c        ****  * 2. A timer that checks the USB Interface for new stuff or a removed memstick.
   5:main.c        ****  * 
   6:main.c        ****  * 
   7:main.c        ****  * r. We have a radio.
   8:main.c        ****  *    Why? Think synchronized music in the whole apartment.
   9:main.c        ****  *    Perhaps it can be switched off or on. Perhaps it is always running.
  10:main.c        ****  *    Let's use the accelerometer for that maybe (punching the thing ;) ).
  11:main.c        ****  *    Frequency? 103.6 MHz? some band where nothing is on.
  12:main.c        ****  *    Let's also send intermittent radio info to let the people
  13:main.c        ****  *    around me know where the good/bad music comes from.
  14:main.c        ****  */
  15:main.c        **** 
  16:main.c        **** //*******************************************************
  17:main.c        **** //					MP3 Development Platform
  18:main.c        **** //*******************************************************
  19:main.c        **** //#include <stdio.h>
  20:main.c        **** #include "LPC214x.h"
  21:main.c        **** #include "setup.h"
  22:main.c        **** #include "MP3Dev.h"
  23:main.c        **** #include "serial.h"
  24:main.c        **** #include "rprintf.h"
  25:main.c        **** 
  26:main.c        **** //*******************************************************
  27:main.c        **** //				Memory Management Libraries
  28:main.c        **** //*******************************************************
  29:main.c        **** #include "rootdir.h"
  30:main.c        **** #include "sd_raw.h"
  31:main.c        **** #include "fat16.h"
  32:main.c        **** 
  33:main.c        **** //*******************************************************
  34:main.c        **** //				USB Libraries
  35:main.c        **** //*******************************************************
  36:main.c        **** #include "main_msc.h"
  37:main.c        **** 
  38:main.c        **** //*******************************************************
  39:main.c        **** //					External Component Libs
  40:main.c        **** //*******************************************************
  41:main.c        **** #include "LCD_driver.h"
  42:main.c        **** #include "MMA7260.h"
  43:main.c        **** #include "vs1002.h"
  44:main.c        **** #include "ns73.h"
  45:main.c        **** 
  46:main.c        **** //*******************************************************
  47:main.c        **** //					Interrupt Functions
  48:main.c        **** //*******************************************************
  49:main.c        **** 
  50:main.c        **** static void timer0ISR(void);
  51:main.c        **** static void timer1ISR(void);
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //*******************************************************
  55:main.c        **** //					External Variables
  56:main.c        **** //*******************************************************
  57:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  58:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  59:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  60:main.c        **** 
  61:main.c        **** //*******************************************************
  62:main.c        **** //				Global Variables for Main
  63:main.c        **** //*******************************************************
  64:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  65:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  66:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  67:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  68:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  69:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  70:main.c        **** 
  71:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  72:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  73:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  74:main.c        **** static DisplayStruct *current_display;	//
  75:main.c        **** static int NUMBEROFFILES=0;
  76:main.c        **** 
  77:main.c        **** int volume_setting = 16, radio_channel = 1000;
  78:main.c        **** char radio_enable = OFF;
  79:main.c        **** 
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Display Strings
  82:main.c        **** //*******************************************************
  83:main.c        **** const char welcome[22]="Song List:\n\r";
  84:main.c        **** const char NotFound[15]="File Not Found!";
  85:main.c        **** const char USB[14]="USB Connected!";
  86:main.c        **** const char newline[2] = "\n";
  87:main.c        **** const char volume[7] = "Volume";
  88:main.c        **** const char contrast[9] = "Contrast";
  89:main.c        **** const char radio_power[11]= "Radio Power";
  90:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  91:main.c        **** const char settings[10]="Settings:";
  92:main.c        **** 
  93:main.c        **** int main (void) {
  94:main.c        ****   //*******************************************************
  95:main.c        ****   //					Local Variables
  96:main.c        ****   //*******************************************************
  97:main.c        ****   unsigned long int numberOfChars = 0;
  98:main.c        ****   
  99:main.c        ****   //*******************************************************
 100:main.c        ****   //					Main Code
 101:main.c        ****   //*******************************************************
 102:main.c        ****   
 103:main.c        ****   // Initialize ARM I/O
 104:main.c        ****   bootUp();
 105:main.c        ****   
 106:main.c        ****   initializeMP3Player();
 107:main.c        ****   
 108:main.c        ****   splashScreen();
 109:main.c        ****   
 110:main.c        ****   initializeRadio(radio_channel);
 111:main.c        ****   
 112:main.c        ****   // Find Out how many files are on the SD card
 113:main.c        ****   selectSD();	//Make sure SPI is selected for reading the card
 114:main.c        ****   do {
 115:main.c        ****     numberOfChars++;
 116:main.c        ****   } while(rootDirectory_files_stream(0) != '\0'); // Get the total number of characters in the file
 117:main.c        ****   char tempNames[numberOfChars];   // This is one array that contains all of the filenames in the S
 118:main.c        ****   NUMBEROFFILES = rootDirectory_files(tempNames, numberOfChars + 1);
 119:main.c        ****   FileStruct Files[NUMBEROFFILES]; // Dynamically create an array for all of the filenames
 120:main.c        ****   
 121:main.c        ****   // Get all of the filenames into a Global Array
 122:main.c        ****   int chartracker=0;	
 123:main.c        ****   for(int j=0; j<NUMBEROFFILES; j++){
 124:main.c        ****   	for(int i=0; i<=MAXFILENAMELEN+1; i++){
 125:main.c        ****   		if(chartracker <= numberOfChars){
 126:main.c        ****   			if(tempNames[chartracker]==','){
 127:main.c        ****   				Files[j].file_name[i] = '\0';
 128:main.c        ****   				i=MAXFILENAMELEN+1;
 129:main.c        ****   			}
 130:main.c        ****   			else Files[j].file_name[i] = tempNames[chartracker];
 131:main.c        ****   			chartracker++;
 132:main.c        ****   		}
 133:main.c        ****   		else Files[j].file_name[i] ='\0';
 134:main.c        ****   	}	
 135:main.c        ****   }
 136:main.c        **** 	
 137:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 138:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 139:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 140:main.c        **** 	
 141:main.c        **** 	file_manager.orientation =ORIENTUP;
 142:main.c        **** 	file_manager.text_color=white;
 143:main.c        **** 	file_manager.back_color=black;
 144:main.c        **** 	
 145:main.c        **** 	file_manager.current_page=0;
 146:main.c        **** 	file_manager.current_row=1;
 147:main.c        **** 	file_manager.current_index=0;	
 148:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 149:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++) {
 150:main.c        **** 	  file_manager.title[i] = welcome[i];
 151:main.c        ****   }
 152:main.c        **** 	
 153:main.c        **** 	//Generate the settings menu and fill in default settings values
 154:main.c        **** 	fillSettings(&settings_menu);
 155:main.c        **** 	
 156:main.c        ****   // Setup the menu
 157:main.c        ****   current_display = &file_manager;
 158:main.c        ****   selectLCD();
 159:main.c        ****   LCDClear(current_display->back_color);
 160:main.c        ****   
 161:main.c        ****   // TODO Floere remove
 162:main.c        ****   LCDPrintString("GO GO MP3!", 0, current_display->text_color, 2, 0, current_display->orientation);
 163:main.c        ****   delay_ms(500);
 164:main.c        ****   //
 165:main.c        ****   
 166:main.c        ****   printMenu(current_display);
 167:main.c        **** 	while(1){
 168:main.c        **** 	  // USB connected!
 169:main.c        **** 		if (isUSBConnected()) {
 170:main.c        **** 			LCDClear(white);
 171:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 172:main.c        ****       delay_ms(1000);
 173:main.c        ****       stopAllInterrupts(); // To allow USB communication
 174:main.c        **** 			main_msc();
 175:main.c        **** 			reset();
 176:main.c        **** 		}
 177:main.c        **** 	
 178:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 179:main.c        **** 		//while(!button_pressed && !update_screen){
 180:main.c        **** 		if (!button_pressed && !update_screen) {
 181:main.c        ****       // If the current song is done playing, start playing the next song if it's available.
 182:main.c        ****       if (song_is_over) {
 183:main.c        ****         disableMP3Interrupt();
 184:main.c        ****         closeSong(&current_song); // Close the current song
 185:main.c        ****         file_is_open = 0;         //change master flag
 186:main.c        ****         ledBlueOff();
 187:main.c        ****         // Get the next song on the page by changing rows
 188:main.c        **** 				if(file_manager.current_row < NUMROWS){
 189:main.c        **** 					file_manager.current_row++;
 190:main.c        **** 					file_manager.current_index++;
 191:main.c        **** 				}
 192:main.c        **** 				//Go to the next page of songs if necessary
 193:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 194:main.c        **** 					file_manager.current_row=1;
 195:main.c        **** 					file_manager.current_index=0;
 196:main.c        **** 					file_manager.current_page++;
 197:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 198:main.c        **** 				}
 199:main.c        **** 				//If there is another song in the list, get it and play it!
 200:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 201:main.c        **** 					LCDClear(file_manager.back_color);
 202:main.c        **** 					printMenu(&file_manager);									// Print the menu with the next song!
 203:main.c        **** 					file_is_open = loadSongInfo(&current_song, &file_manager);	// Get the current song info.					
 204:main.c        **** 					vs1002Config();												// Enable the MP3 Comm. Lines
 205:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						// Make sure the MP3 player is in the right mode. TO
 206:main.c        **** 					vs1002Finish();												// Disable the MP3 Comm. Lines
 207:main.c        **** 					ledBlueOn();
 208:main.c        **** 					enableMP3Interrupt();
 209:main.c        **** 				}	
 210:main.c        **** 			}
 211:main.c        **** 		}
 212:main.c        **** 
 213:main.c        **** 		if (button_pressed == UP_BUT) {
 214:main.c        **** 		  handleUpButton(current_display, &Files[0]);
 215:main.c        **** 	  } else if (button_pressed == DWN_BUT) {
 216:main.c        **** 	    handleDownButton(current_display, &Files[0]);
 217:main.c        ****     } else if (button_pressed == MID_BUT) {
 218:main.c        ****       handleMiddleButton();
 219:main.c        ****     } else if (update_screen) {
 220:main.c        **** 			disableUIInterrupt(DEBOUNCE_ACCELEROMETER); // Stop interrupts and allow accelerometer to stabil
 221:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 222:main.c        ****         clearScreen();
 223:main.c        **** 				current_display = &settings_menu;
 224:main.c        **** 				current_display->orientation=ORIENTLEFT;
 225:main.c        **** 				ledBlueOff();
 226:main.c        **** 				if(file_is_open) {
 227:main.c        **** 				  ledGrnOn();
 228:main.c        **** 			  } else {
 229:main.c        **** 			    ledRedOn();
 230:main.c        **** 		    }
 231:main.c        **** 			}
 232:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 233:main.c        ****         clearScreen();
 234:main.c        **** 				current_display = &file_manager;
 235:main.c        **** 				current_display->orientation=ORIENTUP;
 236:main.c        **** 				ledGrnOff();
 237:main.c        **** 				ledRedOff();
 238:main.c        ****         if (file_is_open) {
 239:main.c        ****           ledBlueOn();
 240:main.c        ****         }
 241:main.c        **** 			}
 242:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 243:main.c        **** 			enableUIInterrupt();
 244:main.c        **** 		}
 245:main.c        **** 		button_pressed = NO_BUT;
 246:main.c        **** 		enableUIInterrupt();
 247:main.c        **** 	}
 248:main.c        ****     return 0;
 249:main.c        **** }
 250:main.c        **** 
 251:main.c        **** 
 252:main.c        **** // Usage: delay_ms(1000);
 253:main.c        **** // Inputs: int count: Number of milliseconds to delay
 254:main.c        **** // The function will cause the firmware to delay for "count" milleseconds.
 255:main.c        **** void delay_ms(int count)
 256:main.c        **** {
  16              		.loc 1 256 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
 257:main.c        ****   int i;
 258:main.c        ****   count *= 10000;
  22              		.loc 1 258 0
  23 0000 1C309FE5 		ldr	r3, .L5
  24 0004 930002E0 		mul	r2, r3, r0
  25              	.LVL1:
  26 0008 0030A0E3 		mov	r3, #0
  27              	.LVL2:
  28 000c 010000EA 		b	.L2
  29              	.L3:
 259:main.c        ****   for (i = 0; i < count; i++) { asm volatile ("nop"); }
  30              		.loc 1 259 0
  31              	@ 259 "main.c" 1
  32 0010 0000A0E1 		nop
  33              	@ 0 "" 2
  34 0014 013083E2 		add	r3, r3, #1
  35              	.L2:
  36 0018 020053E1 		cmp	r3, r2
  37 001c FBFFFFBA 		blt	.L3
 260:main.c        **** }
  38              		.loc 1 260 0
  39 0020 1EFF2FE1 		bx	lr
  40              	.L6:
  41              		.align	2
  42              	.L5:
  43 0024 10270000 		.word	10000
  44              	.LFE3:
  46              		.align	2
  47              		.global	getButton
  49              	getButton:
  50              	.LFB7:
 261:main.c        **** 
 262:main.c        **** // Usage: bootUp();
 263:main.c        **** // Inputs: None
 264:main.c        **** // This function initializes the serial port, the SD card, the I/O pins and the interrupts
 265:main.c        **** void bootUp(void)
 266:main.c        **** {
 267:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 268:main.c        ****     delay_ms(10); //Delay for power to stablize
 269:main.c        **** 
 270:main.c        ****     //Bring up SD and FAT
 271:main.c        ****     if(!sd_raw_init())
 272:main.c        ****     {
 273:main.c        ****         rprintf("SD Init Error\n");
 274:main.c        ****     }
 275:main.c        ****     if(openroot())
 276:main.c        ****     {
 277:main.c        ****         rprintf("SD OpenRoot Error\n");
 278:main.c        ****     }
 279:main.c        ****      
 280:main.c        ****   //Initialize I/O Ports and Peripherals
 281:main.c        ****   //Setup the MP3 I/O Lines
 282:main.c        ****   IODIR0 |= MP3_XCS;
 283:main.c        ****   IODIR0 &= ~MP3_DREQ;
 284:main.c        ****   PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 285:main.c        ****   IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 286:main.c        ****   
 287:main.c        ****   //Setupt the FM Trans. Lines
 288:main.c        ****   IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 289:main.c        ****   IODIR1 |= FM_CS;
 290:main.c        ****   
 291:main.c        ****   //Setup the SD Card I/O Lines
 292:main.c        ****   IODIR0 |= SD_CS;												//SD Card Outputs
 293:main.c        ****   
 294:main.c        ****   //Setup the Accelerometer I/O Lines
 295:main.c        ****   IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 296:main.c        ****   PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Func
 297:main.c        ****   IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 298:main.c        ****   
 299:main.c        ****   //Setup the LCD I/O Lines
 300:main.c        ****   IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 301:main.c        ****   
 302:main.c        ****   initializeLEDs();
 303:main.c        ****   
 304:main.c        ****   //Setup the Buttons
 305:main.c        ****   IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 306:main.c        ****   
 307:main.c        ****   IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 308:main.c        ****   
 309:main.c        ****   initializeInterrupts();
 310:main.c        ****   initializeUITimer();
 311:main.c        ****   initializeMP3Player();
 312:main.c        ****   
 313:main.c        ****   initializeSPI();
 314:main.c        **** }
 315:main.c        **** 
 316:main.c        **** //Usage: None (Automatically Called by FW)
 317:main.c        **** //Inputs: None
 318:main.c        **** //This function is a global interrupt called by a match on the Timer 0 match.  The interrupt
 319:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 320:main.c        **** // and setting the appropriate global flag if either has occured.
 321:main.c        **** static void timer0ISR(void)
 322:main.c        **** {
 323:main.c        ****   button_pressed = getButton(); // Find out if a button has been pressed, and which one
 324:main.c        ****   cur_position = MMA_get_y();   // Get the current position of the screen
 325:main.c        ****   if((prev_position<700 && cur_position>700) || (prev_position>700 && cur_position<700)) {
 326:main.c        ****     update_screen = 1;
 327:main.c        ****   } else {
 328:main.c        ****     update_screen = 0; // Determine if the accelerometer has been rotated
 329:main.c        ****   }
 330:main.c        ****   prev_position = cur_position; // Save the position value for later reference
 331:main.c        ****   
 332:main.c        ****   T0IR = 0xFF;                  // Clear the timer interrupt
 333:main.c        ****   VICVectAddr = 0;              // Update the VIC priorities
 334:main.c        **** }
 335:main.c        **** 
 336:main.c        **** //  Usage: None (Automatically Called by FW)
 337:main.c        **** //  Inputs: None
 338:main.c        **** //  This function is a global interrupt called by a match on the Timer 1 match.
 339:main.c        **** //  This interrupt is responsible for sending music to the MP3 player when it is needed. 
 340:main.c        **** //  WARNING: Altering the Timer 1 Prescale register or Timer 1 Match value will put proper MP3 play
 341:main.c        **** //           Adding superfluous code to this interrupt section may also contribute to improper MP3 
 342:main.c        **** //
 343:main.c        **** static void timer1ISR(void) {
 344:main.c        ****   sendMP3Data();
 345:main.c        ****   
 346:main.c        ****   T1IR = 0xFF;      // Clear the timer 1 interrupt
 347:main.c        ****   VICVectAddr = 0;  // Update VIC priorities
 348:main.c        **** }
 349:main.c        **** 
 350:main.c        **** // Usage: button_value = getButton();
 351:main.c        **** // Inputs:  None
 352:main.c        **** // Outputs: None
 353:main.c        **** // Function returns the value of the button that is currently being pressed.
 354:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 355:main.c        **** char getButton(void){
  51              		.loc 1 355 0
  52              		@ Function supports interworking.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 356:main.c        ****   if (!(IOPIN1 & SW_UP)) {
  56              		.loc 1 356 0
  57 0028 30209FE5 		ldr	r2, .L13
  58 002c 103092E5 		ldr	r3, [r2, #16]
  59 0030 020513E3 		tst	r3, #8388608
  60 0034 0200A003 		moveq	r0, #2
  61 0038 1EFF2F01 		bxeq	lr
 357:main.c        ****     return UP_BUT;
 358:main.c        ****   } else if (!(IOPIN1 & SW_DWN)) {
  62              		.loc 1 358 0
  63 003c 103092E5 		ldr	r3, [r2, #16]
  64 0040 020613E3 		tst	r3, #2097152
  65 0044 0100A003 		moveq	r0, #1
  66 0048 1EFF2F01 		bxeq	lr
 359:main.c        ****     return DWN_BUT;
 360:main.c        ****   } else if (!(IOPIN1 & SW_MID)) {
  67              		.loc 1 360 0
  68 004c 103092E5 		ldr	r3, [r2, #16]
  69 0050 010513E3 		tst	r3, #4194304
  70 0054 0300A003 		moveq	r0, #3
  71 0058 0000A013 		movne	r0, #0
 361:main.c        ****     return MID_BUT;
 362:main.c        ****   }
 363:main.c        ****   return NO_BUT;
 364:main.c        **** }
  72              		.loc 1 364 0
  73 005c 1EFF2FE1 		bx	lr
  74              	.L14:
  75              		.align	2
  76              	.L13:
  77 0060 008002E0 		.word	-536707072
  78              	.LFE7:
  80              		.align	2
  81              		.global	getNewFiles
  83              	getNewFiles:
  84              	.LFB8:
 365:main.c        **** 
 366:main.c        **** 
 367:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
  85              		.loc 1 367 0
  86              		@ Function supports interworking.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
  91 0064 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
  92              	.LCFI0:
 368:main.c        ****   if(files->current_page < files->total_pages){
  93              		.loc 1 368 0
  94 0068 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  95 006c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  96 0070 030052E1 		cmp	r2, r3
  97              		.loc 1 367 0
  98 0074 0150A0E1 		mov	r5, r1
  99              		.loc 1 368 0
 100 0078 00C0A033 		movcc	ip, #0
 101              	.LVL4:
 102              	.LBB138:
 103              	.LBB139:
 369:main.c        ****     for(int i =0; i<NUMROWS; i++){
 370:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 371:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 104              		.loc 1 371 0
 105 007c 0F40A033 		movcc	r4, #15
 106              	.LBE139:
 107              	.LBE138:
 108              		.loc 1 368 0
 109 0080 1000003A 		bcc	.L17
 110              	.LVL5:
 111              	.LBB141:
 372:main.c        ****       }
 373:main.c        ****     }
 374:main.c        ****   }
 375:main.c        ****   else{
 376:main.c        ****     for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 112              		.loc 1 376 0
 113 0084 B8309FE5 		ldr	r3, .L28
 114 0088 00C0A0E3 		mov	ip, #0
 115              	.LVL6:
 116 008c 004093E5 		ldr	r4, [r3, #0]
 117 0090 0E70E0E3 		mvn	r7, #14
 118              	.LBB143:
 377:main.c        ****       for(int j=0; j<MAXFILENAMELEN; j++){
 378:main.c        ****         files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 119              		.loc 1 378 0
 120 0094 0F60A0E3 		mov	r6, #15
 121 0098 170000EA 		b	.L18
 122              	.LVL7:
 123              	.L19:
 124              	.LBE143:
 125              	.LBE141:
 126              	.LBB144:
 127              	.LBB140:
 128              		.loc 1 371 0
 129 009c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 130 00a0 94C323E0 		mla	r3, r4, r3, ip
 131 00a4 833285E0 		add	r3, r5, r3, asl #5
 132 00a8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 133              		.loc 1 370 0
 134 00ac 012082E2 		add	r2, r2, #1
 135 00b0 1E0052E3 		cmp	r2, #30
 136              		.loc 1 371 0
 137 00b4 0130C1E4 		strb	r3, [r1], #1
 138              		.loc 1 370 0
 139 00b8 F7FFFF1A 		bne	.L19
 140              	.LBE140:
 141              		.loc 1 369 0
 142 00bc 01C08CE2 		add	ip, ip, #1
 143 00c0 0F005CE3 		cmp	ip, #15
 144 00c4 1C00000A 		beq	.L25
 145              	.LVL8:
 146              	.L17:
 147 00c8 8C3280E0 		add	r3, r0, ip, asl #5
 148 00cc 0C1083E2 		add	r1, r3, #12
 149 00d0 0020A0E3 		mov	r2, #0
 150 00d4 F0FFFFEA 		b	.L19
 151              	.LVL9:
 152              	.L21:
 153              	.LBE144:
 154              	.LBB145:
 155              	.LBB142:
 156              		.loc 1 378 0
 157 00d8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 158 00dc 96C323E0 		mla	r3, r6, r3, ip
 159 00e0 833285E0 		add	r3, r5, r3, asl #5
 160 00e4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 161              		.loc 1 377 0
 162 00e8 012082E2 		add	r2, r2, #1
 163 00ec 1E0052E3 		cmp	r2, #30
 164              		.loc 1 378 0
 165 00f0 0130C1E4 		strb	r3, [r1], #1
 166              		.loc 1 377 0
 167 00f4 F7FFFF1A 		bne	.L21
 168              	.LBE142:
 169              		.loc 1 376 0
 170 00f8 01C08CE2 		add	ip, ip, #1
 171              	.LVL10:
 172              	.L18:
 173 00fc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 174 0100 974322E0 		mla	r2, r7, r3, r4
 175              	.LVL11:
 176 0104 02005CE1 		cmp	ip, r2
 177 0108 823280A0 		addge	r3, r0, r2, asl #5
 178 010c 0C0083A2 		addge	r0, r3, #12
 179              	.LVL12:
 180              	.LBE145:
 181              	.LBB146:
 379:main.c        ****       }
 380:main.c        ****     }
 381:main.c        ****     for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0
 182              		.loc 1 381 0
 183 0110 0030A0A3 		movge	r3, #0
 184 0114 040000AA 		bge	.L23
 185              	.LVL13:
 186              	.L22:
 187              	.LBE146:
 188              	.LBB147:
 189              		.loc 1 376 0
 190 0118 8C3280E0 		add	r3, r0, ip, asl #5
 191 011c 0C1083E2 		add	r1, r3, #12
 192 0120 0020A0E3 		mov	r2, #0
 193              	.LVL14:
 194 0124 EBFFFFEA 		b	.L21
 195              	.LVL15:
 196              	.L24:
 197              	.LBE147:
 198              	.LBB148:
 199              		.loc 1 381 0
 200 0128 203040E5 		strb	r3, [r0, #-32]
 201              	.L23:
 202 012c 0E0052E3 		cmp	r2, #14
 203 0130 200080E2 		add	r0, r0, #32
 204 0134 012082E2 		add	r2, r2, #1
 205 0138 FAFFFFDA 		ble	.L24
 206              	.LVL16:
 207              	.L25:
 208              	.LBE148:
 382:main.c        ****   }
 383:main.c        **** }
 209              		.loc 1 383 0
 210 013c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 211 0140 1EFF2FE1 		bx	lr
 212              	.L29:
 213              		.align	2
 214              	.L28:
 215 0144 04000000 		.word	NUMBEROFFILES
 216              	.LFE8:
 218              		.align	2
 219              		.global	fillSettings
 221              	fillSettings:
 222              	.LFB13:
 384:main.c        **** 
 385:main.c        **** // Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 386:main.c        **** // Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 387:main.c        **** // DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 388:main.c        **** //
 389:main.c        **** // The function takes the currently selected file name from the selected_song structure and loads
 390:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 391:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 392:main.c        **** //
 393:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 394:main.c        ****   // Get the selected songs file name
 395:main.c        ****   for(int i=0; i < MAXFILENAMELEN; i++) {
 396:main.c        ****     song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 397:main.c        ****   }
 398:main.c        ****   // Get the selected songs display name
 399:main.c        ****   for(int i=0; i<MAXDISPLEN; i++){
 400:main.c        ****     if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 401:main.c        ****       song->name[i] = '\0';
 402:main.c        ****       i = MAXDISPLEN;
 403:main.c        ****     } else {
 404:main.c        ****       song->name[i]=song->file_name[i];
 405:main.c        ****     }
 406:main.c        ****   }
 407:main.c        ****   
 408:main.c        ****   selectSD(); // Make sure SPI is selected for reading the card
 409:main.c        ****   
 410:main.c        ****   // Check to see if the selected song is valid
 411:main.c        ****   if(!root_file_exists(song->file_name)) {
 412:main.c        ****     selectLCD();
 413:main.c        ****     return 0;
 414:main.c        ****   } else {
 415:main.c        ****     // open the selected song
 416:main.c        ****     song->handle = root_open(song->file_name);
 417:main.c        ****     song->size = fat16_file_size(song->handle);
 418:main.c        ****     fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 419:main.c        ****   }
 420:main.c        ****   
 421:main.c        ****   selectLCD();
 422:main.c        ****   return 1;
 423:main.c        **** }
 424:main.c        **** 
 425:main.c        **** // Usage: CloseSong(&current_song);
 426:main.c        **** // Inputs: SongStruct *song: Pointer to a song structure to be closed
 427:main.c        **** // Function closes a song that is currently open.
 428:main.c        **** void closeSong(SongStruct *song){
 429:main.c        ****   selectSD(); // Open SPI line for the SD Card.
 430:main.c        ****   fat16_close_file(song->handle);
 431:main.c        ****   selectLCD(); // Return SPI line to LCD.
 432:main.c        **** }
 433:main.c        **** 
 434:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 435:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 436:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 437:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 438:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 439:main.c        **** 	selectLCD();		//Hand over SPI lines to LCD talk
 440:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 441:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 442:main.c        **** 	if(direction == PREVIOUS){
 443:main.c        **** 		display->current_row--;
 444:main.c        **** 		display->current_index--;
 445:main.c        **** 	}
 446:main.c        **** 	else{
 447:main.c        **** 		display->current_row++;
 448:main.c        **** 		display->current_index++;		
 449:main.c        **** 	}
 450:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 451:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 452:main.c        **** }
 453:main.c        **** 
 454:main.c        **** // Usage: printMenu(&settings_menu);
 455:main.c        **** // Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 456:main.c        **** // This function writes the title, along with all of the file names in the display struct to the sc
 457:main.c        **** //
 458:main.c        **** void printMenu(DisplayStruct *display){
 459:main.c        ****   selectLCD(); // Hand over SPI lines to LCD talk
 460:main.c        ****   if (display->current_page == 0) {
 461:main.c        ****     LCDPrintString(display->title,0, display->text_color, 0,0,display->orientation);
 462:main.c        ****   }
 463:main.c        ****   for (int j = 0; j < NUMROWS; j++){
 464:main.c        ****     LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 465:main.c        ****   }
 466:main.c        ****   LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 467:main.c        ****   LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->c
 468:main.c        **** }
 469:main.c        **** 
 470:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 471:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 472:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 473:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 474:main.c        **** //also loads the default display values along with the default settings values. 
 475:main.c        **** void fillSettings(DisplayStruct *menu){
 223              		.loc 1 475 0
 224              		@ Function supports interworking.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL17:
 229 0148 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 230              	.LCFI1:
 231              	.LBB149:
 476:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 477:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 232              		.loc 1 477 0
 233 014c A4909FE5 		ldr	r9, .L36
 478:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 234              		.loc 1 478 0
 235 0150 A4A09FE5 		ldr	sl, .L36+4
 479:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 236              		.loc 1 479 0
 237 0154 A4809FE5 		ldr	r8, .L36+8
 480:main.c        **** 		menu->title[i] = settings[i];
 238              		.loc 1 480 0
 239 0158 A4709FE5 		ldr	r7, .L36+12
 240              	.LBE149:
 241              		.loc 1 475 0
 242 015c 0050A0E1 		mov	r5, r0
 243 0160 0060A0E1 		mov	r6, r0
 244 0164 0040A0E1 		mov	r4, r0
 245 0168 00C0A0E3 		mov	ip, #0
 246              	.LVL18:
 247              	.L31:
 248              	.LBB150:
 249              		.loc 1 477 0
 250 016c 0C30D9E7 		ldrb	r3, [r9, ip]	@ zero_extendqisi2
 251              		.loc 1 478 0
 252 0170 0C20DAE7 		ldrb	r2, [sl, ip]	@ zero_extendqisi2
 253              		.loc 1 479 0
 254 0174 0C10D8E7 		ldrb	r1, [r8, ip]	@ zero_extendqisi2
 255              		.loc 1 480 0
 256 0178 0C00D7E7 		ldrb	r0, [r7, ip]	@ zero_extendqisi2
 257              	.LVL19:
 258              		.loc 1 476 0
 259 017c 01C08CE2 		add	ip, ip, #1
 260 0180 16005CE3 		cmp	ip, #22
 261              		.loc 1 477 0
 262 0184 0C30C4E5 		strb	r3, [r4, #12]
 263              		.loc 1 478 0
 264 0188 2C20C4E5 		strb	r2, [r4, #44]
 265              		.loc 1 479 0
 266 018c 4C10C4E5 		strb	r1, [r4, #76]
 267              		.loc 1 480 0
 268 0190 EC01C4E5 		strb	r0, [r4, #492]
 269              		.loc 1 476 0
 270 0194 014084E2 		add	r4, r4, #1
 271 0198 F3FFFF1A 		bne	.L31
 272 019c 0330A0E3 		mov	r3, #3
 273              	.LVL20:
 274              	.LBE150:
 275              	.LBB151:
 481:main.c        **** 	}
 482:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 483:main.c        **** 		menu->list[i].file_name[0]='\0';
 276              		.loc 1 483 0
 277 01a0 0020A0E3 		mov	r2, #0
 278              	.L32:
 279              		.loc 1 482 0
 280 01a4 013083E2 		add	r3, r3, #1
 281 01a8 0F0053E3 		cmp	r3, #15
 282              		.loc 1 483 0
 283 01ac 6C20C6E5 		strb	r2, [r6, #108]
 284 01b0 0010A0E3 		mov	r1, #0
 285              		.loc 1 482 0
 286 01b4 206086E2 		add	r6, r6, #32
 287 01b8 F9FFFF1A 		bne	.L32
 288              	.LBE151:
 484:main.c        **** 	}
 485:main.c        **** 	menu->text_color=white;
 289              		.loc 1 485 0
 290 01bc 44309FE5 		ldr	r3, .L36+16
 291              	.LVL21:
 292 01c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 293 01c4 0330C5E5 		strb	r3, [r5, #3]
 486:main.c        **** 	menu->back_color=black;
 294              		.loc 1 486 0
 295 01c8 3C309FE5 		ldr	r3, .L36+20
 296 01cc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 487:main.c        **** 	menu->current_row=1;
 297              		.loc 1 487 0
 298 01d0 0130A0E3 		mov	r3, #1
 488:main.c        **** 	menu->current_column=0;
 489:main.c        **** 	menu->current_index=0;
 490:main.c        **** 	menu->orientation = ORIENTLEFT;
 491:main.c        **** 	menu->current_page=0;
 492:main.c        **** 	menu->total_pages = 0;
 299              		.loc 1 492 0
 300 01d4 0510C5E5 		strb	r1, [r5, #5]
 301              		.loc 1 486 0
 302 01d8 0420C5E5 		strb	r2, [r5, #4]
 303              		.loc 1 490 0
 304 01dc 0230C5E5 		strb	r3, [r5, #2]
 305              		.loc 1 487 0
 306 01e0 0030C5E5 		strb	r3, [r5, #0]
 307              		.loc 1 488 0
 308 01e4 0110C5E5 		strb	r1, [r5, #1]
 309              		.loc 1 489 0
 310 01e8 081085E5 		str	r1, [r5, #8]
 311              		.loc 1 491 0
 312 01ec 0610C5E5 		strb	r1, [r5, #6]
 493:main.c        **** }
 313              		.loc 1 493 0
 314 01f0 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 315 01f4 1EFF2FE1 		bx	lr
 316              	.L37:
 317              		.align	2
 318              	.L36:
 319 01f8 00000000 		.word	volume
 320 01fc 00000000 		.word	radio_power
 321 0200 00000000 		.word	radio_channel_menu
 322 0204 00000000 		.word	settings
 323 0208 00000000 		.word	white
 324 020c 00000000 		.word	black
 325              	.LFE13:
 327              		.align	2
 328              		.global	reset
 330              	reset:
 331              	.LFB18:
 494:main.c        **** 
 495:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 496:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 497:main.c        **** //			FileStruct *Files: List of files on the SD card
 498:main.c        **** //Outputs: None
 499:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 500:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 501:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 502:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 503:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 504:main.c        **** 	}
 505:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 506:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 507:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 508:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 509:main.c        **** 		//if(file_is_open)quickClear(display);
 510:main.c        **** 		//else LCDClear(display->back_color);
 511:main.c        **** 		quickClear(display);
 512:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 513:main.c        **** 		display->current_index=14;					//
 514:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 515:main.c        **** 		printMenu(display);							//	display previous page
 516:main.c        **** 	}
 517:main.c        **** }
 518:main.c        **** 
 519:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 520:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 521:main.c        **** //			FileStruct *Files: List of files on the SD card
 522:main.c        **** //Outputs: None
 523:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 524:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 525:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 526:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 527:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 528:main.c        **** 	}
 529:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 530:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 531:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 532:main.c        **** 		display->current_page+=1;		
 533:main.c        **** 		//if(file_is_open)quickClear(display);
 534:main.c        **** 		//else LCDClear(display->back_color);
 535:main.c        **** 		quickClear(display);
 536:main.c        **** 		display->current_row=1;
 537:main.c        **** 		display->current_index=0;
 538:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 539:main.c        **** 		printMenu(display);				
 540:main.c        **** 	}
 541:main.c        **** }
 542:main.c        **** 
 543:main.c        **** //Usage: handleMiddleButton();
 544:main.c        **** //Inputs: None
 545:main.c        **** //Outputs: None
 546:main.c        **** //Description: This function is called when the middle button is pressed.
 547:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 548:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 549:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 550:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 551:main.c        **** void handleMiddleButton(void){
 552:main.c        ****   disableUIInterrupt(DEBOUNCE_SWITCH); // was 250
 553:main.c        ****   
 554:main.c        ****   // If the File Menu is being displayed, middle button acts like play/stop
 555:main.c        ****   if (current_display == &file_manager) {
 556:main.c        ****     if (!file_is_open) { // If a file isn't already playing then this acts like a play button
 557:main.c        ****       file_is_open = loadSongInfo(&current_song, &file_manager); // Get the current song info.
 558:main.c        ****       if (!file_is_open) { // Make sure this is a valid file
 559:main.c        ****         LCDClear(white);
 560:main.c        ****         LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 561:main.c        ****         delay_ms(1000);
 562:main.c        ****         LCDClear(black);
 563:main.c        ****         printMenu(&file_manager);
 564:main.c        ****       } else {
 565:main.c        ****         startMP3Player();
 566:main.c        ****       }
 567:main.c        ****     } else { // If a file is already open then this acts like a stop button
 568:main.c        ****       stopMP3Player();
 569:main.c        ****     }
 570:main.c        ****   } else { // Else we are on the Settings menu, and we need to handle the settins options
 571:main.c        ****     clearScreen();
 572:main.c        ****     LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_displa
 573:main.c        **** 		enableUIInterrupt();
 574:main.c        **** 		if (current_display->current_row == VOLUMEMENU) {
 575:main.c        **** 			enableUIInterrupt();
 576:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 577:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 578:main.c        **** 			while(button_pressed < MID_BUT){
 579:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 150
 580:main.c        ****         if (button_pressed==UP_BUT) {
 581:main.c        ****           raiseVolume(1);
 582:main.c        ****         } else if (button_pressed==DWN_BUT) {
 583:main.c        ****           lowerVolume(1);
 584:main.c        ****         }
 585:main.c        ****         enableUIInterrupt();
 586:main.c        **** 			}
 587:main.c        **** 		}	
 588:main.c        ****     else if (current_display->current_row == RADIOCMENU) {
 589:main.c        ****       displayRadioMenu();
 590:main.c        ****       button_pressed = NO_BUT;
 591:main.c        ****       enableUIInterrupt();
 592:main.c        ****       while (button_pressed < MID_BUT) {
 593:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 100
 594:main.c        ****         if (button_pressed == UP_BUT) {
 595:main.c        ****           changeRadioFrequency(2);
 596:main.c        ****         } else if (button_pressed == DWN_BUT) {
 597:main.c        ****           changeRadioFrequency(-2);
 598:main.c        ****         }
 599:main.c        ****         enableUIInterrupt();
 600:main.c        ****       }
 601:main.c        ****       setRadioFrequency(radio_channel); // TODO Not really necessary, is it?
 602:main.c        ****     } else if (current_display->current_row == RADIOPMENU) {
 603:main.c        ****       LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 604:main.c        ****       if (radio_enable) {
 605:main.c        ****         LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 606:main.c        ****       } else {
 607:main.c        ****         LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 608:main.c        ****       }
 609:main.c        ****       button_pressed = NO_BUT;
 610:main.c        ****       enableUIInterrupt();
 611:main.c        ****       while (button_pressed < MID_BUT) {
 612:main.c        ****         disableUIInterrupt(DEBOUNCE_SWITCH); // was 100
 613:main.c        ****         if (button_pressed == UP_BUT) {
 614:main.c        ****           enableRadio();
 615:main.c        ****         } else if (button_pressed == DWN_BUT) {
 616:main.c        ****           disableRadio();
 617:main.c        ****         }
 618:main.c        ****         enableUIInterrupt();
 619:main.c        ****       }
 620:main.c        ****     }
 621:main.c        ****     clearScreen();
 622:main.c        ****     printMenu(current_display);
 623:main.c        ****   }
 624:main.c        ****   enableUIInterrupt();
 625:main.c        **** }
 626:main.c        **** 
 627:main.c        **** //  Usage: quickClear(currentDisplay);
 628:main.c        **** //  Inputs: DisplayStruct *display - pointer to the display that contains the current display
 629:main.c        **** //  Outputs: None
 630:main.c        **** //  Description: Rather than painting every pixel a specific color (like LCDClear does) this routin
 631:main.c        **** //               will simply color all of the text the same color as the background, giving the ill
 632:main.c        **** //               of a clear screen.  Only works with the background color.  Much faster than LCDCle
 633:main.c        **** //               good to use while an MP3 is playing.
 634:main.c        **** //
 635:main.c        **** void quickClear(DisplayStruct *display){
 636:main.c        ****   selectLCD();		//Hand over SPI lines to LCD talk
 637:main.c        ****   // If we're on the first page of the menu, we also need to clear the title.
 638:main.c        ****   if (display->current_page == 0) {
 639:main.c        ****     LCDPrintString(display->title, 0, display->back_color, 0, 0, display->orientation);
 640:main.c        ****   }
 641:main.c        ****   LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 642:main.c        ****   for (int j = 0; j < NUMROWS; j++) {
 643:main.c        ****     LCDPrintString(display->list[j].file_name, 0, display->back_color, j+1, 0, display->orientation
 644:main.c        ****     LCDPrintString(newline, 0, black, j+1, 0, 0);
 645:main.c        ****   }
 646:main.c        **** }
 647:main.c        **** 
 648:main.c        **** // Intentionally faults Watchdog to trigger a reset condition
 649:main.c        **** //
 650:main.c        **** void reset(void) {
 332              		.loc 1 650 0
 333              		@ Function supports interworking.
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 651:main.c        ****   WDMOD |= 3;
 337              		.loc 1 651 0
 338 0210 0E22A0E3 		mov	r2, #-536870912
 339 0214 003092E5 		ldr	r3, [r2, #0]
 340 0218 033083E3 		orr	r3, r3, #3
 341 021c 003082E5 		str	r3, [r2, #0]
 652:main.c        ****   WDFEED = 0xAA;
 342              		.loc 1 652 0
 343 0220 AA10A0E3 		mov	r1, #170
 653:main.c        ****   WDFEED = 0x55;
 344              		.loc 1 653 0
 345 0224 5530A0E3 		mov	r3, #85
 346              		.loc 1 652 0
 347 0228 081082E5 		str	r1, [r2, #8]
 348              		.loc 1 653 0
 349 022c 083082E5 		str	r3, [r2, #8]
 654:main.c        ****   WDFEED = 0xAA;
 655:main.c        ****   WDFEED = 0x00;
 350              		.loc 1 655 0
 351 0230 0030A0E3 		mov	r3, #0
 352              		.loc 1 654 0
 353 0234 081082E5 		str	r1, [r2, #8]
 354              		.loc 1 655 0
 355 0238 083082E5 		str	r3, [r2, #8]
 656:main.c        **** }
 356              		.loc 1 656 0
 357 023c 1EFF2FE1 		bx	lr
 358              	.LFE18:
 360              		.align	2
 361              		.global	initializeSPI
 363              	initializeSPI:
 364              	.LFB30:
 657:main.c        **** 
 658:main.c        **** // Flöre refactors here!
 659:main.c        **** 
 660:main.c        **** //
 661:main.c        **** // RADIO
 662:main.c        **** //
 663:main.c        **** 
 664:main.c        **** // initializes the FM transmitter to a given frequency.
 665:main.c        **** // Frequency is given in tenths of a MHz. So 973 means 97.3 MHz.
 666:main.c        **** //
 667:main.c        **** void initializeRadio(int frequency) {
 668:main.c        ****   selectRadio();        // Select SPI for FM Transmitter
 669:main.c        ****   
 670:main.c        ****   // TODO use setRadioFrequency here?
 671:main.c        ****   ns73Config();         // Configure the FM Trans. I/O
 672:main.c        ****   ns73Init();           // Setup the Default Register Values
 673:main.c        ****   ns73SetChannel(frequency); // Transmit
 674:main.c        ****   
 675:main.c        ****   deselectRadio();      // Remove FM Transmitter from SPI bus
 676:main.c        ****   delay_ms(100);
 677:main.c        **** }
 678:main.c        **** 
 679:main.c        **** // Enables the radio.
 680:main.c        **** //
 681:main.c        **** void enableRadio(void) {
 682:main.c        ****   radio_enable = ON;
 683:main.c        ****   
 684:main.c        ****   // graphics
 685:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 686:main.c        ****   LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 687:main.c        ****   
 688:main.c        ****   // send data
 689:main.c        ****   selectRadio();          //Select the FM transmitter
 690:main.c        ****   ns73Config();           // Configure the FM Trans. I/O
 691:main.c        ****   ns73Send(R0, PE | AG);  // Power up the radio
 692:main.c        ****   deselectRadio();        // Unselect the FM transmitter
 693:main.c        **** }
 694:main.c        **** 
 695:main.c        **** // Disables the radio.
 696:main.c        **** //
 697:main.c        **** void disableRadio(void) {
 698:main.c        ****   radio_enable = OFF;
 699:main.c        ****   
 700:main.c        ****   // graphics
 701:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 702:main.c        ****   LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 703:main.c        ****   
 704:main.c        ****   // send data
 705:main.c        ****   selectRadio();      //Select the FM transmitter
 706:main.c        ****   ns73Config();         //Configure the FM Trans. I/O
 707:main.c        ****   ns73Send(R0, MUTE);   // Mute the radio	
 708:main.c        ****   deselectRadio();      //Unselect the FM transmitter
 709:main.c        **** }
 710:main.c        **** 
 711:main.c        **** // Set the radio frequency to f where f is i.e. 1000 for 100.0 Mhz.
 712:main.c        **** //
 713:main.c        **** void setRadioFrequency(int f) {
 714:main.c        ****   selectRadio();     // Select the FM transmitter
 715:main.c        ****   ns73Config();      // Configure the FM Trans. I/O
 716:main.c        ****   ns73SetChannel(f); // Set the channel	
 717:main.c        ****   deselectRadio();   // Unselect the FM transmitter
 718:main.c        **** }
 719:main.c        **** 
 720:main.c        **** // Change the radio frequency by f where change is 0.1 times f Mhz.
 721:main.c        **** //
 722:main.c        **** void changeRadioFrequency(int f) {
 723:main.c        ****   if ((885 < radio_channel) && (radio_channel < 1075)) {
 724:main.c        ****     radio_channel += f;
 725:main.c        ****   }
 726:main.c        ****   displayRadioMenu();
 727:main.c        ****   ns73SetChannel(radio_channel); // TODO or setRadioFrequency?
 728:main.c        **** }
 729:main.c        **** 
 730:main.c        **** //
 731:main.c        **** // MP3
 732:main.c        **** //
 733:main.c        **** 
 734:main.c        **** // Initialize the MP3 player with double clock speed and lower volume.
 735:main.c        **** //
 736:main.c        **** void initializeMP3Player(void) {
 737:main.c        ****   vs1002Config(); // Configure MP3 I/O
 738:main.c        ****   vs1002Reset();  // Reset MP3 Player
 739:main.c        ****   vs1002Init();   // Double the clock speed and set to "New" mode
 740:main.c        ****   lowerVolume(5); // Lower the Volume a bit
 741:main.c        ****   vs1002Finish(); // Restore the SPI I/O lines
 742:main.c        **** }
 743:main.c        **** 
 744:main.c        **** // Start playing.
 745:main.c        **** //
 746:main.c        **** void startMP3Player(void) {
 747:main.c        ****   vs1002Config();                       // Enable the MP3 Comm. Lines
 748:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_SDINEW);  // Make sure the MP3 player is in the right mode.
 749:main.c        ****   vs1002Finish();                       // Disable the MP3 Comm. Lines
 750:main.c        ****   ledBlueOn();
 751:main.c        ****   sendMP3Data();                        // Send first song data
 752:main.c        ****   PINSEL1 |= 0x00000C00;
 753:main.c        ****   enableMP3Interrupt();
 754:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES); // Assign LCD pins as Outputs
 755:main.c        **** }
 756:main.c        **** 
 757:main.c        **** // Sends a piece of mp3 data from the current song.
 758:main.c        **** //
 759:main.c        **** void sendMP3Data(void) {
 760:main.c        ****   vs1002Config();                                         // Enable MP3 Comm. Lines
 761:main.c        ****   while (IOPIN0 & MP3_DREQ) {
 762:main.c        ****     vs1002SendMusic(current_song.data, MAXBUFFERSIZE);    //Send 32 Bytes of buffered song data
 763:main.c        ****     // Buffer more data if available
 764:main.c        ****     if (fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0) {
 765:main.c        ****       song_is_over = 1;
 766:main.c        ****     } else {
 767:main.c        ****       song_is_over = 0; // If there's no more data available, set the flag, else leave it alone
 768:main.c        ****     }
 769:main.c        ****   }
 770:main.c        ****   vs1002Finish();                                         // Disable MP3 Comm. Lines
 771:main.c        **** }
 772:main.c        **** 
 773:main.c        **** // Stop playing.
 774:main.c        **** //
 775:main.c        **** void stopMP3Player(void) {
 776:main.c        ****   disableMP3Interrupt();
 777:main.c        ****   
 778:main.c        ****   ledBlueOff();
 779:main.c        ****   vs1002Config();                                         // Enable the MP3 Comm Lines
 780:main.c        ****   vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);                  // Tell the MP3 Player to jump out of WAV
 781:main.c        ****   for(int i=0; i<150; i++) { vs1002SCIWrite(SCI_MODE, 0x00); } // Send 150 zeroes to the player to 
 782:main.c        ****   vs1002Finish();                                         // Disable the MP3 Comm. Lines
 783:main.c        ****   IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);       // Assign LCD pins as Outputs
 784:main.c        ****   closeSong(&current_song);                               // Close the current song
 785:main.c        ****   file_is_open = 0;                                       // Clear the global flag
 786:main.c        ****   
 787:main.c        ****   exclusiveUIInterrupt();
 788:main.c        **** }
 789:main.c        **** 
 790:main.c        **** //
 791:main.c        **** // VOLUME
 792:main.c        **** //
 793:main.c        **** 
 794:main.c        **** // Raises the Volume by n.
 795:main.c        **** //
 796:main.c        **** void raiseVolume(int n) {
 797:main.c        ****   for(char i = 0; i < n; i++) {
 798:main.c        ****     if(volume_setting < 32){
 799:main.c        ****       volume_setting += 1;
 800:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 801:main.c        ****       vs1002SetVolume(INCREASE);  // Raise the volume
 802:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 803:main.c        ****     }
 804:main.c        ****   }
 805:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 806:main.c        ****   LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orientat
 807:main.c        **** }
 808:main.c        **** 
 809:main.c        **** // Lowers the volume by n.
 810:main.c        **** //
 811:main.c        **** void lowerVolume(int n) {
 812:main.c        ****   for(char i = 0; i < n; i++) {
 813:main.c        ****     if(volume_setting >= 0){
 814:main.c        ****       volume_setting--;
 815:main.c        ****       vs1002Config();             // Enable the MP3 Comm. Lines
 816:main.c        ****       vs1002SetVolume(DECREASE);  // Lower the volume
 817:main.c        ****       vs1002Finish();             // Disable MP3 Comm. Lines
 818:main.c        ****     }
 819:main.c        ****   }
 820:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 821:main.c        ****   LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 822:main.c        **** }
 823:main.c        **** 
 824:main.c        **** //
 825:main.c        **** // SPI
 826:main.c        **** //
 827:main.c        **** 
 828:main.c        **** // Initialize the SPI port.
 829:main.c        **** //
 830:main.c        **** void initializeSPI(void) {
 365              		.loc 1 830 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 831:main.c        ****   S0SPCCR = 64;   // SCK = 1 MHz, counter > 8 and even
 370              		.loc 1 831 0
 371 0240 10309FE5 		ldr	r3, .L42
 372 0244 4020A0E3 		mov	r2, #64
 373 0248 0C2083E5 		str	r2, [r3, #12]
 832:main.c        ****   S0SPCR  = 0x20; // Master, no interrupt enable, 8 bits
 374              		.loc 1 832 0
 375 024c 2020A0E3 		mov	r2, #32
 376 0250 002083E5 		str	r2, [r3, #0]
 833:main.c        **** }
 377              		.loc 1 833 0
 378 0254 1EFF2FE1 		bx	lr
 379              	.L43:
 380              		.align	2
 381              	.L42:
 382 0258 000002E0 		.word	-536739840
 383              	.LFE30:
 385              		.align	2
 386              		.global	selectSD
 388              	selectSD:
 389              	.LFB31:
 834:main.c        **** 
 835:main.c        **** // Hand over SPI lines to SD talk.
 836:main.c        **** //
 837:main.c        **** void selectSD(void) {
 390              		.loc 1 837 0
 391              		@ Function supports interworking.
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 838:main.c        ****   PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 395              		.loc 1 838 0
 396 025c 0C209FE5 		ldr	r2, .L46
 397 0260 003092E5 		ldr	r3, [r2, #0]
 398 0264 153C83E3 		orr	r3, r3, #5376
 399 0268 003082E5 		str	r3, [r2, #0]
 839:main.c        **** }
 400              		.loc 1 839 0
 401 026c 1EFF2FE1 		bx	lr
 402              	.L47:
 403              		.align	2
 404              	.L46:
 405 0270 00C002E0 		.word	-536690688
 406              	.LFE31:
 408              		.align	2
 409              		.global	selectLCD
 411              	selectLCD:
 412              	.LFB32:
 840:main.c        **** 
 841:main.c        **** // Hand over SPI lines to LCD talk.
 842:main.c        **** //
 843:main.c        **** void selectLCD(void) {
 413              		.loc 1 843 0
 414              		@ Function supports interworking.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 844:main.c        ****   PINSEL0 &= 0xFFFFC00F;
 418              		.loc 1 844 0
 419 0274 10209FE5 		ldr	r2, .L50
 420 0278 003092E5 		ldr	r3, [r2, #0]
 421 027c FF3DC3E3 		bic	r3, r3, #16320
 422 0280 3030C3E3 		bic	r3, r3, #48
 423 0284 003082E5 		str	r3, [r2, #0]
 845:main.c        **** }
 424              		.loc 1 845 0
 425 0288 1EFF2FE1 		bx	lr
 426              	.L51:
 427              		.align	2
 428              	.L50:
 429 028c 00C002E0 		.word	-536690688
 430              	.LFE32:
 432              		.align	2
 433              		.global	selectRadio
 435              	selectRadio:
 436              	.LFB33:
 846:main.c        **** 
 847:main.c        **** // Hand over SPI lines to radio talk.
 848:main.c        **** void selectRadio(void) {
 437              		.loc 1 848 0
 438              		@ Function supports interworking.
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 849:main.c        ****   IOCLR1 |= FM_CS;
 442              		.loc 1 849 0
 443 0290 24209FE5 		ldr	r2, .L56
 444 0294 1C3092E5 		ldr	r3, [r2, #28]
 445 0298 013283E3 		orr	r3, r3, #268435456
 446 029c 1C3082E5 		str	r3, [r2, #28]
 447              	.LBB152:
 448              	.LBB153:
 449              		.loc 1 259 0
 450 02a0 18209FE5 		ldr	r2, .L56+4
 451              	.LBE153:
 452              	.LBE152:
 453              		.loc 1 849 0
 454 02a4 0030A0E3 		mov	r3, #0
 455              	.LVL22:
 456              	.L53:
 457              	.LBB155:
 458              	.LBB154:
 459              		.loc 1 259 0
 460              	@ 259 "main.c" 1
 461 02a8 0000A0E1 		nop
 462              	@ 0 "" 2
 463 02ac 013083E2 		add	r3, r3, #1
 464 02b0 020053E1 		cmp	r3, r2
 465 02b4 FBFFFF1A 		bne	.L53
 466              	.LBE154:
 467              	.LBE155:
 850:main.c        ****   delay_ms(100);
 851:main.c        ****   // In enableRadio: delay_ms(900); // TODO Does this really need to be 900?
 852:main.c        **** }
 468              		.loc 1 852 0
 469 02b8 1EFF2FE1 		bx	lr
 470              	.L57:
 471              		.align	2
 472              	.L56:
 473 02bc 008002E0 		.word	-536707072
 474 02c0 40420F00 		.word	1000000
 475              	.LFE33:
 477              		.align	2
 478              		.global	deselectRadio
 480              	deselectRadio:
 481              	.LFB34:
 853:main.c        **** 
 854:main.c        **** // Hand off SPI lines from radio talk.
 855:main.c        **** void deselectRadio(void) {
 482              		.loc 1 855 0
 483              		@ Function supports interworking.
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 856:main.c        ****   IOSET1 |= FM_CS;
 487              		.loc 1 856 0
 488 02c4 0C209FE5 		ldr	r2, .L60
 489 02c8 143092E5 		ldr	r3, [r2, #20]
 490 02cc 013283E3 		orr	r3, r3, #268435456
 491 02d0 143082E5 		str	r3, [r2, #20]
 857:main.c        **** }
 492              		.loc 1 857 0
 493 02d4 1EFF2FE1 		bx	lr
 494              	.L61:
 495              		.align	2
 496              	.L60:
 497 02d8 008002E0 		.word	-536707072
 498              	.LFE34:
 500              		.align	2
 501              		.global	isUSBConnected
 503              	isUSBConnected:
 504              	.LFB35:
 858:main.c        **** 
 859:main.c        **** //
 860:main.c        **** // USB
 861:main.c        **** //
 862:main.c        **** 
 863:main.c        **** // Returns if the USB is connected.
 864:main.c        **** //
 865:main.c        **** int isUSBConnected(void) {
 505              		.loc 1 865 0
 506              		@ Function supports interworking.
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 866:main.c        ****   return IOPIN0 & (1<<23);
 510              		.loc 1 866 0
 511 02dc 08309FE5 		ldr	r3, .L64
 512 02e0 000093E5 		ldr	r0, [r3, #0]
 867:main.c        **** }
 513              		.loc 1 867 0
 514 02e4 020500E2 		and	r0, r0, #8388608
 515 02e8 1EFF2FE1 		bx	lr
 516              	.L65:
 517              		.align	2
 518              	.L64:
 519 02ec 008002E0 		.word	-536707072
 520              	.LFE35:
 522              		.align	2
 523              		.global	initializeUITimer
 525              	initializeUITimer:
 526              	.LFB38:
 868:main.c        **** 
 869:main.c        **** //
 870:main.c        **** // LCD
 871:main.c        **** //
 872:main.c        **** 
 873:main.c        **** // Show the splash-screen (Sparkfun Logo)
 874:main.c        **** //
 875:main.c        **** void splashScreen(void) {
 876:main.c        ****   LCDInit();       // Initialize the LCD
 877:main.c        ****   LCDClear(white); // Clear the screen with white
 878:main.c        ****   LCDPrintLogo();  // Print the Sparkfun Logo
 879:main.c        **** }
 880:main.c        **** 
 881:main.c        **** // Clear the screen, cheap if possible.
 882:main.c        **** //
 883:main.c        **** void clearScreen(void) {
 884:main.c        ****   if (file_is_open) {
 885:main.c        ****     quickClear(current_display);
 886:main.c        ****   } else {
 887:main.c        ****     LCDClear(current_display->back_color);
 888:main.c        ****   }
 889:main.c        **** }
 890:main.c        **** 
 891:main.c        **** //
 892:main.c        **** // Timers
 893:main.c        **** //
 894:main.c        **** 
 895:main.c        **** // Initialize the UI Timer.
 896:main.c        **** //
 897:main.c        **** void initializeUITimer(void) {
 527              		.loc 1 897 0
 528              		@ Function supports interworking.
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 898:main.c        ****   T0PR = 300;     // Divide Clock by 300 for 40kHz PS
 532              		.loc 1 898 0
 533 02f0 2C209FE5 		ldr	r2, .L68
 534 02f4 4B3FA0E3 		mov	r3, #300
 535 02f8 0C3082E5 		str	r3, [r2, #12]
 899:main.c        ****   T0TCR |= 0X01;  // Enable the clock
 536              		.loc 1 899 0
 537 02fc 043092E5 		ldr	r3, [r2, #4]
 538 0300 013083E3 		orr	r3, r3, #1
 539 0304 043082E5 		str	r3, [r2, #4]
 900:main.c        ****   T0CTCR = 0;     // Timer Mode
 540              		.loc 1 900 0
 541 0308 0030A0E3 		mov	r3, #0
 542 030c 703082E5 		str	r3, [r2, #112]
 901:main.c        ****   T0MCR = 0x0003; // Interrupt and Reset Timer on Match
 543              		.loc 1 901 0
 544 0310 033083E2 		add	r3, r3, #3
 545 0314 143082E5 		str	r3, [r2, #20]
 902:main.c        ****   T0MR0 = 1000;   // Interrupt on 40Hz
 546              		.loc 1 902 0
 547 0318 FA3FA0E3 		mov	r3, #1000
 548 031c 183082E5 		str	r3, [r2, #24]
 903:main.c        **** }
 549              		.loc 1 903 0
 550 0320 1EFF2FE1 		bx	lr
 551              	.L69:
 552              		.align	2
 553              	.L68:
 554 0324 004000E0 		.word	-536854528
 555              	.LFE38:
 557              		.align	2
 558              		.global	initializeMP3Timer
 560              	initializeMP3Timer:
 561              	.LFB39:
 904:main.c        **** 
 905:main.c        **** // Initialize the MP3 Timer.
 906:main.c        **** //
 907:main.c        **** void initializeMP3Timer(void) {
 562              		.loc 1 907 0
 563              		@ Function supports interworking.
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 908:main.c        ****   T1PR = 200;     // Divide Clock by 200 for ??kHz PS
 567              		.loc 1 908 0
 568 0328 24209FE5 		ldr	r2, .L72
 569 032c C830A0E3 		mov	r3, #200
 570 0330 0C3082E5 		str	r3, [r2, #12]
 909:main.c        ****   T1TCR |= 0X01;  // Enable the clock
 571              		.loc 1 909 0
 572 0334 043092E5 		ldr	r3, [r2, #4]
 573 0338 013083E3 		orr	r3, r3, #1
 574 033c 043082E5 		str	r3, [r2, #4]
 910:main.c        ****   T1CTCR = 0;     // Timer Mode
 575              		.loc 1 910 0
 576 0340 0030A0E3 		mov	r3, #0
 577 0344 703082E5 		str	r3, [r2, #112]
 911:main.c        ****   T1CCR = 0x0A00; // Capture and interrupt on the rising edge of DREQ
 578              		.loc 1 911 0
 579 0348 0A3C83E2 		add	r3, r3, #2560
 580 034c 283082E5 		str	r3, [r2, #40]
 912:main.c        **** }
 581              		.loc 1 912 0
 582 0350 1EFF2FE1 		bx	lr
 583              	.L73:
 584              		.align	2
 585              	.L72:
 586 0354 008000E0 		.word	-536838144
 587              	.LFE39:
 589              		.align	2
 590              		.global	initializeInterrupts
 592              	initializeInterrupts:
 593              	.LFB40:
 913:main.c        **** 
 914:main.c        **** //
 915:main.c        **** // Interrupts
 916:main.c        **** //
 917:main.c        **** 
 918:main.c        **** // Initializes interrupts and timers.
 919:main.c        **** //
 920:main.c        **** void initializeInterrupts(void) {
 594              		.loc 1 920 0
 595              		@ Function supports interworking.
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 921:main.c        ****   VPBDIV = 1;                              // Set PCLK equal to the System Clock	
 599              		.loc 1 921 0
 600 0358 3C309FE5 		ldr	r3, .L76
 601 035c 0120A0E3 		mov	r2, #1
 602 0360 002183E5 		str	r2, [r3, #256]
 922:main.c        ****   VICIntSelect = ~0x30;                    // Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 603              		.loc 1 922 0
 604 0364 0010E0E3 		mvn	r1, #0
 605 0368 3030E0E3 		mvn	r3, #48
 606 036c F33F01E5 		str	r3, [r1, #-4083]
 607              	.LBB156:
 608              	.LBB157:
 923:main.c        ****   exclusiveUIInterrupt();                  // Enable Timer 0 Interrupts (Don't start sending song d
 924:main.c        ****   VICVectCntl0= 0x25;                      // Use slot 0 for timer 1 interrupt
 925:main.c        ****   VICVectAddr0 = (unsigned int) timer1ISR; // Set the address of ISR for slot 1		
 926:main.c        ****   VICVectCntl1 = 0x24;                     // Use slot 1 for timer 0 interrupt
 927:main.c        ****   VICVectAddr1 = (unsigned int) timer0ISR; // Set the address of ISR for slot 1
 928:main.c        **** }
 929:main.c        **** 
 930:main.c        **** // Stops all interrupts from triggering.
 931:main.c        **** //
 932:main.c        **** void stopAllInterrupts(void) {
 933:main.c        ****   VICIntEnClr = 0x30;
 934:main.c        **** }
 935:main.c        **** 
 936:main.c        **** // Enable the MP3 interrupt.
 937:main.c        **** //
 938:main.c        **** void enableMP3Interrupt(void) {
 939:main.c        ****   VICIntEnable |= 0x20;
 940:main.c        **** }
 941:main.c        **** 
 942:main.c        **** // Disable the MP3 interrupt.
 943:main.c        **** //
 944:main.c        **** void disableMP3Interrupt(void) {
 945:main.c        ****   VICIntEnClr = 0x20;
 946:main.c        **** }
 947:main.c        **** 
 948:main.c        **** // Start the interrupts again.
 949:main.c        **** //
 950:main.c        **** void enableUIInterrupt(void) {
 951:main.c        ****   VICIntEnable |= 0x10;
 952:main.c        **** }
 953:main.c        **** 
 954:main.c        **** // Stop the UI interrupt from triggering. (And stabilize/debounce for t miliseconds)
 955:main.c        **** //
 956:main.c        **** void disableUIInterrupt(int t) {
 957:main.c        ****   VICIntEnClr = 0x10;
 958:main.c        ****   delay_ms(t); // debounce
 959:main.c        **** }
 960:main.c        **** 
 961:main.c        **** // Exclusively listen to the UI interrupt.
 962:main.c        **** //
 963:main.c        **** void exclusiveUIInterrupt(void) {
 964:main.c        ****   VICIntEnable = 0x10;
 609              		.loc 1 964 0
 610 0370 413083E2 		add	r3, r3, #65
 611 0374 EF3F01E5 		str	r3, [r1, #-4079]
 612              	.LBE157:
 613              	.LBE156:
 614              		.loc 1 924 0
 615 0378 153083E2 		add	r3, r3, #21
 616 037c FF3D01E5 		str	r3, [r1, #-3583]
 617              		.loc 1 925 0
 618 0380 18309FE5 		ldr	r3, .L76+4
 619 0384 FF3E01E5 		str	r3, [r1, #-3839]
 620              		.loc 1 926 0
 621 0388 2430A0E3 		mov	r3, #36
 622 038c FB3D01E5 		str	r3, [r1, #-3579]
 623              		.loc 1 927 0
 624 0390 0C309FE5 		ldr	r3, .L76+8
 625 0394 FB3E01E5 		str	r3, [r1, #-3835]
 626              		.loc 1 928 0
 627 0398 1EFF2FE1 		bx	lr
 628              	.L77:
 629              		.align	2
 630              	.L76:
 631 039c 00C01FE0 		.word	-534790144
 632 03a0 00000000 		.word	timer1ISR
 633 03a4 00000000 		.word	timer0ISR
 634              	.LFE40:
 636              		.align	2
 637              		.global	stopAllInterrupts
 639              	stopAllInterrupts:
 640              	.LFB41:
 641              		.loc 1 932 0
 642              		@ Function supports interworking.
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              		.loc 1 933 0
 647 03a8 3020A0E3 		mov	r2, #48
 648 03ac 0030E0E3 		mvn	r3, #0
 649 03b0 EB2F03E5 		str	r2, [r3, #-4075]
 650              		.loc 1 934 0
 651 03b4 1EFF2FE1 		bx	lr
 652              	.LFE41:
 654              		.align	2
 655              		.global	enableMP3Interrupt
 657              	enableMP3Interrupt:
 658              	.LFB42:
 659              		.loc 1 938 0
 660              		@ Function supports interworking.
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664              		.loc 1 939 0
 665 03b8 0020E0E3 		mvn	r2, #0
 666 03bc EF3F12E5 		ldr	r3, [r2, #-4079]
 667 03c0 203083E3 		orr	r3, r3, #32
 668 03c4 EF3F02E5 		str	r3, [r2, #-4079]
 669              		.loc 1 940 0
 670 03c8 1EFF2FE1 		bx	lr
 671              	.LFE42:
 673              		.align	2
 674              		.global	disableMP3Interrupt
 676              	disableMP3Interrupt:
 677              	.LFB43:
 678              		.loc 1 944 0
 679              		@ Function supports interworking.
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683              		.loc 1 945 0
 684 03cc 2020A0E3 		mov	r2, #32
 685 03d0 0030E0E3 		mvn	r3, #0
 686 03d4 EB2F03E5 		str	r2, [r3, #-4075]
 687              		.loc 1 946 0
 688 03d8 1EFF2FE1 		bx	lr
 689              	.LFE43:
 691              		.align	2
 692              		.global	enableUIInterrupt
 694              	enableUIInterrupt:
 695              	.LFB44:
 696              		.loc 1 950 0
 697              		@ Function supports interworking.
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701              		.loc 1 951 0
 702 03dc 0020E0E3 		mvn	r2, #0
 703 03e0 EF3F12E5 		ldr	r3, [r2, #-4079]
 704 03e4 103083E3 		orr	r3, r3, #16
 705 03e8 EF3F02E5 		str	r3, [r2, #-4079]
 706              		.loc 1 952 0
 707 03ec 1EFF2FE1 		bx	lr
 708              	.LFE44:
 710              		.align	2
 711              		.global	disableUIInterrupt
 713              	disableUIInterrupt:
 714              	.LFB45:
 715              		.loc 1 956 0
 716              		@ Function supports interworking.
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720              	.LVL23:
 721              		.loc 1 957 0
 722 03f0 1030A0E3 		mov	r3, #16
 723 03f4 0020E0E3 		mvn	r2, #0
 724 03f8 EB3F02E5 		str	r3, [r2, #-4075]
 725              	.LBB158:
 726              	.LBB159:
 727              		.loc 1 258 0
 728 03fc 273C83E2 		add	r3, r3, #9984
 729 0400 930002E0 		mul	r2, r3, r0
 730              	.LVL24:
 731 0404 0030A0E3 		mov	r3, #0
 732              	.LVL25:
 733 0408 010000EA 		b	.L87
 734              	.L88:
 735              		.loc 1 259 0
 736              	@ 259 "main.c" 1
 737 040c 0000A0E1 		nop
 738              	@ 0 "" 2
 739 0410 013083E2 		add	r3, r3, #1
 740              	.L87:
 741 0414 020053E1 		cmp	r3, r2
 742 0418 FBFFFFBA 		blt	.L88
 743              	.LBE159:
 744              	.LBE158:
 745              		.loc 1 959 0
 746 041c 1EFF2FE1 		bx	lr
 747              	.LFE45:
 749              		.align	2
 750              		.global	exclusiveUIInterrupt
 752              	exclusiveUIInterrupt:
 753              	.LFB46:
 754              		.loc 1 963 0
 755              		@ Function supports interworking.
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              		.loc 1 964 0
 760 0420 1020A0E3 		mov	r2, #16
 761 0424 0030E0E3 		mvn	r3, #0
 762 0428 EF2F03E5 		str	r2, [r3, #-4079]
 965:main.c        **** }
 763              		.loc 1 965 0
 764 042c 1EFF2FE1 		bx	lr
 765              	.LFE46:
 767              		.align	2
 768              		.global	initializeLEDs
 770              	initializeLEDs:
 771              	.LFB47:
 966:main.c        **** 
 967:main.c        **** //
 968:main.c        **** // LEDs
 969:main.c        **** //
 970:main.c        **** 
 971:main.c        **** // Initializes the LEDs to an off state.
 972:main.c        **** //
 973:main.c        **** void initializeLEDs(void) {
 772              		.loc 1 973 0
 773              		@ Function supports interworking.
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 974:main.c        ****   IODIR0 |= (LED_BLU | LED_RED | LED_GRN);
 777              		.loc 1 974 0
 778 0430 24209FE5 		ldr	r2, .L94
 779 0434 083092E5 		ldr	r3, [r2, #8]
 780 0438 073283E3 		orr	r3, r3, #1879048192
 781 043c 083082E5 		str	r3, [r2, #8]
 975:main.c        ****   ledBlueOff();
 782              		.loc 1 975 0
 783 0440 0232A0E3 		mov	r3, #536870912
 784 0444 043082E5 		str	r3, [r2, #4]
 976:main.c        ****   ledRedOff();
 785              		.loc 1 976 0
 786 0448 033083E0 		add	r3, r3, r3
 787 044c 043082E5 		str	r3, [r2, #4]
 977:main.c        ****   ledGrnOff();
 788              		.loc 1 977 0
 789 0450 0D3283E2 		add	r3, r3, #-805306368
 790 0454 043082E5 		str	r3, [r2, #4]
 978:main.c        **** }
 791              		.loc 1 978 0
 792 0458 1EFF2FE1 		bx	lr
 793              	.L95:
 794              		.align	2
 795              	.L94:
 796 045c 008002E0 		.word	-536707072
 797              	.LFE47:
 799              		.section	.rodata.str1.1,"aMS",%progbits,1
 800              	.LC0:
 801 0000 256400   		.ascii	"%d\000"
 802              		.text
 803              		.align	2
 804              		.global	displayRadioMenu
 806              	displayRadioMenu:
 807              	.LFB48:
 979:main.c        **** 
 980:main.c        **** //
 981:main.c        **** // Menus
 982:main.c        **** //
 983:main.c        **** 
 984:main.c        **** // Displays the radio menu settings.
 985:main.c        **** //
 986:main.c        **** void displayRadioMenu(void) {
 808              		.loc 1 986 0
 809              		@ Function supports interworking.
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812 0460 10402DE9 		stmfd	sp!, {r4, lr}
 813              	.LCFI2:
 987:main.c        ****   LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 814              		.loc 1 987 0
 815 0464 54409FE5 		ldr	r4, .L98
 816 0468 002094E5 		ldr	r2, [r4, #0]
 817              		.loc 1 986 0
 818 046c 08D04DE2 		sub	sp, sp, #8
 819              	.LCFI3:
 820              		.loc 1 987 0
 821 0470 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 822 0474 0200A0E3 		mov	r0, #2
 823 0478 0010A0E3 		mov	r1, #0
 824 047c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 825 0480 FEFFFFEB 		bl	LCDSetRowColor
 988:main.c        ****   LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 826              		.loc 1 988 0
 827 0484 0030A0E3 		mov	r3, #0
 828 0488 00308DE5 		str	r3, [sp, #0]
 829 048c 30309FE5 		ldr	r3, .L98+4
 830 0490 001094E5 		ldr	r1, [r4, #0]
 831 0494 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 832 0498 28309FE5 		ldr	r3, .L98+8
 833 049c 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 834 04a0 24009FE5 		ldr	r0, .L98+12
 835 04a4 001093E5 		ldr	r1, [r3, #0]
 836 04a8 0230A0E3 		mov	r3, #2
 837 04ac 04C08DE5 		str	ip, [sp, #4]
 838 04b0 FEFFFFEB 		bl	LCDPrintString
 989:main.c        **** }...
 839              		.loc 1 989 0
 840 04b4 08D08DE2 		add	sp, sp, #8
 841 04b8 1040BDE8 		ldmfd	sp!, {r4, lr}
 842 04bc 1EFF2FE1 		bx	lr
 843              	.L99:
 844              		.align	2
 845              	.L98:
 846 04c0 7C040000 		.word	current_display
 847 04c4 00000000 		.word	white
 848 04c8 00000000 		.word	radio_channel
 849 04cc 00000000 		.word	.LC0
 850              	.LFE48:
 852              		.align	2
 853              		.global	quickClear
 855              	quickClear:
 856              	.LFB17:
 857              		.loc 1 635 0
 858              		@ Function supports interworking.
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              	.LVL26:
 862              	.LBB160:
 863              	.LBB161:
 864              		.loc 1 844 0
 865 04d0 B8209FE5 		ldr	r2, .L105
 866 04d4 003092E5 		ldr	r3, [r2, #0]
 867              	.LBE161:
 868              	.LBE160:
 869              		.loc 1 635 0
 870 04d8 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 871              	.LCFI4:
 872              	.LBB163:
 873              	.LBB162:
 874              		.loc 1 844 0
 875 04dc FF3DC3E3 		bic	r3, r3, #16320
 876 04e0 3030C3E3 		bic	r3, r3, #48
 877 04e4 003082E5 		str	r3, [r2, #0]
 878              	.LBE162:
 879              	.LBE163:
 880              		.loc 1 638 0
 881 04e8 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 882 04ec 00005EE3 		cmp	lr, #0
 883              		.loc 1 635 0
 884 04f0 08D04DE2 		sub	sp, sp, #8
 885              	.LCFI5:
 886              		.loc 1 635 0
 887 04f4 0050A0E1 		mov	r5, r0
 888              		.loc 1 638 0
 889 04f8 0700001A 		bne	.L101
 890              	.LVL27:
 891              		.loc 1 639 0
 892 04fc 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 893 0500 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 894 0504 0E10A0E1 		mov	r1, lr
 895 0508 7B0F80E2 		add	r0, r0, #492
 896 050c 0E30A0E1 		mov	r3, lr
 897 0510 04C08DE5 		str	ip, [sp, #4]
 898 0514 00E08DE5 		str	lr, [sp, #0]
 899 0518 FEFFFFEB 		bl	LCDPrintString
 900              	.LVL28:
 901              	.L101:
 902              		.loc 1 641 0
 903 051c 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 904 0520 0010A0E3 		mov	r1, #0
 905 0524 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 906 0528 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 907 052c FEFFFFEB 		bl	LCDSetRowColor
 908 0530 0040A0E3 		mov	r4, #0
 909              	.LVL29:
 910              	.LBB164:
 911              		.loc 1 644 0
 912 0534 58709FE5 		ldr	r7, .L105+4
 913              		.loc 1 643 0
 914 0538 0460A0E1 		mov	r6, r4
 915              	.L102:
 916 053c 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 917 0540 840285E0 		add	r0, r5, r4, asl #5
 918              	.LBE164:
 919              		.loc 1 641 0
 920 0544 014084E2 		add	r4, r4, #1
 921              	.LVL30:
 922              	.LBB165:
 923              		.loc 1 643 0
 924 0548 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 925 054c 0C0080E2 		add	r0, r0, #12
 926 0550 0610A0E1 		mov	r1, r6
 927 0554 0430A0E1 		mov	r3, r4
 928 0558 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 929 055c FEFFFFEB 		bl	LCDPrintString
 930              		.loc 1 644 0
 931 0560 0020D7E5 		ldrb	r2, [r7, #0]	@ zero_extendqisi2
 932 0564 2C009FE5 		ldr	r0, .L105+8
 933 0568 0610A0E1 		mov	r1, r6
 934 056c 0430A0E1 		mov	r3, r4
 935 0570 00608DE5 		str	r6, [sp, #0]
 936 0574 04608DE5 		str	r6, [sp, #4]
 937 0578 FEFFFFEB 		bl	LCDPrintString
 938              		.loc 1 642 0
 939 057c 0F0054E3 		cmp	r4, #15
 940              	.LVL31:
 941 0580 EDFFFF1A 		bne	.L102
 942              	.LBE165:
 943              		.loc 1 646 0
 944 0584 08D08DE2 		add	sp, sp, #8
 945 0588 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 946 058c 1EFF2FE1 		bx	lr
 947              	.L106:
 948              		.align	2
 949              	.L105:
 950 0590 00C002E0 		.word	-536690688
 951 0594 00000000 		.word	black
 952 0598 00000000 		.word	newline
 953              	.LFE17:
 955              		.align	2
 956              		.global	printMenu
 958              	printMenu:
 959              	.LFB12:
 960              		.loc 1 458 0
 961              		@ Function supports interworking.
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              	.LVL32:
 965              	.LBB166:
 966              	.LBB167:
 967              		.loc 1 844 0
 968 059c C0209FE5 		ldr	r2, .L112
 969 05a0 003092E5 		ldr	r3, [r2, #0]
 970              	.LBE167:
 971              	.LBE166:
 972              		.loc 1 458 0
 973 05a4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 974              	.LCFI6:
 975              	.LBB169:
 976              	.LBB168:
 977              		.loc 1 844 0
 978 05a8 FF3DC3E3 		bic	r3, r3, #16320
 979 05ac 3030C3E3 		bic	r3, r3, #48
 980 05b0 003082E5 		str	r3, [r2, #0]
 981              	.LBE168:
 982              	.LBE169:
 983              		.loc 1 460 0
 984 05b4 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 985 05b8 00005EE3 		cmp	lr, #0
 986              		.loc 1 458 0
 987 05bc 08D04DE2 		sub	sp, sp, #8
 988              	.LCFI7:
 989              		.loc 1 458 0
 990 05c0 0050A0E1 		mov	r5, r0
 991              		.loc 1 460 0
 992 05c4 0700001A 		bne	.L108
 993              	.LVL33:
 994              		.loc 1 461 0
 995 05c8 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 996 05cc 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 997 05d0 0E10A0E1 		mov	r1, lr
 998 05d4 7B0F80E2 		add	r0, r0, #492
 999 05d8 0E30A0E1 		mov	r3, lr
 1000 05dc 04C08DE5 		str	ip, [sp, #4]
 1001 05e0 00E08DE5 		str	lr, [sp, #0]
 1002 05e4 FEFFFFEB 		bl	LCDPrintString
 1003              	.LVL34:
 1004              	.L108:
 1005 05e8 0030A0E3 		mov	r3, #0
 1006              	.LVL35:
 1007              	.LBB170:
 1008              		.loc 1 464 0
 1009 05ec 0360A0E1 		mov	r6, r3
 1010              	.L109:
 1011 05f0 014083E2 		add	r4, r3, #1
 1012 05f4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1013 05f8 830285E0 		add	r0, r5, r3, asl #5
 1014 05fc 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1015 0600 0430A0E1 		mov	r3, r4
 1016              	.LVL36:
 1017 0604 0C0080E2 		add	r0, r0, #12
 1018 0608 0610A0E1 		mov	r1, r6
 1019 060c 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1020 0610 FEFFFFEB 		bl	LCDPrintString
 1021              		.loc 1 463 0
 1022 0614 0F0054E3 		cmp	r4, #15
 1023              	.LVL37:
 1024 0618 0430A0E1 		mov	r3, r4
 1025              	.LVL38:
 1026 061c F3FFFF1A 		bne	.L109
 1027              	.LBE170:
 1028              		.loc 1 466 0
 1029 0620 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1030 0624 0610A0E1 		mov	r1, r6
 1031 0628 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1032 062c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1033              	.LVL39:
 1034 0630 FEFFFFEB 		bl	LCDSetRowColor
 1035              		.loc 1 467 0
 1036 0634 080095E5 		ldr	r0, [r5, #8]
 1037 0638 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1038 063c 800285E0 		add	r0, r5, r0, asl #5
 1039 0640 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1040 0644 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1041 0648 0C0080E2 		add	r0, r0, #12
 1042 064c 0610A0E1 		mov	r1, r6
 1043 0650 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1044 0654 FEFFFFEB 		bl	LCDPrintString
 1045              		.loc 1 468 0
 1046 0658 08D08DE2 		add	sp, sp, #8
 1047 065c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1048 0660 1EFF2FE1 		bx	lr
 1049              	.L113:
 1050              		.align	2
 1051              	.L112:
 1052 0664 00C002E0 		.word	-536690688
 1053              	.LFE12:
 1055              		.align	2
 1056              		.global	highlightRow
 1058              	highlightRow:
 1059              	.LFB11:
 1060              		.loc 1 438 0
 1061              		@ Function supports interworking.
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064              	.LVL40:
 1065              	.LBB171:
 1066              	.LBB172:
 1067              		.loc 1 844 0
 1068 0668 D0209FE5 		ldr	r2, .L119
 1069 066c 003092E5 		ldr	r3, [r2, #0]
 1070              	.LBE172:
 1071              	.LBE171:
 1072              		.loc 1 438 0
 1073 0670 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1074              	.LCFI8:
 1075              	.LBB174:
 1076              	.LBB173:
 1077              		.loc 1 844 0
 1078 0674 FF3DC3E3 		bic	r3, r3, #16320
 1079 0678 3030C3E3 		bic	r3, r3, #48
 1080 067c 003082E5 		str	r3, [r2, #0]
 1081              	.LBE173:
 1082              	.LBE174:
 1083              		.loc 1 438 0
 1084 0680 0060A0E1 		mov	r6, r0
 1085 0684 08D04DE2 		sub	sp, sp, #8
 1086              	.LCFI9:
 1087              		.loc 1 440 0
 1088 0688 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1089 068c 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1090              		.loc 1 438 0
 1091 0690 0140A0E1 		mov	r4, r1
 1092              		.loc 1 440 0
 1093 0694 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 1094              	.LVL41:
 1095 0698 0010A0E3 		mov	r1, #0
 1096              	.LVL42:
 1097 069c FEFFFFEB 		bl	LCDSetRowColor
 1098              		.loc 1 441 0
 1099 06a0 080096E5 		ldr	r0, [r6, #8]
 1100 06a4 00C0A0E3 		mov	ip, #0
 1101 06a8 0250D6E5 		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 1102 06ac 800286E0 		add	r0, r6, r0, asl #5
 1103 06b0 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1104 06b4 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1105 06b8 0C10A0E1 		mov	r1, ip
 1106 06bc 0C0080E2 		add	r0, r0, #12
 1107 06c0 00C08DE5 		str	ip, [sp, #0]
 1108              		.loc 1 438 0
 1109 06c4 FF4004E2 		and	r4, r4, #255
 1110              	.LVL43:
 1111              		.loc 1 441 0
 1112 06c8 04508DE5 		str	r5, [sp, #4]
 1113 06cc FEFFFFEB 		bl	LCDPrintString
 1114 06d0 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1115              		.loc 1 442 0
 1116 06d4 010054E3 		cmp	r4, #1
 1117 06d8 082096E5 		ldr	r2, [r6, #8]
 1118              		.loc 1 443 0
 1119 06dc 01304302 		subeq	r3, r3, #1
 1120              		.loc 1 447 0
 1121 06e0 01308312 		addne	r3, r3, #1
 1122 06e4 0030C6E5 		strb	r3, [r6, #0]
 1123              		.loc 1 444 0
 1124 06e8 01204202 		subeq	r2, r2, #1
 1125              		.loc 1 448 0
 1126 06ec 01208212 		addne	r2, r2, #1
 1127 06f0 082086E5 		str	r2, [r6, #8]
 1128              		.loc 1 450 0
 1129 06f4 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 1130 06f8 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 1131 06fc 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1132 0700 0010A0E3 		mov	r1, #0
 1133 0704 FEFFFFEB 		bl	LCDSetRowColor
 1134              		.loc 1 451 0
 1135 0708 080096E5 		ldr	r0, [r6, #8]
 1136 070c 0240D6E5 		ldrb	r4, [r6, #2]	@ zero_extendqisi2
 1137              	.LVL44:
 1138 0710 00C0A0E3 		mov	ip, #0
 1139 0714 800286E0 		add	r0, r6, r0, asl #5
 1140 0718 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1141 071c 0030D6E5 		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 1142 0720 0C0080E2 		add	r0, r0, #12
 1143 0724 0C10A0E1 		mov	r1, ip
 1144 0728 04408DE5 		str	r4, [sp, #4]
 1145 072c 00C08DE5 		str	ip, [sp, #0]
 1146 0730 FEFFFFEB 		bl	LCDPrintString
 1147              		.loc 1 452 0
 1148 0734 08D08DE2 		add	sp, sp, #8
 1149 0738 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1150 073c 1EFF2FE1 		bx	lr
 1151              	.L120:
 1152              		.align	2
 1153              	.L119:
 1154 0740 00C002E0 		.word	-536690688
 1155              	.LFE11:
 1157              		.align	2
 1158              		.global	handleDownButton
 1160              	handleDownButton:
 1161              	.LFB15:
 1162              		.loc 1 525 0
 1163              		@ Function supports interworking.
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              	.LVL45:
 1167 0744 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1168              	.LCFI10:
 1169              		.loc 1 526 0
 1170 0748 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1171 074c 0E0053E3 		cmp	r3, #14
 1172              		.loc 1 525 0
 1173 0750 0040A0E1 		mov	r4, r0
 1174 0754 0150A0E1 		mov	r5, r1
 1175              		.loc 1 526 0
 1176 0758 0200008A 		bhi	.L122
 1177              	.LVL46:
 1178              		.loc 1 527 0
 1179 075c 0010A0E3 		mov	r1, #0
 1180              		.loc 1 541 0
 1181 0760 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1182              		.loc 1 527 0
 1183 0764 FEFFFFEA 		b	highlightRow
 1184              	.LVL47:
 1185              	.L122:
 1186              		.loc 1 530 0
 1187 0768 0F0053E3 		cmp	r3, #15
 1188 076c 1000001A 		bne	.L124
 1189 0770 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 1190 0774 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 1191 0778 020053E1 		cmp	r3, r2
 1192 077c 0C00009A 		bls	.L124
 1193              	.LVL48:
 1194              		.loc 1 532 0
 1195 0780 013082E2 		add	r3, r2, #1
 1196 0784 0630C0E5 		strb	r3, [r0, #6]
 1197              		.loc 1 535 0
 1198 0788 FEFFFFEB 		bl	quickClear
 1199              	.LVL49:
 1200              		.loc 1 536 0
 1201 078c 0130A0E3 		mov	r3, #1
 1202 0790 0030C4E5 		strb	r3, [r4, #0]
 1203              		.loc 1 537 0
 1204 0794 0030A0E3 		mov	r3, #0
 1205 0798 083084E5 		str	r3, [r4, #8]
 1206              		.loc 1 538 0
 1207 079c 0510A0E1 		mov	r1, r5
 1208 07a0 14009FE5 		ldr	r0, .L125
 1209 07a4 FEFFFFEB 		bl	getNewFiles
 1210              		.loc 1 539 0
 1211 07a8 0400A0E1 		mov	r0, r4
 1212              		.loc 1 541 0
 1213 07ac 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1214              		.loc 1 539 0
 1215 07b0 FEFFFFEA 		b	printMenu
 1216              	.LVL50:
 1217              	.L124:
 1218              		.loc 1 541 0
 1219 07b4 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1220 07b8 1EFF2FE1 		bx	lr
 1221              	.L126:
 1222              		.align	2
 1223              	.L125:
 1224 07bc 74000000 		.word	file_manager
 1225              	.LFE15:
 1227              		.align	2
 1228              		.global	handleUpButton
 1230              	handleUpButton:
 1231              	.LFB14:
 1232              		.loc 1 501 0
 1233              		@ Function supports interworking.
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 1236              	.LVL51:
 1237 07c0 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1238              	.LCFI11:
 1239              		.loc 1 502 0
 1240 07c4 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1241 07c8 010053E3 		cmp	r3, #1
 1242              		.loc 1 501 0
 1243 07cc 0040A0E1 		mov	r4, r0
 1244 07d0 0150A0E1 		mov	r5, r1
 1245              		.loc 1 502 0
 1246 07d4 0200009A 		bls	.L128
 1247              	.LVL52:
 1248              		.loc 1 503 0
 1249 07d8 0110A0E3 		mov	r1, #1
 1250              		.loc 1 517 0
 1251 07dc 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1252              		.loc 1 503 0
 1253 07e0 FEFFFFEA 		b	highlightRow
 1254              	.LVL53:
 1255              	.L128:
 1256              		.loc 1 506 0
 1257 07e4 0F00001A 		bne	.L130
 1258 07e8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1259 07ec 000053E3 		cmp	r3, #0
 1260 07f0 0C00000A 		beq	.L130
 1261              	.LVL54:
 1262              		.loc 1 508 0
 1263 07f4 013043E2 		sub	r3, r3, #1
 1264 07f8 0630C0E5 		strb	r3, [r0, #6]
 1265              		.loc 1 511 0
 1266 07fc FEFFFFEB 		bl	quickClear
 1267              	.LVL55:
 1268              		.loc 1 512 0
 1269 0800 0F30A0E3 		mov	r3, #15
 1270 0804 0030C4E5 		strb	r3, [r4, #0]
 1271              		.loc 1 513 0
 1272 0808 0E30A0E3 		mov	r3, #14
 1273 080c 083084E5 		str	r3, [r4, #8]
 1274              		.loc 1 514 0
 1275 0810 0510A0E1 		mov	r1, r5
 1276 0814 14009FE5 		ldr	r0, .L131
 1277 0818 FEFFFFEB 		bl	getNewFiles
 1278              		.loc 1 515 0
 1279 081c 0400A0E1 		mov	r0, r4
 1280              		.loc 1 517 0
 1281 0820 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1282              		.loc 1 515 0
 1283 0824 FEFFFFEA 		b	printMenu
 1284              	.LVL56:
 1285              	.L130:
 1286              		.loc 1 517 0
 1287 0828 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1288 082c 1EFF2FE1 		bx	lr
 1289              	.L132:
 1290              		.align	2
 1291              	.L131:
 1292 0830 74000000 		.word	file_manager
 1293              	.LFE14:
 1295              		.align	2
 1297              	timer0ISR:
 1298              	.LFB5:
 1299              		.loc 1 322 0
 1300              		@ Function supports interworking.
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303              	.LBB175:
 1304              	.LBB176:
 1305              		.loc 1 356 0
 1306 0834 A8209FE5 		ldr	r2, .L144
 1307 0838 103092E5 		ldr	r3, [r2, #16]
 1308 083c 020513E3 		tst	r3, #8388608
 1309              	.LBE176:
 1310              	.LBE175:
 1311              		.loc 1 322 0
 1312 0840 04E02DE5 		str	lr, [sp, #-4]!
 1313              	.LCFI12:
 1314              	.LBB178:
 1315              	.LBB177:
 1316              		.loc 1 356 0
 1317 0844 0220A003 		moveq	r2, #2
 1318 0848 0700000A 		beq	.L135
 1319              		.loc 1 358 0
 1320 084c 103092E5 		ldr	r3, [r2, #16]
 1321 0850 020613E3 		tst	r3, #2097152
 1322 0854 0120A003 		moveq	r2, #1
 1323 0858 0300000A 		beq	.L135
 1324              		.loc 1 360 0
 1325 085c 103092E5 		ldr	r3, [r2, #16]
 1326 0860 010513E3 		tst	r3, #4194304
 1327 0864 0320A003 		moveq	r2, #3
 1328 0868 0020A013 		movne	r2, #0
 1329              	.L135:
 1330              	.LBE177:
 1331              	.LBE178:
 1332              		.loc 1 323 0
 1333 086c 74309FE5 		ldr	r3, .L144+4
 1334 0870 0020C3E5 		strb	r2, [r3, #0]
 1335              		.loc 1 324 0
 1336 0874 FEFFFFEB 		bl	MMA_get_y
 1337              		.loc 1 325 0
 1338 0878 6C309FE5 		ldr	r3, .L144+8
 1339 087c 002093E5 		ldr	r2, [r3, #0]
 1340              		.loc 1 324 0
 1341 0880 68309FE5 		ldr	r3, .L144+12
 1342              		.loc 1 325 0
 1343 0884 AF0F52E3 		cmp	r2, #700
 1344              		.loc 1 324 0
 1345 0888 000083E5 		str	r0, [r3, #0]
 1346              		.loc 1 325 0
 1347 088c 010000AA 		bge	.L138
 1348 0890 AF0F50E3 		cmp	r0, #700
 1349 0894 030000CA 		bgt	.L139
 1350              	.L138:
 1351 0898 AF0F52E3 		cmp	r2, #700
 1352 089c 030000DA 		ble	.L140
 1353 08a0 AF0F50E3 		cmp	r0, #700
 1354 08a4 010000AA 		bge	.L140
 1355              	.L139:
 1356              		.loc 1 326 0
 1357 08a8 0120A0E3 		mov	r2, #1
 1358 08ac 000000EA 		b	.L143
 1359              	.L140:
 1360              		.loc 1 328 0
 1361 08b0 0020A0E3 		mov	r2, #0
 1362              	.L143:
 1363 08b4 38309FE5 		ldr	r3, .L144+16
 1364 08b8 0020C3E5 		strb	r2, [r3, #0]
 1365              		.loc 1 332 0
 1366 08bc 34309FE5 		ldr	r3, .L144+20
 1367 08c0 FF20A0E3 		mov	r2, #255
 1368 08c4 002083E5 		str	r2, [r3, #0]
 1369              		.loc 1 330 0
 1370 08c8 1C309FE5 		ldr	r3, .L144+8
 1371              		.loc 1 333 0
 1372 08cc 0020A0E3 		mov	r2, #0
 1373              		.loc 1 330 0
 1374 08d0 000083E5 		str	r0, [r3, #0]
 1375              		.loc 1 333 0
 1376 08d4 0030E0E3 		mvn	r3, #0
 1377 08d8 CF2F03E5 		str	r2, [r3, #-4047]
 1378              		.loc 1 334 0
 1379 08dc 04E09DE4 		ldr	lr, [sp], #4
 1380 08e0 1EFF2FE1 		bx	lr
 1381              	.L145:
 1382              		.align	2
 1383              	.L144:
 1384 08e4 008002E0 		.word	-536707072
 1385 08e8 08000000 		.word	button_pressed
 1386 08ec 0C000000 		.word	prev_position
 1387 08f0 10000000 		.word	cur_position
 1388 08f4 09000000 		.word	update_screen
 1389 08f8 004000E0 		.word	-536854528
 1390              	.LFE5:
 1392              		.align	2
 1393              		.global	clearScreen
 1395              	clearScreen:
 1396              	.LFB37:
 1397              		.loc 1 883 0
 1398              		@ Function supports interworking.
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401 08fc 04E02DE5 		str	lr, [sp, #-4]!
 1402              	.LCFI13:
 1403              		.loc 1 884 0
 1404 0900 2C309FE5 		ldr	r3, .L149
 1405 0904 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1406 0908 000053E3 		cmp	r3, #0
 1407 090c 24009FE5 		ldr	r0, .L149+4
 1408 0910 0200000A 		beq	.L147
 1409              		.loc 1 885 0
 1410 0914 000090E5 		ldr	r0, [r0, #0]
 1411              		.loc 1 889 0
 1412 0918 04E09DE4 		ldr	lr, [sp], #4
 1413              		.loc 1 885 0
 1414 091c FEFFFFEA 		b	quickClear
 1415              	.L147:
 1416              		.loc 1 887 0
 1417 0920 003090E5 		ldr	r3, [r0, #0]
 1418 0924 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1419 0928 FEFFFFEB 		bl	LCDClear
 1420              		.loc 1 889 0
 1421 092c 04E09DE4 		ldr	lr, [sp], #4
 1422 0930 1EFF2FE1 		bx	lr
 1423              	.L150:
 1424              		.align	2
 1425              	.L149:
 1426 0934 01000000 		.word	file_is_open
 1427 0938 7C040000 		.word	current_display
 1428              	.LFE37:
 1430              		.align	2
 1431              		.global	splashScreen
 1433              	splashScreen:
 1434              	.LFB36:
 1435              		.loc 1 875 0
 1436              		@ Function supports interworking.
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439 093c 04E02DE5 		str	lr, [sp, #-4]!
 1440              	.LCFI14:
 1441              		.loc 1 876 0
 1442 0940 FEFFFFEB 		bl	LCDInit
 1443              		.loc 1 877 0
 1444 0944 10309FE5 		ldr	r3, .L153
 1445 0948 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1446 094c FEFFFFEB 		bl	LCDClear
 1447              		.loc 1 878 0
 1448 0950 FEFFFFEB 		bl	LCDPrintLogo
 1449              		.loc 1 879 0
 1450 0954 04E09DE4 		ldr	lr, [sp], #4
 1451 0958 1EFF2FE1 		bx	lr
 1452              	.L154:
 1453              		.align	2
 1454              	.L153:
 1455 095c 00000000 		.word	white
 1456              	.LFE36:
 1458              		.align	2
 1459              		.global	lowerVolume
 1461              	lowerVolume:
 1462              	.LFB29:
 1463              		.loc 1 811 0
 1464              		@ Function supports interworking.
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              	.LVL57:
 1468 0960 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1469              	.LCFI15:
 1470 0964 0050A0E1 		mov	r5, r0
 1471 0968 08D04DE2 		sub	sp, sp, #8
 1472              	.LCFI16:
 1473              		.loc 1 811 0
 1474 096c 0040A0E3 		mov	r4, #0
 1475              	.LVL58:
 1476 0970 8C609FE5 		ldr	r6, .L160
 1477 0974 0A0000EA 		b	.L156
 1478              	.LVL59:
 1479              	.L158:
 1480              	.LBB179:
 1481              		.loc 1 813 0
 1482 0978 003096E5 		ldr	r3, [r6, #0]
 1483 097c 000053E3 		cmp	r3, #0
 1484              		.loc 1 814 0
 1485 0980 012043E2 		sub	r2, r3, #1
 1486              		.loc 1 813 0
 1487 0984 040000BA 		blt	.L157
 1488              		.loc 1 814 0
 1489 0988 002086E5 		str	r2, [r6, #0]
 1490              		.loc 1 815 0
 1491 098c FEFFFFEB 		bl	vs1002Config
 1492              		.loc 1 816 0
 1493 0990 3000A0E3 		mov	r0, #48
 1494 0994 FEFFFFEB 		bl	vs1002SetVolume
 1495              		.loc 1 817 0
 1496 0998 FEFFFFEB 		bl	vs1002Finish
 1497              	.LVL60:
 1498              	.L157:
 1499              		.loc 1 812 0
 1500 099c 013084E2 		add	r3, r4, #1
 1501 09a0 FF4003E2 		and	r4, r3, #255
 1502              	.LVL61:
 1503              	.L156:
 1504 09a4 050054E1 		cmp	r4, r5
 1505 09a8 F2FFFFBA 		blt	.L158
 1506              	.LBE179:
 1507              		.loc 1 820 0
 1508 09ac 54409FE5 		ldr	r4, .L160+4
 1509              	.LVL62:
 1510 09b0 002094E5 		ldr	r2, [r4, #0]
 1511 09b4 0200A0E3 		mov	r0, #2
 1512 09b8 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1513 09bc 0010A0E3 		mov	r1, #0
 1514 09c0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1515 09c4 FEFFFFEB 		bl	LCDSetRowColor
 1516              		.loc 1 821 0
 1517 09c8 0030A0E3 		mov	r3, #0
 1518 09cc 00308DE5 		str	r3, [sp, #0]
 1519 09d0 34309FE5 		ldr	r3, .L160+8
 1520 09d4 001094E5 		ldr	r1, [r4, #0]
 1521 09d8 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1522 09dc 20309FE5 		ldr	r3, .L160
 1523 09e0 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1524 09e4 24009FE5 		ldr	r0, .L160+12
 1525 09e8 001093E5 		ldr	r1, [r3, #0]
 1526 09ec 0230A0E3 		mov	r3, #2
 1527 09f0 04C08DE5 		str	ip, [sp, #4]
 1528 09f4 FEFFFFEB 		bl	LCDPrintString
 1529              		.loc 1 822 0
 1530 09f8 08D08DE2 		add	sp, sp, #8
 1531 09fc 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1532 0a00 1EFF2FE1 		bx	lr
 1533              	.L161:
 1534              		.align	2
 1535              	.L160:
 1536 0a04 00000000 		.word	volume_setting
 1537 0a08 7C040000 		.word	current_display
 1538 0a0c 00000000 		.word	white
 1539 0a10 00000000 		.word	.LC0
 1540              	.LFE29:
 1542              		.align	2
 1543              		.global	raiseVolume
 1545              	raiseVolume:
 1546              	.LFB28:
 1547              		.loc 1 796 0
 1548              		@ Function supports interworking.
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              	.LVL63:
 1552 0a14 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1553              	.LCFI17:
 1554 0a18 0050A0E1 		mov	r5, r0
 1555 0a1c 08D04DE2 		sub	sp, sp, #8
 1556              	.LCFI18:
 1557              		.loc 1 796 0
 1558 0a20 0040A0E3 		mov	r4, #0
 1559              	.LVL64:
 1560 0a24 88609FE5 		ldr	r6, .L167
 1561 0a28 0A0000EA 		b	.L163
 1562              	.LVL65:
 1563              	.L165:
 1564              	.LBB180:
 1565              		.loc 1 798 0
 1566 0a2c 003096E5 		ldr	r3, [r6, #0]
 1567 0a30 1F0053E3 		cmp	r3, #31
 1568 0a34 050000CA 		bgt	.L164
 1569              		.loc 1 799 0
 1570 0a38 013083E2 		add	r3, r3, #1
 1571 0a3c 003086E5 		str	r3, [r6, #0]
 1572              		.loc 1 800 0
 1573 0a40 FEFFFFEB 		bl	vs1002Config
 1574              		.loc 1 801 0
 1575 0a44 3100A0E3 		mov	r0, #49
 1576 0a48 FEFFFFEB 		bl	vs1002SetVolume
 1577              		.loc 1 802 0
 1578 0a4c FEFFFFEB 		bl	vs1002Finish
 1579              	.LVL66:
 1580              	.L164:
 1581              		.loc 1 797 0
 1582 0a50 013084E2 		add	r3, r4, #1
 1583 0a54 FF4003E2 		and	r4, r3, #255
 1584              	.LVL67:
 1585              	.L163:
 1586 0a58 050054E1 		cmp	r4, r5
 1587 0a5c F2FFFFBA 		blt	.L165
 1588              	.LBE180:
 1589              		.loc 1 805 0
 1590 0a60 50409FE5 		ldr	r4, .L167+4
 1591              	.LVL68:
 1592 0a64 002094E5 		ldr	r2, [r4, #0]
 1593 0a68 0200A0E3 		mov	r0, #2
 1594 0a6c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1595 0a70 0010A0E3 		mov	r1, #0
 1596 0a74 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1597 0a78 FEFFFFEB 		bl	LCDSetRowColor
 1598              		.loc 1 806 0
 1599 0a7c 001094E5 		ldr	r1, [r4, #0]
 1600 0a80 0030A0E3 		mov	r3, #0
 1601 0a84 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1602 0a88 00308DE5 		str	r3, [sp, #0]
 1603 0a8c 20309FE5 		ldr	r3, .L167
 1604 0a90 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1605 0a94 20009FE5 		ldr	r0, .L167+8
 1606 0a98 001093E5 		ldr	r1, [r3, #0]
 1607 0a9c 0230A0E3 		mov	r3, #2
 1608 0aa0 04C08DE5 		str	ip, [sp, #4]
 1609 0aa4 FEFFFFEB 		bl	LCDPrintString
 1610              		.loc 1 807 0
 1611 0aa8 08D08DE2 		add	sp, sp, #8
 1612 0aac 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1613 0ab0 1EFF2FE1 		bx	lr
 1614              	.L168:
 1615              		.align	2
 1616              	.L167:
 1617 0ab4 00000000 		.word	volume_setting
 1618 0ab8 7C040000 		.word	current_display
 1619 0abc 00000000 		.word	.LC0
 1620              	.LFE28:
 1622              		.align	2
 1623              		.global	sendMP3Data
 1625              	sendMP3Data:
 1626              	.LFB26:
 1627              		.loc 1 759 0
 1628              		@ Function supports interworking.
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631 0ac0 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1632              	.LCFI19:
 1633              		.loc 1 760 0
 1634 0ac4 FEFFFFEB 		bl	vs1002Config
 1635              		.loc 1 761 0
 1636 0ac8 54809FE5 		ldr	r8, .L175
 1637              		.loc 1 764 0
 1638 0acc 54709FE5 		ldr	r7, .L175+4
 1639 0ad0 54409FE5 		ldr	r4, .L175+8
 1640              		.loc 1 767 0
 1641 0ad4 0060A0E3 		mov	r6, #0
 1642              		.loc 1 765 0
 1643 0ad8 0150A0E3 		mov	r5, #1
 1644 0adc 080000EA 		b	.L174
 1645              	.L172:
 1646              		.loc 1 762 0
 1647 0ae0 FEFFFFEB 		bl	vs1002SendMusic
 1648              		.loc 1 764 0
 1649 0ae4 340097E5 		ldr	r0, [r7, #52]
 1650 0ae8 40109FE5 		ldr	r1, .L175+12
 1651 0aec 2020A0E3 		mov	r2, #32
 1652 0af0 FEFFFFEB 		bl	fat16_read_file
 1653 0af4 0008A0E1 		mov	r0, r0, asl #16
 1654 0af8 000050E3 		cmp	r0, #0
 1655              		.loc 1 765 0
 1656 0afc 0050C4D5 		strleb	r5, [r4, #0]
 1657              		.loc 1 767 0
 1658 0b00 0060C4C5 		strgtb	r6, [r4, #0]
 1659              	.L174:
 1660              		.loc 1 761 0
 1661 0b04 003098E5 		ldr	r3, [r8, #0]
 1662 0b08 020613E3 		tst	r3, #2097152
 1663              		.loc 1 762 0
 1664 0b0c 1C009FE5 		ldr	r0, .L175+12
 1665 0b10 2010A0E3 		mov	r1, #32
 1666              		.loc 1 761 0
 1667 0b14 F1FFFF1A 		bne	.L172
 1668              		.loc 1 770 0
 1669 0b18 FEFFFFEB 		bl	vs1002Finish
 1670              		.loc 1 771 0
 1671 0b1c F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1672 0b20 1EFF2FE1 		bx	lr
 1673              	.L176:
 1674              		.align	2
 1675              	.L175:
 1676 0b24 008002E0 		.word	-536707072
 1677 0b28 14000000 		.word	current_song
 1678 0b2c 02000000 		.word	song_is_over
 1679 0b30 51000000 		.word	current_song+61
 1680              	.LFE26:
 1682              		.align	2
 1684              	timer1ISR:
 1685              	.LFB6:
 1686              		.loc 1 343 0
 1687              		@ Function supports interworking.
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690 0b34 04E02DE5 		str	lr, [sp, #-4]!
 1691              	.LCFI20:
 1692              		.loc 1 344 0
 1693 0b38 FEFFFFEB 		bl	sendMP3Data
 1694              		.loc 1 346 0
 1695 0b3c 18309FE5 		ldr	r3, .L179
 1696 0b40 FF20A0E3 		mov	r2, #255
 1697 0b44 002083E5 		str	r2, [r3, #0]
 1698              		.loc 1 347 0
 1699 0b48 0020A0E3 		mov	r2, #0
 1700 0b4c 0030E0E3 		mvn	r3, #0
 1701 0b50 CF2F03E5 		str	r2, [r3, #-4047]
 1702              		.loc 1 348 0
 1703 0b54 04E09DE4 		ldr	lr, [sp], #4
 1704 0b58 1EFF2FE1 		bx	lr
 1705              	.L180:
 1706              		.align	2
 1707              	.L179:
 1708 0b5c 008000E0 		.word	-536838144
 1709              	.LFE6:
 1711              		.align	2
 1712              		.global	startMP3Player
 1714              	startMP3Player:
 1715              	.LFB25:
 1716              		.loc 1 746 0
 1717              		@ Function supports interworking.
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720 0b60 10402DE9 		stmfd	sp!, {r4, lr}
 1721              	.LCFI21:
 1722              		.loc 1 747 0
 1723 0b64 FEFFFFEB 		bl	vs1002Config
 1724              		.loc 1 750 0
 1725 0b68 50409FE5 		ldr	r4, .L183
 1726              		.loc 1 748 0
 1727 0b6c 0000A0E3 		mov	r0, #0
 1728 0b70 021BA0E3 		mov	r1, #2048
 1729 0b74 FEFFFFEB 		bl	vs1002SCIWrite
 1730              		.loc 1 749 0
 1731 0b78 FEFFFFEB 		bl	vs1002Finish
 1732              		.loc 1 750 0
 1733 0b7c 0232A0E3 		mov	r3, #536870912
 1734 0b80 0C3084E5 		str	r3, [r4, #12]
 1735              		.loc 1 751 0
 1736 0b84 FEFFFFEB 		bl	sendMP3Data
 1737              		.loc 1 752 0
 1738 0b88 34209FE5 		ldr	r2, .L183+4
 1739 0b8c 043092E5 		ldr	r3, [r2, #4]
 1740 0b90 033B83E3 		orr	r3, r3, #3072
 1741 0b94 043082E5 		str	r3, [r2, #4]
 1742              	.LBB181:
 1743              	.LBB182:
 1744              		.loc 1 939 0
 1745 0b98 0020E0E3 		mvn	r2, #0
 1746 0b9c EF3F12E5 		ldr	r3, [r2, #-4079]
 1747 0ba0 203083E3 		orr	r3, r3, #32
 1748 0ba4 EF3F02E5 		str	r3, [r2, #-4079]
 1749              	.LBE182:
 1750              	.LBE181:
 1751              		.loc 1 754 0
 1752 0ba8 083094E5 		ldr	r3, [r4, #8]
 1753 0bac 033783E3 		orr	r3, r3, #786432
 1754 0bb0 503083E3 		orr	r3, r3, #80
 1755 0bb4 083084E5 		str	r3, [r4, #8]
 1756              		.loc 1 755 0
 1757 0bb8 1040BDE8 		ldmfd	sp!, {r4, lr}
 1758 0bbc 1EFF2FE1 		bx	lr
 1759              	.L184:
 1760              		.align	2
 1761              	.L183:
 1762 0bc0 008002E0 		.word	-536707072
 1763 0bc4 00C002E0 		.word	-536690688
 1764              	.LFE25:
 1766              		.align	2
 1767              		.global	initializeMP3Player
 1769              	initializeMP3Player:
 1770              	.LFB24:
 1771              		.loc 1 736 0
 1772              		@ Function supports interworking.
 1773              		@ args = 0, pretend = 0, frame = 0
 1774              		@ frame_needed = 0, uses_anonymous_args = 0
 1775 0bc8 04E02DE5 		str	lr, [sp, #-4]!
 1776              	.LCFI22:
 1777              		.loc 1 737 0
 1778 0bcc FEFFFFEB 		bl	vs1002Config
 1779              		.loc 1 738 0
 1780 0bd0 FEFFFFEB 		bl	vs1002Reset
 1781              		.loc 1 739 0
 1782 0bd4 FEFFFFEB 		bl	vs1002Init
 1783              		.loc 1 740 0
 1784 0bd8 0500A0E3 		mov	r0, #5
 1785 0bdc FEFFFFEB 		bl	lowerVolume
 1786              		.loc 1 741 0
 1787 0be0 FEFFFFEB 		bl	vs1002Finish
 1788              		.loc 1 742 0
 1789 0be4 04E09DE4 		ldr	lr, [sp], #4
 1790 0be8 1EFF2FE1 		bx	lr
 1791              	.LFE24:
 1793              		.align	2
 1794              		.global	changeRadioFrequency
 1796              	changeRadioFrequency:
 1797              	.LFB23:
 1798              		.loc 1 722 0
 1799              		@ Function supports interworking.
 1800              		@ args = 0, pretend = 0, frame = 0
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
 1802              	.LVL69:
 1803              		.loc 1 723 0
 1804 0bec 30109FE5 		ldr	r1, .L190
 1805 0bf0 002091E5 		ldr	r2, [r1, #0]
 1806 0bf4 DD3F42E2 		sub	r3, r2, #884
 1807 0bf8 023043E2 		sub	r3, r3, #2
 1808 0bfc BC0053E3 		cmp	r3, #188
 1809              		.loc 1 724 0
 1810 0c00 02308090 		addls	r3, r0, r2
 1811 0c04 00308195 		strls	r3, [r1, #0]
 1812              		.loc 1 722 0
 1813 0c08 04E02DE5 		str	lr, [sp, #-4]!
 1814              	.LCFI23:
 1815              		.loc 1 726 0
 1816 0c0c FEFFFFEB 		bl	displayRadioMenu
 1817              	.LVL70:
 1818              		.loc 1 727 0
 1819 0c10 0C309FE5 		ldr	r3, .L190
 1820 0c14 000093E5 		ldr	r0, [r3, #0]
 1821 0c18 FEFFFFEB 		bl	ns73SetChannel
 1822              		.loc 1 728 0
 1823 0c1c 04E09DE4 		ldr	lr, [sp], #4
 1824 0c20 1EFF2FE1 		bx	lr
 1825              	.L191:
 1826              		.align	2
 1827              	.L190:
 1828 0c24 00000000 		.word	radio_channel
 1829              	.LFE23:
 1831              		.align	2
 1832              		.global	setRadioFrequency
 1834              	setRadioFrequency:
 1835              	.LFB22:
 1836              		.loc 1 713 0
 1837              		@ Function supports interworking.
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              	.LVL71:
 1841              	.LBB183:
 1842              	.LBB185:
 1843              		.loc 1 849 0
 1844 0c28 4C209FE5 		ldr	r2, .L196
 1845 0c2c 1C3092E5 		ldr	r3, [r2, #28]
 1846 0c30 013283E3 		orr	r3, r3, #268435456
 1847 0c34 1C3082E5 		str	r3, [r2, #28]
 1848              	.LBB186:
 1849              	.LBB187:
 1850              		.loc 1 259 0
 1851 0c38 40209FE5 		ldr	r2, .L196+4
 1852              	.LBE187:
 1853              	.LBE186:
 1854              	.LBE185:
 1855              	.LBE183:
 1856              		.loc 1 713 0
 1857 0c3c 10402DE9 		stmfd	sp!, {r4, lr}
 1858              	.LCFI24:
 1859              	.LBB191:
 1860              	.LBB184:
 1861              		.loc 1 849 0
 1862 0c40 0030A0E3 		mov	r3, #0
 1863              	.LVL72:
 1864              	.LBE184:
 1865              	.LBE191:
 1866              		.loc 1 713 0
 1867 0c44 0040A0E1 		mov	r4, r0
 1868              	.LVL73:
 1869              	.L193:
 1870              	.LBB192:
 1871              	.LBB190:
 1872              	.LBB189:
 1873              	.LBB188:
 1874              		.loc 1 259 0
 1875              	@ 259 "main.c" 1
 1876 0c48 0000A0E1 		nop
 1877              	@ 0 "" 2
 1878 0c4c 013083E2 		add	r3, r3, #1
 1879 0c50 020053E1 		cmp	r3, r2
 1880 0c54 FBFFFF1A 		bne	.L193
 1881              	.LBE188:
 1882              	.LBE189:
 1883              	.LBE190:
 1884              	.LBE192:
 1885              		.loc 1 715 0
 1886 0c58 FEFFFFEB 		bl	ns73Config
 1887              	.LVL74:
 1888              		.loc 1 716 0
 1889 0c5c 0400A0E1 		mov	r0, r4
 1890 0c60 FEFFFFEB 		bl	ns73SetChannel
 1891              	.LBB193:
 1892              	.LBB194:
 1893              		.loc 1 856 0
 1894 0c64 10209FE5 		ldr	r2, .L196
 1895 0c68 143092E5 		ldr	r3, [r2, #20]
 1896 0c6c 013283E3 		orr	r3, r3, #268435456
 1897 0c70 143082E5 		str	r3, [r2, #20]
 1898              	.LBE194:
 1899              	.LBE193:
 1900              		.loc 1 718 0
 1901 0c74 1040BDE8 		ldmfd	sp!, {r4, lr}
 1902 0c78 1EFF2FE1 		bx	lr
 1903              	.L197:
 1904              		.align	2
 1905              	.L196:
 1906 0c7c 008002E0 		.word	-536707072
 1907 0c80 40420F00 		.word	1000000
 1908              	.LFE22:
 1910              		.section	.rodata.str1.1
 1911              	.LC1:
 1912 0003 4F666600 		.ascii	"Off\000"
 1913              		.text
 1914              		.align	2
 1915              		.global	disableRadio
 1917              	disableRadio:
 1918              	.LFB21:
 1919              		.loc 1 697 0
 1920              		@ Function supports interworking.
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923 0c84 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1924              	.LCFI25:
 1925              		.loc 1 698 0
 1926 0c88 98309FE5 		ldr	r3, .L202
 1927              		.loc 1 701 0
 1928 0c8c 98509FE5 		ldr	r5, .L202+4
 1929              		.loc 1 698 0
 1930 0c90 0040A0E3 		mov	r4, #0
 1931 0c94 0040C3E5 		strb	r4, [r3, #0]
 1932              		.loc 1 701 0
 1933 0c98 002095E5 		ldr	r2, [r5, #0]
 1934              		.loc 1 697 0
 1935 0c9c 08D04DE2 		sub	sp, sp, #8
 1936              	.LCFI26:
 1937              		.loc 1 701 0
 1938 0ca0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1939 0ca4 0200A0E3 		mov	r0, #2
 1940 0ca8 0410A0E1 		mov	r1, r4
 1941 0cac 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1942 0cb0 FEFFFFEB 		bl	LCDSetRowColor
 1943              		.loc 1 702 0
 1944 0cb4 003095E5 		ldr	r3, [r5, #0]
 1945 0cb8 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1946 0cbc 00408DE5 		str	r4, [sp, #0]
 1947 0cc0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1948 0cc4 64009FE5 		ldr	r0, .L202+8
 1949 0cc8 0230A0E3 		mov	r3, #2
 1950 0ccc 0410A0E1 		mov	r1, r4
 1951 0cd0 04C08DE5 		str	ip, [sp, #4]
 1952 0cd4 FEFFFFEB 		bl	LCDPrintString
 1953              	.LBB195:
 1954              	.LBB196:
 1955              		.loc 1 849 0
 1956 0cd8 54209FE5 		ldr	r2, .L202+12
 1957 0cdc 1C3092E5 		ldr	r3, [r2, #28]
 1958 0ce0 013283E3 		orr	r3, r3, #268435456
 1959 0ce4 1C3082E5 		str	r3, [r2, #28]
 1960              	.LBB197:
 1961              	.LBB198:
 1962              		.loc 1 259 0
 1963 0ce8 48309FE5 		ldr	r3, .L202+16
 1964              	.L199:
 1965              	@ 259 "main.c" 1
 1966 0cec 0000A0E1 		nop
 1967              	@ 0 "" 2
 1968 0cf0 014084E2 		add	r4, r4, #1
 1969              	.LVL75:
 1970 0cf4 030054E1 		cmp	r4, r3
 1971 0cf8 FBFFFF1A 		bne	.L199
 1972              	.LBE198:
 1973              	.LBE197:
 1974              	.LBE196:
 1975              	.LBE195:
 1976              		.loc 1 706 0
 1977 0cfc FEFFFFEB 		bl	ns73Config
 1978              		.loc 1 707 0
 1979 0d00 0000A0E3 		mov	r0, #0
 1980 0d04 0410A0E3 		mov	r1, #4
 1981 0d08 FEFFFFEB 		bl	ns73Send
 1982              	.LBB199:
 1983              	.LBB200:
 1984              		.loc 1 856 0
 1985 0d0c 20209FE5 		ldr	r2, .L202+12
 1986 0d10 143092E5 		ldr	r3, [r2, #20]
 1987 0d14 013283E3 		orr	r3, r3, #268435456
 1988 0d18 143082E5 		str	r3, [r2, #20]
 1989              	.LBE200:
 1990              	.LBE199:
 1991              		.loc 1 709 0
 1992 0d1c 08D08DE2 		add	sp, sp, #8
 1993 0d20 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1994 0d24 1EFF2FE1 		bx	lr
 1995              	.L203:
 1996              		.align	2
 1997              	.L202:
 1998 0d28 00000000 		.word	radio_enable
 1999 0d2c 7C040000 		.word	current_display
 2000 0d30 03000000 		.word	.LC1
 2001 0d34 008002E0 		.word	-536707072
 2002 0d38 40420F00 		.word	1000000
 2003              	.LFE21:
 2005              		.section	.rodata.str1.1
 2006              	.LC2:
 2007 0007 4F6E00   		.ascii	"On\000"
 2008              		.text
 2009              		.align	2
 2010              		.global	enableRadio
 2012              	enableRadio:
 2013              	.LFB20:
 2014              		.loc 1 681 0
 2015              		@ Function supports interworking.
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 0, uses_anonymous_args = 0
 2018 0d3c 10402DE9 		stmfd	sp!, {r4, lr}
 2019              	.LCFI27:
 2020              		.loc 1 682 0
 2021 0d40 9C309FE5 		ldr	r3, .L208
 2022              		.loc 1 685 0
 2023 0d44 9C409FE5 		ldr	r4, .L208+4
 2024              		.loc 1 682 0
 2025 0d48 0120A0E3 		mov	r2, #1
 2026 0d4c 0020C3E5 		strb	r2, [r3, #0]
 2027              		.loc 1 685 0
 2028 0d50 002094E5 		ldr	r2, [r4, #0]
 2029              		.loc 1 681 0
 2030 0d54 08D04DE2 		sub	sp, sp, #8
 2031              	.LCFI28:
 2032              		.loc 1 685 0
 2033 0d58 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2034 0d5c 0200A0E3 		mov	r0, #2
 2035 0d60 0010A0E3 		mov	r1, #0
 2036 0d64 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2037 0d68 FEFFFFEB 		bl	LCDSetRowColor
 2038              		.loc 1 686 0
 2039 0d6c 003094E5 		ldr	r3, [r4, #0]
 2040 0d70 0040A0E3 		mov	r4, #0
 2041 0d74 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2042 0d78 00408DE5 		str	r4, [sp, #0]
 2043 0d7c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2044 0d80 64009FE5 		ldr	r0, .L208+8
 2045 0d84 0230A0E3 		mov	r3, #2
 2046 0d88 0410A0E1 		mov	r1, r4
 2047 0d8c 04C08DE5 		str	ip, [sp, #4]
 2048 0d90 FEFFFFEB 		bl	LCDPrintString
 2049              	.LBB201:
 2050              	.LBB202:
 2051              		.loc 1 849 0
 2052 0d94 54209FE5 		ldr	r2, .L208+12
 2053 0d98 1C3092E5 		ldr	r3, [r2, #28]
 2054 0d9c 013283E3 		orr	r3, r3, #268435456
 2055 0da0 1C3082E5 		str	r3, [r2, #28]
 2056              	.LBB203:
 2057              	.LBB204:
 2058              		.loc 1 259 0
 2059 0da4 48309FE5 		ldr	r3, .L208+16
 2060              	.L205:
 2061              	@ 259 "main.c" 1
 2062 0da8 0000A0E1 		nop
 2063              	@ 0 "" 2
 2064 0dac 014084E2 		add	r4, r4, #1
 2065              	.LVL76:
 2066 0db0 030054E1 		cmp	r4, r3
 2067 0db4 FBFFFF1A 		bne	.L205
 2068              	.LBE204:
 2069              	.LBE203:
 2070              	.LBE202:
 2071              	.LBE201:
 2072              		.loc 1 690 0
 2073 0db8 FEFFFFEB 		bl	ns73Config
 2074              		.loc 1 691 0
 2075 0dbc 0000A0E3 		mov	r0, #0
 2076 0dc0 8110A0E3 		mov	r1, #129
 2077 0dc4 FEFFFFEB 		bl	ns73Send
 2078              	.LBB205:
 2079              	.LBB206:
 2080              		.loc 1 856 0
 2081 0dc8 20209FE5 		ldr	r2, .L208+12
 2082 0dcc 143092E5 		ldr	r3, [r2, #20]
 2083 0dd0 013283E3 		orr	r3, r3, #268435456
 2084 0dd4 143082E5 		str	r3, [r2, #20]
 2085              	.LBE206:
 2086              	.LBE205:
 2087              		.loc 1 693 0
 2088 0dd8 08D08DE2 		add	sp, sp, #8
 2089 0ddc 1040BDE8 		ldmfd	sp!, {r4, lr}
 2090 0de0 1EFF2FE1 		bx	lr
 2091              	.L209:
 2092              		.align	2
 2093              	.L208:
 2094 0de4 00000000 		.word	radio_enable
 2095 0de8 7C040000 		.word	current_display
 2096 0dec 07000000 		.word	.LC2
 2097 0df0 008002E0 		.word	-536707072
 2098 0df4 40420F00 		.word	1000000
 2099              	.LFE20:
 2101              		.align	2
 2102              		.global	initializeRadio
 2104              	initializeRadio:
 2105              	.LFB19:
 2106              		.loc 1 667 0
 2107              		@ Function supports interworking.
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 2110              	.LVL77:
 2111              	.LBB207:
 2112              	.LBB209:
 2113              		.loc 1 849 0
 2114 0df8 68209FE5 		ldr	r2, .L216
 2115 0dfc 1C3092E5 		ldr	r3, [r2, #28]
 2116 0e00 013283E3 		orr	r3, r3, #268435456
 2117 0e04 1C3082E5 		str	r3, [r2, #28]
 2118              	.LBB210:
 2119              	.LBB211:
 2120              		.loc 1 259 0
 2121 0e08 5C209FE5 		ldr	r2, .L216+4
 2122              	.LBE211:
 2123              	.LBE210:
 2124              	.LBE209:
 2125              	.LBE207:
 2126              		.loc 1 667 0
 2127 0e0c 10402DE9 		stmfd	sp!, {r4, lr}
 2128              	.LCFI29:
 2129              	.LBB215:
 2130              	.LBB208:
 2131              		.loc 1 849 0
 2132 0e10 0030A0E3 		mov	r3, #0
 2133              	.LVL78:
 2134              	.LBE208:
 2135              	.LBE215:
 2136              		.loc 1 667 0
 2137 0e14 0040A0E1 		mov	r4, r0
 2138              	.LVL79:
 2139              	.L211:
 2140              	.LBB216:
 2141              	.LBB214:
 2142              	.LBB213:
 2143              	.LBB212:
 2144              		.loc 1 259 0
 2145              	@ 259 "main.c" 1
 2146 0e18 0000A0E1 		nop
 2147              	@ 0 "" 2
 2148 0e1c 013083E2 		add	r3, r3, #1
 2149 0e20 020053E1 		cmp	r3, r2
 2150 0e24 FBFFFF1A 		bne	.L211
 2151              	.LBE212:
 2152              	.LBE213:
 2153              	.LBE214:
 2154              	.LBE216:
 2155              		.loc 1 671 0
 2156 0e28 FEFFFFEB 		bl	ns73Config
 2157              	.LVL80:
 2158              		.loc 1 672 0
 2159 0e2c FEFFFFEB 		bl	ns73Init
 2160              		.loc 1 673 0
 2161 0e30 0400A0E1 		mov	r0, r4
 2162 0e34 FEFFFFEB 		bl	ns73SetChannel
 2163              	.LBB217:
 2164              	.LBB218:
 2165              		.loc 1 856 0
 2166 0e38 28209FE5 		ldr	r2, .L216
 2167 0e3c 143092E5 		ldr	r3, [r2, #20]
 2168 0e40 013283E3 		orr	r3, r3, #268435456
 2169 0e44 143082E5 		str	r3, [r2, #20]
 2170              	.LBE218:
 2171              	.LBE217:
 2172              	.LBB220:
 2173              	.LBB221:
 2174              		.loc 1 259 0
 2175 0e48 1C209FE5 		ldr	r2, .L216+4
 2176              	.LBE221:
 2177              	.LBE220:
 2178              	.LBB223:
 2179              	.LBB219:
 2180              		.loc 1 856 0
 2181 0e4c 0030A0E3 		mov	r3, #0
 2182              	.LVL81:
 2183              	.L212:
 2184              	.LBE219:
 2185              	.LBE223:
 2186              	.LBB224:
 2187              	.LBB222:
 2188              		.loc 1 259 0
 2189              	@ 259 "main.c" 1
 2190 0e50 0000A0E1 		nop
 2191              	@ 0 "" 2
 2192 0e54 013083E2 		add	r3, r3, #1
 2193 0e58 020053E1 		cmp	r3, r2
 2194 0e5c FBFFFF1A 		bne	.L212
 2195              	.LBE222:
 2196              	.LBE224:
 2197              		.loc 1 677 0
 2198 0e60 1040BDE8 		ldmfd	sp!, {r4, lr}
 2199 0e64 1EFF2FE1 		bx	lr
 2200              	.L217:
 2201              		.align	2
 2202              	.L216:
 2203 0e68 008002E0 		.word	-536707072
 2204 0e6c 40420F00 		.word	1000000
 2205              	.LFE19:
 2207              		.align	2
 2208              		.global	closeSong
 2210              	closeSong:
 2211              	.LFB10:
 2212              		.loc 1 428 0
 2213              		@ Function supports interworking.
 2214              		@ args = 0, pretend = 0, frame = 0
 2215              		@ frame_needed = 0, uses_anonymous_args = 0
 2216              	.LVL82:
 2217 0e70 10402DE9 		stmfd	sp!, {r4, lr}
 2218              	.LCFI30:
 2219              	.LBB225:
 2220              	.LBB226:
 2221              		.loc 1 838 0
 2222 0e74 28409FE5 		ldr	r4, .L220
 2223 0e78 003094E5 		ldr	r3, [r4, #0]
 2224 0e7c 153C83E3 		orr	r3, r3, #5376
 2225 0e80 003084E5 		str	r3, [r4, #0]
 2226              	.LBE226:
 2227              	.LBE225:
 2228              		.loc 1 430 0
 2229 0e84 340090E5 		ldr	r0, [r0, #52]
 2230              	.LVL83:
 2231 0e88 FEFFFFEB 		bl	fat16_close_file
 2232              	.LBB227:
 2233              	.LBB228:
 2234              		.loc 1 844 0
 2235 0e8c 003094E5 		ldr	r3, [r4, #0]
 2236 0e90 FF3DC3E3 		bic	r3, r3, #16320
 2237 0e94 3030C3E3 		bic	r3, r3, #48
 2238 0e98 003084E5 		str	r3, [r4, #0]
 2239              	.LBE228:
 2240              	.LBE227:
 2241              		.loc 1 432 0
 2242 0e9c 1040BDE8 		ldmfd	sp!, {r4, lr}
 2243 0ea0 1EFF2FE1 		bx	lr
 2244              	.L221:
 2245              		.align	2
 2246              	.L220:
 2247 0ea4 00C002E0 		.word	-536690688
 2248              	.LFE10:
 2250              		.align	2
 2251              		.global	stopMP3Player
 2253              	stopMP3Player:
 2254              	.LFB27:
 2255              		.loc 1 775 0
 2256              		@ Function supports interworking.
 2257              		@ args = 0, pretend = 0, frame = 0
 2258              		@ frame_needed = 0, uses_anonymous_args = 0
 2259              	.LBB229:
 2260              	.LBB230:
 2261              		.loc 1 945 0
 2262 0ea8 2020A0E3 		mov	r2, #32
 2263 0eac 0030E0E3 		mvn	r3, #0
 2264 0eb0 EB2F03E5 		str	r2, [r3, #-4075]
 2265              	.LBE230:
 2266              	.LBE229:
 2267              		.loc 1 778 0
 2268 0eb4 74309FE5 		ldr	r3, .L226
 2269 0eb8 0222A0E3 		mov	r2, #536870912
 2270              		.loc 1 775 0
 2271 0ebc 10402DE9 		stmfd	sp!, {r4, lr}
 2272              	.LCFI31:
 2273              		.loc 1 778 0
 2274 0ec0 042083E5 		str	r2, [r3, #4]
 2275              		.loc 1 779 0
 2276 0ec4 FEFFFFEB 		bl	vs1002Config
 2277              		.loc 1 780 0
 2278 0ec8 0000A0E3 		mov	r0, #0
 2279 0ecc 0810A0E3 		mov	r1, #8
 2280 0ed0 FEFFFFEB 		bl	vs1002SCIWrite
 2281 0ed4 0040A0E3 		mov	r4, #0
 2282              	.LVL84:
 2283              	.L223:
 2284              	.LBB231:
 2285              		.loc 1 781 0
 2286 0ed8 0000A0E3 		mov	r0, #0
 2287 0edc 014084E2 		add	r4, r4, #1
 2288 0ee0 0010A0E1 		mov	r1, r0
 2289 0ee4 FEFFFFEB 		bl	vs1002SCIWrite
 2290 0ee8 960054E3 		cmp	r4, #150
 2291 0eec F9FFFF1A 		bne	.L223
 2292              	.LBE231:
 2293              		.loc 1 782 0
 2294 0ef0 FEFFFFEB 		bl	vs1002Finish
 2295              		.loc 1 783 0
 2296 0ef4 34209FE5 		ldr	r2, .L226
 2297 0ef8 083092E5 		ldr	r3, [r2, #8]
 2298 0efc 033783E3 		orr	r3, r3, #786432
 2299 0f00 503083E3 		orr	r3, r3, #80
 2300 0f04 083082E5 		str	r3, [r2, #8]
 2301              		.loc 1 784 0
 2302 0f08 24009FE5 		ldr	r0, .L226+4
 2303 0f0c FEFFFFEB 		bl	closeSong
 2304              		.loc 1 785 0
 2305 0f10 20309FE5 		ldr	r3, .L226+8
 2306 0f14 0020A0E3 		mov	r2, #0
 2307 0f18 0020C3E5 		strb	r2, [r3, #0]
 2308              	.LBB232:
 2309              	.LBB233:
 2310              		.loc 1 964 0
 2311 0f1c 102082E2 		add	r2, r2, #16
 2312 0f20 0030E0E3 		mvn	r3, #0
 2313 0f24 EF2F03E5 		str	r2, [r3, #-4079]
 2314              	.LBE233:
 2315              	.LBE232:
 2316              		.loc 1 788 0
 2317 0f28 1040BDE8 		ldmfd	sp!, {r4, lr}
 2318 0f2c 1EFF2FE1 		bx	lr
 2319              	.L227:
 2320              		.align	2
 2321              	.L226:
 2322 0f30 008002E0 		.word	-536707072
 2323 0f34 14000000 		.word	current_song
 2324 0f38 01000000 		.word	file_is_open
 2325              	.LFE27:
 2327              		.align	2
 2328              		.global	loadSongInfo
 2330              	loadSongInfo:
 2331              	.LFB9:
 2332              		.loc 1 393 0
 2333              		@ Function supports interworking.
 2334              		@ args = 0, pretend = 0, frame = 0
 2335              		@ frame_needed = 0, uses_anonymous_args = 0
 2336              	.LVL85:
 2337 0f3c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2338              	.LCFI32:
 2339              		.loc 1 393 0
 2340 0f40 0020A0E3 		mov	r2, #0
 2341              	.LVL86:
 2342 0f44 0040A0E1 		mov	r4, r0
 2343              	.LVL87:
 2344              	.L229:
 2345              	.LBB234:
 2346              		.loc 1 396 0
 2347 0f48 083091E5 		ldr	r3, [r1, #8]
 2348 0f4c 833281E0 		add	r3, r1, r3, asl #5
 2349 0f50 023083E0 		add	r3, r3, r2
 2350 0f54 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2351              		.loc 1 395 0
 2352 0f58 012082E2 		add	r2, r2, #1
 2353 0f5c 1E0052E3 		cmp	r2, #30
 2354              		.loc 1 396 0
 2355 0f60 1630C0E5 		strb	r3, [r0, #22]
 2356              		.loc 1 395 0
 2357 0f64 010080E2 		add	r0, r0, #1
 2358 0f68 F6FFFF1A 		bne	.L229
 2359 0f6c 0020A0E3 		mov	r2, #0
 2360              	.LVL88:
 2361              	.LBE234:
 2362              	.LBB235:
 2363              		.loc 1 401 0
 2364 0f70 0210A0E1 		mov	r1, r2
 2365              	.LVL89:
 2366              	.L232:
 2367              		.loc 1 400 0
 2368 0f74 023084E0 		add	r3, r4, r2
 2369 0f78 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2370 0f7c 150052E3 		cmp	r2, #21
 2371 0f80 2E005313 		cmpne	r3, #46
 2372              		.loc 1 401 0
 2373 0f84 0210C407 		streqb	r1, [r4, r2]
 2374 0f88 1620A003 		moveq	r2, #22
 2375              		.loc 1 404 0
 2376 0f8c 0230C417 		strneb	r3, [r4, r2]
 2377              		.loc 1 399 0
 2378 0f90 012082E2 		add	r2, r2, #1
 2379 0f94 150052E3 		cmp	r2, #21
 2380 0f98 F5FFFFDA 		ble	.L232
 2381              	.LBE235:
 2382              	.LBB236:
 2383              	.LBB238:
 2384              		.loc 1 838 0
 2385 0f9c 6C609FE5 		ldr	r6, .L238
 2386 0fa0 003096E5 		ldr	r3, [r6, #0]
 2387              	.LBE238:
 2388              	.LBE236:
 2389              		.loc 1 411 0
 2390 0fa4 165084E2 		add	r5, r4, #22
 2391              	.LBB240:
 2392              	.LBB237:
 2393              		.loc 1 838 0
 2394 0fa8 153C83E3 		orr	r3, r3, #5376
 2395              	.LBE237:
 2396              	.LBE240:
 2397              		.loc 1 411 0
 2398 0fac 0500A0E1 		mov	r0, r5
 2399              	.LBB241:
 2400              	.LBB239:
 2401              		.loc 1 838 0
 2402 0fb0 003086E5 		str	r3, [r6, #0]
 2403              	.LBE239:
 2404              	.LBE241:
 2405              		.loc 1 411 0
 2406 0fb4 FEFFFFEB 		bl	root_file_exists
 2407              	.LVL90:
 2408 0fb8 000050E3 		cmp	r0, #0
 2409              	.LBB242:
 2410              	.LBB243:
 2411              		.loc 1 844 0
 2412 0fbc 00309605 		ldreq	r3, [r6, #0]
 2413 0fc0 FF3DC303 		biceq	r3, r3, #16320
 2414 0fc4 3030C303 		biceq	r3, r3, #48
 2415 0fc8 00308605 		streq	r3, [r6, #0]
 2416 0fcc 0D00000A 		beq	.L234
 2417              	.L233:
 2418              	.LBE243:
 2419              	.LBE242:
 2420              		.loc 1 416 0
 2421 0fd0 0500A0E1 		mov	r0, r5
 2422 0fd4 FEFFFFEB 		bl	root_open
 2423 0fd8 340084E5 		str	r0, [r4, #52]
 2424              		.loc 1 417 0
 2425 0fdc FEFFFFEB 		bl	fat16_file_size
 2426              		.loc 1 418 0
 2427 0fe0 3D1084E2 		add	r1, r4, #61
 2428              		.loc 1 417 0
 2429 0fe4 380084E5 		str	r0, [r4, #56]
 2430              		.loc 1 418 0
 2431 0fe8 2020A0E3 		mov	r2, #32
 2432 0fec 340094E5 		ldr	r0, [r4, #52]
 2433 0ff0 FEFFFFEB 		bl	fat16_read_file
 2434              	.LBB244:
 2435              	.LBB245:
 2436              		.loc 1 844 0
 2437 0ff4 003096E5 		ldr	r3, [r6, #0]
 2438 0ff8 FF3DC3E3 		bic	r3, r3, #16320
 2439 0ffc 3030C3E3 		bic	r3, r3, #48
 2440 1000 003086E5 		str	r3, [r6, #0]
 2441 1004 0100A0E3 		mov	r0, #1
 2442              	.L234:
 2443              	.LBE245:
 2444              	.LBE244:
 2445              		.loc 1 423 0
 2446 1008 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2447 100c 1EFF2FE1 		bx	lr
 2448              	.L239:
 2449              		.align	2
 2450              	.L238:
 2451 1010 00C002E0 		.word	-536690688
 2452              	.LFE9:
 2454              		.align	2
 2455              		.global	handleMiddleButton
 2457              	handleMiddleButton:
 2458              	.LFB16:
 2459              		.loc 1 551 0
 2460              		@ Function supports interworking.
 2461              		@ args = 0, pretend = 0, frame = 0
 2462              		@ frame_needed = 0, uses_anonymous_args = 0
 2463 1014 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 2464              	.LCFI33:
 2465              	.LBB246:
 2466              	.LBB247:
 2467              		.loc 1 957 0
 2468 1018 1020A0E3 		mov	r2, #16
 2469 101c 0030E0E3 		mvn	r3, #0
 2470 1020 EB2F03E5 		str	r2, [r3, #-4075]
 2471              	.LBB248:
 2472              	.LBB249:
 2473              		.loc 1 259 0
 2474 1024 04239FE5 		ldr	r2, .L269
 2475              	.LBE249:
 2476              	.LBE248:
 2477              	.LBE247:
 2478              	.LBE246:
 2479              		.loc 1 551 0
 2480 1028 08D04DE2 		sub	sp, sp, #8
 2481              	.LCFI34:
 2482              	.LBB253:
 2483              	.LBB252:
 2484              		.loc 1 957 0
 2485 102c 013083E2 		add	r3, r3, #1
 2486              	.LVL91:
 2487              	.L241:
 2488              	.LBB251:
 2489              	.LBB250:
 2490              		.loc 1 259 0
 2491              	@ 259 "main.c" 1
 2492 1030 0000A0E1 		nop
 2493              	@ 0 "" 2
 2494 1034 013083E2 		add	r3, r3, #1
 2495 1038 020053E1 		cmp	r3, r2
 2496 103c FBFFFF1A 		bne	.L241
 2497              	.LBE250:
 2498              	.LBE251:
 2499              	.LBE252:
 2500              	.LBE253:
 2501              		.loc 1 555 0
 2502 1040 EC729FE5 		ldr	r7, .L269+4
 2503 1044 EC329FE5 		ldr	r3, .L269+8
 2504              	.LVL92:
 2505 1048 001097E5 		ldr	r1, [r7, #0]
 2506 104c 030051E1 		cmp	r1, r3
 2507 1050 2500001A 		bne	.L242
 2508              		.loc 1 556 0
 2509 1054 E0529FE5 		ldr	r5, .L269+12
 2510 1058 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2511 105c 000053E3 		cmp	r3, #0
 2512 1060 1F00001A 		bne	.L243
 2513              		.loc 1 557 0
 2514 1064 D4029FE5 		ldr	r0, .L269+16
 2515 1068 FEFFFFEB 		bl	loadSongInfo
 2516              		.loc 1 558 0
 2517 106c 000050E3 		cmp	r0, #0
 2518              		.loc 1 557 0
 2519 1070 0040A0E1 		mov	r4, r0
 2520 1074 0000C5E5 		strb	r0, [r5, #0]
 2521              		.loc 1 558 0
 2522 1078 1700001A 		bne	.L244
 2523              		.loc 1 559 0
 2524 107c C0329FE5 		ldr	r3, .L269+20
 2525 1080 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2526 1084 FEFFFFEB 		bl	LCDClear
 2527              		.loc 1 560 0
 2528 1088 00408DE5 		str	r4, [sp, #0]
 2529 108c 001097E5 		ldr	r1, [r7, #0]
 2530 1090 B0329FE5 		ldr	r3, .L269+24
 2531 1094 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2532 1098 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2533 109c A8029FE5 		ldr	r0, .L269+28
 2534 10a0 0130A0E3 		mov	r3, #1
 2535 10a4 0410A0E1 		mov	r1, r4
 2536 10a8 04C08DE5 		str	ip, [sp, #4]
 2537 10ac FEFFFFEB 		bl	LCDPrintString
 2538              	.LBB254:
 2539              	.LBB255:
 2540              		.loc 1 259 0
 2541 10b0 98329FE5 		ldr	r3, .L269+32
 2542              	.LBE255:
 2543              	.LBE254:
 2544              		.loc 1 560 0
 2545 10b4 0400A0E1 		mov	r0, r4
 2546              	.LVL93:
 2547              	.L245:
 2548              	.LBB257:
 2549              	.LBB256:
 2550              		.loc 1 259 0
 2551              	@ 259 "main.c" 1
 2552 10b8 0000A0E1 		nop
 2553              	@ 0 "" 2
 2554 10bc 010080E2 		add	r0, r0, #1
 2555 10c0 030050E1 		cmp	r0, r3
 2556 10c4 FBFFFF1A 		bne	.L245
 2557              	.LBE256:
 2558              	.LBE257:
 2559              		.loc 1 562 0
 2560 10c8 78329FE5 		ldr	r3, .L269+24
 2561 10cc 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2562              	.LVL94:
 2563 10d0 FEFFFFEB 		bl	LCDClear
 2564              		.loc 1 563 0
 2565 10d4 5C029FE5 		ldr	r0, .L269+8
 2566 10d8 8C0000EA 		b	.L268
 2567              	.L244:
 2568              		.loc 1 565 0
 2569 10dc FEFFFFEB 		bl	startMP3Player
 2570 10e0 8B0000EA 		b	.L246
 2571              	.L243:
 2572              		.loc 1 568 0
 2573 10e4 FEFFFFEB 		bl	stopMP3Player
 2574 10e8 890000EA 		b	.L246
 2575              	.L242:
 2576              		.loc 1 571 0
 2577 10ec FEFFFFEB 		bl	clearScreen
 2578              		.loc 1 572 0
 2579 10f0 003097E5 		ldr	r3, [r7, #0]
 2580 10f4 0060A0E3 		mov	r6, #0
 2581 10f8 080093E5 		ldr	r0, [r3, #8]
 2582 10fc 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2583 1100 00608DE5 		str	r6, [sp, #0]
 2584 1104 800283E0 		add	r0, r3, r0, asl #5
 2585 1108 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2586              	.LBB258:
 2587              	.LBB259:
 2588              		.loc 1 951 0
 2589 110c 0050E0E3 		mvn	r5, #0
 2590              	.LBE259:
 2591              	.LBE258:
 2592              		.loc 1 572 0
 2593 1110 0130A0E3 		mov	r3, #1
 2594 1114 0C0080E2 		add	r0, r0, #12
 2595 1118 0610A0E1 		mov	r1, r6
 2596 111c 04C08DE5 		str	ip, [sp, #4]
 2597 1120 FEFFFFEB 		bl	LCDPrintString
 2598              	.LBB261:
 2599              	.LBB260:
 2600              		.loc 1 951 0
 2601 1124 EF3F15E5 		ldr	r3, [r5, #-4079]
 2602 1128 103083E3 		orr	r3, r3, #16
 2603 112c EF3F05E5 		str	r3, [r5, #-4079]
 2604              	.LBE260:
 2605              	.LBE261:
 2606              		.loc 1 574 0
 2607 1130 002097E5 		ldr	r2, [r7, #0]
 2608 1134 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 2609 1138 010054E3 		cmp	r4, #1
 2610 113c 2B00001A 		bne	.L247
 2611              	.LBB262:
 2612              	.LBB263:
 2613              		.loc 1 951 0
 2614 1140 EF3F15E5 		ldr	r3, [r5, #-4079]
 2615 1144 103083E3 		orr	r3, r3, #16
 2616 1148 EF3F05E5 		str	r3, [r5, #-4079]
 2617              	.LBE263:
 2618              	.LBE262:
 2619              		.loc 1 576 0
 2620 114c 0610A0E1 		mov	r1, r6
 2621 1150 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2622 1154 0200A0E3 		mov	r0, #2
 2623 1158 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2624 115c FEFFFFEB 		bl	LCDSetRowColor
 2625              		.loc 1 577 0
 2626 1160 00608DE5 		str	r6, [sp, #0]
 2627 1164 D8319FE5 		ldr	r3, .L269+20
 2628 1168 001097E5 		ldr	r1, [r7, #0]
 2629 116c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2630 1170 DC319FE5 		ldr	r3, .L269+36
 2631 1174 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2632 1178 D8019FE5 		ldr	r0, .L269+40
 2633 117c 001093E5 		ldr	r1, [r3, #0]
 2634 1180 0230A0E3 		mov	r3, #2
 2635 1184 04C08DE5 		str	ip, [sp, #4]
 2636              	.LBB264:
 2637              	.LBB265:
 2638              		.loc 1 957 0
 2639 1188 0540A0E1 		mov	r4, r5
 2640              	.LBE265:
 2641              	.LBE264:
 2642              		.loc 1 577 0
 2643 118c FEFFFFEB 		bl	LCDPrintString
 2644              		.loc 1 578 0
 2645 1190 C4719FE5 		ldr	r7, .L269+44
 2646              	.LBB271:
 2647              	.LBB270:
 2648              		.loc 1 957 0
 2649 1194 106086E2 		add	r6, r6, #16
 2650              	.LBB266:
 2651              	.LBB267:
 2652              		.loc 1 259 0
 2653 1198 90519FE5 		ldr	r5, .L269
 2654 119c 0F0000EA 		b	.L248
 2655              	.L252:
 2656              	.LBE267:
 2657              	.LBE266:
 2658              		.loc 1 957 0
 2659 11a0 EB6F04E5 		str	r6, [r4, #-4075]
 2660 11a4 0030A0E3 		mov	r3, #0
 2661              	.LVL95:
 2662              	.L249:
 2663              	.LBB269:
 2664              	.LBB268:
 2665              		.loc 1 259 0
 2666              	@ 259 "main.c" 1
 2667 11a8 0000A0E1 		nop
 2668              	@ 0 "" 2
 2669 11ac 013083E2 		add	r3, r3, #1
 2670 11b0 050053E1 		cmp	r3, r5
 2671 11b4 FBFFFF1A 		bne	.L249
 2672              	.LBE268:
 2673              	.LBE269:
 2674              	.LBE270:
 2675              	.LBE271:
 2676              		.loc 1 580 0
 2677 11b8 020050E3 		cmp	r0, #2
 2678 11bc 0200001A 		bne	.L250
 2679              		.loc 1 581 0
 2680 11c0 0100A0E3 		mov	r0, #1
 2681 11c4 FEFFFFEB 		bl	raiseVolume
 2682              	.LVL96:
 2683 11c8 010000EA 		b	.L251
 2684              	.LVL97:
 2685              	.L250:
 2686              		.loc 1 582 0
 2687 11cc 010050E3 		cmp	r0, #1
 2688              		.loc 1 583 0
 2689 11d0 FEFFFF0B 		bleq	lowerVolume
 2690              	.LVL98:
 2691              	.L251:
 2692              	.LBB272:
 2693              	.LBB273:
 2694              		.loc 1 951 0
 2695 11d4 EF3F14E5 		ldr	r3, [r4, #-4079]
 2696              	.LVL99:
 2697 11d8 103083E3 		orr	r3, r3, #16
 2698 11dc EF3F04E5 		str	r3, [r4, #-4079]
 2699              	.L248:
 2700              	.LBE273:
 2701              	.LBE272:
 2702              		.loc 1 578 0
 2703 11e0 0000D7E5 		ldrb	r0, [r7, #0]	@ zero_extendqisi2
 2704 11e4 020050E3 		cmp	r0, #2
 2705 11e8 ECFFFF9A 		bls	.L252
 2706 11ec 440000EA 		b	.L253
 2707              	.L247:
 2708              		.loc 1 588 0
 2709 11f0 030054E3 		cmp	r4, #3
 2710 11f4 1300001A 		bne	.L254
 2711              		.loc 1 589 0
 2712 11f8 FEFFFFEB 		bl	displayRadioMenu
 2713              	.LBB274:
 2714              	.LBB276:
 2715              		.loc 1 951 0
 2716 11fc EF3F15E5 		ldr	r3, [r5, #-4079]
 2717              	.LBE276:
 2718              	.LBE274:
 2719              		.loc 1 590 0
 2720 1200 54219FE5 		ldr	r2, .L269+44
 2721              	.LBB278:
 2722              	.LBB275:
 2723              		.loc 1 951 0
 2724 1204 103083E3 		orr	r3, r3, #16
 2725              	.LBE275:
 2726              	.LBE278:
 2727              		.loc 1 590 0
 2728 1208 0060C2E5 		strb	r6, [r2, #0]
 2729              	.LBB279:
 2730              	.LBB281:
 2731              		.loc 1 957 0
 2732 120c 1000A0E3 		mov	r0, #16
 2733              	.LBE281:
 2734              	.LBE279:
 2735              	.LBB285:
 2736              	.LBB277:
 2737              		.loc 1 951 0
 2738 1210 EF3F05E5 		str	r3, [r5, #-4079]
 2739              	.LBE277:
 2740              	.LBE285:
 2741              	.LBB286:
 2742              	.LBB280:
 2743              		.loc 1 957 0
 2744 1214 0520A0E1 		mov	r2, r5
 2745              	.LBB282:
 2746              	.LBB283:
 2747              		.loc 1 259 0
 2748 1218 10119FE5 		ldr	r1, .L269
 2749 121c 060000EA 		b	.L255
 2750              	.LVL100:
 2751              	.L256:
 2752              	@ 259 "main.c" 1
 2753 1220 0000A0E1 		nop
 2754              	@ 0 "" 2
 2755 1224 013083E2 		add	r3, r3, #1
 2756 1228 010053E1 		cmp	r3, r1
 2757 122c FBFFFF1A 		bne	.L256
 2758              	.LBE283:
 2759              	.LBE282:
 2760              	.LBE280:
 2761              	.LBE286:
 2762              	.LBB287:
 2763              	.LBB288:
 2764              		.loc 1 951 0
 2765 1230 EF3F12E5 		ldr	r3, [r2, #-4079]
 2766              	.LVL101:
 2767 1234 103083E3 		orr	r3, r3, #16
 2768 1238 EF3F02E5 		str	r3, [r2, #-4079]
 2769              	.L255:
 2770              	.LBE288:
 2771              	.LBE287:
 2772              	.LBB289:
 2773              	.LBB284:
 2774              		.loc 1 957 0
 2775 123c EB0F02E5 		str	r0, [r2, #-4075]
 2776 1240 0030A0E3 		mov	r3, #0
 2777              	.LVL102:
 2778 1244 F5FFFFEA 		b	.L256
 2779              	.LVL103:
 2780              	.L254:
 2781              	.LBE284:
 2782              	.LBE289:
 2783              		.loc 1 602 0
 2784 1248 020054E3 		cmp	r4, #2
 2785 124c 2C00001A 		bne	.L253
 2786              		.loc 1 603 0
 2787 1250 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2788 1254 0610A0E1 		mov	r1, r6
 2789 1258 0400A0E1 		mov	r0, r4
 2790 125c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2791 1260 FEFFFFEB 		bl	LCDSetRowColor
 2792              		.loc 1 604 0
 2793 1264 F4309FE5 		ldr	r3, .L269+48
 2794 1268 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2795 126c 000051E3 		cmp	r1, #0
 2796 1270 0700000A 		beq	.L257
 2797              		.loc 1 605 0
 2798 1274 003097E5 		ldr	r3, [r7, #0]
 2799 1278 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2800 127c 00608DE5 		str	r6, [sp, #0]
 2801 1280 0610A0E1 		mov	r1, r6
 2802 1284 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2803 1288 D4009FE5 		ldr	r0, .L269+52
 2804 128c 0430A0E1 		mov	r3, r4
 2805 1290 050000EA 		b	.L267
 2806              	.L257:
 2807              		.loc 1 607 0
 2808 1294 003097E5 		ldr	r3, [r7, #0]
 2809 1298 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2810 129c 00108DE5 		str	r1, [sp, #0]
 2811 12a0 C0009FE5 		ldr	r0, .L269+56
 2812 12a4 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 2813 12a8 0430A0E1 		mov	r3, r4
 2814              	.L267:
 2815 12ac 04C08DE5 		str	ip, [sp, #4]
 2816 12b0 FEFFFFEB 		bl	LCDPrintString
 2817              	.LBB290:
 2818              	.LBB292:
 2819              		.loc 1 951 0
 2820 12b4 0010E0E3 		mvn	r1, #0
 2821 12b8 EF2F11E5 		ldr	r2, [r1, #-4079]
 2822              	.LBE292:
 2823              	.LBE290:
 2824              		.loc 1 609 0
 2825 12bc 98309FE5 		ldr	r3, .L269+44
 2826              	.LBB294:
 2827              	.LBB291:
 2828              		.loc 1 951 0
 2829 12c0 102082E3 		orr	r2, r2, #16
 2830              	.LBE291:
 2831              	.LBE294:
 2832              		.loc 1 609 0
 2833 12c4 0000A0E3 		mov	r0, #0
 2834 12c8 0000C3E5 		strb	r0, [r3, #0]
 2835              	.LBB295:
 2836              	.LBB293:
 2837              		.loc 1 951 0
 2838 12cc EF2F01E5 		str	r2, [r1, #-4079]
 2839              	.LBE293:
 2840              	.LBE295:
 2841              	.LBB296:
 2842              	.LBB297:
 2843              		.loc 1 957 0
 2844 12d0 100080E2 		add	r0, r0, #16
 2845              	.LBB298:
 2846              	.LBB299:
 2847              		.loc 1 259 0
 2848 12d4 54209FE5 		ldr	r2, .L269
 2849 12d8 060000EA 		b	.L259
 2850              	.LVL104:
 2851              	.L260:
 2852              	@ 259 "main.c" 1
 2853 12dc 0000A0E1 		nop
 2854              	@ 0 "" 2
 2855 12e0 013083E2 		add	r3, r3, #1
 2856 12e4 020053E1 		cmp	r3, r2
 2857 12e8 FBFFFF1A 		bne	.L260
 2858              	.LBE299:
 2859              	.LBE298:
 2860              	.LBE297:
 2861              	.LBE296:
 2862              	.LBB301:
 2863              	.LBB302:
 2864              		.loc 1 951 0
 2865 12ec EF3F11E5 		ldr	r3, [r1, #-4079]
 2866              	.LVL105:
 2867 12f0 103083E3 		orr	r3, r3, #16
 2868 12f4 EF3F01E5 		str	r3, [r1, #-4079]
 2869              	.L259:
 2870              	.LBE302:
 2871              	.LBE301:
 2872              	.LBB303:
 2873              	.LBB300:
 2874              		.loc 1 957 0
 2875 12f8 EB0F01E5 		str	r0, [r1, #-4075]
 2876 12fc 0030A0E3 		mov	r3, #0
 2877              	.LVL106:
 2878 1300 F5FFFFEA 		b	.L260
 2879              	.LVL107:
 2880              	.L253:
 2881              	.LBE300:
 2882              	.LBE303:
 2883              		.loc 1 621 0
 2884 1304 FEFFFFEB 		bl	clearScreen
 2885              		.loc 1 622 0
 2886 1308 24309FE5 		ldr	r3, .L269+4
 2887 130c 000093E5 		ldr	r0, [r3, #0]
 2888              	.L268:
 2889 1310 FEFFFFEB 		bl	printMenu
 2890              	.L246:
 2891              	.LBB304:
 2892              	.LBB305:
 2893              		.loc 1 951 0
 2894 1314 0020E0E3 		mvn	r2, #0
 2895 1318 EF3F12E5 		ldr	r3, [r2, #-4079]
 2896 131c 103083E3 		orr	r3, r3, #16
 2897 1320 EF3F02E5 		str	r3, [r2, #-4079]
 2898              	.LBE305:
 2899              	.LBE304:
 2900              		.loc 1 625 0
 2901 1324 08D08DE2 		add	sp, sp, #8
 2902 1328 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 2903 132c 1EFF2FE1 		bx	lr
 2904              	.L270:
 2905              		.align	2
 2906              	.L269:
 2907 1330 40420F00 		.word	1000000
 2908 1334 7C040000 		.word	current_display
 2909 1338 74000000 		.word	file_manager
 2910 133c 01000000 		.word	file_is_open
 2911 1340 14000000 		.word	current_song
 2912 1344 00000000 		.word	white
 2913 1348 00000000 		.word	black
 2914 134c 00000000 		.word	NotFound
 2915 1350 80969800 		.word	10000000
 2916 1354 00000000 		.word	volume_setting
 2917 1358 00000000 		.word	.LC0
 2918 135c 08000000 		.word	button_pressed
 2919 1360 00000000 		.word	radio_enable
 2920 1364 07000000 		.word	.LC2
 2921 1368 03000000 		.word	.LC1
 2922              	.LFE16:
 2924              		.section	.rodata.str1.1
 2925              	.LC3:
 2926 000a 53442049 		.ascii	"SD Init Error\012\000"
 2926      6E697420 
 2926      4572726F 
 2926      720A00
 2927              	.LC4:
 2928 0019 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 2928      70656E52 
 2928      6F6F7420 
 2928      4572726F 
 2928      720A00
 2929              		.text
 2930              		.align	2
 2931              		.global	bootUp
 2933              	bootUp:
 2934              	.LFB4:
 2935              		.loc 1 266 0
 2936              		@ Function supports interworking.
 2937              		@ args = 0, pretend = 0, frame = 0
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939 136c 04E02DE5 		str	lr, [sp, #-4]!
 2940              	.LCFI35:
 2941              		.loc 1 267 0
 2942 1370 90019FE5 		ldr	r0, .L277
 2943 1374 FEFFFFEB 		bl	rprintf_devopen
 2944              	.LBB306:
 2945              	.LBB307:
 2946              		.loc 1 259 0
 2947 1378 8C219FE5 		ldr	r2, .L277+4
 2948              	.LBE307:
 2949              	.LBE306:
 2950              		.loc 1 267 0
 2951 137c 0030A0E3 		mov	r3, #0
 2952              	.LVL108:
 2953              	.L272:
 2954              	.LBB309:
 2955              	.LBB308:
 2956              		.loc 1 259 0
 2957              	@ 259 "main.c" 1
 2958 1380 0000A0E1 		nop
 2959              	@ 0 "" 2
 2960 1384 013083E2 		add	r3, r3, #1
 2961 1388 020053E1 		cmp	r3, r2
 2962 138c FBFFFF1A 		bne	.L272
 2963              	.LBE308:
 2964              	.LBE309:
 2965              		.loc 1 271 0
 2966 1390 FEFFFFEB 		bl	sd_raw_init
 2967              	.LVL109:
 2968 1394 000050E3 		cmp	r0, #0
 2969              		.loc 1 273 0
 2970 1398 70019F05 		ldreq	r0, .L277+8
 2971 139c FEFFFF0B 		bleq	rprintf
 2972              	.L273:
 2973              		.loc 1 275 0
 2974 13a0 FEFFFFEB 		bl	openroot
 2975 13a4 000050E3 		cmp	r0, #0
 2976              		.loc 1 277 0
 2977 13a8 64019F15 		ldrne	r0, .L277+12
 2978 13ac FEFFFF1B 		blne	rprintf
 2979              	.L274:
 2980              		.loc 1 282 0
 2981 13b0 60219FE5 		ldr	r2, .L277+16
 2982 13b4 083092E5 		ldr	r3, [r2, #8]
 2983 13b8 013683E3 		orr	r3, r3, #1048576
 2984 13bc 083082E5 		str	r3, [r2, #8]
 2985              		.loc 1 283 0
 2986 13c0 083092E5 		ldr	r3, [r2, #8]
 2987 13c4 0236C3E3 		bic	r3, r3, #2097152
 2988 13c8 083082E5 		str	r3, [r2, #8]
 2989              		.loc 1 284 0
 2990 13cc 48119FE5 		ldr	r1, .L277+20
 2991 13d0 043091E5 		ldr	r3, [r1, #4]
 2992 13d4 033B83E3 		orr	r3, r3, #3072
 2993 13d8 043081E5 		str	r3, [r1, #4]
 2994              		.loc 1 285 0
 2995 13dc 183092E5 		ldr	r3, [r2, #24]
 2996 13e0 013483E3 		orr	r3, r3, #16777216
 2997 13e4 033883E3 		orr	r3, r3, #196608
 2998 13e8 183082E5 		str	r3, [r2, #24]
 2999              		.loc 1 288 0
 3000 13ec 183092E5 		ldr	r3, [r2, #24]
 3001 13f0 023483E3 		orr	r3, r3, #33554432
 3002 13f4 183082E5 		str	r3, [r2, #24]
 3003              		.loc 1 289 0
 3004 13f8 183092E5 		ldr	r3, [r2, #24]
 3005 13fc 013283E3 		orr	r3, r3, #268435456
 3006 1400 183082E5 		str	r3, [r2, #24]
 3007              		.loc 1 292 0
 3008 1404 083092E5 		ldr	r3, [r2, #8]
 3009 1408 803083E3 		orr	r3, r3, #128
 3010 140c 083082E5 		str	r3, [r2, #8]
 3011              		.loc 1 295 0
 3012 1410 083092E5 		ldr	r3, [r2, #8]
 3013 1414 033B83E3 		orr	r3, r3, #3072
 3014 1418 083082E5 		str	r3, [r2, #8]
 3015              		.loc 1 296 0
 3016 141c 003091E5 		ldr	r3, [r1, #0]
 3017 1420 CF3483E3 		orr	r3, r3, #-822083584
 3018 1424 003081E5 		str	r3, [r1, #0]
 3019              		.loc 1 297 0
 3020 1428 033BA0E3 		mov	r3, #3072
 3021 142c 0C3082E5 		str	r3, [r2, #12]
 3022              		.loc 1 300 0
 3023 1430 083092E5 		ldr	r3, [r2, #8]
 3024 1434 033783E3 		orr	r3, r3, #786432
 3025 1438 083082E5 		str	r3, [r2, #8]
 3026              	.LBB310:
 3027              	.LBB311:
 3028              		.loc 1 974 0
 3029 143c 083092E5 		ldr	r3, [r2, #8]
 3030 1440 073283E3 		orr	r3, r3, #1879048192
 3031 1444 083082E5 		str	r3, [r2, #8]
 3032              		.loc 1 975 0
 3033 1448 0232A0E3 		mov	r3, #536870912
 3034 144c 043082E5 		str	r3, [r2, #4]
 3035              		.loc 1 976 0
 3036 1450 033083E0 		add	r3, r3, r3
 3037 1454 043082E5 		str	r3, [r2, #4]
 3038              		.loc 1 977 0
 3039 1458 0D3283E2 		add	r3, r3, #-805306368
 3040 145c 043082E5 		str	r3, [r2, #4]
 3041              	.LBE311:
 3042              	.LBE310:
 3043              		.loc 1 305 0
 3044 1460 183092E5 		ldr	r3, [r2, #24]
 3045 1464 0E36C3E3 		bic	r3, r3, #14680064
 3046 1468 183082E5 		str	r3, [r2, #24]
 3047              		.loc 1 307 0
 3048 146c 083092E5 		ldr	r3, [r2, #8]
 3049 1470 0235C3E3 		bic	r3, r3, #8388608
 3050 1474 083082E5 		str	r3, [r2, #8]
 3051              	.LBB312:
 3052              	.LBB313:
 3053              		.loc 1 921 0
 3054 1478 A0309FE5 		ldr	r3, .L277+24
 3055 147c 0120A0E3 		mov	r2, #1
 3056              		.loc 1 922 0
 3057 1480 0010E0E3 		mvn	r1, #0
 3058              		.loc 1 921 0
 3059 1484 002183E5 		str	r2, [r3, #256]
 3060              		.loc 1 922 0
 3061 1488 3030E0E3 		mvn	r3, #48
 3062 148c F33F01E5 		str	r3, [r1, #-4083]
 3063              	.LBB314:
 3064              	.LBB315:
 3065              		.loc 1 964 0
 3066 1490 413083E2 		add	r3, r3, #65
 3067 1494 EF3F01E5 		str	r3, [r1, #-4079]
 3068              	.LBE315:
 3069              	.LBE314:
 3070              		.loc 1 924 0
 3071 1498 153083E2 		add	r3, r3, #21
 3072 149c FF3D01E5 		str	r3, [r1, #-3583]
 3073              		.loc 1 925 0
 3074 14a0 7C309FE5 		ldr	r3, .L277+28
 3075 14a4 FF3E01E5 		str	r3, [r1, #-3839]
 3076              		.loc 1 926 0
 3077 14a8 2430A0E3 		mov	r3, #36
 3078 14ac FB3D01E5 		str	r3, [r1, #-3579]
 3079              		.loc 1 927 0
 3080 14b0 70309FE5 		ldr	r3, .L277+32
 3081              	.LBE313:
 3082              	.LBE312:
 3083              	.LBB317:
 3084              	.LBB318:
 3085              		.loc 1 898 0
 3086 14b4 70009FE5 		ldr	r0, .L277+36
 3087              	.LBE318:
 3088              	.LBE317:
 3089              	.LBB320:
 3090              	.LBB316:
 3091              		.loc 1 927 0
 3092 14b8 FB3E01E5 		str	r3, [r1, #-3835]
 3093              	.LBE316:
 3094              	.LBE320:
 3095              	.LBB321:
 3096              	.LBB319:
 3097              		.loc 1 898 0
 3098 14bc 4B3FA0E3 		mov	r3, #300
 3099 14c0 0C3080E5 		str	r3, [r0, #12]
 3100              		.loc 1 899 0
 3101 14c4 043090E5 		ldr	r3, [r0, #4]
 3102 14c8 023083E1 		orr	r3, r3, r2
 3103 14cc 043080E5 		str	r3, [r0, #4]
 3104              		.loc 1 900 0
 3105 14d0 0030A0E3 		mov	r3, #0
 3106 14d4 703080E5 		str	r3, [r0, #112]
 3107              		.loc 1 901 0
 3108 14d8 033083E2 		add	r3, r3, #3
 3109 14dc 143080E5 		str	r3, [r0, #20]
 3110              		.loc 1 902 0
 3111 14e0 FA3FA0E3 		mov	r3, #1000
 3112 14e4 183080E5 		str	r3, [r0, #24]
 3113              	.LBE319:
 3114              	.LBE321:
 3115              		.loc 1 311 0
 3116 14e8 FEFFFFEB 		bl	initializeMP3Player
 3117              	.LBB322:
 3118              	.LBB323:
 3119              		.loc 1 831 0
 3120 14ec 3C209FE5 		ldr	r2, .L277+40
 3121 14f0 4030A0E3 		mov	r3, #64
 3122 14f4 0C3082E5 		str	r3, [r2, #12]
 3123              		.loc 1 832 0
 3124 14f8 2030A0E3 		mov	r3, #32
 3125 14fc 003082E5 		str	r3, [r2, #0]
 3126              	.LBE323:
 3127              	.LBE322:
 3128              		.loc 1 314 0
 3129 1500 04E09DE4 		ldr	lr, [sp], #4
 3130 1504 1EFF2FE1 		bx	lr
 3131              	.L278:
 3132              		.align	2
 3133              	.L277:
 3134 1508 00000000 		.word	putc_serial0
 3135 150c A0860100 		.word	100000
 3136 1510 0A000000 		.word	.LC3
 3137 1514 19000000 		.word	.LC4
 3138 1518 008002E0 		.word	-536707072
 3139 151c 00C002E0 		.word	-536690688
 3140 1520 00C01FE0 		.word	-534790144
 3141 1524 00000000 		.word	timer1ISR
 3142 1528 00000000 		.word	timer0ISR
 3143 152c 004000E0 		.word	-536854528
 3144 1530 000002E0 		.word	-536739840
 3145              	.LFE4:
 3147              		.global	__divsi3
 3148              		.global	__modsi3
 3149              		.section	.rodata.str1.1
 3150              	.LC5:
 3151 002c 474F2047 		.ascii	"GO GO MP3!\000"
 3151      4F204D50 
 3151      332100
 3152              		.text
 3153              		.align	2
 3154              		.global	main
 3156              	main:
 3157              	.LFB2:
 3158              		.loc 1 93 0
 3159              		@ Function supports interworking.
 3160              		@ args = 0, pretend = 0, frame = 0
 3161              		@ frame_needed = 1, uses_anonymous_args = 0
 3162 1534 0DC0A0E1 		mov	ip, sp
 3163              	.LCFI36:
 3164 1538 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 3165              	.LCFI37:
 3166 153c 04B04CE2 		sub	fp, ip, #4
 3167              	.LCFI38:
 3168 1540 08D04DE2 		sub	sp, sp, #8
 3169              	.LCFI39:
 3170              		.loc 1 104 0
 3171 1544 FEFFFFEB 		bl	bootUp
 3172              		.loc 1 106 0
 3173 1548 FEFFFFEB 		bl	initializeMP3Player
 3174              		.loc 1 108 0
 3175 154c FEFFFFEB 		bl	splashScreen
 3176              		.loc 1 110 0
 3177 1550 DC349FE5 		ldr	r3, .L313
 3178 1554 000093E5 		ldr	r0, [r3, #0]
 3179 1558 FEFFFFEB 		bl	initializeRadio
 3180              	.LBB324:
 3181              	.LBB325:
 3182              		.loc 1 838 0
 3183 155c D4249FE5 		ldr	r2, .L313+4
 3184 1560 003092E5 		ldr	r3, [r2, #0]
 3185 1564 153C83E3 		orr	r3, r3, #5376
 3186 1568 003082E5 		str	r3, [r2, #0]
 3187 156c 0050A0E3 		mov	r5, #0
 3188              	.LVL110:
 3189              	.L280:
 3190              	.LBE325:
 3191              	.LBE324:
 3192              		.loc 1 116 0
 3193 1570 0000A0E3 		mov	r0, #0
 3194 1574 FEFFFFEB 		bl	rootDirectory_files_stream
 3195 1578 006050E2 		subs	r6, r0, #0
 3196              		.loc 1 115 0
 3197 157c 015085E2 		add	r5, r5, #1
 3198              		.loc 1 116 0
 3199 1580 FAFFFF1A 		bne	.L280
 3200              		.loc 1 117 0
 3201 1584 063085E2 		add	r3, r5, #6
 3202 1588 0330C3E3 		bic	r3, r3, #3
 3203 158c 0DD063E0 		rsb	sp, r3, sp
 3204 1590 08708DE2 		add	r7, sp, #8
 3205              		.loc 1 118 0
 3206 1594 0700A0E1 		mov	r0, r7
 3207 1598 011085E2 		add	r1, r5, #1
 3208 159c FEFFFFEB 		bl	rootDirectory_files
 3209              		.loc 1 119 0
 3210 15a0 8032A0E1 		mov	r3, r0, asl #5
 3211 15a4 043083E2 		add	r3, r3, #4
 3212 15a8 0DD063E0 		rsb	sp, r3, sp
 3213              		.loc 1 118 0
 3214 15ac 88349FE5 		ldr	r3, .L313+8
 3215 15b0 0040A0E1 		mov	r4, r0
 3216              	.LBB326:
 3217              		.loc 1 123 0
 3218 15b4 0600A0E1 		mov	r0, r6
 3219              	.LVL111:
 3220              	.LBE326:
 3221              		.loc 1 118 0
 3222 15b8 004083E5 		str	r4, [r3, #0]
 3223              		.loc 1 119 0
 3224 15bc 08608DE2 		add	r6, sp, #8
 3225              	.LBB328:
 3226              		.loc 1 123 0
 3227 15c0 00E0A0E1 		mov	lr, r0
 3228              	.LVL112:
 3229 15c4 0080A0E1 		mov	r8, r0
 3230              	.LVL113:
 3231 15c8 100000EA 		b	.L281
 3232              	.LVL114:
 3233              	.L287:
 3234 15cc 0030A0E3 		mov	r3, #0
 3235              	.LBB327:
 3236              		.loc 1 133 0
 3237 15d0 8EC2A0E1 		mov	ip, lr, asl #5
 3238              	.L286:
 3239              		.loc 1 125 0
 3240 15d4 050050E1 		cmp	r0, r5
 3241              		.loc 1 133 0
 3242 15d8 03208CE0 		add	r2, ip, r3
 3243 15dc 0280C687 		strhib	r8, [r6, r2]
 3244              		.loc 1 125 0
 3245 15e0 0600008A 		bhi	.L285
 3246              	.LVL115:
 3247              		.loc 1 126 0
 3248 15e4 0010D7E7 		ldrb	r1, [r7, r0]	@ zero_extendqisi2
 3249 15e8 2C0051E3 		cmp	r1, #44
 3250              		.loc 1 127 0
 3251 15ec 0230A001 		moveq	r3, r2
 3252              		.loc 1 130 0
 3253 15f0 0210C617 		strneb	r1, [r6, r2]
 3254              		.loc 1 127 0
 3255 15f4 0380C607 		streqb	r8, [r6, r3]
 3256              		.loc 1 131 0
 3257 15f8 010080E2 		add	r0, r0, #1
 3258              		.loc 1 127 0
 3259 15fc 1F30A003 		moveq	r3, #31
 3260              	.LVL116:
 3261              	.L285:
 3262              		.loc 1 124 0
 3263 1600 013083E2 		add	r3, r3, #1
 3264 1604 200053E3 		cmp	r3, #32
 3265 1608 F1FFFF1A 		bne	.L286
 3266              	.LBE327:
 3267              		.loc 1 123 0
 3268 160c 01E08EE2 		add	lr, lr, #1
 3269              	.LVL117:
 3270              	.L281:
 3271 1610 04005EE1 		cmp	lr, r4
 3272 1614 ECFFFFBA 		blt	.L287
 3273              	.LBE328:
 3274              		.loc 1 138 0
 3275 1618 0400A0E1 		mov	r0, r4
 3276              	.LVL118:
 3277 161c 0F10A0E3 		mov	r1, #15
 3278 1620 FEFFFFEB 		bl	__divsi3
 3279              	.LVL119:
 3280              		.loc 1 139 0
 3281 1624 10349FE5 		ldr	r3, .L313+8
 3282              		.loc 1 138 0
 3283 1628 FF4000E2 		and	r4, r0, #255
 3284 162c 0C549FE5 		ldr	r5, .L313+12
 3285              	.LVL120:
 3286              		.loc 1 139 0
 3287 1630 000093E5 		ldr	r0, [r3, #0]
 3288              		.loc 1 138 0
 3289 1634 013044E2 		sub	r3, r4, #1
 3290 1638 0530C5E5 		strb	r3, [r5, #5]
 3291              		.loc 1 139 0
 3292 163c 0F10A0E3 		mov	r1, #15
 3293 1640 FEFFFFEB 		bl	__modsi3
 3294              		.loc 1 142 0
 3295 1644 F8339FE5 		ldr	r3, .L313+16
 3296 1648 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3297              		.loc 1 143 0
 3298 164c F4339FE5 		ldr	r3, .L313+20
 3299              		.loc 1 139 0
 3300 1650 000050E3 		cmp	r0, #0
 3301 1654 0540C515 		strneb	r4, [r5, #5]
 3302              		.loc 1 143 0
 3303 1658 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3304              		.loc 1 141 0
 3305 165c DC439FE5 		ldr	r4, .L313+12
 3306 1660 0050A0E3 		mov	r5, #0
 3307              		.loc 1 143 0
 3308 1664 0430C4E5 		strb	r3, [r4, #4]
 3309              		.loc 1 146 0
 3310 1668 0130A0E3 		mov	r3, #1
 3311              		.loc 1 142 0
 3312 166c 0320C4E5 		strb	r2, [r4, #3]
 3313              		.loc 1 148 0
 3314 1670 0400A0E1 		mov	r0, r4
 3315 1674 0610A0E1 		mov	r1, r6
 3316              		.loc 1 146 0
 3317 1678 0030C4E5 		strb	r3, [r4, #0]
 3318              		.loc 1 141 0
 3319 167c 0250C4E5 		strb	r5, [r4, #2]
 3320              		.loc 1 145 0
 3321 1680 0650C4E5 		strb	r5, [r4, #6]
 3322              		.loc 1 147 0
 3323 1684 085084E5 		str	r5, [r4, #8]
 3324              		.loc 1 148 0
 3325 1688 FEFFFFEB 		bl	getNewFiles
 3326              	.LBB329:
 3327              		.loc 1 150 0
 3328 168c B8239FE5 		ldr	r2, .L313+24
 3329              	.L289:
 3330 1690 0530D2E7 		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 3331              	.LVL121:
 3332              		.loc 1 149 0
 3333 1694 015085E2 		add	r5, r5, #1
 3334 1698 160055E3 		cmp	r5, #22
 3335              		.loc 1 150 0
 3336 169c EC31C4E5 		strb	r3, [r4, #492]
 3337              		.loc 1 149 0
 3338 16a0 014084E2 		add	r4, r4, #1
 3339 16a4 F9FFFF1A 		bne	.L289
 3340              	.LBE329:
 3341              		.loc 1 154 0
 3342 16a8 A0039FE5 		ldr	r0, .L313+28
 3343 16ac FEFFFFEB 		bl	fillSettings
 3344              	.LBB330:
 3345              	.LBB332:
 3346              		.loc 1 844 0
 3347 16b0 80139FE5 		ldr	r1, .L313+4
 3348 16b4 003091E5 		ldr	r3, [r1, #0]
 3349              	.LBE332:
 3350              	.LBE330:
 3351              		.loc 1 157 0
 3352 16b8 80239FE5 		ldr	r2, .L313+12
 3353 16bc 90439FE5 		ldr	r4, .L313+32
 3354              	.LBB334:
 3355              	.LBB331:
 3356              		.loc 1 844 0
 3357 16c0 FF3DC3E3 		bic	r3, r3, #16320
 3358 16c4 3030C3E3 		bic	r3, r3, #48
 3359              	.LBE331:
 3360              	.LBE334:
 3361              		.loc 1 159 0
 3362 16c8 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 3363              		.loc 1 157 0
 3364 16cc 002084E5 		str	r2, [r4, #0]
 3365              	.LBB335:
 3366              	.LBB333:
 3367              		.loc 1 844 0
 3368 16d0 003081E5 		str	r3, [r1, #0]
 3369              	.LBE333:
 3370              	.LBE335:
 3371              		.loc 1 159 0
 3372 16d4 FEFFFFEB 		bl	LCDClear
 3373              		.loc 1 162 0
 3374 16d8 003094E5 		ldr	r3, [r4, #0]
 3375 16dc 0040A0E3 		mov	r4, #0
 3376 16e0 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 3377 16e4 00408DE5 		str	r4, [sp, #0]
 3378 16e8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3379 16ec 64039FE5 		ldr	r0, .L313+36
 3380 16f0 0230A0E3 		mov	r3, #2
 3381 16f4 0410A0E1 		mov	r1, r4
 3382 16f8 04C08DE5 		str	ip, [sp, #4]
 3383 16fc FEFFFFEB 		bl	LCDPrintString
 3384              	.LBB336:
 3385              	.LBB337:
 3386              		.loc 1 259 0
 3387 1700 54339FE5 		ldr	r3, .L313+40
 3388              	.L290:
 3389              	@ 259 "main.c" 1
 3390 1704 0000A0E1 		nop
 3391              	@ 0 "" 2
 3392 1708 014084E2 		add	r4, r4, #1
 3393              	.LVL122:
 3394 170c 030054E1 		cmp	r4, r3
 3395 1710 FBFFFF1A 		bne	.L290
 3396              	.LBE337:
 3397              	.LBE336:
 3398              		.loc 1 166 0
 3399 1714 38439FE5 		ldr	r4, .L313+32
 3400              	.LVL123:
 3401 1718 000094E5 		ldr	r0, [r4, #0]
 3402 171c FEFFFFEB 		bl	printMenu
 3403              	.LBB338:
 3404              	.LBB339:
 3405              		.loc 1 866 0
 3406 1720 38739FE5 		ldr	r7, .L313+44
 3407              	.LBE339:
 3408              	.LBE338:
 3409              		.loc 1 170 0
 3410 1724 18939FE5 		ldr	r9, .L313+16
 3411              		.loc 1 180 0
 3412 1728 34839FE5 		ldr	r8, .L313+48
 3413              	.LVL124:
 3414              	.LBB341:
 3415              	.LBB342:
 3416              	.LBB343:
 3417              	.LBB344:
 3418              		.loc 1 259 0
 3419 172c 34A39FE5 		ldr	sl, .L313+52
 3420              	.L304:
 3421              	.LBE344:
 3422              	.LBE343:
 3423              	.LBE342:
 3424              	.LBE341:
 3425              	.LBB348:
 3426              	.LBB340:
 3427              		.loc 1 866 0
 3428 1730 003097E5 		ldr	r3, [r7, #0]
 3429              	.LBE340:
 3430              	.LBE348:
 3431              		.loc 1 169 0
 3432 1734 020513E3 		tst	r3, #8388608
 3433 1738 2100000A 		beq	.L291
 3434              		.loc 1 170 0
 3435 173c 0000D9E5 		ldrb	r0, [r9, #0]	@ zero_extendqisi2
 3436 1740 FEFFFFEB 		bl	LCDClear
 3437              		.loc 1 171 0
 3438 1744 0430A0E3 		mov	r3, #4
 3439 1748 00308DE5 		str	r3, [sp, #0]
 3440 174c 003094E5 		ldr	r3, [r4, #0]
 3441 1750 F0129FE5 		ldr	r1, .L313+20
 3442 1754 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3443 1758 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3444 175c 0730A0E3 		mov	r3, #7
 3445 1760 04039FE5 		ldr	r0, .L313+56
 3446 1764 0010A0E3 		mov	r1, #0
 3447 1768 04C08DE5 		str	ip, [sp, #4]
 3448 176c FEFFFFEB 		bl	LCDPrintString
 3449 1770 0030A0E3 		mov	r3, #0
 3450              	.LVL125:
 3451              	.L292:
 3452              	.LBB349:
 3453              	.LBB350:
 3454              		.loc 1 259 0
 3455              	@ 259 "main.c" 1
 3456 1774 0000A0E1 		nop
 3457              	@ 0 "" 2
 3458 1778 F0229FE5 		ldr	r2, .L313+60
 3459 177c 013083E2 		add	r3, r3, #1
 3460 1780 020053E1 		cmp	r3, r2
 3461 1784 FAFFFF1A 		bne	.L292
 3462              	.LBE350:
 3463              	.LBE349:
 3464              	.LBB351:
 3465              	.LBB352:
 3466              		.loc 1 933 0
 3467 1788 3020A0E3 		mov	r2, #48
 3468 178c 0030E0E3 		mvn	r3, #0
 3469              	.LVL126:
 3470 1790 EB2F03E5 		str	r2, [r3, #-4075]
 3471              	.LBE352:
 3472              	.LBE351:
 3473              		.loc 1 174 0
 3474 1794 FEFFFFEB 		bl	main_msc
 3475              	.LBB353:
 3476              	.LBB354:
 3477              		.loc 1 651 0
 3478 1798 0E22A0E3 		mov	r2, #-536870912
 3479 179c 003092E5 		ldr	r3, [r2, #0]
 3480 17a0 033083E3 		orr	r3, r3, #3
 3481 17a4 003082E5 		str	r3, [r2, #0]
 3482              		.loc 1 652 0
 3483 17a8 AA10A0E3 		mov	r1, #170
 3484              		.loc 1 653 0
 3485 17ac 5530A0E3 		mov	r3, #85
 3486              		.loc 1 652 0
 3487 17b0 081082E5 		str	r1, [r2, #8]
 3488              		.loc 1 653 0
 3489 17b4 083082E5 		str	r3, [r2, #8]
 3490              		.loc 1 655 0
 3491 17b8 0030A0E3 		mov	r3, #0
 3492              		.loc 1 654 0
 3493 17bc 081082E5 		str	r1, [r2, #8]
 3494              		.loc 1 655 0
 3495 17c0 083082E5 		str	r3, [r2, #8]
 3496              	.L291:
 3497              	.LBE354:
 3498              	.LBE353:
 3499              		.loc 1 180 0
 3500 17c4 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3501 17c8 000053E3 		cmp	r3, #0
 3502 17cc 4300001A 		bne	.L293
 3503 17d0 9C329FE5 		ldr	r3, .L313+64
 3504 17d4 0050D3E5 		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 3505              	.LVL127:
 3506 17d8 000055E3 		cmp	r5, #0
 3507 17dc 3F00001A 		bne	.L293
 3508              		.loc 1 182 0
 3509 17e0 90329FE5 		ldr	r3, .L313+68
 3510 17e4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3511 17e8 000053E3 		cmp	r3, #0
 3512 17ec 3B00000A 		beq	.L293
 3513              	.LBB355:
 3514              	.LBB356:
 3515              		.loc 1 945 0
 3516 17f0 2020A0E3 		mov	r2, #32
 3517 17f4 0030E0E3 		mvn	r3, #0
 3518 17f8 EB2F03E5 		str	r2, [r3, #-4075]
 3519              	.LBE356:
 3520              	.LBE355:
 3521              		.loc 1 184 0
 3522 17fc 78029FE5 		ldr	r0, .L313+72
 3523 1800 FEFFFFEB 		bl	closeSong
 3524              		.loc 1 188 0
 3525 1804 34129FE5 		ldr	r1, .L313+12
 3526              		.loc 1 185 0
 3527 1808 70329FE5 		ldr	r3, .L313+76
 3528              		.loc 1 188 0
 3529 180c 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 3530              		.loc 1 185 0
 3531 1810 0050C3E5 		strb	r5, [r3, #0]
 3532              		.loc 1 188 0
 3533 1814 0E0052E3 		cmp	r2, #14
 3534              		.loc 1 186 0
 3535 1818 0232A0E3 		mov	r3, #536870912
 3536 181c 043087E5 		str	r3, [r7, #4]
 3537              		.loc 1 189 0
 3538 1820 01208292 		addls	r2, r2, #1
 3539              		.loc 1 190 0
 3540 1824 08309195 		ldrls	r3, [r1, #8]
 3541              		.loc 1 189 0
 3542 1828 0020C195 		strlsb	r2, [r1, #0]
 3543              		.loc 1 193 0
 3544 182c 0CC29FE5 		ldr	ip, .L313+12
 3545              		.loc 1 190 0
 3546 1830 01308392 		addls	r3, r3, #1
 3547 1834 08308195 		strls	r3, [r1, #8]
 3548              		.loc 1 193 0
 3549 1838 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 3550 183c 0F0053E3 		cmp	r3, #15
 3551 1840 0C00001A 		bne	.L295
 3552 1844 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 3553 1848 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 3554 184c 020053E1 		cmp	r3, r2
 3555 1850 0800009A 		bls	.L295
 3556              		.loc 1 196 0
 3557 1854 013082E2 		add	r3, r2, #1
 3558              		.loc 1 194 0
 3559 1858 0120A0E3 		mov	r2, #1
 3560 185c 0020CCE5 		strb	r2, [ip, #0]
 3561              		.loc 1 195 0
 3562 1860 0020A0E3 		mov	r2, #0
 3563              		.loc 1 197 0
 3564 1864 0C00A0E1 		mov	r0, ip
 3565 1868 0610A0E1 		mov	r1, r6
 3566              		.loc 1 195 0
 3567 186c 08208CE5 		str	r2, [ip, #8]
 3568              		.loc 1 196 0
 3569 1870 0630CCE5 		strb	r3, [ip, #6]
 3570              		.loc 1 197 0
 3571 1874 FEFFFFEB 		bl	getNewFiles
 3572              	.L295:
 3573              		.loc 1 200 0
 3574 1878 C0519FE5 		ldr	r5, .L313+12
 3575 187c 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 3576 1880 833285E0 		add	r3, r5, r3, asl #5
 3577 1884 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3578 1888 000053E3 		cmp	r3, #0
 3579 188c 1300000A 		beq	.L293
 3580              		.loc 1 201 0
 3581 1890 0400D5E5 		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 3582 1894 FEFFFFEB 		bl	LCDClear
 3583              		.loc 1 202 0
 3584 1898 0500A0E1 		mov	r0, r5
 3585 189c FEFFFFEB 		bl	printMenu
 3586              		.loc 1 203 0
 3587 18a0 0510A0E1 		mov	r1, r5
 3588 18a4 D0019FE5 		ldr	r0, .L313+72
 3589 18a8 FEFFFFEB 		bl	loadSongInfo
 3590 18ac CC319FE5 		ldr	r3, .L313+76
 3591 18b0 0000C3E5 		strb	r0, [r3, #0]
 3592              		.loc 1 204 0
 3593 18b4 FEFFFFEB 		bl	vs1002Config
 3594              		.loc 1 205 0
 3595 18b8 0000A0E3 		mov	r0, #0
 3596 18bc 021BA0E3 		mov	r1, #2048
 3597 18c0 FEFFFFEB 		bl	vs1002SCIWrite
 3598              		.loc 1 206 0
 3599 18c4 FEFFFFEB 		bl	vs1002Finish
 3600              		.loc 1 207 0
 3601 18c8 0232A0E3 		mov	r3, #536870912
 3602 18cc 0C3087E5 		str	r3, [r7, #12]
 3603              	.LBB357:
 3604              	.LBB358:
 3605              		.loc 1 939 0
 3606 18d0 0020E0E3 		mvn	r2, #0
 3607 18d4 EF3F12E5 		ldr	r3, [r2, #-4079]
 3608 18d8 203083E3 		orr	r3, r3, #32
 3609 18dc EF3F02E5 		str	r3, [r2, #-4079]
 3610              	.LVL128:
 3611              	.L293:
 3612              	.LBE358:
 3613              	.LBE357:
 3614              		.loc 1 213 0
 3615 18e0 0030D8E5 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 3616 18e4 020053E3 		cmp	r3, #2
 3617 18e8 0300001A 		bne	.L296
 3618              		.loc 1 214 0
 3619 18ec 000094E5 		ldr	r0, [r4, #0]
 3620 18f0 0610A0E1 		mov	r1, r6
 3621 18f4 FEFFFFEB 		bl	handleUpButton
 3622 18f8 460000EA 		b	.L297
 3623              	.L296:
 3624              		.loc 1 215 0
 3625 18fc 010053E3 		cmp	r3, #1
 3626 1900 0300001A 		bne	.L298
 3627              		.loc 1 216 0
 3628 1904 000094E5 		ldr	r0, [r4, #0]
 3629 1908 0610A0E1 		mov	r1, r6
 3630 190c FEFFFFEB 		bl	handleDownButton
 3631 1910 400000EA 		b	.L297
 3632              	.L298:
 3633              		.loc 1 217 0
 3634 1914 030053E3 		cmp	r3, #3
 3635 1918 0100001A 		bne	.L299
 3636              		.loc 1 218 0
 3637 191c FEFFFFEB 		bl	handleMiddleButton
 3638 1920 3C0000EA 		b	.L297
 3639              	.L299:
 3640              		.loc 1 219 0
 3641 1924 48319FE5 		ldr	r3, .L313+64
 3642 1928 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3643 192c 000053E3 		cmp	r3, #0
 3644 1930 3800000A 		beq	.L297
 3645              	.LBB359:
 3646              	.LBB347:
 3647              		.loc 1 957 0
 3648 1934 0030E0E3 		mvn	r3, #0
 3649 1938 1020A0E3 		mov	r2, #16
 3650 193c EB2F03E5 		str	r2, [r3, #-4075]
 3651 1940 013083E2 		add	r3, r3, #1
 3652              	.LVL129:
 3653              	.L300:
 3654              	.LBB346:
 3655              	.LBB345:
 3656              		.loc 1 259 0
 3657              	@ 259 "main.c" 1
 3658 1944 0000A0E1 		nop
 3659              	@ 0 "" 2
 3660 1948 013083E2 		add	r3, r3, #1
 3661 194c 0A0053E1 		cmp	r3, sl
 3662 1950 FBFFFF1A 		bne	.L300
 3663              	.LBE345:
 3664              	.LBE346:
 3665              	.LBE347:
 3666              	.LBE359:
 3667              		.loc 1 221 0
 3668 1954 FEFFFFEB 		bl	MMA_get_y
 3669              	.LVL130:
 3670 1958 AF0F50E3 		cmp	r0, #700
 3671 195c 100000DA 		ble	.L301
 3672 1960 1C319FE5 		ldr	r3, .L313+80
 3673 1964 003093E5 		ldr	r3, [r3, #0]
 3674 1968 AF0F53E3 		cmp	r3, #700
 3675 196c 0C0000DA 		ble	.L301
 3676              		.loc 1 222 0
 3677 1970 FEFFFFEB 		bl	clearScreen
 3678              		.loc 1 226 0
 3679 1974 04319FE5 		ldr	r3, .L313+76
 3680 1978 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3681              		.loc 1 223 0
 3682 197c CC209FE5 		ldr	r2, .L313+28
 3683              		.loc 1 226 0
 3684 1980 000053E3 		cmp	r3, #0
 3685              		.loc 1 224 0
 3686 1984 0130A0E3 		mov	r3, #1
 3687 1988 0230C2E5 		strb	r3, [r2, #2]
 3688              		.loc 1 225 0
 3689 198c 0232A0E3 		mov	r3, #536870912
 3690 1990 043087E5 		str	r3, [r7, #4]
 3691              		.loc 1 223 0
 3692 1994 002084E5 		str	r2, [r4, #0]
 3693              		.loc 1 227 0
 3694 1998 0F328312 		addne	r3, r3, #-268435456
 3695              		.loc 1 229 0
 3696 199c 0131A003 		moveq	r3, #1073741824
 3697 19a0 150000EA 		b	.L312
 3698              	.L301:
 3699              		.loc 1 232 0
 3700 19a4 FEFFFFEB 		bl	MMA_get_y
 3701 19a8 D8209FE5 		ldr	r2, .L313+84
 3702 19ac 020050E1 		cmp	r0, r2
 3703 19b0 120000CA 		bgt	.L303
 3704 19b4 C8309FE5 		ldr	r3, .L313+80
 3705 19b8 003093E5 		ldr	r3, [r3, #0]
 3706 19bc 020053E1 		cmp	r3, r2
 3707 19c0 0E0000CA 		bgt	.L303
 3708              		.loc 1 233 0
 3709 19c4 FEFFFFEB 		bl	clearScreen
 3710              		.loc 1 238 0
 3711 19c8 B0309FE5 		ldr	r3, .L313+76
 3712 19cc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3713              		.loc 1 234 0
 3714 19d0 68209FE5 		ldr	r2, .L313+12
 3715              		.loc 1 238 0
 3716 19d4 000053E3 		cmp	r3, #0
 3717              		.loc 1 235 0
 3718 19d8 0030A0E3 		mov	r3, #0
 3719 19dc 0230C2E5 		strb	r3, [r2, #2]
 3720              		.loc 1 236 0
 3721 19e0 013283E2 		add	r3, r3, #268435456
 3722 19e4 043087E5 		str	r3, [r7, #4]
 3723              		.loc 1 237 0
 3724 19e8 033283E2 		add	r3, r3, #805306368
 3725 19ec 043087E5 		str	r3, [r7, #4]
 3726              		.loc 1 234 0
 3727 19f0 002084E5 		str	r2, [r4, #0]
 3728              		.loc 1 238 0
 3729 19f4 0100000A 		beq	.L303
 3730              		.loc 1 239 0
 3731 19f8 0E3283E2 		add	r3, r3, #-536870912
 3732              	.L312:
 3733 19fc 0C3087E5 		str	r3, [r7, #12]
 3734              	.L303:
 3735              		.loc 1 242 0
 3736 1a00 000094E5 		ldr	r0, [r4, #0]
 3737 1a04 FEFFFFEB 		bl	printMenu
 3738              	.LBB360:
 3739              	.LBB361:
 3740              		.loc 1 951 0
 3741 1a08 0020E0E3 		mvn	r2, #0
 3742 1a0c EF3F12E5 		ldr	r3, [r2, #-4079]
 3743 1a10 103083E3 		orr	r3, r3, #16
 3744 1a14 EF3F02E5 		str	r3, [r2, #-4079]
 3745              	.L297:
 3746              	.LBE361:
 3747              	.LBE360:
 3748              	.LBB362:
 3749              	.LBB363:
 3750 1a18 0030E0E3 		mvn	r3, #0
 3751 1a1c EF2F13E5 		ldr	r2, [r3, #-4079]
 3752 1a20 102082E3 		orr	r2, r2, #16
 3753 1a24 EF2F03E5 		str	r2, [r3, #-4079]
 3754              	.LBE363:
 3755              	.LBE362:
 3756              		.loc 1 245 0
 3757 1a28 013083E2 		add	r3, r3, #1
 3758 1a2c 0030C8E5 		strb	r3, [r8, #0]
 3759 1a30 3EFFFFEA 		b	.L304
 3760              	.L314:
 3761              		.align	2
 3762              	.L313:
 3763 1a34 00000000 		.word	radio_channel
 3764 1a38 00C002E0 		.word	-536690688
 3765 1a3c 04000000 		.word	NUMBEROFFILES
 3766 1a40 74000000 		.word	file_manager
 3767 1a44 00000000 		.word	white
 3768 1a48 00000000 		.word	black
 3769 1a4c 00000000 		.word	welcome
 3770 1a50 78020000 		.word	settings_menu
 3771 1a54 7C040000 		.word	current_display
 3772 1a58 2C000000 		.word	.LC5
 3773 1a5c 404B4C00 		.word	5000000
 3774 1a60 008002E0 		.word	-536707072
 3775 1a64 08000000 		.word	button_pressed
 3776 1a68 C0C62D00 		.word	3000000
 3777 1a6c 00000000 		.word	USB
 3778 1a70 80969800 		.word	10000000
 3779 1a74 09000000 		.word	update_screen
 3780 1a78 02000000 		.word	song_is_over
 3781 1a7c 14000000 		.word	current_song
 3782 1a80 01000000 		.word	file_is_open
 3783 1a84 0C000000 		.word	prev_position
 3784 1a88 BB020000 		.word	699
 3785              	.LFE2:
 3787              		.global	volume_setting
 3788              		.data
 3789              		.align	2
 3792              	volume_setting:
 3793 0000 10000000 		.word	16
 3794              		.global	radio_channel
 3795              		.align	2
 3798              	radio_channel:
 3799 0004 E8030000 		.word	1000
 3800              		.global	radio_enable
 3801              		.bss
 3804              	radio_enable:
 3805 0000 00       		.space	1
 3806              		.global	welcome
 3807              		.section	.rodata
 3810              	welcome:
 3811 0000 536F6E67 		.ascii	"Song List:\012\015\000"
 3811      204C6973 
 3811      743A0A0D 
 3811      00
 3812 000d 00000000 		.space	9
 3812      00000000 
 3812      00
 3813              		.global	NotFound
 3816              	NotFound:
 3817 0016 46696C65 		.ascii	"File Not Found!"
 3817      204E6F74 
 3817      20466F75 
 3817      6E6421
 3818              		.global	USB
 3821              	USB:
 3822 0025 55534220 		.ascii	"USB Connected!"
 3822      436F6E6E 
 3822      65637465 
 3822      6421
 3823              		.global	newline
 3826              	newline:
 3827 0033 0A00     		.ascii	"\012\000"
 3828              		.global	volume
 3831              	volume:
 3832 0035 566F6C75 		.ascii	"Volume\000"
 3832      6D6500
 3833              		.global	contrast
 3836              	contrast:
 3837 003c 436F6E74 		.ascii	"Contrast\000"
 3837      72617374 
 3837      00
 3838              		.global	radio_power
 3841              	radio_power:
 3842 0045 52616469 		.ascii	"Radio Power"
 3842      6F20506F 
 3842      776572
 3843              		.global	radio_channel_menu
 3846              	radio_channel_menu:
 3847 0050 52616469 		.ascii	"Radio Channel"
 3847      6F204368 
 3847      616E6E65 
 3847      6C
 3848              		.global	settings
 3851              	settings:
 3852 005d 53657474 		.ascii	"Settings:\000"
 3852      696E6773 
 3852      3A00
 3853              		.bss
 3854              	file_is_open:
 3855 0001 00       		.space	1
 3856              	song_is_over:
 3857 0002 00       		.space	1
 3858 0003 00       		.align	2
 3859              	NUMBEROFFILES:
 3860 0004 00000000 		.space	4
 3861              	button_pressed:
 3862 0008 00       		.space	1
 3863              	update_screen:
 3864 0009 00       		.space	1
 3865 000a 0000     		.align	2
 3866              	prev_position:
 3867 000c 00000000 		.space	4
 3868              		.align	2
 3869              	cur_position:
 3870 0010 00000000 		.space	4
 3871              		.align	2
 3872              	current_song:
 3873 0014 00000000 		.space	96
 3873      00000000 
 3873      00000000 
 3873      00000000 
 3873      00000000 
 3874              		.align	2
 3875              	file_manager:
 3876 0074 00000000 		.space	516
 3876      00000000 
 3876      00000000 
 3876      00000000 
 3876      00000000 
 3877              		.align	2
 3878              	settings_menu:
 3879 0278 00000000 		.space	516
 3879      00000000 
 3879      00000000 
 3879      00000000 
 3879      00000000 
 3880              		.align	2
 3881              	current_display:
 3882 047c 00000000 		.space	4
 4604              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:13     .text:00000000 delay_ms
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:23     .text:00000000 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:43     .text:00000024 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:49     .text:00000028 getButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:57     .text:00000028 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:77     .text:00000060 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:83     .text:00000064 getNewFiles
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:91     .text:00000064 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:215    .text:00000144 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3859   .bss:00000004 NUMBEROFFILES
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:221    .text:00000148 fillSettings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:229    .text:00000148 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:319    .text:000001f8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3831   .rodata:00000035 volume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3841   .rodata:00000045 radio_power
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3846   .rodata:00000050 radio_channel_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3851   .rodata:0000005d settings
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:330    .text:00000210 reset
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:338    .text:00000210 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:363    .text:00000240 initializeSPI
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:382    .text:00000258 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:388    .text:0000025c selectSD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:396    .text:0000025c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:405    .text:00000270 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:411    .text:00000274 selectLCD
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:419    .text:00000274 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:429    .text:0000028c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:435    .text:00000290 selectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:443    .text:00000290 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:473    .text:000002bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:480    .text:000002c4 deselectRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:488    .text:000002c4 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:497    .text:000002d8 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:503    .text:000002dc isUSBConnected
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:511    .text:000002dc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:519    .text:000002ec $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:525    .text:000002f0 initializeUITimer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:533    .text:000002f0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:554    .text:00000324 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:560    .text:00000328 initializeMP3Timer
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:568    .text:00000328 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:586    .text:00000354 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:592    .text:00000358 initializeInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:600    .text:00000358 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:631    .text:0000039c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1684   .text:00000b34 timer1ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1297   .text:00000834 timer0ISR
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:639    .text:000003a8 stopAllInterrupts
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:647    .text:000003a8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:657    .text:000003b8 enableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:676    .text:000003cc disableMP3Interrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:694    .text:000003dc enableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:713    .text:000003f0 disableUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:752    .text:00000420 exclusiveUIInterrupt
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:770    .text:00000430 initializeLEDs
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:796    .text:0000045c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:806    .text:00000460 displayRadioMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:812    .text:00000460 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:846    .text:000004c0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3881   .bss:0000047c current_display
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3798   .data:00000004 radio_channel
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:855    .text:000004d0 quickClear
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:865    .text:000004d0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:950    .text:00000590 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3826   .rodata:00000033 newline
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:958    .text:0000059c printMenu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:968    .text:0000059c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1052   .text:00000664 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1058   .text:00000668 highlightRow
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1068   .text:00000668 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1154   .text:00000740 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1160   .text:00000744 handleDownButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1167   .text:00000744 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1224   .text:000007bc $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3875   .bss:00000074 file_manager
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1230   .text:000007c0 handleUpButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1237   .text:000007c0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1292   .text:00000830 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1306   .text:00000834 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1384   .text:000008e4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3861   .bss:00000008 button_pressed
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3866   .bss:0000000c prev_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3869   .bss:00000010 cur_position
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3863   .bss:00000009 update_screen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1395   .text:000008fc clearScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1401   .text:000008fc $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1426   .text:00000934 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3854   .bss:00000001 file_is_open
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1433   .text:0000093c splashScreen
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1439   .text:0000093c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1455   .text:0000095c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1461   .text:00000960 lowerVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1468   .text:00000960 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1536   .text:00000a04 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3792   .data:00000000 volume_setting
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1545   .text:00000a14 raiseVolume
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1552   .text:00000a14 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1617   .text:00000ab4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1625   .text:00000ac0 sendMP3Data
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1631   .text:00000ac0 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1676   .text:00000b24 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3872   .bss:00000014 current_song
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3856   .bss:00000002 song_is_over
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1690   .text:00000b34 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1708   .text:00000b5c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1714   .text:00000b60 startMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1720   .text:00000b60 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1762   .text:00000bc0 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1769   .text:00000bc8 initializeMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1775   .text:00000bc8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1796   .text:00000bec changeRadioFrequency
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1828   .text:00000c24 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1834   .text:00000c28 setRadioFrequency
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1844   .text:00000c28 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1906   .text:00000c7c $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1917   .text:00000c84 disableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1923   .text:00000c84 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:1998   .text:00000d28 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3804   .bss:00000000 radio_enable
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2012   .text:00000d3c enableRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2018   .text:00000d3c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2094   .text:00000de4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2104   .text:00000df8 initializeRadio
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2114   .text:00000df8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2203   .text:00000e68 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2210   .text:00000e70 closeSong
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2217   .text:00000e70 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2247   .text:00000ea4 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2253   .text:00000ea8 stopMP3Player
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2262   .text:00000ea8 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2322   .text:00000f30 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2330   .text:00000f3c loadSongInfo
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2337   .text:00000f3c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2451   .text:00001010 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2457   .text:00001014 handleMiddleButton
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2463   .text:00001014 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2907   .text:00001330 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3816   .rodata:00000016 NotFound
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2933   .text:0000136c bootUp
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:2939   .text:0000136c $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3134   .text:00001508 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3156   .text:00001534 main
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3162   .text:00001534 $a
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3763   .text:00001a34 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3810   .rodata:00000000 welcome
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3878   .bss:00000278 settings_menu
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3821   .rodata:00000025 USB
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3793   .data:00000000 $d
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3836   .rodata:0000003c contrast
/var/folders/RF/RFBGvIBUF8CKtbT-qYCkn++++TI/-Tmp-//cclCtS2z.s:3807   .bss:00000001 $d

UNDEFINED SYMBOLS
white
black
LCDSetRowColor
LCDPrintString
MMA_get_y
LCDClear
LCDInit
LCDPrintLogo
vs1002Config
vs1002SetVolume
vs1002Finish
vs1002SendMusic
fat16_read_file
vs1002SCIWrite
vs1002Reset
vs1002Init
ns73SetChannel
ns73Config
ns73Send
ns73Init
fat16_close_file
root_file_exists
root_open
fat16_file_size
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
__divsi3
__modsi3
rootDirectory_files_stream
rootDirectory_files
main_msc
